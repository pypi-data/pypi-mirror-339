# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from getopenpay.models.charge_status_enum import ChargeStatusEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class ChargeExternal(BaseModel):
  """
    ChargeExternal
    """

  # noqa: E501
  amount_atom: StrictInt = Field(
    description='Charge amount without any fees, in smallest currency unit.'
  )
  created_at: datetime = Field(
    description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  currency: CurrencyEnum = Field(description='Currency code, e.g., USD.')
  custom_fields: Optional[Dict[str, Any]] = None
  customer_id: StrictStr = Field(description='ID of the customer associated with this charge.')
  disputed: StrictBool = Field(description='Indicates whether the charge is disputed.')
  failure_code: Optional[StrictStr]
  failure_message: Optional[StrictStr]
  id: StrictStr = Field(description='Unique Identifier of the charge.')
  invoice_id: Optional[StrictStr]
  is_deleted: Optional[StrictBool] = Field(
    default=False, description='If true, indicates that this object has been deleted'
  )
  object: Optional[ObjectName] = None
  payment_intent_id: StrictStr = Field(
    description='ID of the payment intent associated with this charge.'
  )
  payment_intent_mapping_id: Optional[StrictStr]
  payment_method_id: StrictStr = Field(description='ID of the payment method used for this charge.')
  payment_processor_id: Optional[StrictStr]
  payment_processor_name: Optional[StrictStr]
  provider_type_fee_amount_atom: StrictInt = Field(
    description='Fee amount charged due to the payment provider type, in smallest currency unit.'
  )
  refunded: StrictBool = Field(description='Indicates whether the charge has been refunded.')
  refunded_amount_atom: StrictInt = Field(description='Amount refunded, in smallest currency unit.')
  status: ChargeStatusEnum = Field(description='Status of the charge.')
  total_charge_amount_atom: StrictInt = Field(
    description='Total charge amount including fees, in smallest currency unit.'
  )
  updated_at: datetime = Field(
    description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  __properties: ClassVar[List[str]] = [
    'amount_atom', 'created_at', 'currency', 'custom_fields', 'customer_id', 'disputed',
    'failure_code', 'failure_message', 'id', 'invoice_id', 'is_deleted', 'object',
    'payment_intent_id', 'payment_intent_mapping_id', 'payment_method_id', 'payment_processor_id',
    'payment_processor_name', 'provider_type_fee_amount_atom', 'refunded', 'refunded_amount_atom',
    'status', 'total_charge_amount_atom', 'updated_at'
  ]

  model_config = ConfigDict(
    populate_by_name=True,
    validate_assignment=True,
    protected_namespaces=(),
  )

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.model_dump(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> Optional[Self]:
    """Create an instance of ChargeExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self) -> Dict[str, Any]:
    """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
    excluded_fields: Set[str] = set([])

    _dict = self.model_dump(
      by_alias=True,
      exclude=excluded_fields,
      exclude_none=True,
    )
    # set to None if custom_fields (nullable) is None
    # and model_fields_set contains the field
    if self.custom_fields is None and 'custom_fields' in self.model_fields_set:
      _dict['custom_fields'] = None

    # set to None if failure_code (nullable) is None
    # and model_fields_set contains the field
    if self.failure_code is None and 'failure_code' in self.model_fields_set:
      _dict['failure_code'] = None

    # set to None if failure_message (nullable) is None
    # and model_fields_set contains the field
    if self.failure_message is None and 'failure_message' in self.model_fields_set:
      _dict['failure_message'] = None

    # set to None if invoice_id (nullable) is None
    # and model_fields_set contains the field
    if self.invoice_id is None and 'invoice_id' in self.model_fields_set:
      _dict['invoice_id'] = None

    # set to None if payment_intent_mapping_id (nullable) is None
    # and model_fields_set contains the field
    if self.payment_intent_mapping_id is None and 'payment_intent_mapping_id' in self.model_fields_set:
      _dict['payment_intent_mapping_id'] = None

    # set to None if payment_processor_id (nullable) is None
    # and model_fields_set contains the field
    if self.payment_processor_id is None and 'payment_processor_id' in self.model_fields_set:
      _dict['payment_processor_id'] = None

    # set to None if payment_processor_name (nullable) is None
    # and model_fields_set contains the field
    if self.payment_processor_name is None and 'payment_processor_name' in self.model_fields_set:
      _dict['payment_processor_name'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
    """Create an instance of ChargeExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return cls.model_validate(obj)

    _obj = cls.model_validate(
      {
        'amount_atom': obj.get('amount_atom'),
        'created_at': obj.get('created_at'),
        'currency': obj.get('currency'),
        'custom_fields': obj.get('custom_fields'),
        'customer_id': obj.get('customer_id'),
        'disputed': obj.get('disputed'),
        'failure_code': obj.get('failure_code'),
        'failure_message': obj.get('failure_message'),
        'id': obj.get('id'),
        'invoice_id': obj.get('invoice_id'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'object': obj.get('object'),
        'payment_intent_id': obj.get('payment_intent_id'),
        'payment_intent_mapping_id': obj.get('payment_intent_mapping_id'),
        'payment_method_id': obj.get('payment_method_id'),
        'payment_processor_id': obj.get('payment_processor_id'),
        'payment_processor_name': obj.get('payment_processor_name'),
        'provider_type_fee_amount_atom': obj.get('provider_type_fee_amount_atom'),
        'refunded': obj.get('refunded'),
        'refunded_amount_atom': obj.get('refunded_amount_atom'),
        'status': obj.get('status'),
        'total_charge_amount_atom': obj.get('total_charge_amount_atom'),
        'updated_at': obj.get('updated_at')
      }
    )
    return _obj
