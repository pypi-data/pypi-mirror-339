# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class CustomerInvoiceSettings(BaseModel):
  """
    CustomerInvoiceSettings
    """

  # noqa: E501
  customer_vat_id: Optional[StrictStr] = None
  default_net_d: Optional[StrictInt] = None
  email_receipt_on_paid: Optional[StrictBool] = None
  __properties: ClassVar[List[str]] = ['customer_vat_id', 'default_net_d', 'email_receipt_on_paid']

  model_config = ConfigDict(
    populate_by_name=True,
    validate_assignment=True,
    protected_namespaces=(),
  )

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.model_dump(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> Optional[Self]:
    """Create an instance of CustomerInvoiceSettings from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self) -> Dict[str, Any]:
    """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
    excluded_fields: Set[str] = set([])

    _dict = self.model_dump(
      by_alias=True,
      exclude=excluded_fields,
      exclude_none=True,
    )
    # set to None if customer_vat_id (nullable) is None
    # and model_fields_set contains the field
    if self.customer_vat_id is None and 'customer_vat_id' in self.model_fields_set:
      _dict['customer_vat_id'] = None

    # set to None if default_net_d (nullable) is None
    # and model_fields_set contains the field
    if self.default_net_d is None and 'default_net_d' in self.model_fields_set:
      _dict['default_net_d'] = None

    # set to None if email_receipt_on_paid (nullable) is None
    # and model_fields_set contains the field
    if self.email_receipt_on_paid is None and 'email_receipt_on_paid' in self.model_fields_set:
      _dict['email_receipt_on_paid'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
    """Create an instance of CustomerInvoiceSettings from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return cls.model_validate(obj)

    _obj = cls.model_validate(
      {
        'customer_vat_id': obj.get('customer_vat_id'),
        'default_net_d': obj.get('default_net_d'),
        'email_receipt_on_paid': obj.get('email_receipt_on_paid')
      }
    )
    return _obj
