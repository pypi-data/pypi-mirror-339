name: Publish to PyPI

on:
  push:
    tags:
      - "v*"  # Trigger on version tags

permissions:
  contents: write  # Changed from read to write to allow creating releases
  id-token: write  # IMPORTANT: this permission is needed for OIDC publishing
  pull-requests: write  # Added to allow PR operations

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/rxinferclient
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build tomli
    
    - name: Verify version matches tag
      run: |
        # Extract version from git tag (remove 'v' prefix)
        TAG_VERSION="${GITHUB_REF#refs/tags/v}"
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from pyproject.toml
        TOML_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "pyproject.toml version: $TOML_VERSION"
        
        # Compare versions
        if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "Tag version ($TAG_VERSION) does not match pyproject.toml version ($TOML_VERSION)"
          exit 1
        fi
        echo "Version verification successful: $TAG_VERSION"
    
    - name: Build package
      run: python -m build
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Get the current tag
        CURRENT_TAG=$(git describe --tags --abbrev=0)
        
        # Get PRs merged since previous tag
        if [ -n "$PREVIOUS_TAG" ]; then
          PR_LIST=$(gh pr list --state merged --search "merged:>$PREVIOUS_TAG" --json number,title --jq '.[] | "- #\(.number) \(.title)"')
        else
          PR_LIST=$(gh pr list --state merged --json number,title --jq '.[] | "- #\(.number) \(.title)"')
        fi
        
        # Create release notes
        RELEASE_NOTES="## What's Changed\n\n$PR_LIST\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG"
        
        # Create the release
        gh release create $CURRENT_TAG \
          --title "$CURRENT_TAG" \
          --notes "$RELEASE_NOTES" \
          --target ${{ github.sha }} 