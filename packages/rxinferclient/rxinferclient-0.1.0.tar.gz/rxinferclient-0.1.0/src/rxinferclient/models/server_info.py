# coding: utf-8

"""
    RxInferServer OpenAPI specification

    API for RxInferServer.jl - A Julia server for RxInfer probabilistic programming framework **Warning** The specification is not yet stable and may undergo significant changes. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ServerInfo(BaseModel):
    """
    ServerInfo
    """ # noqa: E501
    rxinfer_version: StrictStr = Field(description="The version of RxInfer that the server is using, returns unknown if the version is unknown or hidden")
    server_version: StrictStr = Field(description="The version of the RxInferServer, returns unknown if the version is unknown or hidden")
    server_edition: StrictStr = Field(description="The edition of the RxInferServer, as set in RXINFER_EDITION environment variable")
    julia_version: StrictStr = Field(description="The version of Julia as presented in VERSION")
    api_version: StrictStr = Field(description="The version of the API being used")
    __properties: ClassVar[List[str]] = ["rxinfer_version", "server_version", "server_edition", "julia_version", "api_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rxinfer_version": obj.get("rxinfer_version"),
            "server_version": obj.get("server_version"),
            "server_edition": obj.get("server_edition"),
            "julia_version": obj.get("julia_version"),
            "api_version": obj.get("api_version") if obj.get("api_version") is not None else 'v1'
        })
        return _obj


