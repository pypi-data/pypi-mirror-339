# coding: utf-8

"""
    RxInferServer OpenAPI specification

    API for RxInferServer.jl - A Julia server for RxInfer probabilistic programming framework **Warning** The specification is not yet stable and may undergo significant changes. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rxinferclient.api.models_api import ModelsApi


class TestModelsApi(unittest.IsolatedAsyncioTestCase):
    """ModelsApi unit test stubs"""

    async def asyncSetUp(self) -> None:
        self.api = ModelsApi()

    async def asyncTearDown(self) -> None:
        await self.api.api_client.close()

    async def test_attach_events_to_episode(self) -> None:
        """Test case for attach_events_to_episode

        Attach events to an episode
        """
        pass

    async def test_attach_metadata_to_event(self) -> None:
        """Test case for attach_metadata_to_event

        Attach metadata to an event
        """
        pass

    async def test_create_episode(self) -> None:
        """Test case for create_episode

        Create a new episode for a model instance
        """
        pass

    async def test_create_model_instance(self) -> None:
        """Test case for create_model_instance

        Create a new model instance
        """
        pass

    async def test_delete_episode(self) -> None:
        """Test case for delete_episode

        Delete an episode for a model
        """
        pass

    async def test_delete_model_instance(self) -> None:
        """Test case for delete_model_instance

        Delete a model instance
        """
        pass

    async def test_get_available_model(self) -> None:
        """Test case for get_available_model

        Get information about a specific model available for creation
        """
        pass

    async def test_get_available_models(self) -> None:
        """Test case for get_available_models

        Get models available for creation
        """
        pass

    async def test_get_episode_info(self) -> None:
        """Test case for get_episode_info

        Get episode information
        """
        pass

    async def test_get_episodes(self) -> None:
        """Test case for get_episodes

        Get all episodes for a model instance
        """
        pass

    async def test_get_model_instance(self) -> None:
        """Test case for get_model_instance

        Get model instance information
        """
        pass

    async def test_get_model_instance_parameters(self) -> None:
        """Test case for get_model_instance_parameters

        Get the parameters of a model instance
        """
        pass

    async def test_get_model_instance_state(self) -> None:
        """Test case for get_model_instance_state

        Get the state of a model instance
        """
        pass

    async def test_get_model_instances(self) -> None:
        """Test case for get_model_instances

        Get all created model instances
        """
        pass

    async def test_run_inference(self) -> None:
        """Test case for run_inference

        Run inference
        """
        pass

    async def test_run_learning(self) -> None:
        """Test case for run_learning

        Learn from previous observations
        """
        pass

    async def test_wipe_episode(self) -> None:
        """Test case for wipe_episode

        Wipe all events from an episode
        """
        pass


if __name__ == '__main__':
    unittest.main()
