.. parameters:

==================
Setting parameters
==================

This tutorial will detail how to change RAFFLE parameters.
These parameters are mainly used in building the RAFFLE descriptors for a database.
For a guide on how to build a database, see the :doc:`Databases tutorial </tutorials/databases_tutorial>`.





Initialisation
--------------
RAFFLE is initialised by importing the generator object.
This object is the main interface for the user to interact with the RAFFLE package.

.. code-block:: python

    # Initialise RAFFLE generator
    from raffle.generator import raffle_generator

    generator = raffle_generator()


It is recommended to use the Atomic Simulation Environment (ASE)~\cite{ase-paper} for handling structure data.
Whilst RAFFLE can handle its own atomic structure object, ASE is more widely used and has a more extensive feature set.


Energy references
-----------------

Energy references do not have built-in default values, as they depend on specific calculation conditions (e.g. calculator choice, DFT functional choice, pseudopotential selection).
To avoid misleading or inaccurate results, users must define reference energies explicitly:

.. code-block:: python

    # Set reference energies
    generator.distributions.set_element_energies( {
        'Si': -5.31218, # energy per atom of Si bulk
        'Ge': -4.44257  # energy per atom fo Ge bulk
    } )


These reference energies are used to calculate the formation energies of the structures generated by RAFFLE.
These are ignored if using the convex hull energies instead, but still need to be set to a value (e.g. 0.0) to avoid errors.
The formation energy is calculated as:

.. math::
  E_f = \frac{ E_{\text{structure}} - \sum_i n_i E_i }{ \sum_i n_i }


where :math:`E_{\text{structure}}` is the energy of the structure, :math:`n_i` is the number of atoms of element :math:`i` in the structure, and :math:`E_i` is the reference energy of element :math:`i`.


Gaussian parameters and cutoffs
-------------------------------

The distribution functions are built using Gaussian functions.
They are used to determine the probability of placing an atom at a given position.
The distribution functions are scaled by the relative energies of the systems (i.e. formation energy) and combined to form a generalised descriptor.
The user can set the energy scaling, Gaussian smearing, width, and cutoff tolerances.

.. code-block:: python

    # Set Gaussian parameters
    generator.distributions.set_kBT(0.2)
    generator.distributions.set_sigma(
        [0.1, 0.2, 0.3]
    )
    generator.distributions.set_width(
        [0.1, 0.2, 0.3]
    )
    generator.distributions.cutoff_min(
        [0.0, 0.0, 0.0]
    )
    generator.distributions.cutoff_max(
        [6.0, 3.14159, 3.14159]
    )
    generator.distributions.set_radius_distance_tol(
        [1.5, 2.5, 3.0, 6.0]
    )


The Gaussian width is the standard deviation of the Gaussian function.
The cutoffs are the minimum and maximum values of the Gaussian function.
The radius distance tolerance is a multiple of the element-pair covalent radius, similar to that used in AGOX :footcite:t:`Christiansen2022AtomisticGlobalOptimization`.

The default value for the element-pair covalent radius is the average of the covalent radii of the two elements.
This can be customised by the user:

.. code-block:: python

    # Set reference element-pair covalent radii
    generator.distributions.set_bond_radii( {
        ('Si', 'Ge'): 1.165 # average bond length
    } )


Grid settings
-------------

The grid settings are used to define the grid on which the generator operates.
This grid is used for the placement of atoms in the host structure, specifically, the void and min methods.
The grid spacing is the distance between grid points.
The grid offset is the displacement of grid points from the cell origin (0,0,0) in fractional coordinates.

.. code-block:: python

    # Define grid for placement methods
    generator.set_grid(
        grid_spacing=0.1,
        grid_offset=[0.0, 0.0, 0.0]
    )


Alternatively, the user can define the number of grid points along the three axes:

.. code-block:: python

    # Define grid for placement methods
    generator.set_grid(
        grid=[1, 2, 3],
        grid_offset=[0.1, 0.1, 0.1]
    )



.. footbibliography::
