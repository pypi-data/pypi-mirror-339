# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RdsSqlAuditArgs', 'RdsSqlAudit']

@pulumi.input_type
class RdsSqlAuditArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[builtins.str],
                 keep_days: pulumi.Input[builtins.int],
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a RdsSqlAudit resource.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS instance.
        :param pulumi.Input[builtins.int] keep_days: Specifies the number of days for storing audit logs.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] audit_types: Specifies the list of audit types.
        :param pulumi.Input[builtins.bool] reserve_auditlogs: Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "keep_days", keep_days)
        if audit_types is not None:
            pulumi.set(__self__, "audit_types", audit_types)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_auditlogs is not None:
            pulumi.set(__self__, "reserve_auditlogs", reserve_auditlogs)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Input[builtins.int]:
        """
        Specifies the number of days for storing audit logs.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "keep_days", value)

    @property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specifies the list of audit types.
        """
        return pulumi.get(self, "audit_types")

    @audit_types.setter
    def audit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "audit_types", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

    @reserve_auditlogs.setter
    def reserve_auditlogs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "reserve_auditlogs", value)


@pulumi.input_type
class _RdsSqlAuditState:
    def __init__(__self__, *,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering RdsSqlAudit resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] audit_types: Specifies the list of audit types.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS instance.
        :param pulumi.Input[builtins.int] keep_days: Specifies the number of days for storing audit logs.
        :param pulumi.Input[builtins.bool] reserve_auditlogs: Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        if audit_types is not None:
            pulumi.set(__self__, "audit_types", audit_types)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserve_auditlogs is not None:
            pulumi.set(__self__, "reserve_auditlogs", reserve_auditlogs)

    @property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specifies the list of audit types.
        """
        return pulumi.get(self, "audit_types")

    @audit_types.setter
    def audit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "audit_types", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the number of days for storing audit logs.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "keep_days", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

    @reserve_auditlogs.setter
    def reserve_auditlogs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "reserve_auditlogs", value)


class RdsSqlAudit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a RdsSqlAudit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] audit_types: Specifies the list of audit types.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS instance.
        :param pulumi.Input[builtins.int] keep_days: Specifies the number of days for storing audit logs.
        :param pulumi.Input[builtins.bool] reserve_auditlogs: Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdsSqlAuditArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RdsSqlAudit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdsSqlAuditArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdsSqlAuditArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 reserve_auditlogs: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdsSqlAuditArgs.__new__(RdsSqlAuditArgs)

            __props__.__dict__["audit_types"] = audit_types
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if keep_days is None and not opts.urn:
                raise TypeError("Missing required property 'keep_days'")
            __props__.__dict__["keep_days"] = keep_days
            __props__.__dict__["region"] = region
            __props__.__dict__["reserve_auditlogs"] = reserve_auditlogs
        super(RdsSqlAudit, __self__).__init__(
            'sbercloud:index/rdsSqlAudit:RdsSqlAudit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            instance_id: Optional[pulumi.Input[builtins.str]] = None,
            keep_days: Optional[pulumi.Input[builtins.int]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            reserve_auditlogs: Optional[pulumi.Input[builtins.bool]] = None) -> 'RdsSqlAudit':
        """
        Get an existing RdsSqlAudit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] audit_types: Specifies the list of audit types.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS instance.
        :param pulumi.Input[builtins.int] keep_days: Specifies the number of days for storing audit logs.
        :param pulumi.Input[builtins.bool] reserve_auditlogs: Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdsSqlAuditState.__new__(_RdsSqlAuditState)

        __props__.__dict__["audit_types"] = audit_types
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["keep_days"] = keep_days
        __props__.__dict__["region"] = region
        __props__.__dict__["reserve_auditlogs"] = reserve_auditlogs
        return RdsSqlAudit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Specifies the list of audit types.
        """
        return pulumi.get(self, "audit_types")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Output[builtins.int]:
        """
        Specifies the number of days for storing audit logs.
        """
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reserveAuditlogs")
    def reserve_auditlogs(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        """
        return pulumi.get(self, "reserve_auditlogs")

