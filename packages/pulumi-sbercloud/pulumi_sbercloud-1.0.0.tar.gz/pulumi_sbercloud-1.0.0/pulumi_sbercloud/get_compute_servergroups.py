# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetComputeServergroupsResult',
    'AwaitableGetComputeServergroupsResult',
    'get_compute_servergroups',
    'get_compute_servergroups_output',
]

@pulumi.output_type
class GetComputeServergroupsResult:
    """
    A collection of values returned by getComputeServergroups.
    """
    def __init__(__self__, id=None, name=None, region=None, servergroups=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if servergroups and not isinstance(servergroups, list):
            raise TypeError("Expected argument 'servergroups' to be a list")
        pulumi.set(__self__, "servergroups", servergroups)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def servergroups(self) -> Sequence['outputs.GetComputeServergroupsServergroupResult']:
        return pulumi.get(self, "servergroups")


class AwaitableGetComputeServergroupsResult(GetComputeServergroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeServergroupsResult(
            id=self.id,
            name=self.name,
            region=self.region,
            servergroups=self.servergroups)


def get_compute_servergroups(name: Optional[builtins.str] = None,
                             region: Optional[builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeServergroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getComputeServergroups:getComputeServergroups', __args__, opts=opts, typ=GetComputeServergroupsResult).value

    return AwaitableGetComputeServergroupsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        servergroups=pulumi.get(__ret__, 'servergroups'))
def get_compute_servergroups_output(name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeServergroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getComputeServergroups:getComputeServergroups', __args__, opts=opts, typ=GetComputeServergroupsResult)
    return __ret__.apply(lambda __response__: GetComputeServergroupsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        servergroups=pulumi.get(__response__, 'servergroups')))
