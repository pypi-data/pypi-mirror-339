# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCbrVaultsResult',
    'AwaitableGetCbrVaultsResult',
    'get_cbr_vaults',
    'get_cbr_vaults_output',
]

@pulumi.output_type
class GetCbrVaultsResult:
    """
    A collection of values returned by getCbrVaults.
    """
    def __init__(__self__, auto_expand_enabled=None, consistent_level=None, enterprise_project_id=None, id=None, name=None, policy_id=None, protection_type=None, region=None, size=None, status=None, type=None, vaults=None):
        if auto_expand_enabled and not isinstance(auto_expand_enabled, bool):
            raise TypeError("Expected argument 'auto_expand_enabled' to be a bool")
        pulumi.set(__self__, "auto_expand_enabled", auto_expand_enabled)
        if consistent_level and not isinstance(consistent_level, str):
            raise TypeError("Expected argument 'consistent_level' to be a str")
        pulumi.set(__self__, "consistent_level", consistent_level)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if protection_type and not isinstance(protection_type, str):
            raise TypeError("Expected argument 'protection_type' to be a str")
        pulumi.set(__self__, "protection_type", protection_type)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vaults and not isinstance(vaults, list):
            raise TypeError("Expected argument 'vaults' to be a list")
        pulumi.set(__self__, "vaults", vaults)

    @property
    @pulumi.getter(name="autoExpandEnabled")
    def auto_expand_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_expand_enabled")

    @property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> Optional[builtins.str]:
        return pulumi.get(self, "consistent_level")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protection_type")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetCbrVaultsVaultResult']:
        return pulumi.get(self, "vaults")


class AwaitableGetCbrVaultsResult(GetCbrVaultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCbrVaultsResult(
            auto_expand_enabled=self.auto_expand_enabled,
            consistent_level=self.consistent_level,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            policy_id=self.policy_id,
            protection_type=self.protection_type,
            region=self.region,
            size=self.size,
            status=self.status,
            type=self.type,
            vaults=self.vaults)


def get_cbr_vaults(auto_expand_enabled: Optional[builtins.bool] = None,
                   consistent_level: Optional[builtins.str] = None,
                   enterprise_project_id: Optional[builtins.str] = None,
                   name: Optional[builtins.str] = None,
                   policy_id: Optional[builtins.str] = None,
                   protection_type: Optional[builtins.str] = None,
                   region: Optional[builtins.str] = None,
                   size: Optional[builtins.int] = None,
                   status: Optional[builtins.str] = None,
                   type: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCbrVaultsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['autoExpandEnabled'] = auto_expand_enabled
    __args__['consistentLevel'] = consistent_level
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['protectionType'] = protection_type
    __args__['region'] = region
    __args__['size'] = size
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getCbrVaults:getCbrVaults', __args__, opts=opts, typ=GetCbrVaultsResult).value

    return AwaitableGetCbrVaultsResult(
        auto_expand_enabled=pulumi.get(__ret__, 'auto_expand_enabled'),
        consistent_level=pulumi.get(__ret__, 'consistent_level'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        protection_type=pulumi.get(__ret__, 'protection_type'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        vaults=pulumi.get(__ret__, 'vaults'))
def get_cbr_vaults_output(auto_expand_enabled: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                          consistent_level: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          policy_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          protection_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          size: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                          status: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCbrVaultsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['autoExpandEnabled'] = auto_expand_enabled
    __args__['consistentLevel'] = consistent_level
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['protectionType'] = protection_type
    __args__['region'] = region
    __args__['size'] = size
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getCbrVaults:getCbrVaults', __args__, opts=opts, typ=GetCbrVaultsResult)
    return __ret__.apply(lambda __response__: GetCbrVaultsResult(
        auto_expand_enabled=pulumi.get(__response__, 'auto_expand_enabled'),
        consistent_level=pulumi.get(__response__, 'consistent_level'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        protection_type=pulumi.get(__response__, 'protection_type'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        vaults=pulumi.get(__response__, 'vaults')))
