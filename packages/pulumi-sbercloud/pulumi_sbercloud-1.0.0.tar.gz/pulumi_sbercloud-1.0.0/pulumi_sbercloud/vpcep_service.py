# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpcepServiceArgs', 'VpcepService']

@pulumi.input_type
class VpcepServiceArgs:
    def __init__(__self__, *,
                 port_id: pulumi.Input[builtins.str],
                 port_mappings: pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]],
                 server_type: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 approval: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_policy: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 service_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a VpcepService resource.
        :param pulumi.Input[builtins.str] service_type: schema: Computed
        """
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_mappings", port_mappings)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if approval is not None:
            pulumi.set(__self__, "approval", approval)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_policy is not None:
            pulumi.set(__self__, "enable_policy", enable_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_permissions is not None:
            pulumi.set(__self__, "organization_permissions", organization_permissions)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "port_id", value)

    @property
    @pulumi.getter(name="portMappings")
    def port_mappings(self) -> pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]]:
        return pulumi.get(self, "port_mappings")

    @port_mappings.setter
    def port_mappings(self, value: pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]]):
        pulumi.set(self, "port_mappings", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def approval(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "approval")

    @approval.setter
    def approval(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "approval", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_policy")

    @enable_policy.setter
    def enable_policy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationPermissions")
    def organization_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "organization_permissions")

    @organization_permissions.setter
    def organization_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "organization_permissions", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _VpcepServiceState:
    def __init__(__self__, *,
                 approval: Optional[pulumi.Input[builtins.bool]] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServiceConnectionArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_policy: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port_id: Optional[pulumi.Input[builtins.str]] = None,
                 port_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 server_type: Optional[pulumi.Input[builtins.str]] = None,
                 service_name: Optional[pulumi.Input[builtins.str]] = None,
                 service_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering VpcepService resources.
        :param pulumi.Input[builtins.str] service_type: schema: Computed
        """
        if approval is not None:
            pulumi.set(__self__, "approval", approval)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_policy is not None:
            pulumi.set(__self__, "enable_policy", enable_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_permissions is not None:
            pulumi.set(__self__, "organization_permissions", organization_permissions)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if port_mappings is not None:
            pulumi.set(__self__, "port_mappings", port_mappings)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def approval(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "approval")

    @approval.setter
    def approval(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "approval", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServiceConnectionArgs']]]]:
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServiceConnectionArgs']]]]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_policy")

    @enable_policy.setter
    def enable_policy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationPermissions")
    def organization_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "organization_permissions")

    @organization_permissions.setter
    def organization_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "organization_permissions", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "port_id", value)

    @property
    @pulumi.getter(name="portMappings")
    def port_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]]]:
        return pulumi.get(self, "port_mappings")

    @port_mappings.setter
    def port_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcepServicePortMappingArgs']]]]):
        pulumi.set(self, "port_mappings", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class VpcepService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_policy: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port_id: Optional[pulumi.Input[builtins.str]] = None,
                 port_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcepServicePortMappingArgs', 'VpcepServicePortMappingArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 server_type: Optional[pulumi.Input[builtins.str]] = None,
                 service_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a VpcepService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] service_type: schema: Computed
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcepServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpcepService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcepServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcepServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_policy: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port_id: Optional[pulumi.Input[builtins.str]] = None,
                 port_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcepServicePortMappingArgs', 'VpcepServicePortMappingArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 server_type: Optional[pulumi.Input[builtins.str]] = None,
                 service_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcepServiceArgs.__new__(VpcepServiceArgs)

            __props__.__dict__["approval"] = approval
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_policy"] = enable_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["organization_permissions"] = organization_permissions
            __props__.__dict__["permissions"] = permissions
            if port_id is None and not opts.urn:
                raise TypeError("Missing required property 'port_id'")
            __props__.__dict__["port_id"] = port_id
            if port_mappings is None and not opts.urn:
                raise TypeError("Missing required property 'port_mappings'")
            __props__.__dict__["port_mappings"] = port_mappings
            __props__.__dict__["region"] = region
            if server_type is None and not opts.urn:
                raise TypeError("Missing required property 'server_type'")
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["connections"] = None
            __props__.__dict__["service_name"] = None
            __props__.__dict__["status"] = None
        super(VpcepService, __self__).__init__(
            'sbercloud:index/vpcepService:VpcepService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approval: Optional[pulumi.Input[builtins.bool]] = None,
            connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcepServiceConnectionArgs', 'VpcepServiceConnectionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            enable_policy: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            organization_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            port_id: Optional[pulumi.Input[builtins.str]] = None,
            port_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcepServicePortMappingArgs', 'VpcepServicePortMappingArgsDict']]]]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            server_type: Optional[pulumi.Input[builtins.str]] = None,
            service_name: Optional[pulumi.Input[builtins.str]] = None,
            service_type: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'VpcepService':
        """
        Get an existing VpcepService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] service_type: schema: Computed
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcepServiceState.__new__(_VpcepServiceState)

        __props__.__dict__["approval"] = approval
        __props__.__dict__["connections"] = connections
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_policy"] = enable_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_permissions"] = organization_permissions
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["port_id"] = port_id
        __props__.__dict__["port_mappings"] = port_mappings
        __props__.__dict__["region"] = region
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return VpcepService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def approval(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "approval")

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Sequence['outputs.VpcepServiceConnection']]:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "enable_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationPermissions")
    def organization_permissions(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "organization_permissions")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portMappings")
    def port_mappings(self) -> pulumi.Output[Sequence['outputs.VpcepServicePortMapping']]:
        return pulumi.get(self, "port_mappings")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

