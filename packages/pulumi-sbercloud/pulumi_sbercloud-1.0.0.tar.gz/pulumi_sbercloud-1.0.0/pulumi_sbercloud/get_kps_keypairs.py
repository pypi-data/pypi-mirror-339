# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKpsKeypairsResult',
    'AwaitableGetKpsKeypairsResult',
    'get_kps_keypairs',
    'get_kps_keypairs_output',
]

@pulumi.output_type
class GetKpsKeypairsResult:
    """
    A collection of values returned by getKpsKeypairs.
    """
    def __init__(__self__, fingerprint=None, id=None, is_managed=None, keypairs=None, name=None, public_key=None, region=None):
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_managed and not isinstance(is_managed, bool):
            raise TypeError("Expected argument 'is_managed' to be a bool")
        pulumi.set(__self__, "is_managed", is_managed)
        if keypairs and not isinstance(keypairs, list):
            raise TypeError("Expected argument 'keypairs' to be a list")
        pulumi.set(__self__, "keypairs", keypairs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_managed")

    @property
    @pulumi.getter
    def keypairs(self) -> Sequence['outputs.GetKpsKeypairsKeypairResult']:
        return pulumi.get(self, "keypairs")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")


class AwaitableGetKpsKeypairsResult(GetKpsKeypairsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKpsKeypairsResult(
            fingerprint=self.fingerprint,
            id=self.id,
            is_managed=self.is_managed,
            keypairs=self.keypairs,
            name=self.name,
            public_key=self.public_key,
            region=self.region)


def get_kps_keypairs(fingerprint: Optional[builtins.str] = None,
                     is_managed: Optional[builtins.bool] = None,
                     name: Optional[builtins.str] = None,
                     public_key: Optional[builtins.str] = None,
                     region: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKpsKeypairsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fingerprint'] = fingerprint
    __args__['isManaged'] = is_managed
    __args__['name'] = name
    __args__['publicKey'] = public_key
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getKpsKeypairs:getKpsKeypairs', __args__, opts=opts, typ=GetKpsKeypairsResult).value

    return AwaitableGetKpsKeypairsResult(
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        id=pulumi.get(__ret__, 'id'),
        is_managed=pulumi.get(__ret__, 'is_managed'),
        keypairs=pulumi.get(__ret__, 'keypairs'),
        name=pulumi.get(__ret__, 'name'),
        public_key=pulumi.get(__ret__, 'public_key'),
        region=pulumi.get(__ret__, 'region'))
def get_kps_keypairs_output(fingerprint: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            is_managed: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                            name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            public_key: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKpsKeypairsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fingerprint'] = fingerprint
    __args__['isManaged'] = is_managed
    __args__['name'] = name
    __args__['publicKey'] = public_key
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getKpsKeypairs:getKpsKeypairs', __args__, opts=opts, typ=GetKpsKeypairsResult)
    return __ret__.apply(lambda __response__: GetKpsKeypairsResult(
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        id=pulumi.get(__response__, 'id'),
        is_managed=pulumi.get(__response__, 'is_managed'),
        keypairs=pulumi.get(__response__, 'keypairs'),
        name=pulumi.get(__response__, 'name'),
        public_key=pulumi.get(__response__, 'public_key'),
        region=pulumi.get(__response__, 'region')))
