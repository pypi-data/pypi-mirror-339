# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CtsNotificationArgs', 'CtsNotification']

@pulumi.input_type
class CtsNotificationArgs:
    def __init__(__self__, *,
                 operation_type: pulumi.Input[builtins.str],
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 filter: Optional[pulumi.Input['CtsNotificationFilterArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 operation_users: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 smn_topic: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a CtsNotification resource.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_users is not None:
            pulumi.set(__self__, "operation_users", operation_users)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_topic is not None:
            pulumi.set(__self__, "smn_topic", smn_topic)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['CtsNotificationFilterArgs']]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['CtsNotificationFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationUsers")
    def operation_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]]:
        return pulumi.get(self, "operation_users")

    @operation_users.setter
    def operation_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]]):
        pulumi.set(self, "operation_users", value)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]]:
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="smnTopic")
    def smn_topic(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "smn_topic")

    @smn_topic.setter
    def smn_topic(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "smn_topic", value)


@pulumi.input_type
class _CtsNotificationState:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 filter: Optional[pulumi.Input['CtsNotificationFilterArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notification_id: Optional[pulumi.Input[builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[builtins.str]] = None,
                 operation_users: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 smn_topic: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CtsNotification resources.
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_id is not None:
            pulumi.set(__self__, "notification_id", notification_id)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if operation_users is not None:
            pulumi.set(__self__, "operation_users", operation_users)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if smn_topic is not None:
            pulumi.set(__self__, "smn_topic", smn_topic)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['CtsNotificationFilterArgs']]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['CtsNotificationFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationId")
    def notification_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "notification_id")

    @notification_id.setter
    def notification_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "notification_id", value)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="operationUsers")
    def operation_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]]:
        return pulumi.get(self, "operation_users")

    @operation_users.setter
    def operation_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationUserArgs']]]]):
        pulumi.set(self, "operation_users", value)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]]:
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CtsNotificationOperationArgs']]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="smnTopic")
    def smn_topic(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "smn_topic")

    @smn_topic.setter
    def smn_topic(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "smn_topic", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


class CtsNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 filter: Optional[pulumi.Input[Union['CtsNotificationFilterArgs', 'CtsNotificationFilterArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[builtins.str]] = None,
                 operation_users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationUserArgs', 'CtsNotificationOperationUserArgsDict']]]]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationArgs', 'CtsNotificationOperationArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 smn_topic: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a CtsNotification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CtsNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CtsNotification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CtsNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CtsNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 filter: Optional[pulumi.Input[Union['CtsNotificationFilterArgs', 'CtsNotificationFilterArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 operation_type: Optional[pulumi.Input[builtins.str]] = None,
                 operation_users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationUserArgs', 'CtsNotificationOperationUserArgsDict']]]]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationArgs', 'CtsNotificationOperationArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 smn_topic: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CtsNotificationArgs.__new__(CtsNotificationArgs)

            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["filter"] = filter
            __props__.__dict__["name"] = name
            if operation_type is None and not opts.urn:
                raise TypeError("Missing required property 'operation_type'")
            __props__.__dict__["operation_type"] = operation_type
            __props__.__dict__["operation_users"] = operation_users
            __props__.__dict__["operations"] = operations
            __props__.__dict__["region"] = region
            __props__.__dict__["smn_topic"] = smn_topic
            __props__.__dict__["created_at"] = None
            __props__.__dict__["notification_id"] = None
            __props__.__dict__["status"] = None
        super(CtsNotification, __self__).__init__(
            'sbercloud:index/ctsNotification:CtsNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_name: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            filter: Optional[pulumi.Input[Union['CtsNotificationFilterArgs', 'CtsNotificationFilterArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            notification_id: Optional[pulumi.Input[builtins.str]] = None,
            operation_type: Optional[pulumi.Input[builtins.str]] = None,
            operation_users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationUserArgs', 'CtsNotificationOperationUserArgsDict']]]]] = None,
            operations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CtsNotificationOperationArgs', 'CtsNotificationOperationArgsDict']]]]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            smn_topic: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None) -> 'CtsNotification':
        """
        Get an existing CtsNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CtsNotificationState.__new__(_CtsNotificationState)

        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["filter"] = filter
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_id"] = notification_id
        __props__.__dict__["operation_type"] = operation_type
        __props__.__dict__["operation_users"] = operation_users
        __props__.__dict__["operations"] = operations
        __props__.__dict__["region"] = region
        __props__.__dict__["smn_topic"] = smn_topic
        __props__.__dict__["status"] = status
        return CtsNotification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.CtsNotificationFilter']]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationId")
    def notification_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "notification_id")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="operationUsers")
    def operation_users(self) -> pulumi.Output[Optional[Sequence['outputs.CtsNotificationOperationUser']]]:
        return pulumi.get(self, "operation_users")

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Output[Optional[Sequence['outputs.CtsNotificationOperation']]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="smnTopic")
    def smn_topic(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "smn_topic")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

