# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdmClusterArgs', 'CdmCluster']

@pulumi.input_type
class CdmClusterArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[builtins.str],
                 flavor_id: pulumi.Input[builtins.str],
                 security_group_id: pulumi.Input[builtins.str],
                 subnet_id: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_auto_off: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 phone_nums: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_boot_time: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_off_time: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a CdmCluster resource.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_auto_off is not None:
            pulumi.set(__self__, "is_auto_off", is_auto_off)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_nums is not None:
            pulumi.set(__self__, "phone_nums", phone_nums)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule_boot_time is not None:
            pulumi.set(__self__, "schedule_boot_time", schedule_boot_time)
        if schedule_off_time is not None:
            pulumi.set(__self__, "schedule_off_time", schedule_off_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="isAutoOff")
    def is_auto_off(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_auto_off")

    @is_auto_off.setter
    def is_auto_off(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auto_off", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNums")
    def phone_nums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "phone_nums")

    @phone_nums.setter
    def phone_nums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "phone_nums", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scheduleBootTime")
    def schedule_boot_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "schedule_boot_time")

    @schedule_boot_time.setter
    def schedule_boot_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schedule_boot_time", value)

    @property
    @pulumi.getter(name="scheduleOffTime")
    def schedule_off_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "schedule_off_time")

    @schedule_off_time.setter
    def schedule_off_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schedule_off_time", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _CdmClusterState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 created: Optional[pulumi.Input[builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 flavor_name: Optional[pulumi.Input[builtins.str]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input['CdmClusterInstanceArgs']]]] = None,
                 is_auto_off: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 phone_nums: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 public_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_boot_time: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_off_time: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CdmCluster resources.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if flavor_name is not None:
            pulumi.set(__self__, "flavor_name", flavor_name)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if is_auto_off is not None:
            pulumi.set(__self__, "is_auto_off", is_auto_off)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_nums is not None:
            pulumi.set(__self__, "phone_nums", phone_nums)
        if public_endpoint is not None:
            pulumi.set(__self__, "public_endpoint", public_endpoint)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schedule_boot_time is not None:
            pulumi.set(__self__, "schedule_boot_time", schedule_boot_time)
        if schedule_off_time is not None:
            pulumi.set(__self__, "schedule_off_time", schedule_off_time)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "flavor_name")

    @flavor_name.setter
    def flavor_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "flavor_name", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdmClusterInstanceArgs']]]]:
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdmClusterInstanceArgs']]]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="isAutoOff")
    def is_auto_off(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_auto_off")

    @is_auto_off.setter
    def is_auto_off(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auto_off", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNums")
    def phone_nums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "phone_nums")

    @phone_nums.setter
    def phone_nums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "phone_nums", value)

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "public_endpoint")

    @public_endpoint.setter
    def public_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_endpoint", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scheduleBootTime")
    def schedule_boot_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "schedule_boot_time")

    @schedule_boot_time.setter
    def schedule_boot_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schedule_boot_time", value)

    @property
    @pulumi.getter(name="scheduleOffTime")
    def schedule_off_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "schedule_off_time")

    @schedule_off_time.setter
    def schedule_off_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schedule_off_time", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class CdmCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_auto_off: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 phone_nums: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_boot_time: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_off_time: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a CdmCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdmClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdmCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdmClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdmClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_auto_off: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 phone_nums: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_boot_time: Optional[pulumi.Input[builtins.str]] = None,
                 schedule_off_time: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdmClusterArgs.__new__(CdmClusterArgs)

            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["emails"] = emails
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            __props__.__dict__["is_auto_off"] = is_auto_off
            __props__.__dict__["name"] = name
            __props__.__dict__["phone_nums"] = phone_nums
            __props__.__dict__["region"] = region
            __props__.__dict__["schedule_boot_time"] = schedule_boot_time
            __props__.__dict__["schedule_off_time"] = schedule_off_time
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["version"] = version
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created"] = None
            __props__.__dict__["flavor_name"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["public_endpoint"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["status"] = None
        super(CdmCluster, __self__).__init__(
            'sbercloud:index/cdmCluster:CdmCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[builtins.str]] = None,
            created: Optional[pulumi.Input[builtins.str]] = None,
            emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[builtins.str]] = None,
            flavor_name: Optional[pulumi.Input[builtins.str]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdmClusterInstanceArgs', 'CdmClusterInstanceArgsDict']]]]] = None,
            is_auto_off: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            phone_nums: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            public_endpoint: Optional[pulumi.Input[builtins.str]] = None,
            public_ip: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            schedule_boot_time: Optional[pulumi.Input[builtins.str]] = None,
            schedule_off_time: Optional[pulumi.Input[builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'CdmCluster':
        """
        Get an existing CdmCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdmClusterState.__new__(_CdmClusterState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["created"] = created
        __props__.__dict__["emails"] = emails
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["flavor_name"] = flavor_name
        __props__.__dict__["instances"] = instances
        __props__.__dict__["is_auto_off"] = is_auto_off
        __props__.__dict__["name"] = name
        __props__.__dict__["phone_nums"] = phone_nums
        __props__.__dict__["public_endpoint"] = public_endpoint
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["schedule_boot_time"] = schedule_boot_time
        __props__.__dict__["schedule_off_time"] = schedule_off_time
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        return CdmCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "flavor_name")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.CdmClusterInstance']]:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="isAutoOff")
    def is_auto_off(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "is_auto_off")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNums")
    def phone_nums(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "phone_nums")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="scheduleBootTime")
    def schedule_boot_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "schedule_boot_time")

    @property
    @pulumi.getter(name="scheduleOffTime")
    def schedule_off_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "schedule_off_time")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

