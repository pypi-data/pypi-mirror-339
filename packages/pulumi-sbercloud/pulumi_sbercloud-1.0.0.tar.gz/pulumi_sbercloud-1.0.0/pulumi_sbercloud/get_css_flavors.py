# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCssFlavorsResult',
    'AwaitableGetCssFlavorsResult',
    'get_css_flavors',
    'get_css_flavors_output',
]

@pulumi.output_type
class GetCssFlavorsResult:
    """
    A collection of values returned by getCssFlavors.
    """
    def __init__(__self__, flavors=None, id=None, memory=None, name=None, region=None, type=None, vcpus=None, version=None):
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memory and not isinstance(memory, int):
            raise TypeError("Expected argument 'memory' to be a int")
        pulumi.set(__self__, "memory", memory)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vcpus and not isinstance(vcpus, int):
            raise TypeError("Expected argument 'vcpus' to be a int")
        pulumi.set(__self__, "vcpus", vcpus)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetCssFlavorsFlavorResult']:
        return pulumi.get(self, "flavors")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> Optional[builtins.int]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[builtins.int]:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetCssFlavorsResult(GetCssFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCssFlavorsResult(
            flavors=self.flavors,
            id=self.id,
            memory=self.memory,
            name=self.name,
            region=self.region,
            type=self.type,
            vcpus=self.vcpus,
            version=self.version)


def get_css_flavors(memory: Optional[builtins.int] = None,
                    name: Optional[builtins.str] = None,
                    region: Optional[builtins.str] = None,
                    type: Optional[builtins.str] = None,
                    vcpus: Optional[builtins.int] = None,
                    version: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCssFlavorsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['memory'] = memory
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getCssFlavors:getCssFlavors', __args__, opts=opts, typ=GetCssFlavorsResult).value

    return AwaitableGetCssFlavorsResult(
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        memory=pulumi.get(__ret__, 'memory'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        vcpus=pulumi.get(__ret__, 'vcpus'),
        version=pulumi.get(__ret__, 'version'))
def get_css_flavors_output(memory: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           vcpus: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           version: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCssFlavorsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['memory'] = memory
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['vcpus'] = vcpus
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getCssFlavors:getCssFlavors', __args__, opts=opts, typ=GetCssFlavorsResult)
    return __ret__.apply(lambda __response__: GetCssFlavorsResult(
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        memory=pulumi.get(__response__, 'memory'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        vcpus=pulumi.get(__response__, 'vcpus'),
        version=pulumi.get(__response__, 'version')))
