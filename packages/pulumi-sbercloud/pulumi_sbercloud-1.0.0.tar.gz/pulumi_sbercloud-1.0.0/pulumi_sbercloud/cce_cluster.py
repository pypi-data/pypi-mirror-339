# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CceClusterArgs', 'CceCluster']

@pulumi.input_type
class CceClusterArgs:
    def __init__(__self__, *,
                 container_network_type: pulumi.Input[builtins.str],
                 flavor_id: pulumi.Input[builtins.str],
                 subnet_id: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 authenticating_proxy_ca: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_cert: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_mode: Optional[pulumi.Input[builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[builtins.str]] = None,
                 billing_mode: Optional[pulumi.Input[builtins.int]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[builtins.str]] = None,
                 component_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]] = None,
                 container_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 delete_all: Optional[pulumi.Input[builtins.str]] = None,
                 delete_efs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[builtins.str]] = None,
                 delete_evs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_sfs: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 eip: Optional[pulumi.Input[builtins.str]] = None,
                 enable_distribute_management: Optional[pulumi.Input[builtins.bool]] = None,
                 eni_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 eni_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 extend_param: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 extend_params: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]] = None,
                 hibernate: Optional[pulumi.Input[builtins.bool]] = None,
                 highway_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 support_istio: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a CceCluster resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: schema: Internal
        :param pulumi.Input[builtins.str] delete_eni: schema: Internal
        :param pulumi.Input[builtins.str] delete_net: schema: Internal
        :param pulumi.Input[builtins.bool] enable_distribute_management: schema: Internal
        :param pulumi.Input[builtins.str] eni_subnet_cidr: schema: Computed
        :param pulumi.Input[builtins.str] eni_subnet_id: the IPv4 subnet ID of the subnet where the ENI resides
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] extend_param: schema: Internal
        :param pulumi.Input[builtins.str] highway_subnet_id: schema: Internal
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: schema: Internal
        """
        pulumi.set(__self__, "container_network_type", container_network_type)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if authenticating_proxy_ca is not None:
            pulumi.set(__self__, "authenticating_proxy_ca", authenticating_proxy_ca)
        if authenticating_proxy_cert is not None:
            pulumi.set(__self__, "authenticating_proxy_cert", authenticating_proxy_cert)
        if authenticating_proxy_private_key is not None:
            pulumi.set(__self__, "authenticating_proxy_private_key", authenticating_proxy_private_key)
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if auto_pay is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pay is deprecated: Deprecated""")
        if auto_pay is not None:
            pulumi.set(__self__, "auto_pay", auto_pay)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if billing_mode is not None:
            warnings.warn("""use charging_mode instead""", DeprecationWarning)
            pulumi.log.warn("""billing_mode is deprecated: use charging_mode instead""")
        if billing_mode is not None:
            pulumi.set(__self__, "billing_mode", billing_mode)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if component_configurations is not None:
            pulumi.set(__self__, "component_configurations", component_configurations)
        if container_network_cidr is not None:
            pulumi.set(__self__, "container_network_cidr", container_network_cidr)
        if custom_sans is not None:
            pulumi.set(__self__, "custom_sans", custom_sans)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if delete_efs is not None:
            pulumi.set(__self__, "delete_efs", delete_efs)
        if delete_eni is not None:
            pulumi.set(__self__, "delete_eni", delete_eni)
        if delete_evs is not None:
            pulumi.set(__self__, "delete_evs", delete_evs)
        if delete_net is not None:
            pulumi.set(__self__, "delete_net", delete_net)
        if delete_obs is not None:
            pulumi.set(__self__, "delete_obs", delete_obs)
        if delete_sfs is not None:
            pulumi.set(__self__, "delete_sfs", delete_sfs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if enable_distribute_management is not None:
            pulumi.set(__self__, "enable_distribute_management", enable_distribute_management)
        if eni_subnet_cidr is not None:
            pulumi.set(__self__, "eni_subnet_cidr", eni_subnet_cidr)
        if eni_subnet_id is not None:
            pulumi.set(__self__, "eni_subnet_id", eni_subnet_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hibernate is not None:
            pulumi.set(__self__, "hibernate", hibernate)
        if highway_subnet_id is not None:
            pulumi.set(__self__, "highway_subnet_id", highway_subnet_id)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lts_reclaim_policy is not None:
            pulumi.set(__self__, "lts_reclaim_policy", lts_reclaim_policy)
        if masters is not None:
            pulumi.set(__self__, "masters", masters)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if service_network_cidr is not None:
            pulumi.set(__self__, "service_network_cidr", service_network_cidr)
        if support_istio is not None:
            pulumi.set(__self__, "support_istio", support_istio)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "container_network_type")

    @container_network_type.setter
    def container_network_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_network_type", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="authenticatingProxyCa")
    def authenticating_proxy_ca(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_ca")

    @authenticating_proxy_ca.setter
    def authenticating_proxy_ca(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_ca", value)

    @property
    @pulumi.getter(name="authenticatingProxyCert")
    def authenticating_proxy_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_cert")

    @authenticating_proxy_cert.setter
    def authenticating_proxy_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_cert", value)

    @property
    @pulumi.getter(name="authenticatingProxyPrivateKey")
    def authenticating_proxy_private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_private_key")

    @authenticating_proxy_private_key.setter
    def authenticating_proxy_private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_private_key", value)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @auto_pay.setter
    def auto_pay(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_pay", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="billingMode")
    @_utilities.deprecated("""use charging_mode instead""")
    def billing_mode(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "billing_mode")

    @billing_mode.setter
    def billing_mode(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "billing_mode", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="componentConfigurations")
    def component_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]]:
        return pulumi.get(self, "component_configurations")

    @component_configurations.setter
    def component_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]]):
        pulumi.set(self, "component_configurations", value)

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "container_network_cidr")

    @container_network_cidr.setter
    def container_network_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "container_network_cidr", value)

    @property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "custom_sans")

    @custom_sans.setter
    def custom_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_sans", value)

    @property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_all", value)

    @property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_efs")

    @delete_efs.setter
    def delete_efs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_efs", value)

    @property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_eni")

    @delete_eni.setter
    def delete_eni(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_eni", value)

    @property
    @pulumi.getter(name="deleteEvs")
    def delete_evs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_evs")

    @delete_evs.setter
    def delete_evs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_evs", value)

    @property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_net")

    @delete_net.setter
    def delete_net(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_net", value)

    @property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_obs")

    @delete_obs.setter
    def delete_obs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_obs", value)

    @property
    @pulumi.getter(name="deleteSfs")
    def delete_sfs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_sfs")

    @delete_sfs.setter
    def delete_sfs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_sfs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eip", value)

    @property
    @pulumi.getter(name="enableDistributeManagement")
    def enable_distribute_management(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "enable_distribute_management")

    @enable_distribute_management.setter
    def enable_distribute_management(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_distribute_management", value)

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "eni_subnet_cidr")

    @eni_subnet_cidr.setter
    def eni_subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_subnet_cidr", value)

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the IPv4 subnet ID of the subnet where the ENI resides
        """
        return pulumi.get(self, "eni_subnet_id")

    @eni_subnet_id.setter
    def eni_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_subnet_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "extend_param")

    @extend_param.setter
    def extend_param(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extend_param", value)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]]:
        return pulumi.get(self, "extend_params")

    @extend_params.setter
    def extend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]]):
        pulumi.set(self, "extend_params", value)

    @property
    @pulumi.getter
    def hibernate(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hibernate")

    @hibernate.setter
    def hibernate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hibernate", value)

    @property
    @pulumi.getter(name="highwaySubnetId")
    def highway_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "highway_subnet_id")

    @highway_subnet_id.setter
    def highway_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "highway_subnet_id", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lts_reclaim_policy")

    @lts_reclaim_policy.setter
    def lts_reclaim_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lts_reclaim_policy", value)

    @property
    @pulumi.getter
    def masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]]:
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]]):
        pulumi.set(self, "masters", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_network_cidr")

    @service_network_cidr.setter
    def service_network_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network_cidr", value)

    @property
    @pulumi.getter(name="supportIstio")
    def support_istio(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "support_istio")

    @support_istio.setter
    def support_istio(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "support_istio", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CceClusterState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 authenticating_proxy_ca: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_cert: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_mode: Optional[pulumi.Input[builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[builtins.str]] = None,
                 billing_mode: Optional[pulumi.Input[builtins.int]] = None,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateClusterArgs']]]] = None,
                 certificate_users: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateUserArgs']]]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[builtins.str]] = None,
                 component_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]] = None,
                 container_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 container_network_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 delete_all: Optional[pulumi.Input[builtins.str]] = None,
                 delete_efs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[builtins.str]] = None,
                 delete_evs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_sfs: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 eip: Optional[pulumi.Input[builtins.str]] = None,
                 enable_distribute_management: Optional[pulumi.Input[builtins.bool]] = None,
                 eni_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 eni_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 extend_param: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 extend_params: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 hibernate: Optional[pulumi.Input[builtins.bool]] = None,
                 highway_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 kube_config_raw: Optional[pulumi.Input[builtins.str]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 support_istio: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CceCluster resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: schema: Internal
        :param pulumi.Input[builtins.str] delete_eni: schema: Internal
        :param pulumi.Input[builtins.str] delete_net: schema: Internal
        :param pulumi.Input[builtins.bool] enable_distribute_management: schema: Internal
        :param pulumi.Input[builtins.str] eni_subnet_cidr: schema: Computed
        :param pulumi.Input[builtins.str] eni_subnet_id: the IPv4 subnet ID of the subnet where the ENI resides
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] extend_param: schema: Internal
        :param pulumi.Input[builtins.str] highway_subnet_id: schema: Internal
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: schema: Internal
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if authenticating_proxy_ca is not None:
            pulumi.set(__self__, "authenticating_proxy_ca", authenticating_proxy_ca)
        if authenticating_proxy_cert is not None:
            pulumi.set(__self__, "authenticating_proxy_cert", authenticating_proxy_cert)
        if authenticating_proxy_private_key is not None:
            pulumi.set(__self__, "authenticating_proxy_private_key", authenticating_proxy_private_key)
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if auto_pay is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pay is deprecated: Deprecated""")
        if auto_pay is not None:
            pulumi.set(__self__, "auto_pay", auto_pay)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if billing_mode is not None:
            warnings.warn("""use charging_mode instead""", DeprecationWarning)
            pulumi.log.warn("""billing_mode is deprecated: use charging_mode instead""")
        if billing_mode is not None:
            pulumi.set(__self__, "billing_mode", billing_mode)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if certificate_clusters is not None:
            pulumi.set(__self__, "certificate_clusters", certificate_clusters)
        if certificate_users is not None:
            pulumi.set(__self__, "certificate_users", certificate_users)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if component_configurations is not None:
            pulumi.set(__self__, "component_configurations", component_configurations)
        if container_network_cidr is not None:
            pulumi.set(__self__, "container_network_cidr", container_network_cidr)
        if container_network_type is not None:
            pulumi.set(__self__, "container_network_type", container_network_type)
        if custom_sans is not None:
            pulumi.set(__self__, "custom_sans", custom_sans)
        if delete_all is not None:
            pulumi.set(__self__, "delete_all", delete_all)
        if delete_efs is not None:
            pulumi.set(__self__, "delete_efs", delete_efs)
        if delete_eni is not None:
            pulumi.set(__self__, "delete_eni", delete_eni)
        if delete_evs is not None:
            pulumi.set(__self__, "delete_evs", delete_evs)
        if delete_net is not None:
            pulumi.set(__self__, "delete_net", delete_net)
        if delete_obs is not None:
            pulumi.set(__self__, "delete_obs", delete_obs)
        if delete_sfs is not None:
            pulumi.set(__self__, "delete_sfs", delete_sfs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if enable_distribute_management is not None:
            pulumi.set(__self__, "enable_distribute_management", enable_distribute_management)
        if eni_subnet_cidr is not None:
            pulumi.set(__self__, "eni_subnet_cidr", eni_subnet_cidr)
        if eni_subnet_id is not None:
            pulumi.set(__self__, "eni_subnet_id", eni_subnet_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if hibernate is not None:
            pulumi.set(__self__, "hibernate", hibernate)
        if highway_subnet_id is not None:
            pulumi.set(__self__, "highway_subnet_id", highway_subnet_id)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if kube_config_raw is not None:
            pulumi.set(__self__, "kube_config_raw", kube_config_raw)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lts_reclaim_policy is not None:
            pulumi.set(__self__, "lts_reclaim_policy", lts_reclaim_policy)
        if masters is not None:
            pulumi.set(__self__, "masters", masters)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if service_network_cidr is not None:
            pulumi.set(__self__, "service_network_cidr", service_network_cidr)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if support_istio is not None:
            pulumi.set(__self__, "support_istio", support_istio)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="authenticatingProxyCa")
    def authenticating_proxy_ca(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_ca")

    @authenticating_proxy_ca.setter
    def authenticating_proxy_ca(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_ca", value)

    @property
    @pulumi.getter(name="authenticatingProxyCert")
    def authenticating_proxy_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_cert")

    @authenticating_proxy_cert.setter
    def authenticating_proxy_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_cert", value)

    @property
    @pulumi.getter(name="authenticatingProxyPrivateKey")
    def authenticating_proxy_private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_private_key")

    @authenticating_proxy_private_key.setter
    def authenticating_proxy_private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticating_proxy_private_key", value)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @auto_pay.setter
    def auto_pay(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_pay", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="billingMode")
    @_utilities.deprecated("""use charging_mode instead""")
    def billing_mode(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "billing_mode")

    @billing_mode.setter
    def billing_mode(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "billing_mode", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="certificateClusters")
    def certificate_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateClusterArgs']]]]:
        return pulumi.get(self, "certificate_clusters")

    @certificate_clusters.setter
    def certificate_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateClusterArgs']]]]):
        pulumi.set(self, "certificate_clusters", value)

    @property
    @pulumi.getter(name="certificateUsers")
    def certificate_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateUserArgs']]]]:
        return pulumi.get(self, "certificate_users")

    @certificate_users.setter
    def certificate_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterCertificateUserArgs']]]]):
        pulumi.set(self, "certificate_users", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="componentConfigurations")
    def component_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]]:
        return pulumi.get(self, "component_configurations")

    @component_configurations.setter
    def component_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterComponentConfigurationArgs']]]]):
        pulumi.set(self, "component_configurations", value)

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "container_network_cidr")

    @container_network_cidr.setter
    def container_network_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "container_network_cidr", value)

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "container_network_type")

    @container_network_type.setter
    def container_network_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "container_network_type", value)

    @property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "custom_sans")

    @custom_sans.setter
    def custom_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_sans", value)

    @property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_all")

    @delete_all.setter
    def delete_all(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_all", value)

    @property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_efs")

    @delete_efs.setter
    def delete_efs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_efs", value)

    @property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_eni")

    @delete_eni.setter
    def delete_eni(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_eni", value)

    @property
    @pulumi.getter(name="deleteEvs")
    def delete_evs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_evs")

    @delete_evs.setter
    def delete_evs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_evs", value)

    @property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_net")

    @delete_net.setter
    def delete_net(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_net", value)

    @property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_obs")

    @delete_obs.setter
    def delete_obs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_obs", value)

    @property
    @pulumi.getter(name="deleteSfs")
    def delete_sfs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete_sfs")

    @delete_sfs.setter
    def delete_sfs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_sfs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eip", value)

    @property
    @pulumi.getter(name="enableDistributeManagement")
    def enable_distribute_management(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "enable_distribute_management")

    @enable_distribute_management.setter
    def enable_distribute_management(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_distribute_management", value)

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "eni_subnet_cidr")

    @eni_subnet_cidr.setter
    def eni_subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_subnet_cidr", value)

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the IPv4 subnet ID of the subnet where the ENI resides
        """
        return pulumi.get(self, "eni_subnet_id")

    @eni_subnet_id.setter
    def eni_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_subnet_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "extend_param")

    @extend_param.setter
    def extend_param(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extend_param", value)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]]:
        return pulumi.get(self, "extend_params")

    @extend_params.setter
    def extend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterExtendParamArgs']]]]):
        pulumi.set(self, "extend_params", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter
    def hibernate(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hibernate")

    @hibernate.setter
    def hibernate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hibernate", value)

    @property
    @pulumi.getter(name="highwaySubnetId")
    def highway_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "highway_subnet_id")

    @highway_subnet_id.setter
    def highway_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "highway_subnet_id", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kube_config_raw")

    @kube_config_raw.setter
    def kube_config_raw(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kube_config_raw", value)

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lts_reclaim_policy")

    @lts_reclaim_policy.setter
    def lts_reclaim_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lts_reclaim_policy", value)

    @property
    @pulumi.getter
    def masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]]:
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterMasterArgs']]]]):
        pulumi.set(self, "masters", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_network_cidr")

    @service_network_cidr.setter
    def service_network_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network_cidr", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="supportIstio")
    def support_istio(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "support_istio")

    @support_istio.setter
    def support_istio(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "support_istio", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class CceCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 authenticating_proxy_ca: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_cert: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_mode: Optional[pulumi.Input[builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[builtins.str]] = None,
                 billing_mode: Optional[pulumi.Input[builtins.int]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[builtins.str]] = None,
                 component_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterComponentConfigurationArgs', 'CceClusterComponentConfigurationArgsDict']]]]] = None,
                 container_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 container_network_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 delete_all: Optional[pulumi.Input[builtins.str]] = None,
                 delete_efs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[builtins.str]] = None,
                 delete_evs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_sfs: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 eip: Optional[pulumi.Input[builtins.str]] = None,
                 enable_distribute_management: Optional[pulumi.Input[builtins.bool]] = None,
                 eni_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 eni_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 extend_param: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 extend_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterExtendParamArgs', 'CceClusterExtendParamArgsDict']]]]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 hibernate: Optional[pulumi.Input[builtins.bool]] = None,
                 highway_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterMasterArgs', 'CceClusterMasterArgsDict']]]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 support_istio: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a CceCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: schema: Internal
        :param pulumi.Input[builtins.str] delete_eni: schema: Internal
        :param pulumi.Input[builtins.str] delete_net: schema: Internal
        :param pulumi.Input[builtins.bool] enable_distribute_management: schema: Internal
        :param pulumi.Input[builtins.str] eni_subnet_cidr: schema: Computed
        :param pulumi.Input[builtins.str] eni_subnet_id: the IPv4 subnet ID of the subnet where the ENI resides
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] extend_param: schema: Internal
        :param pulumi.Input[builtins.str] highway_subnet_id: schema: Internal
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: schema: Internal
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CceClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CceCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CceClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CceClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 authenticating_proxy_ca: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_cert: Optional[pulumi.Input[builtins.str]] = None,
                 authenticating_proxy_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_mode: Optional[pulumi.Input[builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[builtins.str]] = None,
                 billing_mode: Optional[pulumi.Input[builtins.int]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[builtins.str]] = None,
                 component_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterComponentConfigurationArgs', 'CceClusterComponentConfigurationArgsDict']]]]] = None,
                 container_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 container_network_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 delete_all: Optional[pulumi.Input[builtins.str]] = None,
                 delete_efs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_eni: Optional[pulumi.Input[builtins.str]] = None,
                 delete_evs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_net: Optional[pulumi.Input[builtins.str]] = None,
                 delete_obs: Optional[pulumi.Input[builtins.str]] = None,
                 delete_sfs: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 eip: Optional[pulumi.Input[builtins.str]] = None,
                 enable_distribute_management: Optional[pulumi.Input[builtins.bool]] = None,
                 eni_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 eni_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 extend_param: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 extend_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterExtendParamArgs', 'CceClusterExtendParamArgsDict']]]]] = None,
                 flavor_id: Optional[pulumi.Input[builtins.str]] = None,
                 hibernate: Optional[pulumi.Input[builtins.bool]] = None,
                 highway_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 lts_reclaim_policy: Optional[pulumi.Input[builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterMasterArgs', 'CceClusterMasterArgsDict']]]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 support_istio: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CceClusterArgs.__new__(CceClusterArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["authenticating_proxy_ca"] = authenticating_proxy_ca
            __props__.__dict__["authenticating_proxy_cert"] = authenticating_proxy_cert
            __props__.__dict__["authenticating_proxy_private_key"] = authenticating_proxy_private_key
            __props__.__dict__["authentication_mode"] = authentication_mode
            __props__.__dict__["auto_pay"] = auto_pay
            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["billing_mode"] = billing_mode
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["cluster_version"] = cluster_version
            __props__.__dict__["component_configurations"] = component_configurations
            __props__.__dict__["container_network_cidr"] = container_network_cidr
            if container_network_type is None and not opts.urn:
                raise TypeError("Missing required property 'container_network_type'")
            __props__.__dict__["container_network_type"] = container_network_type
            __props__.__dict__["custom_sans"] = custom_sans
            __props__.__dict__["delete_all"] = delete_all
            __props__.__dict__["delete_efs"] = delete_efs
            __props__.__dict__["delete_eni"] = delete_eni
            __props__.__dict__["delete_evs"] = delete_evs
            __props__.__dict__["delete_net"] = delete_net
            __props__.__dict__["delete_obs"] = delete_obs
            __props__.__dict__["delete_sfs"] = delete_sfs
            __props__.__dict__["description"] = description
            __props__.__dict__["eip"] = eip
            __props__.__dict__["enable_distribute_management"] = enable_distribute_management
            __props__.__dict__["eni_subnet_cidr"] = eni_subnet_cidr
            __props__.__dict__["eni_subnet_id"] = eni_subnet_id
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["extend_param"] = extend_param
            __props__.__dict__["extend_params"] = extend_params
            if flavor_id is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_id'")
            __props__.__dict__["flavor_id"] = flavor_id
            __props__.__dict__["hibernate"] = hibernate
            __props__.__dict__["highway_subnet_id"] = highway_subnet_id
            __props__.__dict__["ipv6_enable"] = ipv6_enable
            __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
            __props__.__dict__["labels"] = labels
            __props__.__dict__["lts_reclaim_policy"] = lts_reclaim_policy
            __props__.__dict__["masters"] = masters
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["service_network_cidr"] = service_network_cidr
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["support_istio"] = support_istio
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["category"] = None
            __props__.__dict__["certificate_clusters"] = None
            __props__.__dict__["certificate_users"] = None
            __props__.__dict__["kube_config_raw"] = None
            __props__.__dict__["status"] = None
        super(CceCluster, __self__).__init__(
            'sbercloud:index/cceCluster:CceCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[builtins.str]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            authenticating_proxy_ca: Optional[pulumi.Input[builtins.str]] = None,
            authenticating_proxy_cert: Optional[pulumi.Input[builtins.str]] = None,
            authenticating_proxy_private_key: Optional[pulumi.Input[builtins.str]] = None,
            authentication_mode: Optional[pulumi.Input[builtins.str]] = None,
            auto_pay: Optional[pulumi.Input[builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[builtins.str]] = None,
            billing_mode: Optional[pulumi.Input[builtins.int]] = None,
            category: Optional[pulumi.Input[builtins.str]] = None,
            certificate_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterCertificateClusterArgs', 'CceClusterCertificateClusterArgsDict']]]]] = None,
            certificate_users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterCertificateUserArgs', 'CceClusterCertificateUserArgsDict']]]]] = None,
            charging_mode: Optional[pulumi.Input[builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[builtins.str]] = None,
            cluster_version: Optional[pulumi.Input[builtins.str]] = None,
            component_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterComponentConfigurationArgs', 'CceClusterComponentConfigurationArgsDict']]]]] = None,
            container_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
            container_network_type: Optional[pulumi.Input[builtins.str]] = None,
            custom_sans: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            delete_all: Optional[pulumi.Input[builtins.str]] = None,
            delete_efs: Optional[pulumi.Input[builtins.str]] = None,
            delete_eni: Optional[pulumi.Input[builtins.str]] = None,
            delete_evs: Optional[pulumi.Input[builtins.str]] = None,
            delete_net: Optional[pulumi.Input[builtins.str]] = None,
            delete_obs: Optional[pulumi.Input[builtins.str]] = None,
            delete_sfs: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            eip: Optional[pulumi.Input[builtins.str]] = None,
            enable_distribute_management: Optional[pulumi.Input[builtins.bool]] = None,
            eni_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
            eni_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            extend_param: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            extend_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterExtendParamArgs', 'CceClusterExtendParamArgsDict']]]]] = None,
            flavor_id: Optional[pulumi.Input[builtins.str]] = None,
            hibernate: Optional[pulumi.Input[builtins.bool]] = None,
            highway_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
            kube_config_raw: Optional[pulumi.Input[builtins.str]] = None,
            kube_proxy_mode: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            lts_reclaim_policy: Optional[pulumi.Input[builtins.str]] = None,
            masters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterMasterArgs', 'CceClusterMasterArgsDict']]]]] = None,
            multi_az: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            period: Optional[pulumi.Input[builtins.int]] = None,
            period_unit: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[builtins.str]] = None,
            service_network_cidr: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            support_istio: Optional[pulumi.Input[builtins.bool]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'CceCluster':
        """
        Get an existing CceCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: schema: Internal
        :param pulumi.Input[builtins.str] delete_eni: schema: Internal
        :param pulumi.Input[builtins.str] delete_net: schema: Internal
        :param pulumi.Input[builtins.bool] enable_distribute_management: schema: Internal
        :param pulumi.Input[builtins.str] eni_subnet_cidr: schema: Computed
        :param pulumi.Input[builtins.str] eni_subnet_id: the IPv4 subnet ID of the subnet where the ENI resides
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] extend_param: schema: Internal
        :param pulumi.Input[builtins.str] highway_subnet_id: schema: Internal
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: schema: Internal
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CceClusterState.__new__(_CceClusterState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["authenticating_proxy_ca"] = authenticating_proxy_ca
        __props__.__dict__["authenticating_proxy_cert"] = authenticating_proxy_cert
        __props__.__dict__["authenticating_proxy_private_key"] = authenticating_proxy_private_key
        __props__.__dict__["authentication_mode"] = authentication_mode
        __props__.__dict__["auto_pay"] = auto_pay
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["billing_mode"] = billing_mode
        __props__.__dict__["category"] = category
        __props__.__dict__["certificate_clusters"] = certificate_clusters
        __props__.__dict__["certificate_users"] = certificate_users
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["component_configurations"] = component_configurations
        __props__.__dict__["container_network_cidr"] = container_network_cidr
        __props__.__dict__["container_network_type"] = container_network_type
        __props__.__dict__["custom_sans"] = custom_sans
        __props__.__dict__["delete_all"] = delete_all
        __props__.__dict__["delete_efs"] = delete_efs
        __props__.__dict__["delete_eni"] = delete_eni
        __props__.__dict__["delete_evs"] = delete_evs
        __props__.__dict__["delete_net"] = delete_net
        __props__.__dict__["delete_obs"] = delete_obs
        __props__.__dict__["delete_sfs"] = delete_sfs
        __props__.__dict__["description"] = description
        __props__.__dict__["eip"] = eip
        __props__.__dict__["enable_distribute_management"] = enable_distribute_management
        __props__.__dict__["eni_subnet_cidr"] = eni_subnet_cidr
        __props__.__dict__["eni_subnet_id"] = eni_subnet_id
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["extend_param"] = extend_param
        __props__.__dict__["extend_params"] = extend_params
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["hibernate"] = hibernate
        __props__.__dict__["highway_subnet_id"] = highway_subnet_id
        __props__.__dict__["ipv6_enable"] = ipv6_enable
        __props__.__dict__["kube_config_raw"] = kube_config_raw
        __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
        __props__.__dict__["labels"] = labels
        __props__.__dict__["lts_reclaim_policy"] = lts_reclaim_policy
        __props__.__dict__["masters"] = masters
        __props__.__dict__["multi_az"] = multi_az
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["service_network_cidr"] = service_network_cidr
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["support_istio"] = support_istio
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return CceCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="authenticatingProxyCa")
    def authenticating_proxy_ca(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_ca")

    @property
    @pulumi.getter(name="authenticatingProxyCert")
    def authenticating_proxy_cert(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_cert")

    @property
    @pulumi.getter(name="authenticatingProxyPrivateKey")
    def authenticating_proxy_private_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "authenticating_proxy_private_key")

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="billingMode")
    @_utilities.deprecated("""use charging_mode instead""")
    def billing_mode(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="certificateClusters")
    def certificate_clusters(self) -> pulumi.Output[Sequence['outputs.CceClusterCertificateCluster']]:
        return pulumi.get(self, "certificate_clusters")

    @property
    @pulumi.getter(name="certificateUsers")
    def certificate_users(self) -> pulumi.Output[Sequence['outputs.CceClusterCertificateUser']]:
        return pulumi.get(self, "certificate_users")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="componentConfigurations")
    def component_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.CceClusterComponentConfiguration']]]:
        return pulumi.get(self, "component_configurations")

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "container_network_cidr")

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "container_network_type")

    @property
    @pulumi.getter(name="customSans")
    def custom_sans(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "custom_sans")

    @property
    @pulumi.getter(name="deleteAll")
    def delete_all(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "delete_all")

    @property
    @pulumi.getter(name="deleteEfs")
    def delete_efs(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "delete_efs")

    @property
    @pulumi.getter(name="deleteEni")
    def delete_eni(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_eni")

    @property
    @pulumi.getter(name="deleteEvs")
    def delete_evs(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "delete_evs")

    @property
    @pulumi.getter(name="deleteNet")
    def delete_net(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "delete_net")

    @property
    @pulumi.getter(name="deleteObs")
    def delete_obs(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "delete_obs")

    @property
    @pulumi.getter(name="deleteSfs")
    def delete_sfs(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "delete_sfs")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def eip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "eip")

    @property
    @pulumi.getter(name="enableDistributeManagement")
    def enable_distribute_management(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "enable_distribute_management")

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> pulumi.Output[builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "eni_subnet_cidr")

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> pulumi.Output[builtins.str]:
        """
        the IPv4 subnet ID of the subnet where the ENI resides
        """
        return pulumi.get(self, "eni_subnet_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> pulumi.Output[Optional[Sequence['outputs.CceClusterExtendParam']]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def hibernate(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "hibernate")

    @property
    @pulumi.getter(name="highwaySubnetId")
    def highway_subnet_id(self) -> pulumi.Output[builtins.str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "highway_subnet_id")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kube_config_raw")

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kube_proxy_mode")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="ltsReclaimPolicy")
    def lts_reclaim_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lts_reclaim_policy")

    @property
    @pulumi.getter
    def masters(self) -> pulumi.Output[Sequence['outputs.CceClusterMaster']]:
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "service_network_cidr")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="supportIstio")
    def support_istio(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "support_istio")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

