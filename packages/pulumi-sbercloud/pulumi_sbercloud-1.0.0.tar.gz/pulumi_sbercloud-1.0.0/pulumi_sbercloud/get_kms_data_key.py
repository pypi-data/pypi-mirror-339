# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetKmsDataKeyResult',
    'AwaitableGetKmsDataKeyResult',
    'get_kms_data_key',
    'get_kms_data_key_output',
]

@pulumi.output_type
class GetKmsDataKeyResult:
    """
    A collection of values returned by getKmsDataKey.
    """
    def __init__(__self__, cipher_text=None, datakey_length=None, encryption_context=None, id=None, key_id=None, plain_text=None, region=None):
        if cipher_text and not isinstance(cipher_text, str):
            raise TypeError("Expected argument 'cipher_text' to be a str")
        pulumi.set(__self__, "cipher_text", cipher_text)
        if datakey_length and not isinstance(datakey_length, str):
            raise TypeError("Expected argument 'datakey_length' to be a str")
        pulumi.set(__self__, "datakey_length", datakey_length)
        if encryption_context and not isinstance(encryption_context, str):
            raise TypeError("Expected argument 'encryption_context' to be a str")
        pulumi.set(__self__, "encryption_context", encryption_context)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if plain_text and not isinstance(plain_text, str):
            raise TypeError("Expected argument 'plain_text' to be a str")
        pulumi.set(__self__, "plain_text", plain_text)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="cipherText")
    def cipher_text(self) -> builtins.str:
        return pulumi.get(self, "cipher_text")

    @property
    @pulumi.getter(name="datakeyLength")
    def datakey_length(self) -> builtins.str:
        return pulumi.get(self, "datakey_length")

    @property
    @pulumi.getter(name="encryptionContext")
    def encryption_context(self) -> Optional[builtins.str]:
        return pulumi.get(self, "encryption_context")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> builtins.str:
        return pulumi.get(self, "plain_text")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetKmsDataKeyResult(GetKmsDataKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKmsDataKeyResult(
            cipher_text=self.cipher_text,
            datakey_length=self.datakey_length,
            encryption_context=self.encryption_context,
            id=self.id,
            key_id=self.key_id,
            plain_text=self.plain_text,
            region=self.region)


def get_kms_data_key(datakey_length: Optional[builtins.str] = None,
                     encryption_context: Optional[builtins.str] = None,
                     key_id: Optional[builtins.str] = None,
                     region: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKmsDataKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datakeyLength'] = datakey_length
    __args__['encryptionContext'] = encryption_context
    __args__['keyId'] = key_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getKmsDataKey:getKmsDataKey', __args__, opts=opts, typ=GetKmsDataKeyResult).value

    return AwaitableGetKmsDataKeyResult(
        cipher_text=pulumi.get(__ret__, 'cipher_text'),
        datakey_length=pulumi.get(__ret__, 'datakey_length'),
        encryption_context=pulumi.get(__ret__, 'encryption_context'),
        id=pulumi.get(__ret__, 'id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        plain_text=pulumi.get(__ret__, 'plain_text'),
        region=pulumi.get(__ret__, 'region'))
def get_kms_data_key_output(datakey_length: Optional[pulumi.Input[builtins.str]] = None,
                            encryption_context: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            key_id: Optional[pulumi.Input[builtins.str]] = None,
                            region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKmsDataKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datakeyLength'] = datakey_length
    __args__['encryptionContext'] = encryption_context
    __args__['keyId'] = key_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getKmsDataKey:getKmsDataKey', __args__, opts=opts, typ=GetKmsDataKeyResult)
    return __ret__.apply(lambda __response__: GetKmsDataKeyResult(
        cipher_text=pulumi.get(__response__, 'cipher_text'),
        datakey_length=pulumi.get(__response__, 'datakey_length'),
        encryption_context=pulumi.get(__response__, 'encryption_context'),
        id=pulumi.get(__response__, 'id'),
        key_id=pulumi.get(__response__, 'key_id'),
        plain_text=pulumi.get(__response__, 'plain_text'),
        region=pulumi.get(__response__, 'region')))
