# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IdentityProviderConversionArgs', 'IdentityProviderConversion']

@pulumi.input_type
class IdentityProviderConversionArgs:
    def __init__(__self__, *,
                 conversion_rules: pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]],
                 provider_id: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a IdentityProviderConversion resource.
        """
        pulumi.set(__self__, "conversion_rules", conversion_rules)
        pulumi.set(__self__, "provider_id", provider_id)

    @property
    @pulumi.getter(name="conversionRules")
    def conversion_rules(self) -> pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]]:
        return pulumi.get(self, "conversion_rules")

    @conversion_rules.setter
    def conversion_rules(self, value: pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]]):
        pulumi.set(self, "conversion_rules", value)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "provider_id", value)


@pulumi.input_type
class _IdentityProviderConversionState:
    def __init__(__self__, *,
                 conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]]] = None,
                 provider_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering IdentityProviderConversion resources.
        """
        if conversion_rules is not None:
            pulumi.set(__self__, "conversion_rules", conversion_rules)
        if provider_id is not None:
            pulumi.set(__self__, "provider_id", provider_id)

    @property
    @pulumi.getter(name="conversionRules")
    def conversion_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]]]:
        return pulumi.get(self, "conversion_rules")

    @conversion_rules.setter
    def conversion_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionConversionRuleArgs']]]]):
        pulumi.set(self, "conversion_rules", value)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_id", value)


class IdentityProviderConversion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IdentityProviderConversionConversionRuleArgs', 'IdentityProviderConversionConversionRuleArgsDict']]]]] = None,
                 provider_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a IdentityProviderConversion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IdentityProviderConversionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IdentityProviderConversion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IdentityProviderConversionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdentityProviderConversionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IdentityProviderConversionConversionRuleArgs', 'IdentityProviderConversionConversionRuleArgsDict']]]]] = None,
                 provider_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdentityProviderConversionArgs.__new__(IdentityProviderConversionArgs)

            if conversion_rules is None and not opts.urn:
                raise TypeError("Missing required property 'conversion_rules'")
            __props__.__dict__["conversion_rules"] = conversion_rules
            if provider_id is None and not opts.urn:
                raise TypeError("Missing required property 'provider_id'")
            __props__.__dict__["provider_id"] = provider_id
        super(IdentityProviderConversion, __self__).__init__(
            'sbercloud:index/identityProviderConversion:IdentityProviderConversion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IdentityProviderConversionConversionRuleArgs', 'IdentityProviderConversionConversionRuleArgsDict']]]]] = None,
            provider_id: Optional[pulumi.Input[builtins.str]] = None) -> 'IdentityProviderConversion':
        """
        Get an existing IdentityProviderConversion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IdentityProviderConversionState.__new__(_IdentityProviderConversionState)

        __props__.__dict__["conversion_rules"] = conversion_rules
        __props__.__dict__["provider_id"] = provider_id
        return IdentityProviderConversion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="conversionRules")
    def conversion_rules(self) -> pulumi.Output[Sequence['outputs.IdentityProviderConversionConversionRule']]:
        return pulumi.get(self, "conversion_rules")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "provider_id")

