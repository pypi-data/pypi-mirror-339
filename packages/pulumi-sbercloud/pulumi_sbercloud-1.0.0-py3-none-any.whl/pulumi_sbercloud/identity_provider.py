# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IdentityProviderArgs', 'IdentityProvider']

@pulumi.input_type
class IdentityProviderArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[builtins.str],
                 access_config: Optional[pulumi.Input['IdentityProviderAccessConfigArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 metadata: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 sso_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a IdentityProvider resource.
        """
        pulumi.set(__self__, "protocol", protocol)
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sso_type is not None:
            pulumi.set(__self__, "sso_type", sso_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input['IdentityProviderAccessConfigArgs']]:
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input['IdentityProviderAccessConfigArgs']]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sso_type")

    @sso_type.setter
    def sso_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sso_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _IdentityProviderState:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input['IdentityProviderAccessConfigArgs']] = None,
                 conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionRuleArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 login_link: Optional[pulumi.Input[builtins.str]] = None,
                 metadata: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 sso_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering IdentityProvider resources.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if conversion_rules is not None:
            pulumi.set(__self__, "conversion_rules", conversion_rules)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if login_link is not None:
            pulumi.set(__self__, "login_link", login_link)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sso_type is not None:
            pulumi.set(__self__, "sso_type", sso_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input['IdentityProviderAccessConfigArgs']]:
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input['IdentityProviderAccessConfigArgs']]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter(name="conversionRules")
    def conversion_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionRuleArgs']]]]:
        return pulumi.get(self, "conversion_rules")

    @conversion_rules.setter
    def conversion_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityProviderConversionRuleArgs']]]]):
        pulumi.set(self, "conversion_rules", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="loginLink")
    def login_link(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "login_link")

    @login_link.setter
    def login_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "login_link", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sso_type")

    @sso_type.setter
    def sso_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sso_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status", value)


class IdentityProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[Union['IdentityProviderAccessConfigArgs', 'IdentityProviderAccessConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 metadata: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 sso_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a IdentityProvider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IdentityProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IdentityProvider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IdentityProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdentityProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[Union['IdentityProviderAccessConfigArgs', 'IdentityProviderAccessConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 metadata: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 sso_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdentityProviderArgs.__new__(IdentityProviderArgs)

            __props__.__dict__["access_config"] = access_config
            __props__.__dict__["description"] = description
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["sso_type"] = sso_type
            __props__.__dict__["status"] = status
            __props__.__dict__["conversion_rules"] = None
            __props__.__dict__["login_link"] = None
        super(IdentityProvider, __self__).__init__(
            'sbercloud:index/identityProvider:IdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_config: Optional[pulumi.Input[Union['IdentityProviderAccessConfigArgs', 'IdentityProviderAccessConfigArgsDict']]] = None,
            conversion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IdentityProviderConversionRuleArgs', 'IdentityProviderConversionRuleArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            login_link: Optional[pulumi.Input[builtins.str]] = None,
            metadata: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            protocol: Optional[pulumi.Input[builtins.str]] = None,
            sso_type: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.bool]] = None) -> 'IdentityProvider':
        """
        Get an existing IdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IdentityProviderState.__new__(_IdentityProviderState)

        __props__.__dict__["access_config"] = access_config
        __props__.__dict__["conversion_rules"] = conversion_rules
        __props__.__dict__["description"] = description
        __props__.__dict__["login_link"] = login_link
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["sso_type"] = sso_type
        __props__.__dict__["status"] = status
        return IdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> pulumi.Output[Optional['outputs.IdentityProviderAccessConfig']]:
        return pulumi.get(self, "access_config")

    @property
    @pulumi.getter(name="conversionRules")
    def conversion_rules(self) -> pulumi.Output[Sequence['outputs.IdentityProviderConversionRule']]:
        return pulumi.get(self, "conversion_rules")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="loginLink")
    def login_link(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "login_link")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "sso_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "status")

