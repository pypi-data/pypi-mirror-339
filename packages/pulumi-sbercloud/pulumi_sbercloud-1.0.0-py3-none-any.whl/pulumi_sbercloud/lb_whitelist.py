# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbWhitelistArgs', 'LbWhitelist']

@pulumi.input_type
class LbWhitelistArgs:
    def __init__(__self__, *,
                 listener_id: pulumi.Input[builtins.str],
                 enable_whitelist: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a LbWhitelist resource.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        if enable_whitelist is not None:
            pulumi.set(__self__, "enable_whitelist", enable_whitelist)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="enableWhitelist")
    def enable_whitelist(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_whitelist")

    @enable_whitelist.setter
    def enable_whitelist(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_whitelist", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "whitelist", value)


@pulumi.input_type
class _LbWhitelistState:
    def __init__(__self__, *,
                 enable_whitelist: Optional[pulumi.Input[builtins.bool]] = None,
                 listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering LbWhitelist resources.
        """
        if enable_whitelist is not None:
            pulumi.set(__self__, "enable_whitelist", enable_whitelist)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_id is not None:
            warnings.warn("""tenant_id is deprecated""", DeprecationWarning)
            pulumi.log.warn("""tenant_id is deprecated: tenant_id is deprecated""")
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter(name="enableWhitelist")
    def enable_whitelist(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_whitelist")

    @enable_whitelist.setter
    def enable_whitelist(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_whitelist", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "whitelist", value)


class LbWhitelist(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_whitelist: Optional[pulumi.Input[builtins.bool]] = None,
                 listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a LbWhitelist resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbWhitelistArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbWhitelist resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbWhitelistArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbWhitelistArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_whitelist: Optional[pulumi.Input[builtins.bool]] = None,
                 listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbWhitelistArgs.__new__(LbWhitelistArgs)

            __props__.__dict__["enable_whitelist"] = enable_whitelist
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            __props__.__dict__["region"] = region
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["whitelist"] = whitelist
        super(LbWhitelist, __self__).__init__(
            'sbercloud:index/lbWhitelist:LbWhitelist',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_whitelist: Optional[pulumi.Input[builtins.bool]] = None,
            listener_id: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            whitelist: Optional[pulumi.Input[builtins.str]] = None) -> 'LbWhitelist':
        """
        Get an existing LbWhitelist resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbWhitelistState.__new__(_LbWhitelistState)

        __props__.__dict__["enable_whitelist"] = enable_whitelist
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["whitelist"] = whitelist
        return LbWhitelist(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableWhitelist")
    def enable_whitelist(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enable_whitelist")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tenantId")
    @_utilities.deprecated("""tenant_id is deprecated""")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def whitelist(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "whitelist")

