# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCceAddonTemplateResult',
    'AwaitableGetCceAddonTemplateResult',
    'get_cce_addon_template',
    'get_cce_addon_template_output',
]

@pulumi.output_type
class GetCceAddonTemplateResult:
    """
    A collection of values returned by getCceAddonTemplate.
    """
    def __init__(__self__, cluster_id=None, description=None, id=None, name=None, region=None, spec=None, stable=None, support_versions=None, version=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if spec and not isinstance(spec, str):
            raise TypeError("Expected argument 'spec' to be a str")
        pulumi.set(__self__, "spec", spec)
        if stable and not isinstance(stable, bool):
            raise TypeError("Expected argument 'stable' to be a bool")
        pulumi.set(__self__, "stable", stable)
        if support_versions and not isinstance(support_versions, list):
            raise TypeError("Expected argument 'support_versions' to be a list")
        pulumi.set(__self__, "support_versions", support_versions)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> builtins.str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def spec(self) -> builtins.str:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def stable(self) -> builtins.bool:
        return pulumi.get(self, "stable")

    @property
    @pulumi.getter(name="supportVersions")
    def support_versions(self) -> Sequence['outputs.GetCceAddonTemplateSupportVersionResult']:
        return pulumi.get(self, "support_versions")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetCceAddonTemplateResult(GetCceAddonTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCceAddonTemplateResult(
            cluster_id=self.cluster_id,
            description=self.description,
            id=self.id,
            name=self.name,
            region=self.region,
            spec=self.spec,
            stable=self.stable,
            support_versions=self.support_versions,
            version=self.version)


def get_cce_addon_template(cluster_id: Optional[builtins.str] = None,
                           name: Optional[builtins.str] = None,
                           region: Optional[builtins.str] = None,
                           version: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCceAddonTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getCceAddonTemplate:getCceAddonTemplate', __args__, opts=opts, typ=GetCceAddonTemplateResult).value

    return AwaitableGetCceAddonTemplateResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        spec=pulumi.get(__ret__, 'spec'),
        stable=pulumi.get(__ret__, 'stable'),
        support_versions=pulumi.get(__ret__, 'support_versions'),
        version=pulumi.get(__ret__, 'version'))
def get_cce_addon_template_output(cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                                  name: Optional[pulumi.Input[builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  version: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCceAddonTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getCceAddonTemplate:getCceAddonTemplate', __args__, opts=opts, typ=GetCceAddonTemplateResult)
    return __ret__.apply(lambda __response__: GetCceAddonTemplateResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        spec=pulumi.get(__response__, 'spec'),
        stable=pulumi.get(__response__, 'stable'),
        support_versions=pulumi.get(__response__, 'support_versions'),
        version=pulumi.get(__response__, 'version')))
