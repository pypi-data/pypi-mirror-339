# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AsGroupArgs', 'AsGroup']

@pulumi.input_type
class AsGroupArgs:
    def __init__(__self__, *,
                 networks: pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]],
                 scaling_group_name: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 delete_instances: Optional[pulumi.Input[builtins.str]] = None,
                 delete_publicip: Optional[pulumi.Input[builtins.bool]] = None,
                 delete_volume: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 desire_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 enable: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 health_periodic_audit_grace_period: Optional[pulumi.Input[builtins.int]] = None,
                 health_periodic_audit_method: Optional[pulumi.Input[builtins.str]] = None,
                 health_periodic_audit_time: Optional[pulumi.Input[builtins.int]] = None,
                 instance_terminate_policy: Optional[pulumi.Input[builtins.str]] = None,
                 lb_listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 lbaas_listeners: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]] = None,
                 max_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 min_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 multi_az_scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a AsGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] available_zones: schema: Deprecated; use availability_zones instead
        :param pulumi.Input[builtins.int] cool_down_time: The cooling duration, in seconds.
        :param pulumi.Input[builtins.str] delete_instances: Whether to delete instances when they are removed from the AS group.
        :param pulumi.Input[builtins.int] health_periodic_audit_grace_period: The health check grace period for instances, in seconds.
        :param pulumi.Input[builtins.int] health_periodic_audit_time: The health check period for instances, in minutes.
        :param pulumi.Input[builtins.str] lb_listener_id: The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] notifications: schema: Deprecated; The notification mode has been canceled
        :param pulumi.Input[builtins.str] scaling_configuration_id: schema: Required
        """
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if available_zones is not None:
            pulumi.set(__self__, "available_zones", available_zones)
        if cool_down_time is not None:
            pulumi.set(__self__, "cool_down_time", cool_down_time)
        if delete_instances is not None:
            pulumi.set(__self__, "delete_instances", delete_instances)
        if delete_publicip is not None:
            pulumi.set(__self__, "delete_publicip", delete_publicip)
        if delete_volume is not None:
            pulumi.set(__self__, "delete_volume", delete_volume)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desire_instance_number is not None:
            pulumi.set(__self__, "desire_instance_number", desire_instance_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if health_periodic_audit_grace_period is not None:
            pulumi.set(__self__, "health_periodic_audit_grace_period", health_periodic_audit_grace_period)
        if health_periodic_audit_method is not None:
            pulumi.set(__self__, "health_periodic_audit_method", health_periodic_audit_method)
        if health_periodic_audit_time is not None:
            pulumi.set(__self__, "health_periodic_audit_time", health_periodic_audit_time)
        if instance_terminate_policy is not None:
            pulumi.set(__self__, "instance_terminate_policy", instance_terminate_policy)
        if lb_listener_id is not None:
            warnings.warn("""use lbaas_listeners instead""", DeprecationWarning)
            pulumi.log.warn("""lb_listener_id is deprecated: use lbaas_listeners instead""")
        if lb_listener_id is not None:
            pulumi.set(__self__, "lb_listener_id", lb_listener_id)
        if lbaas_listeners is not None:
            pulumi.set(__self__, "lbaas_listeners", lbaas_listeners)
        if max_instance_number is not None:
            pulumi.set(__self__, "max_instance_number", max_instance_number)
        if min_instance_number is not None:
            pulumi.set(__self__, "min_instance_number", min_instance_number)
        if multi_az_scaling_policy is not None:
            pulumi.set(__self__, "multi_az_scaling_policy", multi_az_scaling_policy)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_configuration_id is not None:
            pulumi.set(__self__, "scaling_configuration_id", scaling_configuration_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        schema: Deprecated; use availability_zones instead
        """
        return pulumi.get(self, "available_zones")

    @available_zones.setter
    def available_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "available_zones", value)

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The cooling duration, in seconds.
        """
        return pulumi.get(self, "cool_down_time")

    @cool_down_time.setter
    def cool_down_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cool_down_time", value)

    @property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether to delete instances when they are removed from the AS group.
        """
        return pulumi.get(self, "delete_instances")

    @delete_instances.setter
    def delete_instances(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_instances", value)

    @property
    @pulumi.getter(name="deletePublicip")
    def delete_publicip(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "delete_publicip")

    @delete_publicip.setter
    def delete_publicip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete_publicip", value)

    @property
    @pulumi.getter(name="deleteVolume")
    def delete_volume(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "delete_volume")

    @delete_volume.setter
    def delete_volume(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete_volume", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="desireInstanceNumber")
    def desire_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "desire_instance_number")

    @desire_instance_number.setter
    def desire_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "desire_instance_number", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditGracePeriod")
    def health_periodic_audit_grace_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The health check grace period for instances, in seconds.
        """
        return pulumi.get(self, "health_periodic_audit_grace_period")

    @health_periodic_audit_grace_period.setter
    def health_periodic_audit_grace_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "health_periodic_audit_grace_period", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditMethod")
    def health_periodic_audit_method(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "health_periodic_audit_method")

    @health_periodic_audit_method.setter
    def health_periodic_audit_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "health_periodic_audit_method", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditTime")
    def health_periodic_audit_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The health check period for instances, in minutes.
        """
        return pulumi.get(self, "health_periodic_audit_time")

    @health_periodic_audit_time.setter
    def health_periodic_audit_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "health_periodic_audit_time", value)

    @property
    @pulumi.getter(name="instanceTerminatePolicy")
    def instance_terminate_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance_terminate_policy")

    @instance_terminate_policy.setter
    def instance_terminate_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_terminate_policy", value)

    @property
    @pulumi.getter(name="lbListenerId")
    @_utilities.deprecated("""use lbaas_listeners instead""")
    def lb_listener_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        """
        return pulumi.get(self, "lb_listener_id")

    @lb_listener_id.setter
    def lb_listener_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lb_listener_id", value)

    @property
    @pulumi.getter(name="lbaasListeners")
    def lbaas_listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]]:
        return pulumi.get(self, "lbaas_listeners")

    @lbaas_listeners.setter
    def lbaas_listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]]):
        pulumi.set(self, "lbaas_listeners", value)

    @property
    @pulumi.getter(name="maxInstanceNumber")
    def max_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_instance_number")

    @max_instance_number.setter
    def max_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_instance_number", value)

    @property
    @pulumi.getter(name="minInstanceNumber")
    def min_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_instance_number")

    @min_instance_number.setter
    def min_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_instance_number", value)

    @property
    @pulumi.getter(name="multiAzScalingPolicy")
    def multi_az_scaling_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "multi_az_scaling_policy")

    @multi_az_scaling_policy.setter
    def multi_az_scaling_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "multi_az_scaling_policy", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        schema: Deprecated; The notification mode has been canceled
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalingConfigurationId")
    def scaling_configuration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "scaling_configuration_id")

    @scaling_configuration_id.setter
    def scaling_configuration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_configuration_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AsGroupState:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 current_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 delete_instances: Optional[pulumi.Input[builtins.str]] = None,
                 delete_publicip: Optional[pulumi.Input[builtins.bool]] = None,
                 delete_volume: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 desire_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 enable: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 health_periodic_audit_grace_period: Optional[pulumi.Input[builtins.int]] = None,
                 health_periodic_audit_method: Optional[pulumi.Input[builtins.str]] = None,
                 health_periodic_audit_time: Optional[pulumi.Input[builtins.int]] = None,
                 instance_terminate_policy: Optional[pulumi.Input[builtins.str]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 lb_listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 lbaas_listeners: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]] = None,
                 max_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 min_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 multi_az_scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering AsGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] available_zones: schema: Deprecated; use availability_zones instead
        :param pulumi.Input[builtins.int] cool_down_time: The cooling duration, in seconds.
        :param pulumi.Input[builtins.str] delete_instances: Whether to delete instances when they are removed from the AS group.
        :param pulumi.Input[builtins.int] health_periodic_audit_grace_period: The health check grace period for instances, in seconds.
        :param pulumi.Input[builtins.int] health_periodic_audit_time: The health check period for instances, in minutes.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] instances: The instances id list in the as group.
        :param pulumi.Input[builtins.str] lb_listener_id: The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] notifications: schema: Deprecated; The notification mode has been canceled
        :param pulumi.Input[builtins.str] scaling_configuration_id: schema: Required
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if available_zones is not None:
            pulumi.set(__self__, "available_zones", available_zones)
        if cool_down_time is not None:
            pulumi.set(__self__, "cool_down_time", cool_down_time)
        if current_instance_number is not None:
            pulumi.set(__self__, "current_instance_number", current_instance_number)
        if delete_instances is not None:
            pulumi.set(__self__, "delete_instances", delete_instances)
        if delete_publicip is not None:
            pulumi.set(__self__, "delete_publicip", delete_publicip)
        if delete_volume is not None:
            pulumi.set(__self__, "delete_volume", delete_volume)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desire_instance_number is not None:
            pulumi.set(__self__, "desire_instance_number", desire_instance_number)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if health_periodic_audit_grace_period is not None:
            pulumi.set(__self__, "health_periodic_audit_grace_period", health_periodic_audit_grace_period)
        if health_periodic_audit_method is not None:
            pulumi.set(__self__, "health_periodic_audit_method", health_periodic_audit_method)
        if health_periodic_audit_time is not None:
            pulumi.set(__self__, "health_periodic_audit_time", health_periodic_audit_time)
        if instance_terminate_policy is not None:
            pulumi.set(__self__, "instance_terminate_policy", instance_terminate_policy)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if lb_listener_id is not None:
            warnings.warn("""use lbaas_listeners instead""", DeprecationWarning)
            pulumi.log.warn("""lb_listener_id is deprecated: use lbaas_listeners instead""")
        if lb_listener_id is not None:
            pulumi.set(__self__, "lb_listener_id", lb_listener_id)
        if lbaas_listeners is not None:
            pulumi.set(__self__, "lbaas_listeners", lbaas_listeners)
        if max_instance_number is not None:
            pulumi.set(__self__, "max_instance_number", max_instance_number)
        if min_instance_number is not None:
            pulumi.set(__self__, "min_instance_number", min_instance_number)
        if multi_az_scaling_policy is not None:
            pulumi.set(__self__, "multi_az_scaling_policy", multi_az_scaling_policy)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_configuration_id is not None:
            pulumi.set(__self__, "scaling_configuration_id", scaling_configuration_id)
        if scaling_group_name is not None:
            pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        schema: Deprecated; use availability_zones instead
        """
        return pulumi.get(self, "available_zones")

    @available_zones.setter
    def available_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "available_zones", value)

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The cooling duration, in seconds.
        """
        return pulumi.get(self, "cool_down_time")

    @cool_down_time.setter
    def cool_down_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cool_down_time", value)

    @property
    @pulumi.getter(name="currentInstanceNumber")
    def current_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "current_instance_number")

    @current_instance_number.setter
    def current_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "current_instance_number", value)

    @property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether to delete instances when they are removed from the AS group.
        """
        return pulumi.get(self, "delete_instances")

    @delete_instances.setter
    def delete_instances(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete_instances", value)

    @property
    @pulumi.getter(name="deletePublicip")
    def delete_publicip(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "delete_publicip")

    @delete_publicip.setter
    def delete_publicip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete_publicip", value)

    @property
    @pulumi.getter(name="deleteVolume")
    def delete_volume(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "delete_volume")

    @delete_volume.setter
    def delete_volume(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete_volume", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="desireInstanceNumber")
    def desire_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "desire_instance_number")

    @desire_instance_number.setter
    def desire_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "desire_instance_number", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditGracePeriod")
    def health_periodic_audit_grace_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The health check grace period for instances, in seconds.
        """
        return pulumi.get(self, "health_periodic_audit_grace_period")

    @health_periodic_audit_grace_period.setter
    def health_periodic_audit_grace_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "health_periodic_audit_grace_period", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditMethod")
    def health_periodic_audit_method(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "health_periodic_audit_method")

    @health_periodic_audit_method.setter
    def health_periodic_audit_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "health_periodic_audit_method", value)

    @property
    @pulumi.getter(name="healthPeriodicAuditTime")
    def health_periodic_audit_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The health check period for instances, in minutes.
        """
        return pulumi.get(self, "health_periodic_audit_time")

    @health_periodic_audit_time.setter
    def health_periodic_audit_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "health_periodic_audit_time", value)

    @property
    @pulumi.getter(name="instanceTerminatePolicy")
    def instance_terminate_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance_terminate_policy")

    @instance_terminate_policy.setter
    def instance_terminate_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_terminate_policy", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The instances id list in the as group.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="lbListenerId")
    @_utilities.deprecated("""use lbaas_listeners instead""")
    def lb_listener_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        """
        return pulumi.get(self, "lb_listener_id")

    @lb_listener_id.setter
    def lb_listener_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lb_listener_id", value)

    @property
    @pulumi.getter(name="lbaasListeners")
    def lbaas_listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]]:
        return pulumi.get(self, "lbaas_listeners")

    @lbaas_listeners.setter
    def lbaas_listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupLbaasListenerArgs']]]]):
        pulumi.set(self, "lbaas_listeners", value)

    @property
    @pulumi.getter(name="maxInstanceNumber")
    def max_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_instance_number")

    @max_instance_number.setter
    def max_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_instance_number", value)

    @property
    @pulumi.getter(name="minInstanceNumber")
    def min_instance_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_instance_number")

    @min_instance_number.setter
    def min_instance_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_instance_number", value)

    @property
    @pulumi.getter(name="multiAzScalingPolicy")
    def multi_az_scaling_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "multi_az_scaling_policy")

    @multi_az_scaling_policy.setter
    def multi_az_scaling_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "multi_az_scaling_policy", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        schema: Deprecated; The notification mode has been canceled
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalingConfigurationId")
    def scaling_configuration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "scaling_configuration_id")

    @scaling_configuration_id.setter
    def scaling_configuration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_configuration_id", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsGroupSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class AsGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 delete_instances: Optional[pulumi.Input[builtins.str]] = None,
                 delete_publicip: Optional[pulumi.Input[builtins.bool]] = None,
                 delete_volume: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 desire_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 enable: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 health_periodic_audit_grace_period: Optional[pulumi.Input[builtins.int]] = None,
                 health_periodic_audit_method: Optional[pulumi.Input[builtins.str]] = None,
                 health_periodic_audit_time: Optional[pulumi.Input[builtins.int]] = None,
                 instance_terminate_policy: Optional[pulumi.Input[builtins.str]] = None,
                 lb_listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 lbaas_listeners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupLbaasListenerArgs', 'AsGroupLbaasListenerArgsDict']]]]] = None,
                 max_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 min_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 multi_az_scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupNetworkArgs', 'AsGroupNetworkArgsDict']]]]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupSecurityGroupArgs', 'AsGroupSecurityGroupArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a AsGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] available_zones: schema: Deprecated; use availability_zones instead
        :param pulumi.Input[builtins.int] cool_down_time: The cooling duration, in seconds.
        :param pulumi.Input[builtins.str] delete_instances: Whether to delete instances when they are removed from the AS group.
        :param pulumi.Input[builtins.int] health_periodic_audit_grace_period: The health check grace period for instances, in seconds.
        :param pulumi.Input[builtins.int] health_periodic_audit_time: The health check period for instances, in minutes.
        :param pulumi.Input[builtins.str] lb_listener_id: The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] notifications: schema: Deprecated; The notification mode has been canceled
        :param pulumi.Input[builtins.str] scaling_configuration_id: schema: Required
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AsGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AsGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AsGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AsGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 delete_instances: Optional[pulumi.Input[builtins.str]] = None,
                 delete_publicip: Optional[pulumi.Input[builtins.bool]] = None,
                 delete_volume: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 desire_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 enable: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 health_periodic_audit_grace_period: Optional[pulumi.Input[builtins.int]] = None,
                 health_periodic_audit_method: Optional[pulumi.Input[builtins.str]] = None,
                 health_periodic_audit_time: Optional[pulumi.Input[builtins.int]] = None,
                 instance_terminate_policy: Optional[pulumi.Input[builtins.str]] = None,
                 lb_listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 lbaas_listeners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupLbaasListenerArgs', 'AsGroupLbaasListenerArgsDict']]]]] = None,
                 max_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 min_instance_number: Optional[pulumi.Input[builtins.int]] = None,
                 multi_az_scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupNetworkArgs', 'AsGroupNetworkArgsDict']]]]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupSecurityGroupArgs', 'AsGroupSecurityGroupArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AsGroupArgs.__new__(AsGroupArgs)

            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["availability_zones"] = availability_zones
            __props__.__dict__["available_zones"] = available_zones
            __props__.__dict__["cool_down_time"] = cool_down_time
            __props__.__dict__["delete_instances"] = delete_instances
            __props__.__dict__["delete_publicip"] = delete_publicip
            __props__.__dict__["delete_volume"] = delete_volume
            __props__.__dict__["description"] = description
            __props__.__dict__["desire_instance_number"] = desire_instance_number
            __props__.__dict__["enable"] = enable
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["health_periodic_audit_grace_period"] = health_periodic_audit_grace_period
            __props__.__dict__["health_periodic_audit_method"] = health_periodic_audit_method
            __props__.__dict__["health_periodic_audit_time"] = health_periodic_audit_time
            __props__.__dict__["instance_terminate_policy"] = instance_terminate_policy
            __props__.__dict__["lb_listener_id"] = lb_listener_id
            __props__.__dict__["lbaas_listeners"] = lbaas_listeners
            __props__.__dict__["max_instance_number"] = max_instance_number
            __props__.__dict__["min_instance_number"] = min_instance_number
            __props__.__dict__["multi_az_scaling_policy"] = multi_az_scaling_policy
            if networks is None and not opts.urn:
                raise TypeError("Missing required property 'networks'")
            __props__.__dict__["networks"] = networks
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["region"] = region
            __props__.__dict__["scaling_configuration_id"] = scaling_configuration_id
            if scaling_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_group_name'")
            __props__.__dict__["scaling_group_name"] = scaling_group_name
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["current_instance_number"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["status"] = None
        super(AsGroup, __self__).__init__(
            'sbercloud:index/asGroup:AsGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_name: Optional[pulumi.Input[builtins.str]] = None,
            availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            available_zones: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
            current_instance_number: Optional[pulumi.Input[builtins.int]] = None,
            delete_instances: Optional[pulumi.Input[builtins.str]] = None,
            delete_publicip: Optional[pulumi.Input[builtins.bool]] = None,
            delete_volume: Optional[pulumi.Input[builtins.bool]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            desire_instance_number: Optional[pulumi.Input[builtins.int]] = None,
            enable: Optional[pulumi.Input[builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            force_delete: Optional[pulumi.Input[builtins.bool]] = None,
            health_periodic_audit_grace_period: Optional[pulumi.Input[builtins.int]] = None,
            health_periodic_audit_method: Optional[pulumi.Input[builtins.str]] = None,
            health_periodic_audit_time: Optional[pulumi.Input[builtins.int]] = None,
            instance_terminate_policy: Optional[pulumi.Input[builtins.str]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            lb_listener_id: Optional[pulumi.Input[builtins.str]] = None,
            lbaas_listeners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupLbaasListenerArgs', 'AsGroupLbaasListenerArgsDict']]]]] = None,
            max_instance_number: Optional[pulumi.Input[builtins.int]] = None,
            min_instance_number: Optional[pulumi.Input[builtins.int]] = None,
            multi_az_scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupNetworkArgs', 'AsGroupNetworkArgsDict']]]]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            scaling_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
            scaling_group_name: Optional[pulumi.Input[builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AsGroupSecurityGroupArgs', 'AsGroupSecurityGroupArgsDict']]]]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'AsGroup':
        """
        Get an existing AsGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] available_zones: schema: Deprecated; use availability_zones instead
        :param pulumi.Input[builtins.int] cool_down_time: The cooling duration, in seconds.
        :param pulumi.Input[builtins.str] delete_instances: Whether to delete instances when they are removed from the AS group.
        :param pulumi.Input[builtins.int] health_periodic_audit_grace_period: The health check grace period for instances, in seconds.
        :param pulumi.Input[builtins.int] health_periodic_audit_time: The health check period for instances, in minutes.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] instances: The instances id list in the as group.
        :param pulumi.Input[builtins.str] lb_listener_id: The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] notifications: schema: Deprecated; The notification mode has been canceled
        :param pulumi.Input[builtins.str] scaling_configuration_id: schema: Required
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AsGroupState.__new__(_AsGroupState)

        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["availability_zones"] = availability_zones
        __props__.__dict__["available_zones"] = available_zones
        __props__.__dict__["cool_down_time"] = cool_down_time
        __props__.__dict__["current_instance_number"] = current_instance_number
        __props__.__dict__["delete_instances"] = delete_instances
        __props__.__dict__["delete_publicip"] = delete_publicip
        __props__.__dict__["delete_volume"] = delete_volume
        __props__.__dict__["description"] = description
        __props__.__dict__["desire_instance_number"] = desire_instance_number
        __props__.__dict__["enable"] = enable
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["health_periodic_audit_grace_period"] = health_periodic_audit_grace_period
        __props__.__dict__["health_periodic_audit_method"] = health_periodic_audit_method
        __props__.__dict__["health_periodic_audit_time"] = health_periodic_audit_time
        __props__.__dict__["instance_terminate_policy"] = instance_terminate_policy
        __props__.__dict__["instances"] = instances
        __props__.__dict__["lb_listener_id"] = lb_listener_id
        __props__.__dict__["lbaas_listeners"] = lbaas_listeners
        __props__.__dict__["max_instance_number"] = max_instance_number
        __props__.__dict__["min_instance_number"] = min_instance_number
        __props__.__dict__["multi_az_scaling_policy"] = multi_az_scaling_policy
        __props__.__dict__["networks"] = networks
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_configuration_id"] = scaling_configuration_id
        __props__.__dict__["scaling_group_name"] = scaling_group_name
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return AsGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        schema: Deprecated; use availability_zones instead
        """
        return pulumi.get(self, "available_zones")

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The cooling duration, in seconds.
        """
        return pulumi.get(self, "cool_down_time")

    @property
    @pulumi.getter(name="currentInstanceNumber")
    def current_instance_number(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "current_instance_number")

    @property
    @pulumi.getter(name="deleteInstances")
    def delete_instances(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Whether to delete instances when they are removed from the AS group.
        """
        return pulumi.get(self, "delete_instances")

    @property
    @pulumi.getter(name="deletePublicip")
    def delete_publicip(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "delete_publicip")

    @property
    @pulumi.getter(name="deleteVolume")
    def delete_volume(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "delete_volume")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desireInstanceNumber")
    def desire_instance_number(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "desire_instance_number")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="healthPeriodicAuditGracePeriod")
    def health_periodic_audit_grace_period(self) -> pulumi.Output[builtins.int]:
        """
        The health check grace period for instances, in seconds.
        """
        return pulumi.get(self, "health_periodic_audit_grace_period")

    @property
    @pulumi.getter(name="healthPeriodicAuditMethod")
    def health_periodic_audit_method(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "health_periodic_audit_method")

    @property
    @pulumi.getter(name="healthPeriodicAuditTime")
    def health_periodic_audit_time(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The health check period for instances, in minutes.
        """
        return pulumi.get(self, "health_periodic_audit_time")

    @property
    @pulumi.getter(name="instanceTerminatePolicy")
    def instance_terminate_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "instance_terminate_policy")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The instances id list in the as group.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="lbListenerId")
    @_utilities.deprecated("""use lbaas_listeners instead""")
    def lb_listener_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        """
        return pulumi.get(self, "lb_listener_id")

    @property
    @pulumi.getter(name="lbaasListeners")
    def lbaas_listeners(self) -> pulumi.Output[Sequence['outputs.AsGroupLbaasListener']]:
        return pulumi.get(self, "lbaas_listeners")

    @property
    @pulumi.getter(name="maxInstanceNumber")
    def max_instance_number(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "max_instance_number")

    @property
    @pulumi.getter(name="minInstanceNumber")
    def min_instance_number(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "min_instance_number")

    @property
    @pulumi.getter(name="multiAzScalingPolicy")
    def multi_az_scaling_policy(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "multi_az_scaling_policy")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Sequence['outputs.AsGroupNetwork']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        schema: Deprecated; The notification mode has been canceled
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="scalingConfigurationId")
    def scaling_configuration_id(self) -> pulumi.Output[builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "scaling_configuration_id")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence['outputs.AsGroupSecurityGroup']]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

