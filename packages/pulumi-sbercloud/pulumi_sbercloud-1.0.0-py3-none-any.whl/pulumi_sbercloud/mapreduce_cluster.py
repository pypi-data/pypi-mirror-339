# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MapreduceClusterArgs', 'MapreduceCluster']

@pulumi.input_type
class MapreduceClusterArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[builtins.str],
                 component_lists: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 manager_admin_pass: pulumi.Input[builtins.str],
                 master_nodes: pulumi.Input['MapreduceClusterMasterNodesArgs'],
                 subnet_id: pulumi.Input[builtins.str],
                 version: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 analysis_core_nodes: Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']] = None,
                 analysis_task_nodes: Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']] = None,
                 bootstrap_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 component_configs: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]] = None,
                 custom_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]] = None,
                 eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 external_datasources: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]] = None,
                 log_collection: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 node_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 node_key_pair: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 smn_notify: Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']] = None,
                 streaming_core_nodes: Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']] = None,
                 streaming_task_nodes: Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 template_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a MapreduceCluster resource.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "component_lists", component_lists)
        pulumi.set(__self__, "manager_admin_pass", manager_admin_pass)
        pulumi.set(__self__, "master_nodes", master_nodes)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if analysis_core_nodes is not None:
            pulumi.set(__self__, "analysis_core_nodes", analysis_core_nodes)
        if analysis_task_nodes is not None:
            pulumi.set(__self__, "analysis_task_nodes", analysis_task_nodes)
        if bootstrap_scripts is not None:
            pulumi.set(__self__, "bootstrap_scripts", bootstrap_scripts)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if component_configs is not None:
            pulumi.set(__self__, "component_configs", component_configs)
        if custom_nodes is not None:
            pulumi.set(__self__, "custom_nodes", custom_nodes)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if external_datasources is not None:
            pulumi.set(__self__, "external_datasources", external_datasources)
        if log_collection is not None:
            pulumi.set(__self__, "log_collection", log_collection)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_admin_pass is not None:
            pulumi.set(__self__, "node_admin_pass", node_admin_pass)
        if node_key_pair is not None:
            pulumi.set(__self__, "node_key_pair", node_key_pair)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if safe_mode is not None:
            pulumi.set(__self__, "safe_mode", safe_mode)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if smn_notify is not None:
            pulumi.set(__self__, "smn_notify", smn_notify)
        if streaming_core_nodes is not None:
            pulumi.set(__self__, "streaming_core_nodes", streaming_core_nodes)
        if streaming_task_nodes is not None:
            pulumi.set(__self__, "streaming_task_nodes", streaming_task_nodes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "component_lists")

    @component_lists.setter
    def component_lists(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "component_lists", value)

    @property
    @pulumi.getter(name="managerAdminPass")
    def manager_admin_pass(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "manager_admin_pass")

    @manager_admin_pass.setter
    def manager_admin_pass(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "manager_admin_pass", value)

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> pulumi.Input['MapreduceClusterMasterNodesArgs']:
        return pulumi.get(self, "master_nodes")

    @master_nodes.setter
    def master_nodes(self, value: pulumi.Input['MapreduceClusterMasterNodesArgs']):
        pulumi.set(self, "master_nodes", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="analysisCoreNodes")
    def analysis_core_nodes(self) -> Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']]:
        return pulumi.get(self, "analysis_core_nodes")

    @analysis_core_nodes.setter
    def analysis_core_nodes(self, value: Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']]):
        pulumi.set(self, "analysis_core_nodes", value)

    @property
    @pulumi.getter(name="analysisTaskNodes")
    def analysis_task_nodes(self) -> Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']]:
        return pulumi.get(self, "analysis_task_nodes")

    @analysis_task_nodes.setter
    def analysis_task_nodes(self, value: Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']]):
        pulumi.set(self, "analysis_task_nodes", value)

    @property
    @pulumi.getter(name="bootstrapScripts")
    def bootstrap_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]]:
        return pulumi.get(self, "bootstrap_scripts")

    @bootstrap_scripts.setter
    def bootstrap_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]]):
        pulumi.set(self, "bootstrap_scripts", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="componentConfigs")
    def component_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]]:
        return pulumi.get(self, "component_configs")

    @component_configs.setter
    def component_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]]):
        pulumi.set(self, "component_configs", value)

    @property
    @pulumi.getter(name="customNodes")
    def custom_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]]:
        return pulumi.get(self, "custom_nodes")

    @custom_nodes.setter
    def custom_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]]):
        pulumi.set(self, "custom_nodes", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="externalDatasources")
    def external_datasources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]]:
        return pulumi.get(self, "external_datasources")

    @external_datasources.setter
    def external_datasources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]]):
        pulumi.set(self, "external_datasources", value)

    @property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "log_collection")

    @log_collection.setter
    def log_collection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_collection", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeAdminPass")
    def node_admin_pass(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "node_admin_pass")

    @node_admin_pass.setter
    def node_admin_pass(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_admin_pass", value)

    @property
    @pulumi.getter(name="nodeKeyPair")
    def node_key_pair(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "node_key_pair")

    @node_key_pair.setter
    def node_key_pair(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_key_pair", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "safe_mode")

    @safe_mode.setter
    def safe_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "safe_mode", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']]:
        return pulumi.get(self, "smn_notify")

    @smn_notify.setter
    def smn_notify(self, value: Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']]):
        pulumi.set(self, "smn_notify", value)

    @property
    @pulumi.getter(name="streamingCoreNodes")
    def streaming_core_nodes(self) -> Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']]:
        return pulumi.get(self, "streaming_core_nodes")

    @streaming_core_nodes.setter
    def streaming_core_nodes(self, value: Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']]):
        pulumi.set(self, "streaming_core_nodes", value)

    @property
    @pulumi.getter(name="streamingTaskNodes")
    def streaming_task_nodes(self) -> Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']]:
        return pulumi.get(self, "streaming_task_nodes")

    @streaming_task_nodes.setter
    def streaming_task_nodes(self, value: Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']]):
        pulumi.set(self, "streaming_task_nodes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _MapreduceClusterState:
    def __init__(__self__, *,
                 analysis_core_nodes: Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']] = None,
                 analysis_task_nodes: Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 bootstrap_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 charging_start_time: Optional[pulumi.Input[builtins.str]] = None,
                 component_configs: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 custom_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]] = None,
                 eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 external_datasources: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]] = None,
                 log_collection: Optional[pulumi.Input[builtins.bool]] = None,
                 manager_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 master_node_ip: Optional[pulumi.Input[builtins.str]] = None,
                 master_nodes: Optional[pulumi.Input['MapreduceClusterMasterNodesArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 node_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 node_key_pair: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 smn_notify: Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 streaming_core_nodes: Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']] = None,
                 streaming_task_nodes: Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 template_id: Optional[pulumi.Input[builtins.str]] = None,
                 total_node_number: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering MapreduceCluster resources.
        """
        if analysis_core_nodes is not None:
            pulumi.set(__self__, "analysis_core_nodes", analysis_core_nodes)
        if analysis_task_nodes is not None:
            pulumi.set(__self__, "analysis_task_nodes", analysis_task_nodes)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bootstrap_scripts is not None:
            pulumi.set(__self__, "bootstrap_scripts", bootstrap_scripts)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if charging_start_time is not None:
            pulumi.set(__self__, "charging_start_time", charging_start_time)
        if component_configs is not None:
            pulumi.set(__self__, "component_configs", component_configs)
        if component_lists is not None:
            pulumi.set(__self__, "component_lists", component_lists)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_nodes is not None:
            pulumi.set(__self__, "custom_nodes", custom_nodes)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if external_datasources is not None:
            pulumi.set(__self__, "external_datasources", external_datasources)
        if log_collection is not None:
            pulumi.set(__self__, "log_collection", log_collection)
        if manager_admin_pass is not None:
            pulumi.set(__self__, "manager_admin_pass", manager_admin_pass)
        if master_node_ip is not None:
            pulumi.set(__self__, "master_node_ip", master_node_ip)
        if master_nodes is not None:
            pulumi.set(__self__, "master_nodes", master_nodes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_admin_pass is not None:
            pulumi.set(__self__, "node_admin_pass", node_admin_pass)
        if node_key_pair is not None:
            pulumi.set(__self__, "node_key_pair", node_key_pair)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if safe_mode is not None:
            pulumi.set(__self__, "safe_mode", safe_mode)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if smn_notify is not None:
            pulumi.set(__self__, "smn_notify", smn_notify)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if streaming_core_nodes is not None:
            pulumi.set(__self__, "streaming_core_nodes", streaming_core_nodes)
        if streaming_task_nodes is not None:
            pulumi.set(__self__, "streaming_task_nodes", streaming_task_nodes)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if total_node_number is not None:
            pulumi.set(__self__, "total_node_number", total_node_number)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="analysisCoreNodes")
    def analysis_core_nodes(self) -> Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']]:
        return pulumi.get(self, "analysis_core_nodes")

    @analysis_core_nodes.setter
    def analysis_core_nodes(self, value: Optional[pulumi.Input['MapreduceClusterAnalysisCoreNodesArgs']]):
        pulumi.set(self, "analysis_core_nodes", value)

    @property
    @pulumi.getter(name="analysisTaskNodes")
    def analysis_task_nodes(self) -> Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']]:
        return pulumi.get(self, "analysis_task_nodes")

    @analysis_task_nodes.setter
    def analysis_task_nodes(self, value: Optional[pulumi.Input['MapreduceClusterAnalysisTaskNodesArgs']]):
        pulumi.set(self, "analysis_task_nodes", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bootstrapScripts")
    def bootstrap_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]]:
        return pulumi.get(self, "bootstrap_scripts")

    @bootstrap_scripts.setter
    def bootstrap_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterBootstrapScriptArgs']]]]):
        pulumi.set(self, "bootstrap_scripts", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="chargingStartTime")
    def charging_start_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "charging_start_time")

    @charging_start_time.setter
    def charging_start_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charging_start_time", value)

    @property
    @pulumi.getter(name="componentConfigs")
    def component_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]]:
        return pulumi.get(self, "component_configs")

    @component_configs.setter
    def component_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterComponentConfigArgs']]]]):
        pulumi.set(self, "component_configs", value)

    @property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "component_lists")

    @component_lists.setter
    def component_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "component_lists", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="customNodes")
    def custom_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]]:
        return pulumi.get(self, "custom_nodes")

    @custom_nodes.setter
    def custom_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterCustomNodeArgs']]]]):
        pulumi.set(self, "custom_nodes", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="externalDatasources")
    def external_datasources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]]:
        return pulumi.get(self, "external_datasources")

    @external_datasources.setter
    def external_datasources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MapreduceClusterExternalDatasourceArgs']]]]):
        pulumi.set(self, "external_datasources", value)

    @property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "log_collection")

    @log_collection.setter
    def log_collection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_collection", value)

    @property
    @pulumi.getter(name="managerAdminPass")
    def manager_admin_pass(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "manager_admin_pass")

    @manager_admin_pass.setter
    def manager_admin_pass(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "manager_admin_pass", value)

    @property
    @pulumi.getter(name="masterNodeIp")
    def master_node_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "master_node_ip")

    @master_node_ip.setter
    def master_node_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "master_node_ip", value)

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> Optional[pulumi.Input['MapreduceClusterMasterNodesArgs']]:
        return pulumi.get(self, "master_nodes")

    @master_nodes.setter
    def master_nodes(self, value: Optional[pulumi.Input['MapreduceClusterMasterNodesArgs']]):
        pulumi.set(self, "master_nodes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeAdminPass")
    def node_admin_pass(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "node_admin_pass")

    @node_admin_pass.setter
    def node_admin_pass(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_admin_pass", value)

    @property
    @pulumi.getter(name="nodeKeyPair")
    def node_key_pair(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "node_key_pair")

    @node_key_pair.setter
    def node_key_pair(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_key_pair", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "safe_mode")

    @safe_mode.setter
    def safe_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "safe_mode", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']]:
        return pulumi.get(self, "smn_notify")

    @smn_notify.setter
    def smn_notify(self, value: Optional[pulumi.Input['MapreduceClusterSmnNotifyArgs']]):
        pulumi.set(self, "smn_notify", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamingCoreNodes")
    def streaming_core_nodes(self) -> Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']]:
        return pulumi.get(self, "streaming_core_nodes")

    @streaming_core_nodes.setter
    def streaming_core_nodes(self, value: Optional[pulumi.Input['MapreduceClusterStreamingCoreNodesArgs']]):
        pulumi.set(self, "streaming_core_nodes", value)

    @property
    @pulumi.getter(name="streamingTaskNodes")
    def streaming_task_nodes(self) -> Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']]:
        return pulumi.get(self, "streaming_task_nodes")

    @streaming_task_nodes.setter
    def streaming_task_nodes(self, value: Optional[pulumi.Input['MapreduceClusterStreamingTaskNodesArgs']]):
        pulumi.set(self, "streaming_task_nodes", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="totalNodeNumber")
    def total_node_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "total_node_number")

    @total_node_number.setter
    def total_node_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "total_node_number", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class MapreduceCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analysis_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisCoreNodesArgs', 'MapreduceClusterAnalysisCoreNodesArgsDict']]] = None,
                 analysis_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisTaskNodesArgs', 'MapreduceClusterAnalysisTaskNodesArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 bootstrap_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterBootstrapScriptArgs', 'MapreduceClusterBootstrapScriptArgsDict']]]]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 component_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterComponentConfigArgs', 'MapreduceClusterComponentConfigArgsDict']]]]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterCustomNodeArgs', 'MapreduceClusterCustomNodeArgsDict']]]]] = None,
                 eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 external_datasources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterExternalDatasourceArgs', 'MapreduceClusterExternalDatasourceArgsDict']]]]] = None,
                 log_collection: Optional[pulumi.Input[builtins.bool]] = None,
                 manager_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 master_nodes: Optional[pulumi.Input[Union['MapreduceClusterMasterNodesArgs', 'MapreduceClusterMasterNodesArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 node_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 node_key_pair: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 smn_notify: Optional[pulumi.Input[Union['MapreduceClusterSmnNotifyArgs', 'MapreduceClusterSmnNotifyArgsDict']]] = None,
                 streaming_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingCoreNodesArgs', 'MapreduceClusterStreamingCoreNodesArgsDict']]] = None,
                 streaming_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingTaskNodesArgs', 'MapreduceClusterStreamingTaskNodesArgsDict']]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 template_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a MapreduceCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MapreduceClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MapreduceCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MapreduceClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MapreduceClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analysis_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisCoreNodesArgs', 'MapreduceClusterAnalysisCoreNodesArgsDict']]] = None,
                 analysis_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisTaskNodesArgs', 'MapreduceClusterAnalysisTaskNodesArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 bootstrap_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterBootstrapScriptArgs', 'MapreduceClusterBootstrapScriptArgsDict']]]]] = None,
                 charging_mode: Optional[pulumi.Input[builtins.str]] = None,
                 component_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterComponentConfigArgs', 'MapreduceClusterComponentConfigArgsDict']]]]] = None,
                 component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterCustomNodeArgs', 'MapreduceClusterCustomNodeArgsDict']]]]] = None,
                 eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 external_datasources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterExternalDatasourceArgs', 'MapreduceClusterExternalDatasourceArgsDict']]]]] = None,
                 log_collection: Optional[pulumi.Input[builtins.bool]] = None,
                 manager_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 master_nodes: Optional[pulumi.Input[Union['MapreduceClusterMasterNodesArgs', 'MapreduceClusterMasterNodesArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 node_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
                 node_key_pair: Optional[pulumi.Input[builtins.str]] = None,
                 period: Optional[pulumi.Input[builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 safe_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 smn_notify: Optional[pulumi.Input[Union['MapreduceClusterSmnNotifyArgs', 'MapreduceClusterSmnNotifyArgsDict']]] = None,
                 streaming_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingCoreNodesArgs', 'MapreduceClusterStreamingCoreNodesArgsDict']]] = None,
                 streaming_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingTaskNodesArgs', 'MapreduceClusterStreamingTaskNodesArgsDict']]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 template_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MapreduceClusterArgs.__new__(MapreduceClusterArgs)

            __props__.__dict__["analysis_core_nodes"] = analysis_core_nodes
            __props__.__dict__["analysis_task_nodes"] = analysis_task_nodes
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["bootstrap_scripts"] = bootstrap_scripts
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["component_configs"] = component_configs
            if component_lists is None and not opts.urn:
                raise TypeError("Missing required property 'component_lists'")
            __props__.__dict__["component_lists"] = component_lists
            __props__.__dict__["custom_nodes"] = custom_nodes
            __props__.__dict__["eip_id"] = eip_id
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["external_datasources"] = external_datasources
            __props__.__dict__["log_collection"] = log_collection
            if manager_admin_pass is None and not opts.urn:
                raise TypeError("Missing required property 'manager_admin_pass'")
            __props__.__dict__["manager_admin_pass"] = None if manager_admin_pass is None else pulumi.Output.secret(manager_admin_pass)
            if master_nodes is None and not opts.urn:
                raise TypeError("Missing required property 'master_nodes'")
            __props__.__dict__["master_nodes"] = master_nodes
            __props__.__dict__["name"] = name
            __props__.__dict__["node_admin_pass"] = None if node_admin_pass is None else pulumi.Output.secret(node_admin_pass)
            __props__.__dict__["node_key_pair"] = node_key_pair
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["public_ip"] = public_ip
            __props__.__dict__["region"] = region
            __props__.__dict__["safe_mode"] = safe_mode
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["smn_notify"] = smn_notify
            __props__.__dict__["streaming_core_nodes"] = streaming_core_nodes
            __props__.__dict__["streaming_task_nodes"] = streaming_task_nodes
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["type"] = type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["charging_start_time"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["master_node_ip"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["total_node_number"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["managerAdminPass", "nodeAdminPass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MapreduceCluster, __self__).__init__(
            'sbercloud:index/mapreduceCluster:MapreduceCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            analysis_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisCoreNodesArgs', 'MapreduceClusterAnalysisCoreNodesArgsDict']]] = None,
            analysis_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterAnalysisTaskNodesArgs', 'MapreduceClusterAnalysisTaskNodesArgsDict']]] = None,
            availability_zone: Optional[pulumi.Input[builtins.str]] = None,
            bootstrap_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterBootstrapScriptArgs', 'MapreduceClusterBootstrapScriptArgsDict']]]]] = None,
            charging_mode: Optional[pulumi.Input[builtins.str]] = None,
            charging_start_time: Optional[pulumi.Input[builtins.str]] = None,
            component_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterComponentConfigArgs', 'MapreduceClusterComponentConfigArgsDict']]]]] = None,
            component_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            create_time: Optional[pulumi.Input[builtins.str]] = None,
            custom_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterCustomNodeArgs', 'MapreduceClusterCustomNodeArgsDict']]]]] = None,
            eip_id: Optional[pulumi.Input[builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            external_datasources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MapreduceClusterExternalDatasourceArgs', 'MapreduceClusterExternalDatasourceArgsDict']]]]] = None,
            log_collection: Optional[pulumi.Input[builtins.bool]] = None,
            manager_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
            master_node_ip: Optional[pulumi.Input[builtins.str]] = None,
            master_nodes: Optional[pulumi.Input[Union['MapreduceClusterMasterNodesArgs', 'MapreduceClusterMasterNodesArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            node_admin_pass: Optional[pulumi.Input[builtins.str]] = None,
            node_key_pair: Optional[pulumi.Input[builtins.str]] = None,
            period: Optional[pulumi.Input[builtins.int]] = None,
            period_unit: Optional[pulumi.Input[builtins.str]] = None,
            private_ip: Optional[pulumi.Input[builtins.str]] = None,
            public_ip: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            safe_mode: Optional[pulumi.Input[builtins.bool]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            smn_notify: Optional[pulumi.Input[Union['MapreduceClusterSmnNotifyArgs', 'MapreduceClusterSmnNotifyArgsDict']]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            streaming_core_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingCoreNodesArgs', 'MapreduceClusterStreamingCoreNodesArgsDict']]] = None,
            streaming_task_nodes: Optional[pulumi.Input[Union['MapreduceClusterStreamingTaskNodesArgs', 'MapreduceClusterStreamingTaskNodesArgsDict']]] = None,
            subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            template_id: Optional[pulumi.Input[builtins.str]] = None,
            total_node_number: Optional[pulumi.Input[builtins.int]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'MapreduceCluster':
        """
        Get an existing MapreduceCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MapreduceClusterState.__new__(_MapreduceClusterState)

        __props__.__dict__["analysis_core_nodes"] = analysis_core_nodes
        __props__.__dict__["analysis_task_nodes"] = analysis_task_nodes
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["bootstrap_scripts"] = bootstrap_scripts
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["charging_start_time"] = charging_start_time
        __props__.__dict__["component_configs"] = component_configs
        __props__.__dict__["component_lists"] = component_lists
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["custom_nodes"] = custom_nodes
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["external_datasources"] = external_datasources
        __props__.__dict__["log_collection"] = log_collection
        __props__.__dict__["manager_admin_pass"] = manager_admin_pass
        __props__.__dict__["master_node_ip"] = master_node_ip
        __props__.__dict__["master_nodes"] = master_nodes
        __props__.__dict__["name"] = name
        __props__.__dict__["node_admin_pass"] = node_admin_pass
        __props__.__dict__["node_key_pair"] = node_key_pair
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["safe_mode"] = safe_mode
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["smn_notify"] = smn_notify
        __props__.__dict__["status"] = status
        __props__.__dict__["streaming_core_nodes"] = streaming_core_nodes
        __props__.__dict__["streaming_task_nodes"] = streaming_task_nodes
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["total_node_number"] = total_node_number
        __props__.__dict__["type"] = type
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        return MapreduceCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="analysisCoreNodes")
    def analysis_core_nodes(self) -> pulumi.Output[Optional['outputs.MapreduceClusterAnalysisCoreNodes']]:
        return pulumi.get(self, "analysis_core_nodes")

    @property
    @pulumi.getter(name="analysisTaskNodes")
    def analysis_task_nodes(self) -> pulumi.Output[Optional['outputs.MapreduceClusterAnalysisTaskNodes']]:
        return pulumi.get(self, "analysis_task_nodes")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bootstrapScripts")
    def bootstrap_scripts(self) -> pulumi.Output[Optional[Sequence['outputs.MapreduceClusterBootstrapScript']]]:
        return pulumi.get(self, "bootstrap_scripts")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter(name="chargingStartTime")
    def charging_start_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "charging_start_time")

    @property
    @pulumi.getter(name="componentConfigs")
    def component_configs(self) -> pulumi.Output[Optional[Sequence['outputs.MapreduceClusterComponentConfig']]]:
        return pulumi.get(self, "component_configs")

    @property
    @pulumi.getter(name="componentLists")
    def component_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "component_lists")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customNodes")
    def custom_nodes(self) -> pulumi.Output[Optional[Sequence['outputs.MapreduceClusterCustomNode']]]:
        return pulumi.get(self, "custom_nodes")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="externalDatasources")
    def external_datasources(self) -> pulumi.Output[Optional[Sequence['outputs.MapreduceClusterExternalDatasource']]]:
        return pulumi.get(self, "external_datasources")

    @property
    @pulumi.getter(name="logCollection")
    def log_collection(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "log_collection")

    @property
    @pulumi.getter(name="managerAdminPass")
    def manager_admin_pass(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "manager_admin_pass")

    @property
    @pulumi.getter(name="masterNodeIp")
    def master_node_ip(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "master_node_ip")

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> pulumi.Output['outputs.MapreduceClusterMasterNodes']:
        return pulumi.get(self, "master_nodes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeAdminPass")
    def node_admin_pass(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "node_admin_pass")

    @property
    @pulumi.getter(name="nodeKeyPair")
    def node_key_pair(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "node_key_pair")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="safeMode")
    def safe_mode(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "safe_mode")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="smnNotify")
    def smn_notify(self) -> pulumi.Output[Optional['outputs.MapreduceClusterSmnNotify']]:
        return pulumi.get(self, "smn_notify")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamingCoreNodes")
    def streaming_core_nodes(self) -> pulumi.Output[Optional['outputs.MapreduceClusterStreamingCoreNodes']]:
        return pulumi.get(self, "streaming_core_nodes")

    @property
    @pulumi.getter(name="streamingTaskNodes")
    def streaming_task_nodes(self) -> pulumi.Output[Optional['outputs.MapreduceClusterStreamingTaskNodes']]:
        return pulumi.get(self, "streaming_task_nodes")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="totalNodeNumber")
    def total_node_number(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "total_node_number")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

