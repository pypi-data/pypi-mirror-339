# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AomServiceDiscoveryRuleDiscoveryRule',
    'AomServiceDiscoveryRuleLogPathRule',
    'AomServiceDiscoveryRuleNameRules',
    'AomServiceDiscoveryRuleNameRulesApplicationNameRule',
    'AomServiceDiscoveryRuleNameRulesServiceNameRule',
    'ApiGatewayApiBackendParam',
    'ApiGatewayApiFuncGraph',
    'ApiGatewayApiFuncGraphPolicy',
    'ApiGatewayApiFuncGraphPolicyBackendParam',
    'ApiGatewayApiFuncGraphPolicyCondition',
    'ApiGatewayApiMock',
    'ApiGatewayApiMockPolicy',
    'ApiGatewayApiMockPolicyBackendParam',
    'ApiGatewayApiMockPolicyCondition',
    'ApiGatewayApiRequestParam',
    'ApiGatewayApiWeb',
    'ApiGatewayApiWebPolicy',
    'ApiGatewayApiWebPolicyBackendParam',
    'ApiGatewayApiWebPolicyCondition',
    'ApiGatewayGroupEnvironment',
    'ApiGatewayGroupEnvironmentVariable',
    'ApiGatewayGroupUrlDomain',
    'ApigApiBackendParam',
    'ApigApiFuncGraph',
    'ApigApiFuncGraphPolicy',
    'ApigApiFuncGraphPolicyBackendParam',
    'ApigApiFuncGraphPolicyCondition',
    'ApigApiMock',
    'ApigApiMockPolicy',
    'ApigApiMockPolicyBackendParam',
    'ApigApiMockPolicyCondition',
    'ApigApiPublishmentHistory',
    'ApigApiRequestParam',
    'ApigApiWeb',
    'ApigApiWebPolicy',
    'ApigApiWebPolicyBackendParam',
    'ApigApiWebPolicyCondition',
    'ApigApplicationQuotaAssociateApplication',
    'ApigChannelHealthCheck',
    'ApigChannelMember',
    'ApigChannelMemberGroup',
    'ApigChannelMicroservice',
    'ApigChannelMicroserviceCceConfig',
    'ApigChannelMicroserviceCseConfig',
    'ApigCustomAuthorizerIdentity',
    'ApigGroupEnvironment',
    'ApigGroupEnvironmentVariable',
    'ApigGroupUrlDomain',
    'ApigInstanceCustomIngressPort',
    'ApigResponseRule',
    'ApigResponseRuleHeader',
    'ApigThrottlingPolicyAppThrottle',
    'ApigThrottlingPolicyUserThrottle',
    'AsBandwidthPolicyScalingPolicyAction',
    'AsBandwidthPolicyScheduledPolicy',
    'AsConfigurationInstanceConfig',
    'AsConfigurationInstanceConfigDisk',
    'AsConfigurationInstanceConfigPersonality',
    'AsConfigurationInstanceConfigPublicIp',
    'AsConfigurationInstanceConfigPublicIpEip',
    'AsConfigurationInstanceConfigPublicIpEipBandwidth',
    'AsGroupLbaasListener',
    'AsGroupNetwork',
    'AsGroupSecurityGroup',
    'AsPolicyScalingPolicyAction',
    'AsPolicyScheduledPolicy',
    'CbrBackupShareMember',
    'CbrCheckpointBackup',
    'CbrPolicyBackupCycle',
    'CbrPolicyLongTermRetention',
    'CbrVaultPolicy',
    'CbrVaultResource',
    'CceAddonValues',
    'CceClusterCertificateCluster',
    'CceClusterCertificateUser',
    'CceClusterComponentConfiguration',
    'CceClusterExtendParam',
    'CceClusterMaster',
    'CceNodeAttachDataVolume',
    'CceNodeAttachHostnameConfig',
    'CceNodeAttachRootVolume',
    'CceNodeAttachStorage',
    'CceNodeAttachStorageGroup',
    'CceNodeAttachStorageGroupVirtualSpace',
    'CceNodeAttachStorageSelector',
    'CceNodeAttachTaint',
    'CceNodeDataVolume',
    'CceNodeExtendParams',
    'CceNodeExtensionNic',
    'CceNodeHostnameConfig',
    'CceNodePoolDataVolume',
    'CceNodePoolExtendParams',
    'CceNodePoolExtensionScaleGroup',
    'CceNodePoolExtensionScaleGroupMetadata',
    'CceNodePoolExtensionScaleGroupSpec',
    'CceNodePoolExtensionScaleGroupSpecAutoscaling',
    'CceNodePoolExtensionScaleGroupSpecCapacityReservationSpecification',
    'CceNodePoolHostnameConfig',
    'CceNodePoolRootVolume',
    'CceNodePoolStorage',
    'CceNodePoolStorageGroup',
    'CceNodePoolStorageGroupVirtualSpace',
    'CceNodePoolStorageSelector',
    'CceNodePoolTaint',
    'CceNodeRootVolume',
    'CceNodeStorage',
    'CceNodeStorageGroup',
    'CceNodeStorageGroupVirtualSpace',
    'CceNodeStorageSelector',
    'CceNodeTaint',
    'CdmClusterInstance',
    'CesAlarmruleAlarmAction',
    'CesAlarmruleCondition',
    'CesAlarmruleInsufficientdataAction',
    'CesAlarmruleMetric',
    'CesAlarmruleMetricDimension',
    'CesAlarmruleOkAction',
    'ComputeInstanceBandwidth',
    'ComputeInstanceDataDisk',
    'ComputeInstanceNetwork',
    'ComputeInstanceSchedulerHint',
    'ComputeInstanceVolumeAttached',
    'CssClusterBackupStrategy',
    'CssClusterNode',
    'CssClusterNodeConfig',
    'CssClusterNodeConfigNetworkInfo',
    'CssClusterNodeConfigVolume',
    'CtsNotificationFilter',
    'CtsNotificationOperation',
    'CtsNotificationOperationUser',
    'DcsInstanceBackupPolicy',
    'DcsInstanceBandwidthInfo',
    'DcsInstanceParameter',
    'DcsInstanceWhitelist',
    'DcsParametersConfigurationParameter',
    'DcsRestoreRestoreRecord',
    'DdsInstanceBackupStrategy',
    'DdsInstanceConfiguration',
    'DdsInstanceDatastore',
    'DdsInstanceFlavor',
    'DdsInstanceGroup',
    'DdsInstanceGroupNode',
    'DdsInstanceNode',
    'DisStreamPartition',
    'DliQueueScalingPolicy',
    'DliQueueSparkDriver',
    'DliSparkJobDependentPackage',
    'DliSparkJobDependentPackagePackage',
    'DmsKafkaInstanceCrossVpcAccess',
    'DmsKafkaInstanceParameter',
    'DmsKafkaInstancePortProtocol',
    'DmsKafkaMessageProducePropertyList',
    'DmsKafkaPermissionsPolicy',
    'DmsKafkaTopicConfig',
    'DnsZoneRouter',
    'DrsJobDestinationDb',
    'DrsJobLimitSpeed',
    'DrsJobSourceDb',
    'DwsClusterElb',
    'DwsClusterEndpoint',
    'DwsClusterMaintainWindow',
    'DwsClusterPublicEndpoint',
    'DwsClusterPublicIp',
    'DwsClusterVolume',
    'ElbIpgroupIpList',
    'ElbL7policyFixedResponseConfig',
    'ElbL7policyFixedResponseConfigInsertHeadersConfig',
    'ElbL7policyFixedResponseConfigInsertHeadersConfigConfig',
    'ElbL7policyFixedResponseConfigRemoveHeadersConfig',
    'ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig',
    'ElbL7policyFixedResponseConfigTrafficLimitConfig',
    'ElbL7policyRedirectPoolsConfig',
    'ElbL7policyRedirectPoolsExtendConfig',
    'ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig',
    'ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig',
    'ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig',
    'ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig',
    'ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig',
    'ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig',
    'ElbL7policyRedirectPoolsStickySessionConfig',
    'ElbL7policyRedirectUrlConfig',
    'ElbL7policyRedirectUrlConfigInsertHeadersConfig',
    'ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig',
    'ElbL7policyRedirectUrlConfigRemoveHeadersConfig',
    'ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig',
    'ElbL7ruleCondition',
    'ElbListenerPortRange',
    'ElbPoolPersistence',
    'ElbSecurityPolicyListener',
    'EvsVolumeAttachment',
    'FgsFunctionCustomImage',
    'FgsFunctionFuncMount',
    'FgsFunctionNetworkController',
    'FgsFunctionNetworkControllerTriggerAccessVpc',
    'FgsFunctionReservedInstance',
    'FgsFunctionReservedInstanceTacticsConfig',
    'FgsFunctionReservedInstanceTacticsConfigCronConfig',
    'FgsFunctionReservedInstanceTacticsConfigMetricConfig',
    'FgsFunctionVersion',
    'FgsFunctionVersionAliases',
    'GesGraphEncryption',
    'GesGraphLtsOperationTrace',
    'GesGraphPublicIp',
    'GesGraphVertexIdType',
    'IdentityAclIpCidr',
    'IdentityAclIpRange',
    'IdentityAgencyProjectRole',
    'IdentityProviderAccessConfig',
    'IdentityProviderConversionConversionRule',
    'IdentityProviderConversionConversionRuleLocal',
    'IdentityProviderConversionConversionRuleRemote',
    'IdentityProviderConversionRule',
    'IdentityProviderConversionRuleLocal',
    'IdentityProviderConversionRuleRemote',
    'LbPoolPersistence',
    'MapreduceClusterAnalysisCoreNodes',
    'MapreduceClusterAnalysisTaskNodes',
    'MapreduceClusterBootstrapScript',
    'MapreduceClusterComponentConfig',
    'MapreduceClusterComponentConfigConfig',
    'MapreduceClusterCustomNode',
    'MapreduceClusterExternalDatasource',
    'MapreduceClusterMasterNodes',
    'MapreduceClusterSmnNotify',
    'MapreduceClusterStreamingCoreNodes',
    'MapreduceClusterStreamingTaskNodes',
    'NatGatewaySessionConf',
    'NetworkingSecgroupRule',
    'ObsBucketAclAccountPermission',
    'ObsBucketAclLogDeliveryUserPermission',
    'ObsBucketAclOwnerPermission',
    'ObsBucketAclPublicPermission',
    'ObsBucketCorsRule',
    'ObsBucketLifecycleRule',
    'ObsBucketLifecycleRuleAbortIncompleteMultipartUpload',
    'ObsBucketLifecycleRuleExpiration',
    'ObsBucketLifecycleRuleNoncurrentVersionExpiration',
    'ObsBucketLifecycleRuleNoncurrentVersionTransition',
    'ObsBucketLifecycleRuleTransition',
    'ObsBucketLogging',
    'ObsBucketStorageInfo',
    'ObsBucketWebsite',
    'RdsBackupDatabase',
    'RdsInstanceBackupStrategy',
    'RdsInstanceDb',
    'RdsInstanceMsdtcHost',
    'RdsInstanceNode',
    'RdsInstanceParameter',
    'RdsInstanceRestore',
    'RdsInstanceVolume',
    'RdsMysqlDatabasePrivilegeUser',
    'RdsMysqlDatabaseTableRestoreDatabase',
    'RdsMysqlDatabaseTableRestoreRestoreTable',
    'RdsMysqlDatabaseTableRestoreRestoreTableTable',
    'RdsParametergroupConfigurationParameter',
    'RdsParametergroupDatastore',
    'RdsPgAccountAttribute',
    'RdsPgHbaHostBasedAuthentication',
    'RdsReadReplicaInstanceDb',
    'RdsReadReplicaInstanceParameter',
    'RdsReadReplicaInstanceVolume',
    'RdsSqlserverDatabasePrivilegeUser',
    'SfsFileSystemAccessRule',
    'SfsTurboDuTaskDirUsage',
    'SfsTurboDuTaskDirUsageFileCount',
    'SfsTurboObsTargetObs',
    'SmnSubscriptionExtension',
    'SmnSubscriptionFilterPolicy',
    'SwrOrganizationPermissionsSelfPermission',
    'SwrOrganizationPermissionsUser',
    'VpcAddressGroupIpExtraSet',
    'VpcBandwidthPublicip',
    'VpcEipBandwidth',
    'VpcEipPublicip',
    'VpcRoute',
    'VpcRouteTableRoute',
    'VpcepServiceConnection',
    'VpcepServicePortMapping',
    'VpnConnectionIkepolicy',
    'VpnConnectionIkepolicyDpd',
    'VpnConnectionIpsecpolicy',
    'VpnConnectionPolicyRule',
    'VpnGatewayCertificate',
    'VpnGatewayEip1',
    'VpnGatewayEip2',
    'VpnGatewayMasterEip',
    'VpnGatewaySlaveEip',
    'GetApigAclPoliciesPolicyResult',
    'GetApigApiAssociatedAclPoliciesPolicyResult',
    'GetApigApiAssociatedApplicationsApplicationResult',
    'GetApigApiAssociatedPluginsPluginResult',
    'GetApigApiAssociatedSignaturesSignatureResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult',
    'GetApigApiBackendParamResult',
    'GetApigApiBasicConfigurationsConfigurationResult',
    'GetApigApiFuncGraphResult',
    'GetApigApiFuncGraphPolicyResult',
    'GetApigApiFuncGraphPolicyBackendParamResult',
    'GetApigApiFuncGraphPolicyConditionResult',
    'GetApigApiMockResult',
    'GetApigApiMockPolicyResult',
    'GetApigApiMockPolicyBackendParamResult',
    'GetApigApiMockPolicyConditionResult',
    'GetApigApiRequestParamResult',
    'GetApigApiWebResult',
    'GetApigApiWebPolicyResult',
    'GetApigApiWebPolicyBackendParamResult',
    'GetApigApiWebPolicyConditionResult',
    'GetApigAppcodesAppcodeResult',
    'GetApigApplicationQuotasQuotaResult',
    'GetApigApplicationsApplicationResult',
    'GetApigChannelsVpcChannelResult',
    'GetApigChannelsVpcChannelMemberGroupResult',
    'GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult',
    'GetApigCustomAuthorizersAuthorizerResult',
    'GetApigCustomAuthorizersAuthorizerIdentityResult',
    'GetApigEndpointConnectionsConnectionResult',
    'GetApigEnvironmentVariablesVariableResult',
    'GetApigEnvironmentsEnvironmentResult',
    'GetApigGroupsGroupResult',
    'GetApigGroupsGroupEnvironmentResult',
    'GetApigGroupsGroupEnvironmentVariableResult',
    'GetApigGroupsGroupUrlDomainResult',
    'GetApigInstanceFeaturesFeatureResult',
    'GetApigInstancesInstanceResult',
    'GetApigSignaturesSignatureResult',
    'GetApigThrottlingPoliciesPolicyResult',
    'GetApigThrottlingPoliciesPolicyAppThrottleResult',
    'GetApigThrottlingPoliciesPolicyUserThrottleResult',
    'GetCbhAvailabilityZonesAvailabilityZoneResult',
    'GetCbhFlavorsFlavorResult',
    'GetCbhInstancesInstanceResult',
    'GetCbrBackupChildrenResult',
    'GetCbrBackupChildrenExtendInfoResult',
    'GetCbrBackupChildrenReplicationRecordResult',
    'GetCbrBackupChildrenReplicationRecordExtraInfoResult',
    'GetCbrBackupExtendInfoResult',
    'GetCbrBackupReplicationRecordResult',
    'GetCbrBackupReplicationRecordExtraInfoResult',
    'GetCbrPoliciesPolicyResult',
    'GetCbrPoliciesPolicyAssociatedVaultResult',
    'GetCbrPoliciesPolicyBackupCycleResult',
    'GetCbrPoliciesPolicyLongTermRetentionResult',
    'GetCbrVaultsVaultResult',
    'GetCbrVaultsVaultResourceResult',
    'GetCceAddonTemplateSupportVersionResult',
    'GetCceClusterCertificateClusterResult',
    'GetCceClusterCertificateContextResult',
    'GetCceClusterCertificateUserResult',
    'GetCceClusterEndpointResult',
    'GetCceClusterMasterResult',
    'GetCceClustersClusterResult',
    'GetCceClustersClusterCertificateClusterResult',
    'GetCceClustersClusterCertificateUserResult',
    'GetCceClustersClusterEndpointResult',
    'GetCceClustersClusterMasterResult',
    'GetCceNodeDataVolumeResult',
    'GetCceNodeHostnameConfigResult',
    'GetCceNodePoolDataVolumeResult',
    'GetCceNodePoolHostnameConfigResult',
    'GetCceNodePoolRootVolumeResult',
    'GetCceNodeRootVolumeResult',
    'GetCceNodesNodeResult',
    'GetCceNodesNodeDataVolumeResult',
    'GetCceNodesNodeHostnameConfigResult',
    'GetCceNodesNodeRootVolumeResult',
    'GetCdmFlavorsFlavorResult',
    'GetComputeFlavorsFlavorResult',
    'GetComputeInstanceNetworkResult',
    'GetComputeInstanceSchedulerHintResult',
    'GetComputeInstanceVolumeAttachedResult',
    'GetComputeInstancesInstanceResult',
    'GetComputeInstancesInstanceNetworkResult',
    'GetComputeInstancesInstanceSchedulerHintResult',
    'GetComputeInstancesInstanceVolumeAttachedResult',
    'GetComputeServergroupsServergroupResult',
    'GetCssFlavorsFlavorResult',
    'GetDcsAccountsAccountResult',
    'GetDcsFlavorsFlavorResult',
    'GetDdsFlavorsFlavorResult',
    'GetDmsKafkaFlavorsFlavorResult',
    'GetDmsKafkaFlavorsFlavorIoResult',
    'GetDmsKafkaFlavorsFlavorPropertyResult',
    'GetDmsKafkaFlavorsFlavorSupportFeatureResult',
    'GetDmsKafkaFlavorsFlavorSupportFeaturePropertyResult',
    'GetDmsKafkaInstancesInstanceResult',
    'GetDmsKafkaInstancesInstanceCrossVpcAccessResult',
    'GetDmsKafkaMessagesMessageResult',
    'GetDmsKafkaUsersUserResult',
    'GetDmsRabbitmqFlavorsFlavorResult',
    'GetDmsRabbitmqFlavorsFlavorIoResult',
    'GetDmsRabbitmqFlavorsFlavorPropertyResult',
    'GetDmsRabbitmqFlavorsFlavorSupportFeatureResult',
    'GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult',
    'GetDwsFlavorsFlavorResult',
    'GetDwsFlavorsFlavorElasticVolumeSpecResult',
    'GetElbFlavorsFlavorResult',
    'GetElbPoolsPoolResult',
    'GetElbPoolsPoolListenerResult',
    'GetElbPoolsPoolLoadbalancerResult',
    'GetElbPoolsPoolMemberResult',
    'GetElbPoolsPoolPersistenceResult',
    'GetEvsVolumesVolumeResult',
    'GetEvsVolumesVolumeAttachmentResult',
    'GetIdentityGroupUserResult',
    'GetIdentityProjectsProjectResult',
    'GetIdentityUsersUserResult',
    'GetImagesImagesImageResult',
    'GetKpsFailedTasksTaskResult',
    'GetKpsKeypairsKeypairResult',
    'GetKpsRunningTasksTaskResult',
    'GetLbListenersListenerResult',
    'GetLbListenersListenerLoadbalancerResult',
    'GetLbPoolsPoolResult',
    'GetLbPoolsPoolListenerResult',
    'GetLbPoolsPoolLoadbalancerResult',
    'GetLbPoolsPoolMemberResult',
    'GetLbPoolsPoolPersistenceResult',
    'GetNetworkingSecgroupRuleResult',
    'GetNetworkingSecgroupsSecurityGroupResult',
    'GetObsBucketsBucketResult',
    'GetRdsBackupsBackupResult',
    'GetRdsBackupsBackupDatabaseResult',
    'GetRdsBackupsBackupDatastoreResult',
    'GetRdsEngineVersionsVersionResult',
    'GetRdsFlavorsFlavorResult',
    'GetRdsInstancesInstanceResult',
    'GetRdsInstancesInstanceBackupStrategyResult',
    'GetRdsInstancesInstanceDbResult',
    'GetRdsInstancesInstanceNodeResult',
    'GetRdsInstancesInstanceVolumeResult',
    'GetRdsPgAccountsUserResult',
    'GetRdsPgAccountsUserAttributeResult',
    'GetRdsPgDatabasesDatabaseResult',
    'GetRdsPgPluginsPluginResult',
    'GetRdsPgSqlLimitsSqlLimitResult',
    'GetRdsStorageTypesStorageTypeResult',
    'GetSfsTurboDataTasksTaskResult',
    'GetSfsTurboDuTasksTaskResult',
    'GetSfsTurboDuTasksTaskDirUsageResult',
    'GetSfsTurboDuTasksTaskDirUsageFileCountResult',
    'GetSfsTurboObsTargetsTargetResult',
    'GetSfsTurboObsTargetsTargetObResult',
    'GetSfsTurboPermRulesRuleResult',
    'GetSfsTurbosTurboResult',
    'GetVpcAddressGroupsAddressGroupResult',
    'GetVpcAddressGroupsAddressGroupIpExtraSetResult',
    'GetVpcBandwidthPublicipResult',
    'GetVpcEipsEipResult',
    'GetVpcRouteResult',
    'GetVpcRouteTableRouteResult',
    'GetVpcRoutesRouteResult',
    'GetVpcSubnetsSubnetResult',
    'GetVpcepPublicServicesServiceResult',
    'GetVpcsVpcResult',
    'GetVpnConnectionHealthChecksConnectionHealthCheckResult',
    'GetVpnConnectionsConnectionResult',
    'GetVpnConnectionsConnectionIkepolicyResult',
    'GetVpnConnectionsConnectionIkepolicyDpdResult',
    'GetVpnConnectionsConnectionIpsecpolicyResult',
    'GetVpnConnectionsConnectionPolicyRuleResult',
    'GetVpnCustomerGatewaysCustomerGatewayResult',
    'GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult',
    'GetVpnGatewaysGatewayResult',
    'GetVpnGatewaysGatewayEipResult',
]

@pulumi.output_type
class AomServiceDiscoveryRuleDiscoveryRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkContents":
            suggest = "check_contents"
        elif key == "checkMode":
            suggest = "check_mode"
        elif key == "checkType":
            suggest = "check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AomServiceDiscoveryRuleDiscoveryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AomServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AomServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_contents: Sequence[builtins.str],
                 check_mode: builtins.str,
                 check_type: builtins.str):
        pulumi.set(__self__, "check_contents", check_contents)
        pulumi.set(__self__, "check_mode", check_mode)
        pulumi.set(__self__, "check_type", check_type)

    @property
    @pulumi.getter(name="checkContents")
    def check_contents(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "check_contents")

    @property
    @pulumi.getter(name="checkMode")
    def check_mode(self) -> builtins.str:
        return pulumi.get(self, "check_mode")

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> builtins.str:
        return pulumi.get(self, "check_type")


@pulumi.output_type
class AomServiceDiscoveryRuleLogPathRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AomServiceDiscoveryRuleLogPathRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AomServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AomServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[builtins.str],
                 name_type: builtins.str,
                 values: Sequence[builtins.str]):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> builtins.str:
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AomServiceDiscoveryRuleNameRules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationNameRules":
            suggest = "application_name_rules"
        elif key == "serviceNameRules":
            suggest = "service_name_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AomServiceDiscoveryRuleNameRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AomServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AomServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_name_rules: Sequence['outputs.AomServiceDiscoveryRuleNameRulesApplicationNameRule'],
                 service_name_rules: Sequence['outputs.AomServiceDiscoveryRuleNameRulesServiceNameRule']):
        pulumi.set(__self__, "application_name_rules", application_name_rules)
        pulumi.set(__self__, "service_name_rules", service_name_rules)

    @property
    @pulumi.getter(name="applicationNameRules")
    def application_name_rules(self) -> Sequence['outputs.AomServiceDiscoveryRuleNameRulesApplicationNameRule']:
        return pulumi.get(self, "application_name_rules")

    @property
    @pulumi.getter(name="serviceNameRules")
    def service_name_rules(self) -> Sequence['outputs.AomServiceDiscoveryRuleNameRulesServiceNameRule']:
        return pulumi.get(self, "service_name_rules")


@pulumi.output_type
class AomServiceDiscoveryRuleNameRulesApplicationNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AomServiceDiscoveryRuleNameRulesApplicationNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AomServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AomServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[builtins.str],
                 name_type: builtins.str,
                 values: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> builtins.str:
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AomServiceDiscoveryRuleNameRulesServiceNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AomServiceDiscoveryRuleNameRulesServiceNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AomServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AomServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[builtins.str],
                 name_type: builtins.str,
                 values: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> builtins.str:
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ApiGatewayApiBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiGatewayApiFuncGraph(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiFuncGraph. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiFuncGraph.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiFuncGraph.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_urn: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation type.
        :param builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiGatewayApiFuncGraphPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationMode":
            suggest = "invocation_mode"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiFuncGraphPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiFuncGraphPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiFuncGraphPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiGatewayApiFuncGraphPolicyCondition'],
                 function_urn: builtins.str,
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiGatewayApiFuncGraphPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_mode: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param Sequence['ApiGatewayApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str name: The name of the backend policy.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApiGatewayApiFuncGraphPolicyBackendParamArgs'] backend_params: The configaiton list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_mode: The invocation mode of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param builtins.str network_type: The network (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiGatewayApiFuncGraphPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the backend policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiGatewayApiFuncGraphPolicyBackendParam']]:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiGatewayApiFuncGraphPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiFuncGraphPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiGatewayApiFuncGraphPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiFuncGraphPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiFuncGraphPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiFuncGraphPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiGatewayApiMock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiMock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiMock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiMock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizer_id: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiGatewayApiMockPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiMockPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiMockPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiMockPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiGatewayApiMockPolicyCondition'],
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiGatewayApiMockPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param Sequence['ApiGatewayApiMockPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The backend policy name.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApiGatewayApiMockPolicyBackendParamArgs'] backend_params: The configuration list of backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiGatewayApiMockPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The backend policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiGatewayApiMockPolicyBackendParam']]:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiGatewayApiMockPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiMockPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiMockPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiMockPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiGatewayApiMockPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiMockPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiMockPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiMockPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiGatewayApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validEnable":
            suggest = "valid_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 default: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 enumeration: Optional[builtins.str] = None,
                 example: Optional[builtins.str] = None,
                 location: Optional[builtins.str] = None,
                 maximum: Optional[builtins.int] = None,
                 minimum: Optional[builtins.int] = None,
                 orchestrations: Optional[Sequence[builtins.str]] = None,
                 passthrough: Optional[builtins.bool] = None,
                 required: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 valid_enable: Optional[builtins.int] = None):
        """
        :param builtins.str name: The name of the request parameter.
        :param builtins.str default: The default value of the parameter.
        :param builtins.str description: The parameter description.
        :param builtins.str enumeration: The enumerated value.
        :param builtins.str example: The parameter example.
        :param builtins.str location: Where this parameter is located.
        :param builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param Sequence[builtins.str] orchestrations: The list of orchestration rules that parameter used.
        :param builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param builtins.bool required: Whether this parameter is required.
        :param builtins.str type: The parameter type.
        :param builtins.int valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the request parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.str]:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The parameter description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enumeration(self) -> Optional[builtins.str]:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @property
    @pulumi.getter
    def example(self) -> Optional[builtins.str]:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def location(self) -> Optional[builtins.str]:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[builtins.int]:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[builtins.int]:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def orchestrations(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of orchestration rules that parameter used.
        """
        return pulumi.get(self, "orchestrations")

    @property
    @pulumi.getter
    def passthrough(self) -> Optional[builtins.bool]:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter
    def required(self) -> Optional[builtins.bool]:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[builtins.int]:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class ApiGatewayApiWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "sslEnable":
            suggest = "ssl_enable"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_method: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 ssl_enable: Optional[builtins.bool] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param builtins.str path: The backend request path.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address, which consists of a domain name or IP address, and a port number.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str request_protocol: The web protocol type of the API request.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address, which consists of a domain name or IP address, and a port number.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[builtins.str]:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The web protocol type of the API request.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[builtins.bool]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiGatewayApiWebPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiWebPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiWebPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiWebPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiGatewayApiWebPolicyCondition'],
                 name: builtins.str,
                 path: builtins.str,
                 request_method: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiGatewayApiWebPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param Sequence['ApiGatewayApiWebPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The name of the web policy.
        :param builtins.str path: The backend request address.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address
        :param Sequence['ApiGatewayApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_protocol: The backend request protocol.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiGatewayApiWebPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiGatewayApiWebPolicyBackendParam']]:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiGatewayApiWebPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiWebPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiWebPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiWebPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiGatewayApiWebPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayApiWebPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayApiWebPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayApiWebPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiGatewayGroupEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayGroupEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayGroupEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayGroupEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: builtins.str,
                 variables: Sequence['outputs.ApiGatewayGroupEnvironmentVariable']):
        """
        :param builtins.str environment_id: The ID of the environment to which the variables belongs.
        :param Sequence['ApiGatewayGroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> builtins.str:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.ApiGatewayGroupEnvironmentVariable']:
        """
        The array of one or more environment variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApiGatewayGroupEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableId":
            suggest = "variable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayGroupEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayGroupEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayGroupEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str,
                 id: Optional[builtins.str] = None,
                 variable_id: Optional[builtins.str] = None):
        """
        :param builtins.str name: The variable name.
        :param builtins.str value: The variable value.
        :param builtins.str id: The ID of the variable that the group has.
        :param builtins.str variable_id: schema: Deprecated; The ID of the variable that the group has.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[builtins.str]:
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
        return pulumi.get(self, "variable_id")


@pulumi.output_type
class ApiGatewayGroupUrlDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHttpRedirectToHttps":
            suggest = "is_http_redirect_to_https"
        elif key == "minSslVersion":
            suggest = "min_ssl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayGroupUrlDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayGroupUrlDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayGroupUrlDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 is_http_redirect_to_https: Optional[builtins.bool] = None,
                 min_ssl_version: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_http_redirect_to_https")

    @property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "min_ssl_version")


@pulumi.output_type
class ApigApiBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApigApiFuncGraph(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiFuncGraph. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiFuncGraph.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiFuncGraph.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_urn: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation type.
        :param builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApigApiFuncGraphPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationMode":
            suggest = "invocation_mode"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiFuncGraphPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiFuncGraphPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiFuncGraphPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApigApiFuncGraphPolicyCondition'],
                 function_urn: builtins.str,
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApigApiFuncGraphPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_mode: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param Sequence['ApigApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str name: The name of the backend policy.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApigApiFuncGraphPolicyBackendParamArgs'] backend_params: The configaiton list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_mode: The invocation mode of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param builtins.str network_type: The network (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApigApiFuncGraphPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the backend policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApigApiFuncGraphPolicyBackendParam']]:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApigApiFuncGraphPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiFuncGraphPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApigApiFuncGraphPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiFuncGraphPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiFuncGraphPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiFuncGraphPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApigApiMock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiMock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiMock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiMock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizer_id: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApigApiMockPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiMockPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiMockPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiMockPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApigApiMockPolicyCondition'],
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApigApiMockPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param Sequence['ApigApiMockPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The backend policy name.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApigApiMockPolicyBackendParamArgs'] backend_params: The configuration list of backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApigApiMockPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The backend policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApigApiMockPolicyBackendParam']]:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApigApiMockPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiMockPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiMockPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiMockPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApigApiMockPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiMockPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiMockPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiMockPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApigApiPublishmentHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiPublishmentHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiPublishmentHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiPublishmentHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 version_id: Optional[builtins.str] = None):
        """
        :param builtins.str description: The version description of the API publishment.
        :param builtins.str version_id: The version ID of the API publishment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The version description of the API publishment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[builtins.str]:
        """
        The version ID of the API publishment.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ApigApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validEnable":
            suggest = "valid_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 default: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 enumeration: Optional[builtins.str] = None,
                 example: Optional[builtins.str] = None,
                 location: Optional[builtins.str] = None,
                 maximum: Optional[builtins.int] = None,
                 minimum: Optional[builtins.int] = None,
                 orchestrations: Optional[Sequence[builtins.str]] = None,
                 passthrough: Optional[builtins.bool] = None,
                 required: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 valid_enable: Optional[builtins.int] = None):
        """
        :param builtins.str name: The name of the request parameter.
        :param builtins.str default: The default value of the parameter.
        :param builtins.str description: The parameter description.
        :param builtins.str enumeration: The enumerated value.
        :param builtins.str example: The parameter example.
        :param builtins.str location: Where this parameter is located.
        :param builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param Sequence[builtins.str] orchestrations: The list of orchestration rules that parameter used.
        :param builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param builtins.bool required: Whether this parameter is required.
        :param builtins.str type: The parameter type.
        :param builtins.int valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the request parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.str]:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The parameter description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enumeration(self) -> Optional[builtins.str]:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @property
    @pulumi.getter
    def example(self) -> Optional[builtins.str]:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def location(self) -> Optional[builtins.str]:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[builtins.int]:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[builtins.int]:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def orchestrations(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of orchestration rules that parameter used.
        """
        return pulumi.get(self, "orchestrations")

    @property
    @pulumi.getter
    def passthrough(self) -> Optional[builtins.bool]:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter
    def required(self) -> Optional[builtins.bool]:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[builtins.int]:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class ApigApiWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "sslEnable":
            suggest = "ssl_enable"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_method: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 ssl_enable: Optional[builtins.bool] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param builtins.str path: The backend request path.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address, which consists of a domain name or IP address, and a port number.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str request_protocol: The web protocol type of the API request.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address, which consists of a domain name or IP address, and a port number.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[builtins.str]:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The web protocol type of the API request.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[builtins.bool]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApigApiWebPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiWebPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiWebPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiWebPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApigApiWebPolicyCondition'],
                 name: builtins.str,
                 path: builtins.str,
                 request_method: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApigApiWebPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param Sequence['ApigApiWebPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The name of the web policy.
        :param builtins.str path: The backend request address.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address
        :param Sequence['ApigApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_protocol: The backend request protocol.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApigApiWebPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApigApiWebPolicyBackendParam']]:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApigApiWebPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiWebPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiWebPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiWebPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApigApiWebPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApiWebPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApiWebPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApiWebPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApigApplicationQuotaAssociateApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindTime":
            suggest = "bind_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApplicationQuotaAssociateApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApplicationQuotaAssociateApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApplicationQuotaAssociateApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 bind_time: Optional[builtins.str] = None):
        """
        :param builtins.str id: The application ID bound to the application quota.
        :param builtins.str bind_time: The binding time, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        if bind_time is not None:
            pulumi.set(__self__, "bind_time", bind_time)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The application ID bound to the application quota.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> Optional[builtins.str]:
        """
        The binding time, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")


@pulumi.output_type
class ApigChannelHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdAbnormal":
            suggest = "threshold_abnormal"
        elif key == "thresholdNormal":
            suggest = "threshold_normal"
        elif key == "enableClientSsl":
            suggest = "enable_client_ssl"
        elif key == "httpCodes":
            suggest = "http_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: builtins.int,
                 protocol: builtins.str,
                 threshold_abnormal: builtins.int,
                 threshold_normal: builtins.int,
                 timeout: builtins.int,
                 enable_client_ssl: Optional[builtins.bool] = None,
                 http_codes: Optional[builtins.str] = None,
                 method: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 status: Optional[builtins.int] = None):
        """
        :param builtins.int interval: The interval between consecutive check, in second.
        :param builtins.str protocol: The rotocol for performing health check on backend servers.
        :param builtins.int threshold_abnormal: The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
        :param builtins.int threshold_normal: The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
        :param builtins.int timeout: The timeout for determining whether a health check fails, in second.
        :param builtins.bool enable_client_ssl: Whether to enable two-way authentication.
        :param builtins.str http_codes: The response codes for determining a successful HTTP response.
        :param builtins.str method: The request method for health check.
        :param builtins.str path: The destination path for health check.
        :param builtins.int port: The destination host port for health check.
        :param builtins.int status: The status of health check.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "threshold_abnormal", threshold_abnormal)
        pulumi.set(__self__, "threshold_normal", threshold_normal)
        pulumi.set(__self__, "timeout", timeout)
        if enable_client_ssl is not None:
            pulumi.set(__self__, "enable_client_ssl", enable_client_ssl)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> builtins.int:
        """
        The interval between consecutive check, in second.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The rotocol for performing health check on backend servers.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="thresholdAbnormal")
    def threshold_abnormal(self) -> builtins.int:
        """
        The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
        """
        return pulumi.get(self, "threshold_abnormal")

    @property
    @pulumi.getter(name="thresholdNormal")
    def threshold_normal(self) -> builtins.int:
        """
        The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
        """
        return pulumi.get(self, "threshold_normal")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The timeout for determining whether a health check fails, in second.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="enableClientSsl")
    def enable_client_ssl(self) -> Optional[builtins.bool]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "enable_client_ssl")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[builtins.str]:
        """
        The response codes for determining a successful HTTP response.
        """
        return pulumi.get(self, "http_codes")

    @property
    @pulumi.getter
    def method(self) -> Optional[builtins.str]:
        """
        The request method for health check.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        The destination path for health check.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        The destination host port for health check.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.int]:
        """
        The status of health check.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApigChannelMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "isBackup":
            suggest = "is_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 is_backup: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 status: Optional[builtins.int] = None,
                 weight: Optional[builtins.int] = None):
        """
        :param builtins.str group_name: The group name of the backend server.
        :param builtins.str host: The IP address of the backend server.
        :param builtins.str id: The ID of the backend server.
        :param builtins.bool is_backup: Whether this member is the backup member.
        :param builtins.str name: The name of the backend server.
        :param builtins.int port: The port of the backend server.
        :param builtins.int status: The status of the backend server.
        :param builtins.int weight: The weight of current backend server.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        """
        The group name of the backend server.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        The IP address of the backend server.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the backend server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[builtins.bool]:
        """
        Whether this member is the backup member.
        """
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the backend server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        The port of the backend server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.int]:
        """
        The status of the backend server.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        """
        The weight of current backend server.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ApigChannelMemberGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "microserviceLabels":
            suggest = "microservice_labels"
        elif key == "microservicePort":
            suggest = "microservice_port"
        elif key == "microserviceVersion":
            suggest = "microservice_version"
        elif key == "referenceVpcChannelId":
            suggest = "reference_vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMemberGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMemberGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMemberGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 description: Optional[builtins.str] = None,
                 microservice_labels: Optional[Mapping[str, builtins.str]] = None,
                 microservice_port: Optional[builtins.int] = None,
                 microservice_version: Optional[builtins.str] = None,
                 reference_vpc_channel_id: Optional[builtins.str] = None,
                 weight: Optional[builtins.int] = None):
        """
        :param builtins.str name: The name of the member group.
        :param builtins.str description: The description of the member group.
        :param Mapping[str, builtins.str] microservice_labels: The microservice tags of the backend server group.
        :param builtins.int microservice_port: The microservice port of the backend server group.
        :param builtins.str microservice_version: The microservice version of the backend server group.
        :param builtins.str reference_vpc_channel_id: The ID of the reference load balance channel.
        :param builtins.int weight: The weight of the current member group.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microservice_labels is not None:
            pulumi.set(__self__, "microservice_labels", microservice_labels)
        if microservice_port is not None:
            pulumi.set(__self__, "microservice_port", microservice_port)
        if microservice_version is not None:
            pulumi.set(__self__, "microservice_version", microservice_version)
        if reference_vpc_channel_id is not None:
            pulumi.set(__self__, "reference_vpc_channel_id", reference_vpc_channel_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the member group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the member group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Optional[Mapping[str, builtins.str]]:
        """
        The microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> Optional[builtins.int]:
        """
        The microservice port of the backend server group.
        """
        return pulumi.get(self, "microservice_port")

    @property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> Optional[builtins.str]:
        """
        The microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @property
    @pulumi.getter(name="referenceVpcChannelId")
    def reference_vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The ID of the reference load balance channel.
        """
        return pulumi.get(self, "reference_vpc_channel_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        """
        The weight of the current member group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ApigChannelMicroservice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cceConfig":
            suggest = "cce_config"
        elif key == "cseConfig":
            suggest = "cse_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroservice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroservice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroservice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cce_config: Optional['outputs.ApigChannelMicroserviceCceConfig'] = None,
                 cse_config: Optional['outputs.ApigChannelMicroserviceCseConfig'] = None):
        """
        :param 'ApigChannelMicroserviceCceConfigArgs' cce_config: The CCE microservice details.
        :param 'ApigChannelMicroserviceCseConfigArgs' cse_config: schema:Internal; The CSE microservice details.
        """
        if cce_config is not None:
            pulumi.set(__self__, "cce_config", cce_config)
        if cse_config is not None:
            pulumi.set(__self__, "cse_config", cse_config)

    @property
    @pulumi.getter(name="cceConfig")
    def cce_config(self) -> Optional['outputs.ApigChannelMicroserviceCceConfig']:
        """
        The CCE microservice details.
        """
        return pulumi.get(self, "cce_config")

    @property
    @pulumi.getter(name="cseConfig")
    def cse_config(self) -> Optional['outputs.ApigChannelMicroserviceCseConfig']:
        """
        schema:Internal; The CSE microservice details.
        """
        return pulumi.get(self, "cse_config")


@pulumi.output_type
class ApigChannelMicroserviceCceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "workloadType":
            suggest = "workload_type"
        elif key == "labelKey":
            suggest = "label_key"
        elif key == "labelValue":
            suggest = "label_value"
        elif key == "workloadName":
            suggest = "workload_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroserviceCceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroserviceCceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroserviceCceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: builtins.str,
                 namespace: builtins.str,
                 workload_type: builtins.str,
                 label_key: Optional[builtins.str] = None,
                 label_value: Optional[builtins.str] = None,
                 workload_name: Optional[builtins.str] = None):
        """
        :param builtins.str cluster_id: The ID of the CCE cluster.
        :param builtins.str namespace: The name of the CCE namespace.
        :param builtins.str workload_type: The workload type.
        :param builtins.str label_key: The service label key.
        :param builtins.str label_value: The service label value.
        :param builtins.str workload_name: The workload name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "workload_type", workload_type)
        if label_key is not None:
            pulumi.set(__self__, "label_key", label_key)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)
        if workload_name is not None:
            pulumi.set(__self__, "workload_name", workload_name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> builtins.str:
        """
        The ID of the CCE cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The name of the CCE namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> builtins.str:
        """
        The workload type.
        """
        return pulumi.get(self, "workload_type")

    @property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> Optional[builtins.str]:
        """
        The service label key.
        """
        return pulumi.get(self, "label_key")

    @property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[builtins.str]:
        """
        The service label value.
        """
        return pulumi.get(self, "label_value")

    @property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> Optional[builtins.str]:
        """
        The workload name.
        """
        return pulumi.get(self, "workload_name")


@pulumi.output_type
class ApigChannelMicroserviceCseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineId":
            suggest = "engine_id"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroserviceCseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroserviceCseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroserviceCseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_id: builtins.str,
                 service_id: builtins.str):
        """
        :param builtins.str engine_id: schema:Internal; The microservice engine ID.
        :param builtins.str service_id: schema:Internal; The microservice ID.
        """
        pulumi.set(__self__, "engine_id", engine_id)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> builtins.str:
        """
        schema:Internal; The microservice engine ID.
        """
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> builtins.str:
        """
        schema:Internal; The microservice ID.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class ApigCustomAuthorizerIdentity(dict):
    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 validation: Optional[builtins.str] = None):
        """
        :param builtins.str location: The parameter location.
        :param builtins.str name: The name of the parameter to be verified.
        :param builtins.str validation: The parameter verification expression.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The parameter location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the parameter to be verified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def validation(self) -> Optional[builtins.str]:
        """
        The parameter verification expression.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class ApigGroupEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGroupEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGroupEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGroupEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: builtins.str,
                 variables: Sequence['outputs.ApigGroupEnvironmentVariable']):
        """
        :param builtins.str environment_id: The ID of the environment to which the variables belongs.
        :param Sequence['ApigGroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> builtins.str:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.ApigGroupEnvironmentVariable']:
        """
        The array of one or more environment variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApigGroupEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableId":
            suggest = "variable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGroupEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGroupEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGroupEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str,
                 id: Optional[builtins.str] = None,
                 variable_id: Optional[builtins.str] = None):
        """
        :param builtins.str name: The variable name.
        :param builtins.str value: The variable value.
        :param builtins.str id: The ID of the variable that the group has.
        :param builtins.str variable_id: schema: Deprecated; The ID of the variable that the group has.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[builtins.str]:
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
        return pulumi.get(self, "variable_id")


@pulumi.output_type
class ApigGroupUrlDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHttpRedirectToHttps":
            suggest = "is_http_redirect_to_https"
        elif key == "minSslVersion":
            suggest = "min_ssl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGroupUrlDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGroupUrlDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGroupUrlDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 is_http_redirect_to_https: Optional[builtins.bool] = None,
                 min_ssl_version: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_http_redirect_to_https")

    @property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "min_ssl_version")


@pulumi.output_type
class ApigInstanceCustomIngressPort(dict):
    def __init__(__self__, *,
                 port: builtins.int,
                 protocol: builtins.str,
                 id: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.int port: Specified port of the custom ingress port.
        :param builtins.str protocol: Specified protocol of the custom ingress port.
        :param builtins.str id: The ID of the custom ingress port.
        :param builtins.str status: The current status of the custom ingress port.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Specified port of the custom ingress port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        Specified protocol of the custom ingress port.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the custom ingress port.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The current status of the custom ingress port.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApigResponseRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorType":
            suggest = "error_type"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigResponseRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigResponseRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigResponseRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: builtins.str,
                 error_type: builtins.str,
                 headers: Optional[Sequence['outputs.ApigResponseRuleHeader']] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param builtins.str body: The body template of the API custom response rule.
        :param builtins.str error_type: The error type of the API custom response rule.
        :param Sequence['ApigResponseRuleHeaderArgs'] headers: The configuration of the custom response headers.
        :param builtins.int status_code: The HTTP status code of the API custom response rule.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "error_type", error_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def body(self) -> builtins.str:
        """
        The body template of the API custom response rule.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> builtins.str:
        """
        The error type of the API custom response rule.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ApigResponseRuleHeader']]:
        """
        The configuration of the custom response headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The HTTP status code of the API custom response rule.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApigResponseRuleHeader(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: The key name of the response header.
        :param builtins.str value: The value for the specified response header key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key name of the response header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value for the specified response header key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigThrottlingPolicyAppThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigThrottlingPolicyAppThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigThrottlingPolicyAppThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigThrottlingPolicyAppThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 id: Optional[builtins.str] = None,
                 throttling_object_name: Optional[builtins.str] = None):
        """
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special throttling policy belongs.
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class ApigThrottlingPolicyUserThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigThrottlingPolicyUserThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigThrottlingPolicyUserThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigThrottlingPolicyUserThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 id: Optional[builtins.str] = None,
                 throttling_object_name: Optional[builtins.str] = None):
        """
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special throttling policy belongs.
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class AsBandwidthPolicyScalingPolicyAction(dict):
    def __init__(__self__, *,
                 limits: Optional[builtins.int] = None,
                 operation: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None):
        """
        :param builtins.int limits: Specifies the operation restrictions.
        :param builtins.str operation: Specifies the operation to be performed. The default operation is ADD.
        :param builtins.int size: Specifies the bandwidth (Mbit/s).
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def limits(self) -> Optional[builtins.int]:
        """
        Specifies the operation restrictions.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def operation(self) -> Optional[builtins.str]:
        """
        Specifies the operation to be performed. The default operation is ADD.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        """
        Specifies the bandwidth (Mbit/s).
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class AsBandwidthPolicyScheduledPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "launchTime":
            suggest = "launch_time"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "recurrenceType":
            suggest = "recurrence_type"
        elif key == "recurrenceValue":
            suggest = "recurrence_value"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsBandwidthPolicyScheduledPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsBandwidthPolicyScheduledPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsBandwidthPolicyScheduledPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 launch_time: builtins.str,
                 end_time: Optional[builtins.str] = None,
                 recurrence_type: Optional[builtins.str] = None,
                 recurrence_value: Optional[builtins.str] = None,
                 start_time: Optional[builtins.str] = None):
        """
        :param builtins.str launch_time: Specifies the time when the scaling action is triggered. The time format complies with UTC.
        :param builtins.str end_time: Specifies the end time of the scaling action triggered periodically.
        :param builtins.str recurrence_type: Specifies the periodic triggering type.
        :param builtins.str recurrence_value: Specifies the day when a periodic scaling action is triggered.
        :param builtins.str start_time: Specifies the start time of the scaling action triggered periodically.
        """
        pulumi.set(__self__, "launch_time", launch_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if recurrence_type is not None:
            pulumi.set(__self__, "recurrence_type", recurrence_type)
        if recurrence_value is not None:
            pulumi.set(__self__, "recurrence_value", recurrence_value)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="launchTime")
    def launch_time(self) -> builtins.str:
        """
        Specifies the time when the scaling action is triggered. The time format complies with UTC.
        """
        return pulumi.get(self, "launch_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        """
        Specifies the end time of the scaling action triggered periodically.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="recurrenceType")
    def recurrence_type(self) -> Optional[builtins.str]:
        """
        Specifies the periodic triggering type.
        """
        return pulumi.get(self, "recurrence_type")

    @property
    @pulumi.getter(name="recurrenceValue")
    def recurrence_value(self) -> Optional[builtins.str]:
        """
        Specifies the day when a periodic scaling action is triggered.
        """
        return pulumi.get(self, "recurrence_value")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        """
        Specifies the start time of the scaling action triggered periodically.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AsConfigurationInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPass":
            suggest = "admin_pass"
        elif key == "chargingMode":
            suggest = "charging_mode"
        elif key == "dedicatedHostId":
            suggest = "dedicated_host_id"
        elif key == "ecsGroupId":
            suggest = "ecs_group_id"
        elif key == "flavorPriorityPolicy":
            suggest = "flavor_priority_policy"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsConfigurationInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsConfigurationInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsConfigurationInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_pass: Optional[builtins.str] = None,
                 charging_mode: Optional[builtins.str] = None,
                 dedicated_host_id: Optional[builtins.str] = None,
                 disks: Optional[Sequence['outputs.AsConfigurationInstanceConfigDisk']] = None,
                 ecs_group_id: Optional[builtins.str] = None,
                 flavor: Optional[builtins.str] = None,
                 flavor_priority_policy: Optional[builtins.str] = None,
                 image: Optional[builtins.str] = None,
                 instance_id: Optional[builtins.str] = None,
                 key_name: Optional[builtins.str] = None,
                 metadata: Optional[Mapping[str, builtins.str]] = None,
                 personalities: Optional[Sequence['outputs.AsConfigurationInstanceConfigPersonality']] = None,
                 public_ip: Optional['outputs.AsConfigurationInstanceConfigPublicIp'] = None,
                 security_group_ids: Optional[Sequence[builtins.str]] = None,
                 tenancy: Optional[builtins.str] = None,
                 user_data: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] security_group_ids: schema: Required
        """
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if ecs_group_id is not None:
            pulumi.set(__self__, "ecs_group_id", ecs_group_id)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if flavor_priority_policy is not None:
            pulumi.set(__self__, "flavor_priority_policy", flavor_priority_policy)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if personalities is not None:
            pulumi.set(__self__, "personalities", personalities)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[builtins.str]:
        return pulumi.get(self, "admin_pass")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dedicated_host_id")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.AsConfigurationInstanceConfigDisk']]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="ecsGroupId")
    def ecs_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ecs_group_id")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[builtins.str]:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="flavorPriorityPolicy")
    def flavor_priority_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "flavor_priority_policy")

    @property
    @pulumi.getter
    def image(self) -> Optional[builtins.str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def personalities(self) -> Optional[Sequence['outputs.AsConfigurationInstanceConfigPersonality']]:
        return pulumi.get(self, "personalities")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional['outputs.AsConfigurationInstanceConfigPublicIp']:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tenancy")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_data")


@pulumi.output_type
class AsConfigurationInstanceConfigDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskType":
            suggest = "disk_type"
        elif key == "volumeType":
            suggest = "volume_type"
        elif key == "dataDiskImageId":
            suggest = "data_disk_image_id"
        elif key == "dedicatedStorageId":
            suggest = "dedicated_storage_id"
        elif key == "kmsId":
            suggest = "kms_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsConfigurationInstanceConfigDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsConfigurationInstanceConfigDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsConfigurationInstanceConfigDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_type: builtins.str,
                 size: builtins.int,
                 volume_type: builtins.str,
                 data_disk_image_id: Optional[builtins.str] = None,
                 dedicated_storage_id: Optional[builtins.str] = None,
                 iops: Optional[builtins.int] = None,
                 kms_id: Optional[builtins.str] = None,
                 snapshot_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)
        if data_disk_image_id is not None:
            pulumi.set(__self__, "data_disk_image_id", data_disk_image_id)
        if dedicated_storage_id is not None:
            pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_id is not None:
            pulumi.set(__self__, "kms_id", kms_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> builtins.str:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> builtins.str:
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter(name="dataDiskImageId")
    def data_disk_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_disk_image_id")

    @property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dedicated_storage_id")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class AsConfigurationInstanceConfigPersonality(dict):
    def __init__(__self__, *,
                 content: builtins.str,
                 path: builtins.str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def content(self) -> builtins.str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        return pulumi.get(self, "path")


@pulumi.output_type
class AsConfigurationInstanceConfigPublicIp(dict):
    def __init__(__self__, *,
                 eip: 'outputs.AsConfigurationInstanceConfigPublicIpEip'):
        pulumi.set(__self__, "eip", eip)

    @property
    @pulumi.getter
    def eip(self) -> 'outputs.AsConfigurationInstanceConfigPublicIpEip':
        return pulumi.get(self, "eip")


@pulumi.output_type
class AsConfigurationInstanceConfigPublicIpEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipType":
            suggest = "ip_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsConfigurationInstanceConfigPublicIpEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsConfigurationInstanceConfigPublicIpEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsConfigurationInstanceConfigPublicIpEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: 'outputs.AsConfigurationInstanceConfigPublicIpEipBandwidth',
                 ip_type: builtins.str):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter
    def bandwidth(self) -> 'outputs.AsConfigurationInstanceConfigPublicIpEipBandwidth':
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> builtins.str:
        return pulumi.get(self, "ip_type")


@pulumi.output_type
class AsConfigurationInstanceConfigPublicIpEipBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargingMode":
            suggest = "charging_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsConfigurationInstanceConfigPublicIpEipBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsConfigurationInstanceConfigPublicIpEipBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsConfigurationInstanceConfigPublicIpEipBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: builtins.str,
                 charging_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None):
        pulumi.set(__self__, "share_type", share_type)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> builtins.str:
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")


@pulumi.output_type
class AsGroupLbaasListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolId":
            suggest = "pool_id"
        elif key == "protocolPort":
            suggest = "protocol_port"
        elif key == "protocolVersion":
            suggest = "protocol_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsGroupLbaasListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsGroupLbaasListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsGroupLbaasListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_id: builtins.str,
                 protocol_port: builtins.int,
                 protocol_version: Optional[builtins.str] = None,
                 weight: Optional[builtins.int] = None):
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "protocol_port", protocol_port)
        if protocol_version is not None:
            pulumi.set(__self__, "protocol_version", protocol_version)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> builtins.str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> builtins.int:
        return pulumi.get(self, "protocol_port")

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol_version")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class AsGroupNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6BandwidthId":
            suggest = "ipv6_bandwidth_id"
        elif key == "ipv6Enable":
            suggest = "ipv6_enable"
        elif key == "sourceDestCheck":
            suggest = "source_dest_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsGroupNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsGroupNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsGroupNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 ipv6_bandwidth_id: Optional[builtins.str] = None,
                 ipv6_enable: Optional[builtins.bool] = None,
                 source_dest_check: Optional[builtins.bool] = None):
        pulumi.set(__self__, "id", id)
        if ipv6_bandwidth_id is not None:
            pulumi.set(__self__, "ipv6_bandwidth_id", ipv6_bandwidth_id)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if source_dest_check is not None:
            pulumi.set(__self__, "source_dest_check", source_dest_check)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6BandwidthId")
    def ipv6_bandwidth_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipv6_bandwidth_id")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="sourceDestCheck")
    def source_dest_check(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "source_dest_check")


@pulumi.output_type
class AsGroupSecurityGroup(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")


@pulumi.output_type
class AsPolicyScalingPolicyAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNumber":
            suggest = "instance_number"
        elif key == "instancePercentage":
            suggest = "instance_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsPolicyScalingPolicyAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsPolicyScalingPolicyAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsPolicyScalingPolicyAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_number: Optional[builtins.int] = None,
                 instance_percentage: Optional[builtins.int] = None,
                 operation: Optional[builtins.str] = None):
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)
        if instance_percentage is not None:
            pulumi.set(__self__, "instance_percentage", instance_percentage)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[builtins.int]:
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="instancePercentage")
    def instance_percentage(self) -> Optional[builtins.int]:
        return pulumi.get(self, "instance_percentage")

    @property
    @pulumi.getter
    def operation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "operation")


@pulumi.output_type
class AsPolicyScheduledPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "launchTime":
            suggest = "launch_time"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "recurrenceType":
            suggest = "recurrence_type"
        elif key == "recurrenceValue":
            suggest = "recurrence_value"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsPolicyScheduledPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsPolicyScheduledPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsPolicyScheduledPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 launch_time: builtins.str,
                 end_time: Optional[builtins.str] = None,
                 recurrence_type: Optional[builtins.str] = None,
                 recurrence_value: Optional[builtins.str] = None,
                 start_time: Optional[builtins.str] = None):
        pulumi.set(__self__, "launch_time", launch_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if recurrence_type is not None:
            pulumi.set(__self__, "recurrence_type", recurrence_type)
        if recurrence_value is not None:
            pulumi.set(__self__, "recurrence_value", recurrence_value)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="launchTime")
    def launch_time(self) -> builtins.str:
        return pulumi.get(self, "launch_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="recurrenceType")
    def recurrence_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "recurrence_type")

    @property
    @pulumi.getter(name="recurrenceValue")
    def recurrence_value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "recurrence_value")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CbrBackupShareMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destProjectId":
            suggest = "dest_project_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrBackupShareMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrBackupShareMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrBackupShareMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_project_id: builtins.str,
                 created_at: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 image_id: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 updated_at: Optional[builtins.str] = None,
                 vault_id: Optional[builtins.str] = None):
        """
        :param builtins.str dest_project_id: The ID of the project with which the backup is shared.
        :param builtins.str created_at: The creation time of the backup shared member.
        :param builtins.str id: The ID of the backup shared member record.
        :param builtins.str image_id: The ID of the image registered with the shared backup copy.
        :param builtins.str status: The backup shared status.
        :param builtins.str updated_at: The latest update time of the backup shared member.
        :param builtins.str vault_id: The ID of the vault where the shared backup is stored.
        """
        pulumi.set(__self__, "dest_project_id", dest_project_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="destProjectId")
    def dest_project_id(self) -> builtins.str:
        """
        The ID of the project with which the backup is shared.
        """
        return pulumi.get(self, "dest_project_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The creation time of the backup shared member.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the backup shared member record.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[builtins.str]:
        """
        The ID of the image registered with the shared backup copy.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The backup shared status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        The latest update time of the backup shared member.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[builtins.str]:
        """
        The ID of the vault where the shared backup is stored.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class CbrCheckpointBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "protectedAt":
            suggest = "protected_at"
        elif key == "resourceSize":
            suggest = "resource_size"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrCheckpointBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrCheckpointBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrCheckpointBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: builtins.str,
                 type: builtins.str,
                 id: Optional[builtins.str] = None,
                 protected_at: Optional[builtins.str] = None,
                 resource_size: Optional[builtins.int] = None,
                 status: Optional[builtins.str] = None,
                 updated_at: Optional[builtins.str] = None):
        """
        :param builtins.str resource_id: The ID of backup resource.
        :param builtins.str type: The type of the backup resource.
        :param builtins.str id: The backup ID.
        :param builtins.str protected_at: The backup time.
        :param builtins.int resource_size: The backup resource size.
        :param builtins.str status: The backup status.
        :param builtins.str updated_at: The latest update time of the backup.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protected_at is not None:
            pulumi.set(__self__, "protected_at", protected_at)
        if resource_size is not None:
            pulumi.set(__self__, "resource_size", resource_size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The ID of backup resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the backup resource.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The backup ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="protectedAt")
    def protected_at(self) -> Optional[builtins.str]:
        """
        The backup time.
        """
        return pulumi.get(self, "protected_at")

    @property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> Optional[builtins.int]:
        """
        The backup resource size.
        """
        return pulumi.get(self, "resource_size")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The backup status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        The latest update time of the backup.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class CbrPolicyBackupCycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionTimes":
            suggest = "execution_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrPolicyBackupCycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrPolicyBackupCycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrPolicyBackupCycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_times: Sequence[builtins.str],
                 days: Optional[builtins.str] = None,
                 interval: Optional[builtins.int] = None):
        """
        :param Sequence[builtins.str] execution_times: The execution time of the policy.
        :param builtins.str days: The weekly backup time.
        :param builtins.int interval: The number of days between each backup.
        """
        pulumi.set(__self__, "execution_times", execution_times)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> Sequence[builtins.str]:
        """
        The execution time of the policy.
        """
        return pulumi.get(self, "execution_times")

    @property
    @pulumi.getter
    def days(self) -> Optional[builtins.str]:
        """
        The weekly backup time.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.int]:
        """
        The number of days between each backup.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class CbrPolicyLongTermRetention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullBackupInterval":
            suggest = "full_backup_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrPolicyLongTermRetention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrPolicyLongTermRetention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrPolicyLongTermRetention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily: Optional[builtins.int] = None,
                 full_backup_interval: Optional[builtins.int] = None,
                 monthly: Optional[builtins.int] = None,
                 weekly: Optional[builtins.int] = None,
                 yearly: Optional[builtins.int] = None):
        """
        :param builtins.int daily: The latest backup of each day is saved in the long term.
        :param builtins.int full_backup_interval: How often (after how many incremental backups) a full backup is performed.
        :param builtins.int monthly: The latest backup of each month is saved in the long term.
        :param builtins.int weekly: The latest backup of each week is saved in the long term.
        :param builtins.int yearly: The latest backup of each year is saved in the long term.
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)
        if yearly is not None:
            pulumi.set(__self__, "yearly", yearly)

    @property
    @pulumi.getter
    def daily(self) -> Optional[builtins.int]:
        """
        The latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[builtins.int]:
        """
        How often (after how many incremental backups) a full backup is performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @property
    @pulumi.getter
    def monthly(self) -> Optional[builtins.int]:
        """
        The latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @property
    @pulumi.getter
    def weekly(self) -> Optional[builtins.int]:
        """
        The latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @property
    @pulumi.getter
    def yearly(self) -> Optional[builtins.int]:
        """
        The latest backup of each year is saved in the long term.
        """
        return pulumi.get(self, "yearly")


@pulumi.output_type
class CbrVaultPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationVaultId":
            suggest = "destination_vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrVaultPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrVaultPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrVaultPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 destination_vault_id: Optional[builtins.str] = None):
        """
        :param builtins.str id: The policy ID.
        :param builtins.str destination_vault_id: The ID of destination vault to which the replication policy will associated.
        """
        pulumi.set(__self__, "id", id)
        if destination_vault_id is not None:
            pulumi.set(__self__, "destination_vault_id", destination_vault_id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> Optional[builtins.str]:
        """
        The ID of destination vault to which the replication policy will associated.
        """
        return pulumi.get(self, "destination_vault_id")


@pulumi.output_type
class CbrVaultResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverId":
            suggest = "server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrVaultResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrVaultResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrVaultResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excludes: Optional[Sequence[builtins.str]] = None,
                 includes: Optional[Sequence[builtins.str]] = None,
                 server_id: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] excludes: The array of disk IDs which will be excluded in the backup.
        :param Sequence[builtins.str] includes: The array of disk or SFS file systems which will be included in the backup.
        :param builtins.str server_id: The ID of the ECS instance to be backed up.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence[builtins.str]]:
        """
        The array of disk IDs which will be excluded in the backup.
        """
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[builtins.str]]:
        """
        The array of disk or SFS file systems which will be included in the backup.
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[builtins.str]:
        """
        The ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class CceAddonValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicJson":
            suggest = "basic_json"
        elif key == "customJson":
            suggest = "custom_json"
        elif key == "flavorJson":
            suggest = "flavor_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceAddonValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceAddonValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceAddonValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic: Optional[Mapping[str, builtins.str]] = None,
                 basic_json: Optional[builtins.str] = None,
                 custom: Optional[Mapping[str, builtins.str]] = None,
                 custom_json: Optional[builtins.str] = None,
                 flavor: Optional[Mapping[str, builtins.str]] = None,
                 flavor_json: Optional[builtins.str] = None):
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if basic_json is not None:
            pulumi.set(__self__, "basic_json", basic_json)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if custom_json is not None:
            pulumi.set(__self__, "custom_json", custom_json)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if flavor_json is not None:
            pulumi.set(__self__, "flavor_json", flavor_json)

    @property
    @pulumi.getter
    def basic(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "basic")

    @property
    @pulumi.getter(name="basicJson")
    def basic_json(self) -> Optional[builtins.str]:
        return pulumi.get(self, "basic_json")

    @property
    @pulumi.getter
    def custom(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter(name="customJson")
    def custom_json(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_json")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="flavorJson")
    def flavor_json(self) -> Optional[builtins.str]:
        return pulumi.get(self, "flavor_json")


@pulumi.output_type
class CceClusterCertificateCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityData":
            suggest = "certificate_authority_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceClusterCertificateCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceClusterCertificateCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceClusterCertificateCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_data: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 server: Optional[builtins.str] = None):
        if certificate_authority_data is not None:
            pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server")


@pulumi.output_type
class CceClusterCertificateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificateData":
            suggest = "client_certificate_data"
        elif key == "clientKeyData":
            suggest = "client_key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceClusterCertificateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceClusterCertificateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceClusterCertificateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate_data: Optional[builtins.str] = None,
                 client_key_data: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None):
        if client_certificate_data is not None:
            pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        if client_key_data is not None:
            pulumi.set(__self__, "client_key_data", client_key_data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class CceClusterComponentConfiguration(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 configurations: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[builtins.str]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class CceClusterExtendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterAz":
            suggest = "cluster_az"
        elif key == "cpuManagerPolicy":
            suggest = "cpu_manager_policy"
        elif key == "decMasterFlavor":
            suggest = "dec_master_flavor"
        elif key == "dockerUmaskMode":
            suggest = "docker_umask_mode"
        elif key == "dssMasterVolumes":
            suggest = "dss_master_volumes"
        elif key == "fixPoolMask":
            suggest = "fix_pool_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceClusterExtendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceClusterExtendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceClusterExtendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_az: Optional[builtins.str] = None,
                 cpu_manager_policy: Optional[builtins.str] = None,
                 dec_master_flavor: Optional[builtins.str] = None,
                 docker_umask_mode: Optional[builtins.str] = None,
                 dss_master_volumes: Optional[builtins.str] = None,
                 fix_pool_mask: Optional[builtins.str] = None):
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if cpu_manager_policy is not None:
            pulumi.set(__self__, "cpu_manager_policy", cpu_manager_policy)
        if dec_master_flavor is not None:
            pulumi.set(__self__, "dec_master_flavor", dec_master_flavor)
        if docker_umask_mode is not None:
            pulumi.set(__self__, "docker_umask_mode", docker_umask_mode)
        if dss_master_volumes is not None:
            pulumi.set(__self__, "dss_master_volumes", dss_master_volumes)
        if fix_pool_mask is not None:
            pulumi.set(__self__, "fix_pool_mask", fix_pool_mask)

    @property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cluster_az")

    @property
    @pulumi.getter(name="cpuManagerPolicy")
    def cpu_manager_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cpu_manager_policy")

    @property
    @pulumi.getter(name="decMasterFlavor")
    def dec_master_flavor(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dec_master_flavor")

    @property
    @pulumi.getter(name="dockerUmaskMode")
    def docker_umask_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "docker_umask_mode")

    @property
    @pulumi.getter(name="dssMasterVolumes")
    def dss_master_volumes(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_master_volumes")

    @property
    @pulumi.getter(name="fixPoolMask")
    def fix_pool_mask(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fix_pool_mask")


@pulumi.output_type
class CceClusterMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceClusterMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceClusterMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceClusterMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[builtins.str] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[builtins.str]:
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class CceNodeAttachDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeAttachDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeAttachDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeAttachDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None,
                 throughput: Optional[builtins.int] = None,
                 volumetype: Optional[builtins.str] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[builtins.str]:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class CceNodeAttachHostnameConfig(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodeAttachRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeAttachRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeAttachRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeAttachRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None,
                 throughput: Optional[builtins.int] = None,
                 volumetype: Optional[builtins.str] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[builtins.str]:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class CceNodeAttachStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.CceNodeAttachStorageGroup'],
                 selectors: Sequence['outputs.CceNodeAttachStorageSelector']):
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.CceNodeAttachStorageGroup']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.CceNodeAttachStorageSelector']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class CceNodeAttachStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeAttachStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeAttachStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeAttachStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 selector_names: Sequence[builtins.str],
                 virtual_spaces: Sequence['outputs.CceNodeAttachStorageGroupVirtualSpace'],
                 cce_managed: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.CceNodeAttachStorageGroupVirtualSpace']:
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class CceNodeAttachStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeAttachStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeAttachStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeAttachStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 size: builtins.str,
                 lvm_lv_type: Optional[builtins.str] = None,
                 lvm_path: Optional[builtins.str] = None,
                 runtime_lv_type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> builtins.str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class CceNodeAttachStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeAttachStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeAttachStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeAttachStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 match_label_count: Optional[builtins.str] = None,
                 match_label_metadata_cmkid: Optional[builtins.str] = None,
                 match_label_metadata_encrypted: Optional[builtins.str] = None,
                 match_label_size: Optional[builtins.str] = None,
                 match_label_volume_type: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodeAttachTaint(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CceNodeDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 volumetype: builtins.str,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class CceNodeExtendParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agencyName":
            suggest = "agency_name"
        elif key == "dockerBaseSize":
            suggest = "docker_base_size"
        elif key == "kubeReservedMem":
            suggest = "kube_reserved_mem"
        elif key == "marketType":
            suggest = "market_type"
        elif key == "maxPods":
            suggest = "max_pods"
        elif key == "nicThreshold":
            suggest = "nic_threshold"
        elif key == "nodeImageId":
            suggest = "node_image_id"
        elif key == "nodeMultiQueue":
            suggest = "node_multi_queue"
        elif key == "securityReinforcementType":
            suggest = "security_reinforcement_type"
        elif key == "spotPrice":
            suggest = "spot_price"
        elif key == "systemReservedMem":
            suggest = "system_reserved_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeExtendParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeExtendParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeExtendParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agency_name: Optional[builtins.str] = None,
                 docker_base_size: Optional[builtins.int] = None,
                 kube_reserved_mem: Optional[builtins.int] = None,
                 market_type: Optional[builtins.str] = None,
                 max_pods: Optional[builtins.int] = None,
                 nic_threshold: Optional[builtins.str] = None,
                 node_image_id: Optional[builtins.str] = None,
                 node_multi_queue: Optional[builtins.str] = None,
                 postinstall: Optional[builtins.str] = None,
                 preinstall: Optional[builtins.str] = None,
                 security_reinforcement_type: Optional[builtins.str] = None,
                 spot_price: Optional[builtins.str] = None,
                 system_reserved_mem: Optional[builtins.int] = None):
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if docker_base_size is not None:
            pulumi.set(__self__, "docker_base_size", docker_base_size)
        if kube_reserved_mem is not None:
            pulumi.set(__self__, "kube_reserved_mem", kube_reserved_mem)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if nic_threshold is not None:
            pulumi.set(__self__, "nic_threshold", nic_threshold)
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_multi_queue is not None:
            pulumi.set(__self__, "node_multi_queue", node_multi_queue)
        if postinstall is not None:
            pulumi.set(__self__, "postinstall", postinstall)
        if preinstall is not None:
            pulumi.set(__self__, "preinstall", preinstall)
        if security_reinforcement_type is not None:
            pulumi.set(__self__, "security_reinforcement_type", security_reinforcement_type)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if system_reserved_mem is not None:
            pulumi.set(__self__, "system_reserved_mem", system_reserved_mem)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="dockerBaseSize")
    def docker_base_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "docker_base_size")

    @property
    @pulumi.getter(name="kubeReservedMem")
    def kube_reserved_mem(self) -> Optional[builtins.int]:
        return pulumi.get(self, "kube_reserved_mem")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "market_type")

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_pods")

    @property
    @pulumi.getter(name="nicThreshold")
    def nic_threshold(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nic_threshold")

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "node_image_id")

    @property
    @pulumi.getter(name="nodeMultiQueue")
    def node_multi_queue(self) -> Optional[builtins.str]:
        return pulumi.get(self, "node_multi_queue")

    @property
    @pulumi.getter
    def postinstall(self) -> Optional[builtins.str]:
        return pulumi.get(self, "postinstall")

    @property
    @pulumi.getter
    def preinstall(self) -> Optional[builtins.str]:
        return pulumi.get(self, "preinstall")

    @property
    @pulumi.getter(name="securityReinforcementType")
    def security_reinforcement_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "security_reinforcement_type")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[builtins.str]:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter(name="systemReservedMem")
    def system_reserved_mem(self) -> Optional[builtins.int]:
        return pulumi.get(self, "system_reserved_mem")


@pulumi.output_type
class CceNodeExtensionNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeExtensionNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeExtensionNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeExtensionNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: builtins.str):
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class CceNodeHostnameConfig(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodePoolDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 volumetype: builtins.str,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class CceNodePoolExtendParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agencyName":
            suggest = "agency_name"
        elif key == "dockerBaseSize":
            suggest = "docker_base_size"
        elif key == "kubeReservedMem":
            suggest = "kube_reserved_mem"
        elif key == "marketType":
            suggest = "market_type"
        elif key == "maxPods":
            suggest = "max_pods"
        elif key == "nicThreshold":
            suggest = "nic_threshold"
        elif key == "nodeImageId":
            suggest = "node_image_id"
        elif key == "nodeMultiQueue":
            suggest = "node_multi_queue"
        elif key == "securityReinforcementType":
            suggest = "security_reinforcement_type"
        elif key == "spotPrice":
            suggest = "spot_price"
        elif key == "systemReservedMem":
            suggest = "system_reserved_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolExtendParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolExtendParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolExtendParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agency_name: Optional[builtins.str] = None,
                 docker_base_size: Optional[builtins.int] = None,
                 kube_reserved_mem: Optional[builtins.int] = None,
                 market_type: Optional[builtins.str] = None,
                 max_pods: Optional[builtins.int] = None,
                 nic_threshold: Optional[builtins.str] = None,
                 node_image_id: Optional[builtins.str] = None,
                 node_multi_queue: Optional[builtins.str] = None,
                 postinstall: Optional[builtins.str] = None,
                 preinstall: Optional[builtins.str] = None,
                 security_reinforcement_type: Optional[builtins.str] = None,
                 spot_price: Optional[builtins.str] = None,
                 system_reserved_mem: Optional[builtins.int] = None):
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if docker_base_size is not None:
            pulumi.set(__self__, "docker_base_size", docker_base_size)
        if kube_reserved_mem is not None:
            pulumi.set(__self__, "kube_reserved_mem", kube_reserved_mem)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if nic_threshold is not None:
            pulumi.set(__self__, "nic_threshold", nic_threshold)
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_multi_queue is not None:
            pulumi.set(__self__, "node_multi_queue", node_multi_queue)
        if postinstall is not None:
            pulumi.set(__self__, "postinstall", postinstall)
        if preinstall is not None:
            pulumi.set(__self__, "preinstall", preinstall)
        if security_reinforcement_type is not None:
            pulumi.set(__self__, "security_reinforcement_type", security_reinforcement_type)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if system_reserved_mem is not None:
            pulumi.set(__self__, "system_reserved_mem", system_reserved_mem)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="dockerBaseSize")
    def docker_base_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "docker_base_size")

    @property
    @pulumi.getter(name="kubeReservedMem")
    def kube_reserved_mem(self) -> Optional[builtins.int]:
        return pulumi.get(self, "kube_reserved_mem")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "market_type")

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_pods")

    @property
    @pulumi.getter(name="nicThreshold")
    def nic_threshold(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nic_threshold")

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "node_image_id")

    @property
    @pulumi.getter(name="nodeMultiQueue")
    def node_multi_queue(self) -> Optional[builtins.str]:
        return pulumi.get(self, "node_multi_queue")

    @property
    @pulumi.getter
    def postinstall(self) -> Optional[builtins.str]:
        return pulumi.get(self, "postinstall")

    @property
    @pulumi.getter
    def preinstall(self) -> Optional[builtins.str]:
        return pulumi.get(self, "preinstall")

    @property
    @pulumi.getter(name="securityReinforcementType")
    def security_reinforcement_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "security_reinforcement_type")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[builtins.str]:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter(name="systemReservedMem")
    def system_reserved_mem(self) -> Optional[builtins.int]:
        return pulumi.get(self, "system_reserved_mem")


@pulumi.output_type
class CceNodePoolExtensionScaleGroup(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.CceNodePoolExtensionScaleGroupMetadata'] = None,
                 spec: Optional['outputs.CceNodePoolExtensionScaleGroupSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.CceNodePoolExtensionScaleGroupMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.CceNodePoolExtensionScaleGroupSpec']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class CceNodePoolExtensionScaleGroupMetadata(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class CceNodePoolExtensionScaleGroupSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityReservationSpecification":
            suggest = "capacity_reservation_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolExtensionScaleGroupSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolExtensionScaleGroupSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolExtensionScaleGroupSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscaling: Optional['outputs.CceNodePoolExtensionScaleGroupSpecAutoscaling'] = None,
                 az: Optional[builtins.str] = None,
                 capacity_reservation_specification: Optional['outputs.CceNodePoolExtensionScaleGroupSpecCapacityReservationSpecification'] = None,
                 flavor: Optional[builtins.str] = None):
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if az is not None:
            pulumi.set(__self__, "az", az)
        if capacity_reservation_specification is not None:
            pulumi.set(__self__, "capacity_reservation_specification", capacity_reservation_specification)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.CceNodePoolExtensionScaleGroupSpecAutoscaling']:
        return pulumi.get(self, "autoscaling")

    @property
    @pulumi.getter
    def az(self) -> Optional[builtins.str]:
        return pulumi.get(self, "az")

    @property
    @pulumi.getter(name="capacityReservationSpecification")
    def capacity_reservation_specification(self) -> Optional['outputs.CceNodePoolExtensionScaleGroupSpecCapacityReservationSpecification']:
        return pulumi.get(self, "capacity_reservation_specification")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[builtins.str]:
        return pulumi.get(self, "flavor")


@pulumi.output_type
class CceNodePoolExtensionScaleGroupSpecAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionPriority":
            suggest = "extension_priority"
        elif key == "maxNodeCount":
            suggest = "max_node_count"
        elif key == "minNodeCount":
            suggest = "min_node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolExtensionScaleGroupSpecAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolExtensionScaleGroupSpecAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolExtensionScaleGroupSpecAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[builtins.bool] = None,
                 extension_priority: Optional[builtins.int] = None,
                 max_node_count: Optional[builtins.int] = None,
                 min_node_count: Optional[builtins.int] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if extension_priority is not None:
            pulumi.set(__self__, "extension_priority", extension_priority)
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)

    @property
    @pulumi.getter
    def enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="extensionPriority")
    def extension_priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "extension_priority")

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "min_node_count")


@pulumi.output_type
class CceNodePoolExtensionScaleGroupSpecCapacityReservationSpecification(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 preference: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class CceNodePoolHostnameConfig(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodePoolRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 volumetype: builtins.str,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class CceNodePoolStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.CceNodePoolStorageGroup'],
                 selectors: Sequence['outputs.CceNodePoolStorageSelector']):
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.CceNodePoolStorageGroup']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.CceNodePoolStorageSelector']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class CceNodePoolStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 selector_names: Sequence[builtins.str],
                 virtual_spaces: Sequence['outputs.CceNodePoolStorageGroupVirtualSpace'],
                 cce_managed: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.CceNodePoolStorageGroupVirtualSpace']:
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class CceNodePoolStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 size: builtins.str,
                 lvm_lv_type: Optional[builtins.str] = None,
                 lvm_path: Optional[builtins.str] = None,
                 runtime_lv_type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> builtins.str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class CceNodePoolStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodePoolStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodePoolStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodePoolStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 match_label_count: Optional[builtins.str] = None,
                 match_label_metadata_cmkid: Optional[builtins.str] = None,
                 match_label_metadata_encrypted: Optional[builtins.str] = None,
                 match_label_size: Optional[builtins.str] = None,
                 match_label_volume_type: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CceNodeRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 volumetype: builtins.str,
                 dss_pool_id: Optional[builtins.str] = None,
                 extend_param: Optional[builtins.str] = None,
                 extend_params: Optional[Mapping[str, builtins.str]] = None,
                 hw_passthrough: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        """
        :param builtins.bool hw_passthrough: schema: Internal
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    @_utilities.deprecated("""use extend_params instead""")
    def extend_param(self) -> Optional[builtins.str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[builtins.bool]:
        """
        schema: Internal
        """
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class CceNodeStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.CceNodeStorageGroup'],
                 selectors: Sequence['outputs.CceNodeStorageSelector']):
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.CceNodeStorageGroup']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.CceNodeStorageSelector']:
        return pulumi.get(self, "selectors")


@pulumi.output_type
class CceNodeStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 selector_names: Sequence[builtins.str],
                 virtual_spaces: Sequence['outputs.CceNodeStorageGroupVirtualSpace'],
                 cce_managed: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.CceNodeStorageGroupVirtualSpace']:
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class CceNodeStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 size: builtins.str,
                 lvm_lv_type: Optional[builtins.str] = None,
                 lvm_path: Optional[builtins.str] = None,
                 runtime_lv_type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> builtins.str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class CceNodeStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CceNodeStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CceNodeStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CceNodeStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 match_label_count: Optional[builtins.str] = None,
                 match_label_metadata_cmkid: Optional[builtins.str] = None,
                 match_label_metadata_encrypted: Optional[builtins.str] = None,
                 match_label_size: Optional[builtins.str] = None,
                 match_label_volume_type: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CceNodeTaint(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: Optional[builtins.str] = None):
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CdmClusterInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manageIp":
            suggest = "manage_ip"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "trafficIp":
            suggest = "traffic_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdmClusterInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdmClusterInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdmClusterInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 manage_ip: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 private_ip: Optional[builtins.str] = None,
                 public_ip: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 traffic_ip: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manage_ip is not None:
            pulumi.set(__self__, "manage_ip", manage_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_ip is not None:
            pulumi.set(__self__, "traffic_ip", traffic_ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manageIp")
    def manage_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "manage_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="trafficIp")
    def traffic_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "traffic_ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CesAlarmruleAlarmAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CesAlarmruleAlarmAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CesAlarmruleAlarmAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CesAlarmruleAlarmAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[builtins.str],
                 type: builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CesAlarmruleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "suppressDuration":
            suggest = "suppress_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CesAlarmruleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CesAlarmruleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CesAlarmruleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: builtins.str,
                 count: builtins.int,
                 filter: builtins.str,
                 period: builtins.int,
                 value: builtins.int,
                 suppress_duration: Optional[builtins.int] = None,
                 unit: Optional[builtins.str] = None):
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> builtins.str:
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter
    def count(self) -> builtins.int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def filter(self) -> builtins.str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def period(self) -> builtins.int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[builtins.int]:
        return pulumi.get(self, "suppress_duration")

    @property
    @pulumi.getter
    def unit(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class CesAlarmruleInsufficientdataAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CesAlarmruleInsufficientdataAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CesAlarmruleInsufficientdataAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CesAlarmruleInsufficientdataAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[builtins.str],
                 type: builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CesAlarmruleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CesAlarmruleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CesAlarmruleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CesAlarmruleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: builtins.str,
                 namespace: builtins.str,
                 dimensions: Optional[Sequence['outputs.CesAlarmruleMetricDimension']] = None):
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> builtins.str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.CesAlarmruleMetricDimension']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class CesAlarmruleMetricDimension(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CesAlarmruleOkAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CesAlarmruleOkAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CesAlarmruleOkAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CesAlarmruleOkAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[builtins.str],
                 type: builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class ComputeInstanceBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "extendParam":
            suggest = "extend_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: builtins.str,
                 charge_mode: Optional[builtins.str] = None,
                 extend_param: Optional[Mapping[str, builtins.str]] = None,
                 id: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None):
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> builtins.str:
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")


@pulumi.output_type
class ComputeInstanceDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 type: builtins.str,
                 dss_pool_id: Optional[builtins.str] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 snapshot_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")


@pulumi.output_type
class ComputeInstanceNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessNetwork":
            suggest = "access_network"
        elif key == "fixedIpV4":
            suggest = "fixed_ip_v4"
        elif key == "fixedIpV6":
            suggest = "fixed_ip_v6"
        elif key == "ipv6Enable":
            suggest = "ipv6_enable"
        elif key == "sourceDestCheck":
            suggest = "source_dest_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_network: Optional[builtins.bool] = None,
                 fixed_ip_v4: Optional[builtins.str] = None,
                 fixed_ip_v6: Optional[builtins.str] = None,
                 ipv6_enable: Optional[builtins.bool] = None,
                 mac: Optional[builtins.str] = None,
                 port: Optional[builtins.str] = None,
                 source_dest_check: Optional[builtins.bool] = None,
                 uuid: Optional[builtins.str] = None):
        """
        :param builtins.str fixed_ip_v6: schema: Computed
        :param builtins.str port: schema: Computed
        :param builtins.str uuid: schema: Required
        """
        if access_network is not None:
            pulumi.set(__self__, "access_network", access_network)
        if fixed_ip_v4 is not None:
            pulumi.set(__self__, "fixed_ip_v4", fixed_ip_v4)
        if fixed_ip_v6 is not None:
            pulumi.set(__self__, "fixed_ip_v6", fixed_ip_v6)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_dest_check is not None:
            pulumi.set(__self__, "source_dest_check", source_dest_check)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessNetwork")
    def access_network(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "access_network")

    @property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fixed_ip_v4")

    @property
    @pulumi.getter(name="fixedIpV6")
    def fixed_ip_v6(self) -> Optional[builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "fixed_ip_v6")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceDestCheck")
    def source_dest_check(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "source_dest_check")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ComputeInstanceSchedulerHint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dehId":
            suggest = "deh_id"
        elif key == "faultDomain":
            suggest = "fault_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceSchedulerHint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceSchedulerHint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceSchedulerHint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deh_id: Optional[builtins.str] = None,
                 fault_domain: Optional[builtins.str] = None,
                 group: Optional[builtins.str] = None,
                 tenancy: Optional[builtins.str] = None):
        """
        :param builtins.str fault_domain: schema: Internal
        """
        if deh_id is not None:
            pulumi.set(__self__, "deh_id", deh_id)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="dehId")
    def deh_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "deh_id")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[builtins.str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def group(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class ComputeInstanceVolumeAttached(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootIndex":
            suggest = "boot_index"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "pciAddress":
            suggest = "pci_address"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceVolumeAttached. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceVolumeAttached.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceVolumeAttached.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_index: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 pci_address: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.str] = None):
        if boot_index is not None:
            pulumi.set(__self__, "boot_index", boot_index)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if pci_address is not None:
            pulumi.set(__self__, "pci_address", pci_address)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "boot_index")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class CssClusterBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "backupPath":
            suggest = "backup_path"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CssClusterBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CssClusterBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CssClusterBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: builtins.str,
                 agency: Optional[builtins.str] = None,
                 backup_path: Optional[builtins.str] = None,
                 bucket: Optional[builtins.str] = None,
                 keep_days: Optional[builtins.int] = None,
                 prefix: Optional[builtins.str] = None):
        pulumi.set(__self__, "start_time", start_time)
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if backup_path is not None:
            pulumi.set(__self__, "backup_path", backup_path)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def agency(self) -> Optional[builtins.str]:
        return pulumi.get(self, "agency")

    @property
    @pulumi.getter(name="backupPath")
    def backup_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_path")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[builtins.int]:
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class CssClusterNode(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CssClusterNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInfo":
            suggest = "network_info"
        elif key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CssClusterNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CssClusterNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CssClusterNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: builtins.str,
                 network_info: 'outputs.CssClusterNodeConfigNetworkInfo',
                 volume: 'outputs.CssClusterNodeConfigVolume',
                 availability_zone: Optional[builtins.str] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "network_info", network_info)
        pulumi.set(__self__, "volume", volume)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="networkInfo")
    def network_info(self) -> 'outputs.CssClusterNodeConfigNetworkInfo':
        return pulumi.get(self, "network_info")

    @property
    @pulumi.getter
    def volume(self) -> 'outputs.CssClusterNodeConfigVolume':
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[builtins.str]:
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class CssClusterNodeConfigNetworkInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CssClusterNodeConfigNetworkInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CssClusterNodeConfigNetworkInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CssClusterNodeConfigNetworkInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: builtins.str,
                 subnet_id: builtins.str,
                 vpc_id: builtins.str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class CssClusterNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CssClusterNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CssClusterNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CssClusterNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 volume_type: builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class CtsNotificationFilter(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 rules: Sequence[builtins.str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def rules(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class CtsNotificationOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "traceNames":
            suggest = "trace_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CtsNotificationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CtsNotificationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CtsNotificationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: builtins.str,
                 service: builtins.str,
                 trace_names: Sequence[builtins.str]):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @property
    @pulumi.getter
    def resource(self) -> builtins.str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def service(self) -> builtins.str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "trace_names")


@pulumi.output_type
class CtsNotificationOperationUser(dict):
    def __init__(__self__, *,
                 group: builtins.str,
                 users: Sequence[builtins.str]):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def group(self) -> builtins.str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def users(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "users")


@pulumi.output_type
class DcsInstanceBackupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupAts":
            suggest = "backup_ats"
        elif key == "beginAt":
            suggest = "begin_at"
        elif key == "backupType":
            suggest = "backup_type"
        elif key == "periodType":
            suggest = "period_type"
        elif key == "saveDays":
            suggest = "save_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsInstanceBackupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsInstanceBackupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsInstanceBackupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_ats: Sequence[builtins.int],
                 begin_at: builtins.str,
                 backup_type: Optional[builtins.str] = None,
                 period_type: Optional[builtins.str] = None,
                 save_days: Optional[builtins.int] = None):
        pulumi.set(__self__, "backup_ats", backup_ats)
        pulumi.set(__self__, "begin_at", begin_at)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if period_type is not None:
            pulumi.set(__self__, "period_type", period_type)
        if save_days is not None:
            pulumi.set(__self__, "save_days", save_days)

    @property
    @pulumi.getter(name="backupAts")
    def backup_ats(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "backup_ats")

    @property
    @pulumi.getter(name="beginAt")
    def begin_at(self) -> builtins.str:
        return pulumi.get(self, "begin_at")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="periodType")
    def period_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "period_type")

    @property
    @pulumi.getter(name="saveDays")
    def save_days(self) -> Optional[builtins.int]:
        return pulumi.get(self, "save_days")


@pulumi.output_type
class DcsInstanceBandwidthInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginTime":
            suggest = "begin_time"
        elif key == "currentTime":
            suggest = "current_time"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "expandCount":
            suggest = "expand_count"
        elif key == "expandEffectTime":
            suggest = "expand_effect_time"
        elif key == "expandIntervalTime":
            suggest = "expand_interval_time"
        elif key == "maxExpandCount":
            suggest = "max_expand_count"
        elif key == "nextExpandTime":
            suggest = "next_expand_time"
        elif key == "taskRunning":
            suggest = "task_running"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsInstanceBandwidthInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsInstanceBandwidthInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsInstanceBandwidthInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: Optional[builtins.int] = None,
                 begin_time: Optional[builtins.str] = None,
                 current_time: Optional[builtins.str] = None,
                 end_time: Optional[builtins.str] = None,
                 expand_count: Optional[builtins.int] = None,
                 expand_effect_time: Optional[builtins.int] = None,
                 expand_interval_time: Optional[builtins.int] = None,
                 max_expand_count: Optional[builtins.int] = None,
                 next_expand_time: Optional[builtins.str] = None,
                 task_running: Optional[builtins.bool] = None):
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if current_time is not None:
            pulumi.set(__self__, "current_time", current_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if expand_count is not None:
            pulumi.set(__self__, "expand_count", expand_count)
        if expand_effect_time is not None:
            pulumi.set(__self__, "expand_effect_time", expand_effect_time)
        if expand_interval_time is not None:
            pulumi.set(__self__, "expand_interval_time", expand_interval_time)
        if max_expand_count is not None:
            pulumi.set(__self__, "max_expand_count", max_expand_count)
        if next_expand_time is not None:
            pulumi.set(__self__, "next_expand_time", next_expand_time)
        if task_running is not None:
            pulumi.set(__self__, "task_running", task_running)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[builtins.int]:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expandCount")
    def expand_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "expand_count")

    @property
    @pulumi.getter(name="expandEffectTime")
    def expand_effect_time(self) -> Optional[builtins.int]:
        return pulumi.get(self, "expand_effect_time")

    @property
    @pulumi.getter(name="expandIntervalTime")
    def expand_interval_time(self) -> Optional[builtins.int]:
        return pulumi.get(self, "expand_interval_time")

    @property
    @pulumi.getter(name="maxExpandCount")
    def max_expand_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_expand_count")

    @property
    @pulumi.getter(name="nextExpandTime")
    def next_expand_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "next_expand_time")

    @property
    @pulumi.getter(name="taskRunning")
    def task_running(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "task_running")


@pulumi.output_type
class DcsInstanceParameter(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DcsInstanceWhitelist(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsInstanceWhitelist. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsInstanceWhitelist.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsInstanceWhitelist.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 ip_addresses: Sequence[builtins.str]):
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class DcsParametersConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "needRestart":
            suggest = "need_restart"
        elif key == "userPermission":
            suggest = "user_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsParametersConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsParametersConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsParametersConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 need_restart: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 user_permission: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_restart is not None:
            pulumi.set(__self__, "need_restart", need_restart)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_permission is not None:
            pulumi.set(__self__, "user_permission", user_permission)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userPermission")
    def user_permission(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_permission")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DcsRestoreRestoreRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "backupName":
            suggest = "backup_name"
        elif key == "backupRemark":
            suggest = "backup_remark"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "restoreId":
            suggest = "restore_id"
        elif key == "restoreName":
            suggest = "restore_name"
        elif key == "restoreRemark":
            suggest = "restore_remark"
        elif key == "sourceInstanceId":
            suggest = "source_instance_id"
        elif key == "sourceInstanceName":
            suggest = "source_instance_name"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsRestoreRestoreRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsRestoreRestoreRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsRestoreRestoreRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: Optional[builtins.str] = None,
                 backup_name: Optional[builtins.str] = None,
                 backup_remark: Optional[builtins.str] = None,
                 created_at: Optional[builtins.str] = None,
                 error_code: Optional[builtins.str] = None,
                 progress: Optional[builtins.str] = None,
                 restore_id: Optional[builtins.str] = None,
                 restore_name: Optional[builtins.str] = None,
                 restore_remark: Optional[builtins.str] = None,
                 source_instance_id: Optional[builtins.str] = None,
                 source_instance_name: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 updated_at: Optional[builtins.str] = None):
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if backup_name is not None:
            pulumi.set(__self__, "backup_name", backup_name)
        if backup_remark is not None:
            pulumi.set(__self__, "backup_remark", backup_remark)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if restore_id is not None:
            pulumi.set(__self__, "restore_id", restore_id)
        if restore_name is not None:
            pulumi.set(__self__, "restore_name", restore_name)
        if restore_remark is not None:
            pulumi.set(__self__, "restore_remark", restore_remark)
        if source_instance_id is not None:
            pulumi.set(__self__, "source_instance_id", source_instance_id)
        if source_instance_name is not None:
            pulumi.set(__self__, "source_instance_name", source_instance_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_name")

    @property
    @pulumi.getter(name="backupRemark")
    def backup_remark(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_remark")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[builtins.str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter
    def progress(self) -> Optional[builtins.str]:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="restoreId")
    def restore_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "restore_id")

    @property
    @pulumi.getter(name="restoreName")
    def restore_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "restore_name")

    @property
    @pulumi.getter(name="restoreRemark")
    def restore_remark(self) -> Optional[builtins.str]:
        return pulumi.get(self, "restore_remark")

    @property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source_instance_id")

    @property
    @pulumi.getter(name="sourceInstanceName")
    def source_instance_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source_instance_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DdsInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepDays":
            suggest = "keep_days"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_days: builtins.int,
                 start_time: builtins.str,
                 period: Optional[builtins.str] = None):
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> builtins.int:
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def period(self) -> Optional[builtins.str]:
        return pulumi.get(self, "period")


@pulumi.output_type
class DdsInstanceConfiguration(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 type: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DdsInstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsInstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsInstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsInstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 version: builtins.str,
                 storage_engine: Optional[builtins.str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[builtins.str]:
        return pulumi.get(self, "storage_engine")


@pulumi.output_type
class DdsInstanceFlavor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "specCode":
            suggest = "spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsInstanceFlavor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsInstanceFlavor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsInstanceFlavor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num: builtins.int,
                 spec_code: builtins.str,
                 type: builtins.str,
                 size: Optional[builtins.int] = None,
                 storage: Optional[builtins.str] = None):
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def num(self) -> builtins.int:
        return pulumi.get(self, "num")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> builtins.str:
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def storage(self) -> Optional[builtins.str]:
        return pulumi.get(self, "storage")


@pulumi.output_type
class DdsInstanceGroup(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 nodes: Optional[Sequence['outputs.DdsInstanceGroupNode']] = None,
                 size: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None,
                 used: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.DdsInstanceGroupNode']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def used(self) -> Optional[builtins.str]:
        return pulumi.get(self, "used")


@pulumi.output_type
class DdsInstanceGroupNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsInstanceGroupNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsInstanceGroupNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsInstanceGroupNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 private_ip: Optional[builtins.str] = None,
                 public_ip: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str id: Indicates the node ID.
        :param builtins.str name: Indicates the node name.
        :param builtins.str private_ip: Indicates the private IP address of a node.
        :param builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param builtins.str role: Indicates the node role.
        :param builtins.str status: Indicates the node status.
        :param builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[builtins.str]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DdsInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 private_ip: Optional[builtins.str] = None,
                 public_ip: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str id: Indicates the node ID.
        :param builtins.str name: Indicates the node name.
        :param builtins.str private_ip: Indicates the private IP address of a node.
        :param builtins.str public_ip: Indicates the EIP that has been bound on a node.
        :param builtins.str role: Indicates the node role.
        :param builtins.str status: Indicates the node status.
        :param builtins.str type: Indicates the node type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[builtins.str]:
        """
        Indicates the EIP that has been bound on a node.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Indicates the node type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DisStreamPartition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hashRange":
            suggest = "hash_range"
        elif key == "sequenceNumberRange":
            suggest = "sequence_number_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisStreamPartition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisStreamPartition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisStreamPartition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hash_range: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 sequence_number_range: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        if hash_range is not None:
            pulumi.set(__self__, "hash_range", hash_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if sequence_number_range is not None:
            pulumi.set(__self__, "sequence_number_range", sequence_number_range)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="hashRange")
    def hash_range(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hash_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sequenceNumberRange")
    def sequence_number_range(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sequence_number_range")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DliQueueScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impactStartTime":
            suggest = "impact_start_time"
        elif key == "impactStopTime":
            suggest = "impact_stop_time"
        elif key == "maxCu":
            suggest = "max_cu"
        elif key == "minCu":
            suggest = "min_cu"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DliQueueScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DliQueueScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DliQueueScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impact_start_time: builtins.str,
                 impact_stop_time: builtins.str,
                 max_cu: builtins.int,
                 min_cu: builtins.int,
                 priority: builtins.int):
        pulumi.set(__self__, "impact_start_time", impact_start_time)
        pulumi.set(__self__, "impact_stop_time", impact_stop_time)
        pulumi.set(__self__, "max_cu", max_cu)
        pulumi.set(__self__, "min_cu", min_cu)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="impactStartTime")
    def impact_start_time(self) -> builtins.str:
        return pulumi.get(self, "impact_start_time")

    @property
    @pulumi.getter(name="impactStopTime")
    def impact_stop_time(self) -> builtins.str:
        return pulumi.get(self, "impact_stop_time")

    @property
    @pulumi.getter(name="maxCu")
    def max_cu(self) -> builtins.int:
        return pulumi.get(self, "max_cu")

    @property
    @pulumi.getter(name="minCu")
    def min_cu(self) -> builtins.int:
        return pulumi.get(self, "min_cu")

    @property
    @pulumi.getter
    def priority(self) -> builtins.int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class DliQueueSparkDriver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrent":
            suggest = "max_concurrent"
        elif key == "maxInstance":
            suggest = "max_instance"
        elif key == "maxPrefetchInstance":
            suggest = "max_prefetch_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DliQueueSparkDriver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DliQueueSparkDriver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DliQueueSparkDriver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent: Optional[builtins.int] = None,
                 max_instance: Optional[builtins.int] = None,
                 max_prefetch_instance: Optional[builtins.str] = None):
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if max_instance is not None:
            pulumi.set(__self__, "max_instance", max_instance)
        if max_prefetch_instance is not None:
            pulumi.set(__self__, "max_prefetch_instance", max_prefetch_instance)

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter(name="maxInstance")
    def max_instance(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_instance")

    @property
    @pulumi.getter(name="maxPrefetchInstance")
    def max_prefetch_instance(self) -> Optional[builtins.str]:
        return pulumi.get(self, "max_prefetch_instance")


@pulumi.output_type
class DliSparkJobDependentPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DliSparkJobDependentPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DliSparkJobDependentPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DliSparkJobDependentPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 packages: Sequence['outputs.DliSparkJobDependentPackagePackage']):
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "packages", packages)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.DliSparkJobDependentPackagePackage']:
        return pulumi.get(self, "packages")


@pulumi.output_type
class DliSparkJobDependentPackagePackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageName":
            suggest = "package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DliSparkJobDependentPackagePackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DliSparkJobDependentPackagePackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DliSparkJobDependentPackagePackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_name: builtins.str,
                 type: builtins.str):
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> builtins.str:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DmsKafkaInstanceCrossVpcAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedIp":
            suggest = "advertised_ip"
        elif key == "lisenterIp":
            suggest = "lisenter_ip"
        elif key == "listenerIp":
            suggest = "listener_ip"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsKafkaInstanceCrossVpcAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsKafkaInstanceCrossVpcAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsKafkaInstanceCrossVpcAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_ip: Optional[builtins.str] = None,
                 lisenter_ip: Optional[builtins.str] = None,
                 listener_ip: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 port_id: Optional[builtins.str] = None):
        if advertised_ip is not None:
            pulumi.set(__self__, "advertised_ip", advertised_ip)
        if lisenter_ip is not None:
            pulumi.set(__self__, "lisenter_ip", lisenter_ip)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="advertisedIp")
    def advertised_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "advertised_ip")

    @property
    @pulumi.getter(name="lisenterIp")
    @_utilities.deprecated("""typo in lisenter_ip, please use \"listener_ip\" instead.""")
    def lisenter_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lisenter_ip")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class DmsKafkaInstanceParameter(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DmsKafkaInstancePortProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privatePlainAddress":
            suggest = "private_plain_address"
        elif key == "privatePlainDomainName":
            suggest = "private_plain_domain_name"
        elif key == "privatePlainEnable":
            suggest = "private_plain_enable"
        elif key == "privateSaslPlaintextAddress":
            suggest = "private_sasl_plaintext_address"
        elif key == "privateSaslPlaintextDomainName":
            suggest = "private_sasl_plaintext_domain_name"
        elif key == "privateSaslPlaintextEnable":
            suggest = "private_sasl_plaintext_enable"
        elif key == "privateSaslSslAddress":
            suggest = "private_sasl_ssl_address"
        elif key == "privateSaslSslDomainName":
            suggest = "private_sasl_ssl_domain_name"
        elif key == "privateSaslSslEnable":
            suggest = "private_sasl_ssl_enable"
        elif key == "publicPlainAddress":
            suggest = "public_plain_address"
        elif key == "publicPlainDomainName":
            suggest = "public_plain_domain_name"
        elif key == "publicPlainEnable":
            suggest = "public_plain_enable"
        elif key == "publicSaslPlaintextAddress":
            suggest = "public_sasl_plaintext_address"
        elif key == "publicSaslPlaintextDomainName":
            suggest = "public_sasl_plaintext_domain_name"
        elif key == "publicSaslPlaintextEnable":
            suggest = "public_sasl_plaintext_enable"
        elif key == "publicSaslSslAddress":
            suggest = "public_sasl_ssl_address"
        elif key == "publicSaslSslDomainName":
            suggest = "public_sasl_ssl_domain_name"
        elif key == "publicSaslSslEnable":
            suggest = "public_sasl_ssl_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsKafkaInstancePortProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsKafkaInstancePortProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsKafkaInstancePortProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_plain_address: Optional[builtins.str] = None,
                 private_plain_domain_name: Optional[builtins.str] = None,
                 private_plain_enable: Optional[builtins.bool] = None,
                 private_sasl_plaintext_address: Optional[builtins.str] = None,
                 private_sasl_plaintext_domain_name: Optional[builtins.str] = None,
                 private_sasl_plaintext_enable: Optional[builtins.bool] = None,
                 private_sasl_ssl_address: Optional[builtins.str] = None,
                 private_sasl_ssl_domain_name: Optional[builtins.str] = None,
                 private_sasl_ssl_enable: Optional[builtins.bool] = None,
                 public_plain_address: Optional[builtins.str] = None,
                 public_plain_domain_name: Optional[builtins.str] = None,
                 public_plain_enable: Optional[builtins.bool] = None,
                 public_sasl_plaintext_address: Optional[builtins.str] = None,
                 public_sasl_plaintext_domain_name: Optional[builtins.str] = None,
                 public_sasl_plaintext_enable: Optional[builtins.bool] = None,
                 public_sasl_ssl_address: Optional[builtins.str] = None,
                 public_sasl_ssl_domain_name: Optional[builtins.str] = None,
                 public_sasl_ssl_enable: Optional[builtins.bool] = None):
        if private_plain_address is not None:
            pulumi.set(__self__, "private_plain_address", private_plain_address)
        if private_plain_domain_name is not None:
            pulumi.set(__self__, "private_plain_domain_name", private_plain_domain_name)
        if private_plain_enable is not None:
            pulumi.set(__self__, "private_plain_enable", private_plain_enable)
        if private_sasl_plaintext_address is not None:
            pulumi.set(__self__, "private_sasl_plaintext_address", private_sasl_plaintext_address)
        if private_sasl_plaintext_domain_name is not None:
            pulumi.set(__self__, "private_sasl_plaintext_domain_name", private_sasl_plaintext_domain_name)
        if private_sasl_plaintext_enable is not None:
            pulumi.set(__self__, "private_sasl_plaintext_enable", private_sasl_plaintext_enable)
        if private_sasl_ssl_address is not None:
            pulumi.set(__self__, "private_sasl_ssl_address", private_sasl_ssl_address)
        if private_sasl_ssl_domain_name is not None:
            pulumi.set(__self__, "private_sasl_ssl_domain_name", private_sasl_ssl_domain_name)
        if private_sasl_ssl_enable is not None:
            pulumi.set(__self__, "private_sasl_ssl_enable", private_sasl_ssl_enable)
        if public_plain_address is not None:
            pulumi.set(__self__, "public_plain_address", public_plain_address)
        if public_plain_domain_name is not None:
            pulumi.set(__self__, "public_plain_domain_name", public_plain_domain_name)
        if public_plain_enable is not None:
            pulumi.set(__self__, "public_plain_enable", public_plain_enable)
        if public_sasl_plaintext_address is not None:
            pulumi.set(__self__, "public_sasl_plaintext_address", public_sasl_plaintext_address)
        if public_sasl_plaintext_domain_name is not None:
            pulumi.set(__self__, "public_sasl_plaintext_domain_name", public_sasl_plaintext_domain_name)
        if public_sasl_plaintext_enable is not None:
            pulumi.set(__self__, "public_sasl_plaintext_enable", public_sasl_plaintext_enable)
        if public_sasl_ssl_address is not None:
            pulumi.set(__self__, "public_sasl_ssl_address", public_sasl_ssl_address)
        if public_sasl_ssl_domain_name is not None:
            pulumi.set(__self__, "public_sasl_ssl_domain_name", public_sasl_ssl_domain_name)
        if public_sasl_ssl_enable is not None:
            pulumi.set(__self__, "public_sasl_ssl_enable", public_sasl_ssl_enable)

    @property
    @pulumi.getter(name="privatePlainAddress")
    def private_plain_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_plain_address")

    @property
    @pulumi.getter(name="privatePlainDomainName")
    def private_plain_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_plain_domain_name")

    @property
    @pulumi.getter(name="privatePlainEnable")
    def private_plain_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "private_plain_enable")

    @property
    @pulumi.getter(name="privateSaslPlaintextAddress")
    def private_sasl_plaintext_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_sasl_plaintext_address")

    @property
    @pulumi.getter(name="privateSaslPlaintextDomainName")
    def private_sasl_plaintext_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_sasl_plaintext_domain_name")

    @property
    @pulumi.getter(name="privateSaslPlaintextEnable")
    def private_sasl_plaintext_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "private_sasl_plaintext_enable")

    @property
    @pulumi.getter(name="privateSaslSslAddress")
    def private_sasl_ssl_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_sasl_ssl_address")

    @property
    @pulumi.getter(name="privateSaslSslDomainName")
    def private_sasl_ssl_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_sasl_ssl_domain_name")

    @property
    @pulumi.getter(name="privateSaslSslEnable")
    def private_sasl_ssl_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "private_sasl_ssl_enable")

    @property
    @pulumi.getter(name="publicPlainAddress")
    def public_plain_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_plain_address")

    @property
    @pulumi.getter(name="publicPlainDomainName")
    def public_plain_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_plain_domain_name")

    @property
    @pulumi.getter(name="publicPlainEnable")
    def public_plain_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "public_plain_enable")

    @property
    @pulumi.getter(name="publicSaslPlaintextAddress")
    def public_sasl_plaintext_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_sasl_plaintext_address")

    @property
    @pulumi.getter(name="publicSaslPlaintextDomainName")
    def public_sasl_plaintext_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_sasl_plaintext_domain_name")

    @property
    @pulumi.getter(name="publicSaslPlaintextEnable")
    def public_sasl_plaintext_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "public_sasl_plaintext_enable")

    @property
    @pulumi.getter(name="publicSaslSslAddress")
    def public_sasl_ssl_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_sasl_ssl_address")

    @property
    @pulumi.getter(name="publicSaslSslDomainName")
    def public_sasl_ssl_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_sasl_ssl_domain_name")

    @property
    @pulumi.getter(name="publicSaslSslEnable")
    def public_sasl_ssl_enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "public_sasl_ssl_enable")


@pulumi.output_type
class DmsKafkaMessageProducePropertyList(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DmsKafkaPermissionsPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPolicy":
            suggest = "access_policy"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsKafkaPermissionsPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsKafkaPermissionsPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsKafkaPermissionsPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_policy: builtins.str,
                 user_name: builtins.str):
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> builtins.str:
        return pulumi.get(self, "access_policy")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DmsKafkaTopicConfig(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DnsZoneRouter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routerId":
            suggest = "router_id"
        elif key == "routerRegion":
            suggest = "router_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsZoneRouter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsZoneRouter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsZoneRouter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 router_id: builtins.str,
                 router_region: Optional[builtins.str] = None):
        """
        :param builtins.str router_id: The ID of the associated VPC.
        :param builtins.str router_region: The region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> builtins.str:
        """
        The ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[builtins.str]:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "router_region")


@pulumi.output_type
class DrsJobDestinationDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineType":
            suggest = "engine_type"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "sslCertCheckSum":
            suggest = "ssl_cert_check_sum"
        elif key == "sslCertKey":
            suggest = "ssl_cert_key"
        elif key == "sslCertName":
            suggest = "ssl_cert_name"
        elif key == "sslCertPassword":
            suggest = "ssl_cert_password"
        elif key == "sslEnabled":
            suggest = "ssl_enabled"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrsJobDestinationDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrsJobDestinationDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrsJobDestinationDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_type: builtins.str,
                 ip: builtins.str,
                 password: builtins.str,
                 port: builtins.int,
                 user: builtins.str,
                 instance_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 region: Optional[builtins.str] = None,
                 ssl_cert_check_sum: Optional[builtins.str] = None,
                 ssl_cert_key: Optional[builtins.str] = None,
                 ssl_cert_name: Optional[builtins.str] = None,
                 ssl_cert_password: Optional[builtins.str] = None,
                 ssl_enabled: Optional[builtins.bool] = None,
                 subnet_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "user", user)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssl_cert_check_sum is not None:
            pulumi.set(__self__, "ssl_cert_check_sum", ssl_cert_check_sum)
        if ssl_cert_key is not None:
            pulumi.set(__self__, "ssl_cert_key", ssl_cert_key)
        if ssl_cert_name is not None:
            pulumi.set(__self__, "ssl_cert_name", ssl_cert_name)
        if ssl_cert_password is not None:
            pulumi.set(__self__, "ssl_cert_password", ssl_cert_password)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> builtins.str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def user(self) -> builtins.str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sslCertCheckSum")
    def ssl_cert_check_sum(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_check_sum")

    @property
    @pulumi.getter(name="sslCertKey")
    def ssl_cert_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_key")

    @property
    @pulumi.getter(name="sslCertName")
    def ssl_cert_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_name")

    @property
    @pulumi.getter(name="sslCertPassword")
    def ssl_cert_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_password")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DrsJobLimitSpeed(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrsJobLimitSpeed. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrsJobLimitSpeed.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrsJobLimitSpeed.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: builtins.str,
                 speed: builtins.str,
                 start_time: builtins.str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> builtins.str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def speed(self) -> builtins.str:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class DrsJobSourceDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineType":
            suggest = "engine_type"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "sslCertCheckSum":
            suggest = "ssl_cert_check_sum"
        elif key == "sslCertKey":
            suggest = "ssl_cert_key"
        elif key == "sslCertName":
            suggest = "ssl_cert_name"
        elif key == "sslCertPassword":
            suggest = "ssl_cert_password"
        elif key == "sslEnabled":
            suggest = "ssl_enabled"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrsJobSourceDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrsJobSourceDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrsJobSourceDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_type: builtins.str,
                 ip: builtins.str,
                 password: builtins.str,
                 port: builtins.int,
                 user: builtins.str,
                 instance_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 region: Optional[builtins.str] = None,
                 ssl_cert_check_sum: Optional[builtins.str] = None,
                 ssl_cert_key: Optional[builtins.str] = None,
                 ssl_cert_name: Optional[builtins.str] = None,
                 ssl_cert_password: Optional[builtins.str] = None,
                 ssl_enabled: Optional[builtins.bool] = None,
                 subnet_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "user", user)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssl_cert_check_sum is not None:
            pulumi.set(__self__, "ssl_cert_check_sum", ssl_cert_check_sum)
        if ssl_cert_key is not None:
            pulumi.set(__self__, "ssl_cert_key", ssl_cert_key)
        if ssl_cert_name is not None:
            pulumi.set(__self__, "ssl_cert_name", ssl_cert_name)
        if ssl_cert_password is not None:
            pulumi.set(__self__, "ssl_cert_password", ssl_cert_password)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> builtins.str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def user(self) -> builtins.str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sslCertCheckSum")
    def ssl_cert_check_sum(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_check_sum")

    @property
    @pulumi.getter(name="sslCertKey")
    def ssl_cert_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_key")

    @property
    @pulumi.getter(name="sslCertName")
    def ssl_cert_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_name")

    @property
    @pulumi.getter(name="sslCertPassword")
    def ssl_cert_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssl_cert_password")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DwsClusterElb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "privateIpV6":
            suggest = "private_ip_v6"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DwsClusterElb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DwsClusterElb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DwsClusterElb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 private_endpoint: Optional[builtins.str] = None,
                 private_ip: Optional[builtins.str] = None,
                 private_ip_v6: Optional[builtins.str] = None,
                 public_ip: Optional[builtins.str] = None,
                 vpc_id: Optional[builtins.str] = None):
        """
        :param builtins.str id: The ID of the ELB load balancer.
        :param builtins.str name: The name of the ELB load balancer.
        :param builtins.str private_endpoint: The private endpoint of the ELB load balancer.
        :param builtins.str private_ip: The private IP address of the ELB load balancer.
        :param builtins.str private_ip_v6: The IPv6 address of the ELB load balancer.
        :param builtins.str public_ip: The public IP address of the ELB load balancer.
        :param builtins.str vpc_id: The ID of VPC to which the ELB load balancer belongs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_ip_v6 is not None:
            pulumi.set(__self__, "private_ip_v6", private_ip_v6)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the ELB load balancer.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the ELB load balancer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[builtins.str]:
        """
        The private endpoint of the ELB load balancer.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[builtins.str]:
        """
        The private IP address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateIpV6")
    def private_ip_v6(self) -> Optional[builtins.str]:
        """
        The IPv6 address of the ELB load balancer.
        """
        return pulumi.get(self, "private_ip_v6")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[builtins.str]:
        """
        The public IP address of the ELB load balancer.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[builtins.str]:
        """
        The ID of VPC to which the ELB load balancer belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class DwsClusterEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectInfo":
            suggest = "connect_info"
        elif key == "jdbcUrl":
            suggest = "jdbc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DwsClusterEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DwsClusterEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DwsClusterEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_info: Optional[builtins.str] = None,
                 jdbc_url: Optional[builtins.str] = None):
        """
        :param builtins.str connect_info: Private network connection information.
        :param builtins.str jdbc_url: JDBC URL. Format: jdbc:postgresql://<connect_info>/<YOUR_DATABASE_NAME>
        """
        if connect_info is not None:
            pulumi.set(__self__, "connect_info", connect_info)
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)

    @property
    @pulumi.getter(name="connectInfo")
    def connect_info(self) -> Optional[builtins.str]:
        """
        Private network connection information.
        """
        return pulumi.get(self, "connect_info")

    @property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[builtins.str]:
        """
        JDBC URL. Format: jdbc:postgresql://<connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")


@pulumi.output_type
class DwsClusterMaintainWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DwsClusterMaintainWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DwsClusterMaintainWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DwsClusterMaintainWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: Optional[builtins.str] = None,
                 end_time: Optional[builtins.str] = None,
                 start_time: Optional[builtins.str] = None):
        """
        :param builtins.str day: Maintenance time in each week in the unit of day.
        :param builtins.str end_time: Maintenance end time in HH:mm format. The time zone is GMT+0.
        :param builtins.str start_time: Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> Optional[builtins.str]:
        """
        Maintenance time in each week in the unit of day.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        """
        Maintenance end time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        """
        Maintenance start time in HH:mm format. The time zone is GMT+0.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class DwsClusterPublicEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jdbcUrl":
            suggest = "jdbc_url"
        elif key == "publicConnectInfo":
            suggest = "public_connect_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DwsClusterPublicEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DwsClusterPublicEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DwsClusterPublicEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jdbc_url: Optional[builtins.str] = None,
                 public_connect_info: Optional[builtins.str] = None):
        """
        :param builtins.str jdbc_url: JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        :param builtins.str public_connect_info: Public network connection information.
        """
        if jdbc_url is not None:
            pulumi.set(__self__, "jdbc_url", jdbc_url)
        if public_connect_info is not None:
            pulumi.set(__self__, "public_connect_info", public_connect_info)

    @property
    @pulumi.getter(name="jdbcUrl")
    def jdbc_url(self) -> Optional[builtins.str]:
        """
        JDBC URL. Format: jdbc:postgresql://<public_connect_info>/<YOUR_DATABASE_NAME>
        """
        return pulumi.get(self, "jdbc_url")

    @property
    @pulumi.getter(name="publicConnectInfo")
    def public_connect_info(self) -> Optional[builtins.str]:
        """
        Public network connection information.
        """
        return pulumi.get(self, "public_connect_info")


@pulumi.output_type
class DwsClusterPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eipId":
            suggest = "eip_id"
        elif key == "publicBindType":
            suggest = "public_bind_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DwsClusterPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DwsClusterPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DwsClusterPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eip_id: Optional[builtins.str] = None,
                 public_bind_type: Optional[builtins.str] = None):
        """
        :param builtins.str eip_id: The EIP ID.
        :param builtins.str public_bind_type: The bind type of public IP.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[builtins.str]:
        """
        The EIP ID.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[builtins.str]:
        """
        The bind type of public IP.
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class DwsClusterVolume(dict):
    def __init__(__self__, *,
                 capacity: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str capacity: The capacity size, in GB.
        :param builtins.str type: The volume type.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[builtins.str]:
        """
        The capacity size, in GB.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The volume type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ElbIpgroupIpList(dict):
    def __init__(__self__, *,
                 ip: builtins.str,
                 description: Optional[builtins.str] = None):
        pulumi.set(__self__, "ip", ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ElbL7policyFixedResponseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: builtins.str,
                 content_type: Optional[builtins.str] = None,
                 insert_headers_config: Optional['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfig'] = None,
                 message_body: Optional[builtins.str] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfig'] = None,
                 traffic_limit_config: Optional['outputs.ElbL7policyFixedResponseConfigTrafficLimitConfig'] = None):
        pulumi.set(__self__, "status_code", status_code)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.str:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[builtins.str]:
        return pulumi.get(self, "message_body")

    @property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")

    @property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigTrafficLimitConfig']:
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class ElbL7policyFixedResponseConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyFixedResponseConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str,
                 value_type: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyFixedResponseConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: builtins.str):
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7policyFixedResponseConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[builtins.int] = None,
                 per_source_ip_qps: Optional[builtins.int] = None,
                 qps: Optional[builtins.int] = None):
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @property
    @pulumi.getter
    def burst(self) -> Optional[builtins.int]:
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "per_source_ip_qps")

    @property
    @pulumi.getter
    def qps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "qps")


@pulumi.output_type
class ElbL7policyRedirectPoolsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolId":
            suggest = "pool_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_id: builtins.str,
                 weight: Optional[builtins.int] = None):
        pulumi.set(__self__, "pool_id", pool_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> builtins.str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "rewriteUrlConfig":
            suggest = "rewrite_url_config"
        elif key == "rewriteUrlEnabled":
            suggest = "rewrite_url_enabled"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insert_headers_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig'] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig'] = None,
                 rewrite_url_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig'] = None,
                 rewrite_url_enabled: Optional[builtins.bool] = None,
                 traffic_limit_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig'] = None):
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if rewrite_url_config is not None:
            pulumi.set(__self__, "rewrite_url_config", rewrite_url_config)
        if rewrite_url_enabled is not None:
            pulumi.set(__self__, "rewrite_url_enabled", rewrite_url_enabled)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")

    @property
    @pulumi.getter(name="rewriteUrlConfig")
    def rewrite_url_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig']:
        return pulumi.get(self, "rewrite_url_config")

    @property
    @pulumi.getter(name="rewriteUrlEnabled")
    def rewrite_url_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "rewrite_url_enabled")

    @property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig']:
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str,
                 value_type: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: builtins.str):
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig(dict):
    def __init__(__self__, *,
                 host: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None,
                 query: Optional[builtins.str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        return pulumi.get(self, "query")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[builtins.int] = None,
                 per_source_ip_qps: Optional[builtins.int] = None,
                 qps: Optional[builtins.int] = None):
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @property
    @pulumi.getter
    def burst(self) -> Optional[builtins.int]:
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "per_source_ip_qps")

    @property
    @pulumi.getter
    def qps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "qps")


@pulumi.output_type
class ElbL7policyRedirectPoolsStickySessionConfig(dict):
    def __init__(__self__, *,
                 enable: Optional[builtins.bool] = None,
                 timeout: Optional[builtins.int] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ElbL7policyRedirectUrlConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectUrlConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectUrlConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectUrlConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: builtins.str,
                 host: Optional[builtins.str] = None,
                 insert_headers_config: Optional['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfig'] = None,
                 path: Optional[builtins.str] = None,
                 port: Optional[builtins.str] = None,
                 protocol: Optional[builtins.str] = None,
                 query: Optional[builtins.str] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfig'] = None):
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.str:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str,
                 value_type: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: builtins.str):
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7ruleCondition(dict):
    def __init__(__self__, *,
                 value: builtins.str,
                 key: Optional[builtins.str] = None):
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbListenerPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbListenerPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbListenerPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbListenerPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: builtins.int,
                 start_port: builtins.int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> builtins.int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> builtins.int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class ElbPoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbPoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbPoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbPoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None):
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ElbSecurityPolicyListener(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class EvsVolumeAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvsVolumeAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvsVolumeAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvsVolumeAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 instance_id: Optional[builtins.str] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class FgsFunctionCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: builtins.str,
                 args: Optional[builtins.str] = None,
                 command: Optional[builtins.str] = None,
                 user_group_id: Optional[builtins.str] = None,
                 user_id: Optional[builtins.str] = None,
                 working_dir: Optional[builtins.str] = None):
        """
        :param builtins.str url: The URL of SWR image.
        :param builtins.str args: The command line arguments used to start the SWR image.
        :param builtins.str command: The startup commands of the SWR image.
        :param builtins.str user_group_id: The user group ID that used to run SWR image.
        :param builtins.str user_id: The user ID that used to run SWR image.
        :param builtins.str working_dir: The working directory of the SWR image.
        """
        pulumi.set(__self__, "url", url)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The URL of SWR image.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def args(self) -> Optional[builtins.str]:
        """
        The command line arguments used to start the SWR image.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[builtins.str]:
        """
        The startup commands of the SWR image.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[builtins.str]:
        """
        The user group ID that used to run SWR image.
        """
        return pulumi.get(self, "user_group_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[builtins.str]:
        """
        The user ID that used to run SWR image.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[builtins.str]:
        """
        The working directory of the SWR image.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class FgsFunctionFuncMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountPath":
            suggest = "local_mount_path"
        elif key == "mountResource":
            suggest = "mount_resource"
        elif key == "mountSharePath":
            suggest = "mount_share_path"
        elif key == "mountType":
            suggest = "mount_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionFuncMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionFuncMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionFuncMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_path: builtins.str,
                 mount_resource: builtins.str,
                 mount_share_path: builtins.str,
                 mount_type: builtins.str,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.str local_mount_path: The function access path.
        :param builtins.str mount_resource: The ID of the mounted resource (corresponding cloud service).
        :param builtins.str mount_share_path: The remote mount path.
        :param builtins.str mount_type: The mount type.
        :param builtins.str status: The mount status.
        """
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_resource", mount_resource)
        pulumi.set(__self__, "mount_share_path", mount_share_path)
        pulumi.set(__self__, "mount_type", mount_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> builtins.str:
        """
        The function access path.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="mountResource")
    def mount_resource(self) -> builtins.str:
        """
        The ID of the mounted resource (corresponding cloud service).
        """
        return pulumi.get(self, "mount_resource")

    @property
    @pulumi.getter(name="mountSharePath")
    def mount_share_path(self) -> builtins.str:
        """
        The remote mount path.
        """
        return pulumi.get(self, "mount_share_path")

    @property
    @pulumi.getter(name="mountType")
    def mount_type(self) -> builtins.str:
        """
        The mount type.
        """
        return pulumi.get(self, "mount_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The mount status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FgsFunctionNetworkController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerAccessVpcs":
            suggest = "trigger_access_vpcs"
        elif key == "disablePublicNetwork":
            suggest = "disable_public_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionNetworkController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionNetworkController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionNetworkController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_access_vpcs: Sequence['outputs.FgsFunctionNetworkControllerTriggerAccessVpc'],
                 disable_public_network: Optional[builtins.bool] = None):
        """
        :param Sequence['FgsFunctionNetworkControllerTriggerAccessVpcArgs'] trigger_access_vpcs: The configuration of the VPCs that can trigger the function.
        :param builtins.bool disable_public_network: Whether to disable the public network access.
        """
        pulumi.set(__self__, "trigger_access_vpcs", trigger_access_vpcs)
        if disable_public_network is not None:
            pulumi.set(__self__, "disable_public_network", disable_public_network)

    @property
    @pulumi.getter(name="triggerAccessVpcs")
    def trigger_access_vpcs(self) -> Sequence['outputs.FgsFunctionNetworkControllerTriggerAccessVpc']:
        """
        The configuration of the VPCs that can trigger the function.
        """
        return pulumi.get(self, "trigger_access_vpcs")

    @property
    @pulumi.getter(name="disablePublicNetwork")
    def disable_public_network(self) -> Optional[builtins.bool]:
        """
        Whether to disable the public network access.
        """
        return pulumi.get(self, "disable_public_network")


@pulumi.output_type
class FgsFunctionNetworkControllerTriggerAccessVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionNetworkControllerTriggerAccessVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionNetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionNetworkControllerTriggerAccessVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: builtins.str):
        """
        :param builtins.str vpc_id: The ID of the VPC that can trigger the function.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        The ID of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class FgsFunctionReservedInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qualifierName":
            suggest = "qualifier_name"
        elif key == "qualifierType":
            suggest = "qualifier_type"
        elif key == "idleMode":
            suggest = "idle_mode"
        elif key == "tacticsConfig":
            suggest = "tactics_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionReservedInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionReservedInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionReservedInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: builtins.int,
                 qualifier_name: builtins.str,
                 qualifier_type: builtins.str,
                 idle_mode: Optional[builtins.bool] = None,
                 tactics_config: Optional['outputs.FgsFunctionReservedInstanceTacticsConfig'] = None):
        """
        :param builtins.int count: The number of reserved instance.
        :param builtins.str qualifier_name: The version name or alias name.
        :param builtins.str qualifier_type: The qualifier type of reserved instance.
        :param builtins.bool idle_mode: Whether to enable the idle mode.
        :param 'FgsFunctionReservedInstanceTacticsConfigArgs' tactics_config: The auto scaling policies for reserved instance.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "qualifier_name", qualifier_name)
        pulumi.set(__self__, "qualifier_type", qualifier_type)
        if idle_mode is not None:
            pulumi.set(__self__, "idle_mode", idle_mode)
        if tactics_config is not None:
            pulumi.set(__self__, "tactics_config", tactics_config)

    @property
    @pulumi.getter
    def count(self) -> builtins.int:
        """
        The number of reserved instance.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="qualifierName")
    def qualifier_name(self) -> builtins.str:
        """
        The version name or alias name.
        """
        return pulumi.get(self, "qualifier_name")

    @property
    @pulumi.getter(name="qualifierType")
    def qualifier_type(self) -> builtins.str:
        """
        The qualifier type of reserved instance.
        """
        return pulumi.get(self, "qualifier_type")

    @property
    @pulumi.getter(name="idleMode")
    def idle_mode(self) -> Optional[builtins.bool]:
        """
        Whether to enable the idle mode.
        """
        return pulumi.get(self, "idle_mode")

    @property
    @pulumi.getter(name="tacticsConfig")
    def tactics_config(self) -> Optional['outputs.FgsFunctionReservedInstanceTacticsConfig']:
        """
        The auto scaling policies for reserved instance.
        """
        return pulumi.get(self, "tactics_config")


@pulumi.output_type
class FgsFunctionReservedInstanceTacticsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronConfigs":
            suggest = "cron_configs"
        elif key == "metricConfigs":
            suggest = "metric_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionReservedInstanceTacticsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionReservedInstanceTacticsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionReservedInstanceTacticsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_configs: Optional[Sequence['outputs.FgsFunctionReservedInstanceTacticsConfigCronConfig']] = None,
                 metric_configs: Optional[Sequence['outputs.FgsFunctionReservedInstanceTacticsConfigMetricConfig']] = None):
        """
        :param Sequence['FgsFunctionReservedInstanceTacticsConfigCronConfigArgs'] cron_configs: The list of scheduled policy configurations.
        :param Sequence['FgsFunctionReservedInstanceTacticsConfigMetricConfigArgs'] metric_configs: The list of metric policy configurations.
        """
        if cron_configs is not None:
            pulumi.set(__self__, "cron_configs", cron_configs)
        if metric_configs is not None:
            pulumi.set(__self__, "metric_configs", metric_configs)

    @property
    @pulumi.getter(name="cronConfigs")
    def cron_configs(self) -> Optional[Sequence['outputs.FgsFunctionReservedInstanceTacticsConfigCronConfig']]:
        """
        The list of scheduled policy configurations.
        """
        return pulumi.get(self, "cron_configs")

    @property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Optional[Sequence['outputs.FgsFunctionReservedInstanceTacticsConfigMetricConfig']]:
        """
        The list of metric policy configurations.
        """
        return pulumi.get(self, "metric_configs")


@pulumi.output_type
class FgsFunctionReservedInstanceTacticsConfigCronConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredTime":
            suggest = "expired_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionReservedInstanceTacticsConfigCronConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionReservedInstanceTacticsConfigCronConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: builtins.int,
                 cron: builtins.str,
                 expired_time: builtins.int,
                 name: builtins.str,
                 start_time: builtins.int):
        """
        :param builtins.int count: The number of reserved instance to which the policy belongs.
        :param builtins.str cron: The cron expression.
        :param builtins.int expired_time: The expiration timestamp of the policy.
        :param builtins.str name: The name of scheduled policy configuration.
        :param builtins.int start_time: The effective timestamp of policy.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cron", cron)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def count(self) -> builtins.int:
        """
        The number of reserved instance to which the policy belongs.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def cron(self) -> builtins.str:
        """
        The cron expression.
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> builtins.int:
        """
        The expiration timestamp of the policy.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of scheduled policy configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.int:
        """
        The effective timestamp of policy.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class FgsFunctionReservedInstanceTacticsConfigMetricConfig(dict):
    def __init__(__self__, *,
                 min: builtins.int,
                 name: builtins.str,
                 threshold: builtins.int,
                 type: builtins.str):
        """
        :param builtins.int min: The minimun of traffic.
        :param builtins.str name: The name of metric policy.
        :param builtins.int threshold: The metric policy threshold.
        :param builtins.str type: The type of metric policy.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def min(self) -> builtins.int:
        """
        The minimun of traffic.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of metric policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.int:
        """
        The metric policy threshold.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of metric policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FgsFunctionVersion(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 aliases: Optional['outputs.FgsFunctionVersionAliases'] = None,
                 description: Optional[builtins.str] = None):
        """
        :param builtins.str name: The version name.
        :param 'FgsFunctionVersionAliasesArgs' aliases: The aliases management for specified version.
        :param builtins.str description: The description of the version.
        """
        pulumi.set(__self__, "name", name)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The version name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aliases(self) -> Optional['outputs.FgsFunctionVersionAliases']:
        """
        The aliases management for specified version.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the version.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class FgsFunctionVersionAliases(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVersionStrategy":
            suggest = "additional_version_strategy"
        elif key == "additionalVersionWeights":
            suggest = "additional_version_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsFunctionVersionAliases. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsFunctionVersionAliases.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsFunctionVersionAliases.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 additional_version_strategy: Optional[builtins.str] = None,
                 additional_version_weights: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the version alias.
        :param builtins.str additional_version_strategy: The description of the version alias.
        :param builtins.str additional_version_weights: The percentage grayscale configuration of the version alias.
        :param builtins.str description: The description of the version alias.
        """
        pulumi.set(__self__, "name", name)
        if additional_version_strategy is not None:
            pulumi.set(__self__, "additional_version_strategy", additional_version_strategy)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the version alias.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="additionalVersionStrategy")
    def additional_version_strategy(self) -> Optional[builtins.str]:
        """
        The description of the version alias.
        """
        return pulumi.get(self, "additional_version_strategy")

    @property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[builtins.str]:
        """
        The percentage grayscale configuration of the version alias.
        """
        return pulumi.get(self, "additional_version_weights")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the version alias.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GesGraphEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "masterKeyId":
            suggest = "master_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[builtins.bool] = None,
                 master_key_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable: Whether to enable data encryption The value can be true or false. The default value is false.
        :param builtins.str master_key_id: ID of the customer master key created by DEW in the project corresponding to the graph creation.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if master_key_id is not None:
            pulumi.set(__self__, "master_key_id", master_key_id)

    @property
    @pulumi.getter
    def enable(self) -> Optional[builtins.bool]:
        """
        Whether to enable data encryption The value can be true or false. The default value is false.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="masterKeyId")
    def master_key_id(self) -> Optional[builtins.str]:
        """
        ID of the customer master key created by DEW in the project corresponding to the graph creation.
        """
        return pulumi.get(self, "master_key_id")


@pulumi.output_type
class GesGraphLtsOperationTrace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogGroupName":
            suggest = "audit_log_group_name"
        elif key == "enableAudit":
            suggest = "enable_audit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphLtsOperationTrace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphLtsOperationTrace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphLtsOperationTrace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_group_name: Optional[builtins.str] = None,
                 enable_audit: Optional[builtins.bool] = None):
        """
        :param builtins.str audit_log_group_name: LTS log group name.
        :param builtins.bool enable_audit: Whether to enable graph audit. The default value is false.
        """
        if audit_log_group_name is not None:
            pulumi.set(__self__, "audit_log_group_name", audit_log_group_name)
        if enable_audit is not None:
            pulumi.set(__self__, "enable_audit", enable_audit)

    @property
    @pulumi.getter(name="auditLogGroupName")
    def audit_log_group_name(self) -> Optional[builtins.str]:
        """
        LTS log group name.
        """
        return pulumi.get(self, "audit_log_group_name")

    @property
    @pulumi.getter(name="enableAudit")
    def enable_audit(self) -> Optional[builtins.bool]:
        """
        Whether to enable graph audit. The default value is false.
        """
        return pulumi.get(self, "enable_audit")


@pulumi.output_type
class GesGraphPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eipId":
            suggest = "eip_id"
        elif key == "publicBindType":
            suggest = "public_bind_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eip_id: Optional[builtins.str] = None,
                 public_bind_type: Optional[builtins.str] = None):
        """
        :param builtins.str eip_id: The EIP ID.
        :param builtins.str public_bind_type: The bind type of public IP.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[builtins.str]:
        """
        The EIP ID.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[builtins.str]:
        """
        The bind type of public IP.
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class GesGraphVertexIdType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idLength":
            suggest = "id_length"
        elif key == "idType":
            suggest = "id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphVertexIdType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphVertexIdType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphVertexIdType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id_length: Optional[builtins.int] = None,
                 id_type: Optional[builtins.str] = None):
        """
        :param builtins.int id_length: The length of ID.
        :param builtins.str id_type: Vertex ID type.
        """
        if id_length is not None:
            pulumi.set(__self__, "id_length", id_length)
        if id_type is not None:
            pulumi.set(__self__, "id_type", id_type)

    @property
    @pulumi.getter(name="idLength")
    def id_length(self) -> Optional[builtins.int]:
        """
        The length of ID.
        """
        return pulumi.get(self, "id_length")

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> Optional[builtins.str]:
        """
        Vertex ID type.
        """
        return pulumi.get(self, "id_type")


@pulumi.output_type
class IdentityAclIpCidr(dict):
    def __init__(__self__, *,
                 cidr: builtins.str,
                 description: Optional[builtins.str] = None):
        pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def cidr(self) -> builtins.str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class IdentityAclIpRange(dict):
    def __init__(__self__, *,
                 range: builtins.str,
                 description: Optional[builtins.str] = None):
        pulumi.set(__self__, "range", range)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def range(self) -> builtins.str:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class IdentityAgencyProjectRole(dict):
    def __init__(__self__, *,
                 project: builtins.str,
                 roles: Sequence[builtins.str]):
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class IdentityProviderAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "providerUrl":
            suggest = "provider_url"
        elif key == "signingKey":
            suggest = "signing_key"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "responseMode":
            suggest = "response_mode"
        elif key == "responseType":
            suggest = "response_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityProviderAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityProviderAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityProviderAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: builtins.str,
                 client_id: builtins.str,
                 provider_url: builtins.str,
                 signing_key: builtins.str,
                 authorization_endpoint: Optional[builtins.str] = None,
                 response_mode: Optional[builtins.str] = None,
                 response_type: Optional[builtins.str] = None,
                 scopes: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "provider_url", provider_url)
        pulumi.set(__self__, "signing_key", signing_key)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if response_mode is not None:
            pulumi.set(__self__, "response_mode", response_mode)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> builtins.str:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> builtins.str:
        return pulumi.get(self, "provider_url")

    @property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> builtins.str:
        return pulumi.get(self, "signing_key")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="responseMode")
    def response_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "response_mode")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "scopes")


@pulumi.output_type
class IdentityProviderConversionConversionRule(dict):
    def __init__(__self__, *,
                 locals: Sequence['outputs.IdentityProviderConversionConversionRuleLocal'],
                 remotes: Sequence['outputs.IdentityProviderConversionConversionRuleRemote']):
        pulumi.set(__self__, "locals", locals)
        pulumi.set(__self__, "remotes", remotes)

    @property
    @pulumi.getter
    def locals(self) -> Sequence['outputs.IdentityProviderConversionConversionRuleLocal']:
        return pulumi.get(self, "locals")

    @property
    @pulumi.getter
    def remotes(self) -> Sequence['outputs.IdentityProviderConversionConversionRuleRemote']:
        return pulumi.get(self, "remotes")


@pulumi.output_type
class IdentityProviderConversionConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[builtins.str] = None,
                 username: Optional[builtins.str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def group(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class IdentityProviderConversionConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: builtins.str,
                 condition: Optional[builtins.str] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> builtins.str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class IdentityProviderConversionRule(dict):
    def __init__(__self__, *,
                 locals: Optional[Sequence['outputs.IdentityProviderConversionRuleLocal']] = None,
                 remotes: Optional[Sequence['outputs.IdentityProviderConversionRuleRemote']] = None):
        if locals is not None:
            pulumi.set(__self__, "locals", locals)
        if remotes is not None:
            pulumi.set(__self__, "remotes", remotes)

    @property
    @pulumi.getter
    def locals(self) -> Optional[Sequence['outputs.IdentityProviderConversionRuleLocal']]:
        return pulumi.get(self, "locals")

    @property
    @pulumi.getter
    def remotes(self) -> Optional[Sequence['outputs.IdentityProviderConversionRuleRemote']]:
        return pulumi.get(self, "remotes")


@pulumi.output_type
class IdentityProviderConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[builtins.str] = None,
                 username: Optional[builtins.str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def group(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class IdentityProviderConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: Optional[builtins.str] = None,
                 condition: Optional[builtins.str] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class LbPoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbPoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbPoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbPoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None):
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class MapreduceClusterAnalysisCoreNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterAnalysisCoreNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterAnalysisCoreNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterAnalysisCoreNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class MapreduceClusterAnalysisTaskNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterAnalysisTaskNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterAnalysisTaskNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterAnalysisTaskNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class MapreduceClusterBootstrapScript(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failAction":
            suggest = "fail_action"
        elif key == "activeMaster":
            suggest = "active_master"
        elif key == "beforeComponentStart":
            suggest = "before_component_start"
        elif key == "executeNeedSudoRoot":
            suggest = "execute_need_sudo_root"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterBootstrapScript. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterBootstrapScript.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterBootstrapScript.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fail_action: builtins.str,
                 name: builtins.str,
                 nodes: Sequence[builtins.str],
                 uri: builtins.str,
                 active_master: Optional[builtins.bool] = None,
                 before_component_start: Optional[builtins.bool] = None,
                 execute_need_sudo_root: Optional[builtins.bool] = None,
                 parameters: Optional[builtins.str] = None,
                 start_time: Optional[builtins.str] = None,
                 state: Optional[builtins.str] = None):
        """
        :param builtins.str fail_action: The action after the bootstrap action script fails to be executed.
        :param builtins.str name: Name of a bootstrap action script.
        :param Sequence[builtins.str] nodes: Name of the node group where the bootstrap action script is executed.
        :param builtins.str uri: Path of a bootstrap action script. Set this parameter to an OBS bucket path or a local VM path.
        :param builtins.bool active_master: Whether the bootstrap action script runs only on active master nodes.
        :param builtins.bool before_component_start: Whether the bootstrap action script is executed before component start.
        :param builtins.bool execute_need_sudo_root: Whether the bootstrap action script involves root user operations.
        :param builtins.str parameters: Bootstrap action script parameters.
        :param builtins.str start_time: The execution time of one bootstrap action script, in RFC-3339 format.
        :param builtins.str state: The status of one bootstrap action script.
        """
        pulumi.set(__self__, "fail_action", fail_action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "uri", uri)
        if active_master is not None:
            pulumi.set(__self__, "active_master", active_master)
        if before_component_start is not None:
            pulumi.set(__self__, "before_component_start", before_component_start)
        if execute_need_sudo_root is not None:
            pulumi.set(__self__, "execute_need_sudo_root", execute_need_sudo_root)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> builtins.str:
        """
        The action after the bootstrap action script fails to be executed.
        """
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of a bootstrap action script.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence[builtins.str]:
        """
        Name of the node group where the bootstrap action script is executed.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def uri(self) -> builtins.str:
        """
        Path of a bootstrap action script. Set this parameter to an OBS bucket path or a local VM path.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="activeMaster")
    def active_master(self) -> Optional[builtins.bool]:
        """
        Whether the bootstrap action script runs only on active master nodes.
        """
        return pulumi.get(self, "active_master")

    @property
    @pulumi.getter(name="beforeComponentStart")
    def before_component_start(self) -> Optional[builtins.bool]:
        """
        Whether the bootstrap action script is executed before component start.
        """
        return pulumi.get(self, "before_component_start")

    @property
    @pulumi.getter(name="executeNeedSudoRoot")
    def execute_need_sudo_root(self) -> Optional[builtins.bool]:
        """
        Whether the bootstrap action script involves root user operations.
        """
        return pulumi.get(self, "execute_need_sudo_root")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[builtins.str]:
        """
        Bootstrap action script parameters.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        """
        The execution time of one bootstrap action script, in RFC-3339 format.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        The status of one bootstrap action script.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class MapreduceClusterComponentConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.MapreduceClusterComponentConfigConfig'],
                 name: builtins.str):
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.MapreduceClusterComponentConfigConfig']:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class MapreduceClusterComponentConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configFileName":
            suggest = "config_file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterComponentConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterComponentConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterComponentConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_file_name: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "config_file_name", config_file_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configFileName")
    def config_file_name(self) -> builtins.str:
        return pulumi.get(self, "config_file_name")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class MapreduceClusterCustomNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterCustomNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterCustomNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterCustomNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 group_name: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class MapreduceClusterExternalDatasource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentName":
            suggest = "component_name"
        elif key == "roleType":
            suggest = "role_type"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "dataConnectionId":
            suggest = "data_connection_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterExternalDatasource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterExternalDatasource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterExternalDatasource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_name: builtins.str,
                 role_type: builtins.str,
                 source_type: builtins.str,
                 data_connection_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "role_type", role_type)
        pulumi.set(__self__, "source_type", source_type)
        if data_connection_id is not None:
            pulumi.set(__self__, "data_connection_id", data_connection_id)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> builtins.str:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> builtins.str:
        return pulumi.get(self, "role_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="dataConnectionId")
    def data_connection_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_connection_id")


@pulumi.output_type
class MapreduceClusterMasterNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterMasterNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterMasterNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterMasterNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class MapreduceClusterSmnNotify(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriptionName":
            suggest = "subscription_name"
        elif key == "topicUrn":
            suggest = "topic_urn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterSmnNotify. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterSmnNotify.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterSmnNotify.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subscription_name: builtins.str,
                 topic_urn: builtins.str):
        """
        :param builtins.str subscription_name: The subscription rule name.
        :param builtins.str topic_urn: The Uniform Resource Name (URN) of the topic.
        """
        pulumi.set(__self__, "subscription_name", subscription_name)
        pulumi.set(__self__, "topic_urn", topic_urn)

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> builtins.str:
        """
        The subscription rule name.
        """
        return pulumi.get(self, "subscription_name")

    @property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> builtins.str:
        """
        The Uniform Resource Name (URN) of the topic.
        """
        return pulumi.get(self, "topic_urn")


@pulumi.output_type
class MapreduceClusterStreamingCoreNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterStreamingCoreNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterStreamingCoreNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterStreamingCoreNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class MapreduceClusterStreamingTaskNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapreduceClusterStreamingTaskNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapreduceClusterStreamingTaskNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapreduceClusterStreamingTaskNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: builtins.int,
                 flavor: builtins.str,
                 node_number: builtins.int,
                 root_volume_size: builtins.int,
                 root_volume_type: builtins.str,
                 assigned_roles: Optional[Sequence[builtins.str]] = None,
                 data_volume_size: Optional[builtins.int] = None,
                 data_volume_type: Optional[builtins.str] = None,
                 host_ips: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> builtins.int:
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> builtins.int:
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> builtins.int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> builtins.str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class NatGatewaySessionConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpSessionExpireTime":
            suggest = "icmp_session_expire_time"
        elif key == "tcpSessionExpireTime":
            suggest = "tcp_session_expire_time"
        elif key == "tcpTimeWaitTime":
            suggest = "tcp_time_wait_time"
        elif key == "udpSessionExpireTime":
            suggest = "udp_session_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NatGatewaySessionConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NatGatewaySessionConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NatGatewaySessionConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_session_expire_time: Optional[builtins.int] = None,
                 tcp_session_expire_time: Optional[builtins.int] = None,
                 tcp_time_wait_time: Optional[builtins.int] = None,
                 udp_session_expire_time: Optional[builtins.int] = None):
        """
        :param builtins.int icmp_session_expire_time: The ICMP session expiration time.
        :param builtins.int tcp_session_expire_time: The TCP session expiration time.
        :param builtins.int tcp_time_wait_time: The duration of TIME_WAIT state when TCP connection is closed.
        :param builtins.int udp_session_expire_time: The UDP session expiration time.
        """
        if icmp_session_expire_time is not None:
            pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        if tcp_session_expire_time is not None:
            pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        if tcp_time_wait_time is not None:
            pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        if udp_session_expire_time is not None:
            pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> Optional[builtins.int]:
        """
        The ICMP session expiration time.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> Optional[builtins.int]:
        """
        The TCP session expiration time.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> Optional[builtins.int]:
        """
        The duration of TIME_WAIT state when TCP connection is closed.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> Optional[builtins.int]:
        """
        The UDP session expiration time.
        """
        return pulumi.get(self, "udp_session_expire_time")


@pulumi.output_type
class NetworkingSecgroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteAddressGroupId":
            suggest = "remote_address_group_id"
        elif key == "remoteGroupId":
            suggest = "remote_group_id"
        elif key == "remoteIpPrefix":
            suggest = "remote_ip_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkingSecgroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkingSecgroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkingSecgroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 direction: Optional[builtins.str] = None,
                 ethertype: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 port_range_max: Optional[builtins.int] = None,
                 port_range_min: Optional[builtins.int] = None,
                 ports: Optional[builtins.str] = None,
                 priority: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 remote_address_group_id: Optional[builtins.str] = None,
                 remote_group_id: Optional[builtins.str] = None,
                 remote_ip_prefix: Optional[builtins.str] = None):
        """
        :param builtins.int port_range_max: schema: Deprecated
        :param builtins.int port_range_min: schema: Deprecated
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ethertype is not None:
            pulumi.set(__self__, "ethertype", ethertype)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_address_group_id is not None:
            pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip_prefix is not None:
            pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> Optional[builtins.str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def ethertype(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ethertype")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[builtins.int]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @property
    @pulumi.getter
    def ports(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "remote_address_group_id")

    @property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "remote_group_id")

    @property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class ObsBucketAclAccountPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclAccountPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclAccountPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclAccountPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: builtins.str,
                 access_to_acls: Optional[Sequence[builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str account_id: Specifies the account id to authorize. The account id cannot be the bucket owner, 
               and must be unique.
        :param Sequence[builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        pulumi.set(__self__, "account_id", account_id)
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Specifies the account id to authorize. The account id cannot be the bucket owner, 
        and must be unique.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclLogDeliveryUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclLogDeliveryUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclLogDeliveryUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclLogDeliveryUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclOwnerPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclOwnerPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclOwnerPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclOwnerPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclPublicPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclPublicPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclPublicPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclPublicPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketCorsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAgeSeconds":
            suggest = "max_age_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketCorsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketCorsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketCorsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_methods: Sequence[builtins.str],
                 allowed_origins: Sequence[builtins.str],
                 allowed_headers: Optional[Sequence[builtins.str]] = None,
                 expose_headers: Optional[Sequence[builtins.str]] = None,
                 max_age_seconds: Optional[builtins.int] = None):
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class ObsBucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortIncompleteMultipartUploads":
            suggest = "abort_incomplete_multipart_uploads"
        elif key == "noncurrentVersionExpirations":
            suggest = "noncurrent_version_expirations"
        elif key == "noncurrentVersionTransitions":
            suggest = "noncurrent_version_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 name: builtins.str,
                 abort_incomplete_multipart_uploads: Optional[Sequence['outputs.ObsBucketLifecycleRuleAbortIncompleteMultipartUpload']] = None,
                 expirations: Optional[Sequence['outputs.ObsBucketLifecycleRuleExpiration']] = None,
                 noncurrent_version_expirations: Optional[Sequence['outputs.ObsBucketLifecycleRuleNoncurrentVersionExpiration']] = None,
                 noncurrent_version_transitions: Optional[Sequence['outputs.ObsBucketLifecycleRuleNoncurrentVersionTransition']] = None,
                 prefix: Optional[builtins.str] = None,
                 transitions: Optional[Sequence['outputs.ObsBucketLifecycleRuleTransition']] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        if abort_incomplete_multipart_uploads is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_uploads", abort_incomplete_multipart_uploads)
        if expirations is not None:
            pulumi.set(__self__, "expirations", expirations)
        if noncurrent_version_expirations is not None:
            pulumi.set(__self__, "noncurrent_version_expirations", noncurrent_version_expirations)
        if noncurrent_version_transitions is not None:
            pulumi.set(__self__, "noncurrent_version_transitions", noncurrent_version_transitions)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="abortIncompleteMultipartUploads")
    def abort_incomplete_multipart_uploads(self) -> Optional[Sequence['outputs.ObsBucketLifecycleRuleAbortIncompleteMultipartUpload']]:
        return pulumi.get(self, "abort_incomplete_multipart_uploads")

    @property
    @pulumi.getter
    def expirations(self) -> Optional[Sequence['outputs.ObsBucketLifecycleRuleExpiration']]:
        return pulumi.get(self, "expirations")

    @property
    @pulumi.getter(name="noncurrentVersionExpirations")
    def noncurrent_version_expirations(self) -> Optional[Sequence['outputs.ObsBucketLifecycleRuleNoncurrentVersionExpiration']]:
        return pulumi.get(self, "noncurrent_version_expirations")

    @property
    @pulumi.getter(name="noncurrentVersionTransitions")
    def noncurrent_version_transitions(self) -> Optional[Sequence['outputs.ObsBucketLifecycleRuleNoncurrentVersionTransition']]:
        return pulumi.get(self, "noncurrent_version_transitions")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.ObsBucketLifecycleRuleTransition']]:
        return pulumi.get(self, "transitions")


@pulumi.output_type
class ObsBucketLifecycleRuleAbortIncompleteMultipartUpload(dict):
    def __init__(__self__, *,
                 days: builtins.int):
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        return pulumi.get(self, "days")


@pulumi.output_type
class ObsBucketLifecycleRuleExpiration(dict):
    def __init__(__self__, *,
                 days: builtins.int):
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        return pulumi.get(self, "days")


@pulumi.output_type
class ObsBucketLifecycleRuleNoncurrentVersionExpiration(dict):
    def __init__(__self__, *,
                 days: builtins.int):
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        return pulumi.get(self, "days")


@pulumi.output_type
class ObsBucketLifecycleRuleNoncurrentVersionTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketLifecycleRuleNoncurrentVersionTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketLifecycleRuleNoncurrentVersionTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketLifecycleRuleNoncurrentVersionTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days: builtins.int,
                 storage_class: builtins.str):
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class ObsBucketLifecycleRuleTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketLifecycleRuleTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketLifecycleRuleTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketLifecycleRuleTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days: builtins.int,
                 storage_class: builtins.str):
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class ObsBucketLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetBucket":
            suggest = "target_bucket"
        elif key == "targetPrefix":
            suggest = "target_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_bucket: builtins.str,
                 agency: Optional[builtins.str] = None,
                 target_prefix: Optional[builtins.str] = None):
        """
        :param builtins.str agency: schema: Required
        """
        pulumi.set(__self__, "target_bucket", target_bucket)
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if target_prefix is not None:
            pulumi.set(__self__, "target_prefix", target_prefix)

    @property
    @pulumi.getter(name="targetBucket")
    def target_bucket(self) -> builtins.str:
        return pulumi.get(self, "target_bucket")

    @property
    @pulumi.getter
    def agency(self) -> Optional[builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "agency")

    @property
    @pulumi.getter(name="targetPrefix")
    def target_prefix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target_prefix")


@pulumi.output_type
class ObsBucketStorageInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumber":
            suggest = "object_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketStorageInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketStorageInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketStorageInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_number: Optional[builtins.int] = None,
                 size: Optional[builtins.int] = None):
        if object_number is not None:
            pulumi.set(__self__, "object_number", object_number)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="objectNumber")
    def object_number(self) -> Optional[builtins.int]:
        return pulumi.get(self, "object_number")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")


@pulumi.output_type
class ObsBucketWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDocument":
            suggest = "error_document"
        elif key == "indexDocument":
            suggest = "index_document"
        elif key == "redirectAllRequestsTo":
            suggest = "redirect_all_requests_to"
        elif key == "routingRules":
            suggest = "routing_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_document: Optional[builtins.str] = None,
                 index_document: Optional[builtins.str] = None,
                 redirect_all_requests_to: Optional[builtins.str] = None,
                 routing_rules: Optional[builtins.str] = None):
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)
        if routing_rules is not None:
            pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[builtins.str]:
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[builtins.str]:
        return pulumi.get(self, "index_document")

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "redirect_all_requests_to")

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Optional[builtins.str]:
        return pulumi.get(self, "routing_rules")


@pulumi.output_type
class RdsBackupDatabase(dict):
    def __init__(__self__, *,
                 name: builtins.str):
        """
        :param builtins.str name: Database to be backed up for Microsoft SQL Server.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Database to be backed up for Microsoft SQL Server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RdsInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: builtins.str,
                 keep_days: Optional[builtins.int] = None,
                 period: Optional[builtins.str] = None):
        """
        :param builtins.int keep_days: schema: Required
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[builtins.int]:
        """
        schema: Required
        """
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter
    def period(self) -> Optional[builtins.str]:
        return pulumi.get(self, "period")


@pulumi.output_type
class RdsInstanceDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 version: builtins.str,
                 password: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 user_name: Optional[builtins.str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class RdsInstanceMsdtcHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceMsdtcHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceMsdtcHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceMsdtcHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: builtins.str,
                 ip: builtins.str,
                 id: Optional[builtins.str] = None):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "ip", ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class RdsInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RdsInstanceParameter(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class RdsInstanceRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: builtins.str,
                 instance_id: builtins.str,
                 database_name: Optional[Mapping[str, builtins.str]] = None):
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> builtins.str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class RdsInstanceVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryptionId":
            suggest = "disk_encryption_id"
        elif key == "limitSize":
            suggest = "limit_size"
        elif key == "triggerThreshold":
            suggest = "trigger_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsInstanceVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsInstanceVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsInstanceVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: builtins.int,
                 type: builtins.str,
                 disk_encryption_id: Optional[builtins.str] = None,
                 limit_size: Optional[builtins.int] = None,
                 trigger_threshold: Optional[builtins.int] = None):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        if disk_encryption_id is not None:
            pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if trigger_threshold is not None:
            pulumi.set(__self__, "trigger_threshold", trigger_threshold)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "disk_encryption_id")

    @property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "limit_size")

    @property
    @pulumi.getter(name="triggerThreshold")
    def trigger_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "trigger_threshold")


@pulumi.output_type
class RdsMysqlDatabasePrivilegeUser(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 readonly: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Specifies the username of the database account.
        :param builtins.bool readonly: Specifies the read-only permission.
        """
        pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def readonly(self) -> Optional[builtins.bool]:
        """
        Specifies the read-only permission.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class RdsMysqlDatabaseTableRestoreDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsMysqlDatabaseTableRestoreDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsMysqlDatabaseTableRestoreDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsMysqlDatabaseTableRestoreDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: builtins.str,
                 old_name: builtins.str):
        """
        :param builtins.str new_name: Specifies the name of the database after restoration.
        :param builtins.str old_name: Specifies the name of the database before restoration.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> builtins.str:
        """
        Specifies the name of the database after restoration.
        """
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> builtins.str:
        """
        Specifies the name of the database before restoration.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class RdsMysqlDatabaseTableRestoreRestoreTable(dict):
    def __init__(__self__, *,
                 database: builtins.str,
                 tables: Sequence['outputs.RdsMysqlDatabaseTableRestoreRestoreTableTable']):
        """
        :param builtins.str database: Specifies the database name.
        :param Sequence['RdsMysqlDatabaseTableRestoreRestoreTableTableArgs'] tables: Specifies the tables.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.RdsMysqlDatabaseTableRestoreRestoreTableTable']:
        """
        Specifies the tables.
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class RdsMysqlDatabaseTableRestoreRestoreTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsMysqlDatabaseTableRestoreRestoreTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsMysqlDatabaseTableRestoreRestoreTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsMysqlDatabaseTableRestoreRestoreTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: builtins.str,
                 old_name: builtins.str):
        """
        :param builtins.str new_name: Specifies the name of the table after restoration.
        :param builtins.str old_name: Specifies the name of the table before restoration.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> builtins.str:
        """
        Specifies the name of the table after restoration.
        """
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> builtins.str:
        """
        Specifies the name of the table before restoration.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class RdsParametergroupConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsParametergroupConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsParametergroupConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsParametergroupConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 readonly: Optional[builtins.bool] = None,
                 restart_required: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None,
                 value_range: Optional[builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def readonly(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "restart_required")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value_range")


@pulumi.output_type
class RdsParametergroupDatastore(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 version: builtins.str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class RdsPgAccountAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rolBypassRls":
            suggest = "rol_bypass_rls"
        elif key == "rolCanLogin":
            suggest = "rol_can_login"
        elif key == "rolConnLimit":
            suggest = "rol_conn_limit"
        elif key == "rolCreateDb":
            suggest = "rol_create_db"
        elif key == "rolCreateRole":
            suggest = "rol_create_role"
        elif key == "rolInherit":
            suggest = "rol_inherit"
        elif key == "rolReplication":
            suggest = "rol_replication"
        elif key == "rolSuper":
            suggest = "rol_super"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsPgAccountAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsPgAccountAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsPgAccountAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rol_bypass_rls: Optional[builtins.bool] = None,
                 rol_can_login: Optional[builtins.bool] = None,
                 rol_conn_limit: Optional[builtins.int] = None,
                 rol_create_db: Optional[builtins.bool] = None,
                 rol_create_role: Optional[builtins.bool] = None,
                 rol_inherit: Optional[builtins.bool] = None,
                 rol_replication: Optional[builtins.bool] = None,
                 rol_super: Optional[builtins.bool] = None):
        """
        :param builtins.bool rol_bypass_rls: Indicates whether a user bypasses each row-level security policy.
        :param builtins.bool rol_can_login: Indicates whether a user can log in to the database.
        :param builtins.int rol_conn_limit: Indicates the maximum number of concurrent connections to a DB instance.
        :param builtins.bool rol_create_db: Indicates whether a user can create a database.
        :param builtins.bool rol_create_role: Indicates whether a user can create other sub-users.
        :param builtins.bool rol_inherit: Indicates whether a user automatically inherits the permissions of the role to which the
               user belongs.
        :param builtins.bool rol_replication: Indicates whether the user is a replication role.
        :param builtins.bool rol_super: Indicates whether a user has the super-user permission.
        """
        if rol_bypass_rls is not None:
            pulumi.set(__self__, "rol_bypass_rls", rol_bypass_rls)
        if rol_can_login is not None:
            pulumi.set(__self__, "rol_can_login", rol_can_login)
        if rol_conn_limit is not None:
            pulumi.set(__self__, "rol_conn_limit", rol_conn_limit)
        if rol_create_db is not None:
            pulumi.set(__self__, "rol_create_db", rol_create_db)
        if rol_create_role is not None:
            pulumi.set(__self__, "rol_create_role", rol_create_role)
        if rol_inherit is not None:
            pulumi.set(__self__, "rol_inherit", rol_inherit)
        if rol_replication is not None:
            pulumi.set(__self__, "rol_replication", rol_replication)
        if rol_super is not None:
            pulumi.set(__self__, "rol_super", rol_super)

    @property
    @pulumi.getter(name="rolBypassRls")
    def rol_bypass_rls(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user bypasses each row-level security policy.
        """
        return pulumi.get(self, "rol_bypass_rls")

    @property
    @pulumi.getter(name="rolCanLogin")
    def rol_can_login(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user can log in to the database.
        """
        return pulumi.get(self, "rol_can_login")

    @property
    @pulumi.getter(name="rolConnLimit")
    def rol_conn_limit(self) -> Optional[builtins.int]:
        """
        Indicates the maximum number of concurrent connections to a DB instance.
        """
        return pulumi.get(self, "rol_conn_limit")

    @property
    @pulumi.getter(name="rolCreateDb")
    def rol_create_db(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user can create a database.
        """
        return pulumi.get(self, "rol_create_db")

    @property
    @pulumi.getter(name="rolCreateRole")
    def rol_create_role(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user can create other sub-users.
        """
        return pulumi.get(self, "rol_create_role")

    @property
    @pulumi.getter(name="rolInherit")
    def rol_inherit(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user automatically inherits the permissions of the role to which the
        user belongs.
        """
        return pulumi.get(self, "rol_inherit")

    @property
    @pulumi.getter(name="rolReplication")
    def rol_replication(self) -> Optional[builtins.bool]:
        """
        Indicates whether the user is a replication role.
        """
        return pulumi.get(self, "rol_replication")

    @property
    @pulumi.getter(name="rolSuper")
    def rol_super(self) -> Optional[builtins.bool]:
        """
        Indicates whether a user has the super-user permission.
        """
        return pulumi.get(self, "rol_super")


@pulumi.output_type
class RdsPgHbaHostBasedAuthentication(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 database: builtins.str,
                 method: builtins.str,
                 type: builtins.str,
                 user: builtins.str,
                 mask: Optional[builtins.str] = None):
        """
        :param builtins.str address: Specifies the client IP address.
        :param builtins.str database: Specifies the database name.
        :param builtins.str method: Specifies the authentication mode.
        :param builtins.str type: Specifies the connection type.
        :param builtins.str user: Specifies the Name of a user.
        :param builtins.str mask: Specifies the subnet mask.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user", user)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        Specifies the client IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def method(self) -> builtins.str:
        """
        Specifies the authentication mode.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Specifies the connection type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> builtins.str:
        """
        Specifies the Name of a user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def mask(self) -> Optional[builtins.str]:
        """
        Specifies the subnet mask.
        """
        return pulumi.get(self, "mask")


@pulumi.output_type
class RdsReadReplicaInstanceDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsReadReplicaInstanceDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsReadReplicaInstanceDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsReadReplicaInstanceDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None,
                 version: Optional[builtins.str] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RdsReadReplicaInstanceParameter(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class RdsReadReplicaInstanceVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryptionId":
            suggest = "disk_encryption_id"
        elif key == "limitSize":
            suggest = "limit_size"
        elif key == "triggerThreshold":
            suggest = "trigger_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RdsReadReplicaInstanceVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RdsReadReplicaInstanceVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RdsReadReplicaInstanceVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 disk_encryption_id: Optional[builtins.str] = None,
                 limit_size: Optional[builtins.int] = None,
                 size: Optional[builtins.int] = None,
                 trigger_threshold: Optional[builtins.int] = None):
        """
        :param builtins.str disk_encryption_id: schema: Computed
        """
        pulumi.set(__self__, "type", type)
        if disk_encryption_id is not None:
            pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if trigger_threshold is not None:
            pulumi.set(__self__, "trigger_threshold", trigger_threshold)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> Optional[builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "disk_encryption_id")

    @property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "limit_size")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="triggerThreshold")
    def trigger_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "trigger_threshold")


@pulumi.output_type
class RdsSqlserverDatabasePrivilegeUser(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 readonly: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Specifies the username of the database account.
        :param builtins.bool readonly: Specifies the read-only permission.
        """
        pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Specifies the username of the database account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def readonly(self) -> Optional[builtins.bool]:
        """
        Specifies the read-only permission.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class SfsFileSystemAccessRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "accessRuleId":
            suggest = "access_rule_id"
        elif key == "accessTo":
            suggest = "access_to"
        elif key == "accessType":
            suggest = "access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SfsFileSystemAccessRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SfsFileSystemAccessRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SfsFileSystemAccessRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[builtins.str] = None,
                 access_rule_id: Optional[builtins.str] = None,
                 access_to: Optional[builtins.str] = None,
                 access_type: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if access_rule_id is not None:
            pulumi.set(__self__, "access_rule_id", access_rule_id)
        if access_to is not None:
            pulumi.set(__self__, "access_to", access_to)
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[builtins.str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "access_rule_id")

    @property
    @pulumi.getter(name="accessTo")
    def access_to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "access_to")

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SfsTurboDuTaskDirUsage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileCounts":
            suggest = "file_counts"
        elif key == "usedCapacity":
            suggest = "used_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SfsTurboDuTaskDirUsage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SfsTurboDuTaskDirUsage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SfsTurboDuTaskDirUsage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_counts: Optional[Sequence['outputs.SfsTurboDuTaskDirUsageFileCount']] = None,
                 message: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None,
                 used_capacity: Optional[builtins.int] = None):
        if file_counts is not None:
            pulumi.set(__self__, "file_counts", file_counts)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if used_capacity is not None:
            pulumi.set(__self__, "used_capacity", used_capacity)

    @property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Optional[Sequence['outputs.SfsTurboDuTaskDirUsageFileCount']]:
        return pulumi.get(self, "file_counts")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> Optional[builtins.int]:
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class SfsTurboDuTaskDirUsageFileCount(dict):
    def __init__(__self__, *,
                 block: Optional[builtins.int] = None,
                 char: Optional[builtins.int] = None,
                 dir: Optional[builtins.int] = None,
                 pipe: Optional[builtins.int] = None,
                 regular: Optional[builtins.int] = None,
                 socket: Optional[builtins.int] = None,
                 symlink: Optional[builtins.int] = None):
        if block is not None:
            pulumi.set(__self__, "block", block)
        if char is not None:
            pulumi.set(__self__, "char", char)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if pipe is not None:
            pulumi.set(__self__, "pipe", pipe)
        if regular is not None:
            pulumi.set(__self__, "regular", regular)
        if socket is not None:
            pulumi.set(__self__, "socket", socket)
        if symlink is not None:
            pulumi.set(__self__, "symlink", symlink)

    @property
    @pulumi.getter
    def block(self) -> Optional[builtins.int]:
        return pulumi.get(self, "block")

    @property
    @pulumi.getter
    def char(self) -> Optional[builtins.int]:
        return pulumi.get(self, "char")

    @property
    @pulumi.getter
    def dir(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def pipe(self) -> Optional[builtins.int]:
        return pulumi.get(self, "pipe")

    @property
    @pulumi.getter
    def regular(self) -> Optional[builtins.int]:
        return pulumi.get(self, "regular")

    @property
    @pulumi.getter
    def socket(self) -> Optional[builtins.int]:
        return pulumi.get(self, "socket")

    @property
    @pulumi.getter
    def symlink(self) -> Optional[builtins.int]:
        return pulumi.get(self, "symlink")


@pulumi.output_type
class SfsTurboObsTargetObs(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 endpoint: builtins.str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class SmnSubscriptionExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "signSecret":
            suggest = "sign_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmnSubscriptionExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmnSubscriptionExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmnSubscriptionExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[builtins.str] = None,
                 client_secret: Optional[builtins.str] = None,
                 keyword: Optional[builtins.str] = None,
                 sign_secret: Optional[builtins.str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if keyword is not None:
            pulumi.set(__self__, "keyword", keyword)
        if sign_secret is not None:
            pulumi.set(__self__, "sign_secret", sign_secret)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[builtins.str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter(name="signSecret")
    def sign_secret(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sign_secret")


@pulumi.output_type
class SmnSubscriptionFilterPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringEquals":
            suggest = "string_equals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmnSubscriptionFilterPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmnSubscriptionFilterPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmnSubscriptionFilterPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 string_equals: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str name: The filter policy name. The policy name must be unique.
        :param Sequence[builtins.str] string_equals: The string array for exact match.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if string_equals is not None:
            pulumi.set(__self__, "string_equals", string_equals)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The filter policy name. The policy name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stringEquals")
    def string_equals(self) -> Optional[Sequence[builtins.str]]:
        """
        The string array for exact match.
        """
        return pulumi.get(self, "string_equals")


@pulumi.output_type
class SwrOrganizationPermissionsSelfPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwrOrganizationPermissionsSelfPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwrOrganizationPermissionsSelfPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwrOrganizationPermissionsSelfPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: Optional[builtins.str] = None,
                 user_id: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None):
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def permission(self) -> Optional[builtins.str]:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class SwrOrganizationPermissionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwrOrganizationPermissionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwrOrganizationPermissionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwrOrganizationPermissionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: builtins.str,
                 user_id: builtins.str,
                 user_name: Optional[builtins.str] = None):
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def permission(self) -> builtins.str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> builtins.str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class VpcAddressGroupIpExtraSet(dict):
    def __init__(__self__, *,
                 ip: builtins.str,
                 remarks: Optional[builtins.str] = None):
        pulumi.set(__self__, "ip", ip)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[builtins.str]:
        return pulumi.get(self, "remarks")


@pulumi.output_type
class VpcBandwidthPublicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcBandwidthPublicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcBandwidthPublicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcBandwidthPublicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VpcEipBandwidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareType":
            suggest = "share_type"
        elif key == "chargeMode":
            suggest = "charge_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcEipBandwidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcEipBandwidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcEipBandwidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_type: builtins.str,
                 charge_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None):
        """
        :param builtins.str share_type: Whether the bandwidth is dedicated or shared.
        :param builtins.str charge_mode: Whether the bandwidth is billed by traffic or by bandwidth size.
        :param builtins.str id: The shared bandwidth ID.
        :param builtins.str name: The dedicated bandwidth name.
        :param builtins.int size: The dedicated bandwidth size.
        """
        pulumi.set(__self__, "share_type", share_type)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> builtins.str:
        """
        Whether the bandwidth is dedicated or shared.
        """
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        """
        Whether the bandwidth is billed by traffic or by bandwidth size.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The shared bandwidth ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The dedicated bandwidth name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        """
        The dedicated bandwidth size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class VpcEipPublicip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcEipPublicip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcEipPublicip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcEipPublicip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 port_id: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str ip_address: The EIP address to be assigned.
        :param builtins.int ip_version: The IP version.
        :param builtins.str port_id: schema: Deprecated
        :param builtins.str type: The EIP type.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        """
        The EIP address to be assigned.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        """
        The IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[builtins.str]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpcRoute(dict):
    def __init__(__self__, *,
                 destination: Optional[builtins.str] = None,
                 nexthop: Optional[builtins.str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if nexthop is not None:
            pulumi.set(__self__, "nexthop", nexthop)

    @property
    @pulumi.getter
    def destination(self) -> Optional[builtins.str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthop(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class VpcRouteTableRoute(dict):
    def __init__(__self__, *,
                 destination: builtins.str,
                 nexthop: builtins.str,
                 type: builtins.str,
                 description: Optional[builtins.str] = None):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def destination(self) -> builtins.str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthop(self) -> builtins.str:
        return pulumi.get(self, "nexthop")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class VpcepServiceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "endpointId":
            suggest = "endpoint_id"
        elif key == "packetId":
            suggest = "packet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcepServiceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcepServiceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcepServiceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 domain_id: Optional[builtins.str] = None,
                 endpoint_id: Optional[builtins.str] = None,
                 packet_id: Optional[builtins.int] = None,
                 status: Optional[builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if packet_id is not None:
            pulumi.set(__self__, "packet_id", packet_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "packet_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class VpcepServicePortMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servicePort":
            suggest = "service_port"
        elif key == "terminalPort":
            suggest = "terminal_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcepServicePortMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcepServicePortMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcepServicePortMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[builtins.str] = None,
                 service_port: Optional[builtins.int] = None,
                 terminal_port: Optional[builtins.int] = None):
        """
        :param builtins.int service_port: schema: Required
        :param builtins.int terminal_port: schema: Required
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_port is not None:
            pulumi.set(__self__, "service_port", service_port)
        if terminal_port is not None:
            pulumi.set(__self__, "terminal_port", terminal_port)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> Optional[builtins.int]:
        """
        schema: Required
        """
        return pulumi.get(self, "service_port")

    @property
    @pulumi.getter(name="terminalPort")
    def terminal_port(self) -> Optional[builtins.int]:
        """
        schema: Required
        """
        return pulumi.get(self, "terminal_port")


@pulumi.output_type
class VpnConnectionIkepolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "ikeVersion":
            suggest = "ike_version"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "localId":
            suggest = "local_id"
        elif key == "localIdType":
            suggest = "local_id_type"
        elif key == "peerId":
            suggest = "peer_id"
        elif key == "peerIdType":
            suggest = "peer_id_type"
        elif key == "phase1NegotiationMode":
            suggest = "phase1_negotiation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionIkepolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionIkepolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionIkepolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[builtins.str] = None,
                 authentication_method: Optional[builtins.str] = None,
                 dh_group: Optional[builtins.str] = None,
                 dpd: Optional['outputs.VpnConnectionIkepolicyDpd'] = None,
                 encryption_algorithm: Optional[builtins.str] = None,
                 ike_version: Optional[builtins.str] = None,
                 lifetime_seconds: Optional[builtins.int] = None,
                 local_id: Optional[builtins.str] = None,
                 local_id_type: Optional[builtins.str] = None,
                 peer_id: Optional[builtins.str] = None,
                 peer_id_type: Optional[builtins.str] = None,
                 pfs: Optional[builtins.str] = None,
                 phase1_negotiation_mode: Optional[builtins.str] = None):
        """
        :param builtins.str authentication_algorithm: The authentication algorithm, SHA1 and MD5 are less secure, please use them with caution.
        :param builtins.str authentication_method: The authentication method during IKE negotiation.
        :param builtins.str dh_group: Specifies the DH group used for key exchange in phase 1.
        :param 'VpnConnectionIkepolicyDpdArgs' dpd: Specifies the dead peer detection (DPD) object.
        :param builtins.str encryption_algorithm: The encryption algorithm, 3DES is less secure, please use them with caution.
        :param builtins.str ike_version: The IKE negotiation version.
        :param builtins.int lifetime_seconds: The life cycle of SA in seconds, when the life cycle expires, IKE SA will be automatically updated.
        :param builtins.str local_id: The local ID.
        :param builtins.str local_id_type: The local ID type.
        :param builtins.str peer_id: The peer ID.
        :param builtins.str peer_id_type: The peer ID type.
        :param builtins.str pfs: The DH key group used by PFS.
        :param builtins.str phase1_negotiation_mode: The negotiation mode, only works when the ike_version is v1.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if local_id_type is not None:
            pulumi.set(__self__, "local_id_type", local_id_type)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_id_type is not None:
            pulumi.set(__self__, "peer_id_type", peer_id_type)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1_negotiation_mode is not None:
            pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[builtins.str]:
        """
        The authentication algorithm, SHA1 and MD5 are less secure, please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[builtins.str]:
        """
        The authentication method during IKE negotiation.
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[builtins.str]:
        """
        Specifies the DH group used for key exchange in phase 1.
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter
    def dpd(self) -> Optional['outputs.VpnConnectionIkepolicyDpd']:
        """
        Specifies the dead peer detection (DPD) object.
        """
        return pulumi.get(self, "dpd")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[builtins.str]:
        """
        The encryption algorithm, 3DES is less secure, please use them with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[builtins.str]:
        """
        The IKE negotiation version.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[builtins.int]:
        """
        The life cycle of SA in seconds, when the life cycle expires, IKE SA will be automatically updated.
        """
        return pulumi.get(self, "lifetime_seconds")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[builtins.str]:
        """
        The local ID.
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> Optional[builtins.str]:
        """
        The local ID type.
        """
        return pulumi.get(self, "local_id_type")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[builtins.str]:
        """
        The peer ID.
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> Optional[builtins.str]:
        """
        The peer ID type.
        """
        return pulumi.get(self, "peer_id_type")

    @property
    @pulumi.getter
    def pfs(self) -> Optional[builtins.str]:
        """
        The DH key group used by PFS.
        """
        return pulumi.get(self, "pfs")

    @property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> Optional[builtins.str]:
        """
        The negotiation mode, only works when the ike_version is v1.
        """
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class VpnConnectionIkepolicyDpd(dict):
    def __init__(__self__, *,
                 interval: Optional[builtins.int] = None,
                 msg: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None):
        """
        :param builtins.int interval: Specifies the DPD idle timeout period.
        :param builtins.str msg: Specifies the format of DPD packets.
        :param builtins.int timeout: Specifies the interval for retransmitting DPD packets.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.int]:
        """
        Specifies the DPD idle timeout period.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        """
        Specifies the format of DPD packets.
        """
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        Specifies the interval for retransmitting DPD packets.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class VpnConnectionIpsecpolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "encapsulationMode":
            suggest = "encapsulation_mode"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "transformProtocol":
            suggest = "transform_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionIpsecpolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionIpsecpolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionIpsecpolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[builtins.str] = None,
                 encapsulation_mode: Optional[builtins.str] = None,
                 encryption_algorithm: Optional[builtins.str] = None,
                 lifetime_seconds: Optional[builtins.int] = None,
                 pfs: Optional[builtins.str] = None,
                 transform_protocol: Optional[builtins.str] = None):
        """
        :param builtins.str authentication_algorithm: The authentication algorithm, SHA1 and MD5 are less secure, please use them with caution.
        :param builtins.str encapsulation_mode: The encapsulation mode, only **tunnel** supported for now.
        :param builtins.str encryption_algorithm: The encryption algorithm, 3DES is less secure, please use them with caution.
        :param builtins.int lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
        :param builtins.str pfs: The DH key group used by PFS.
        :param builtins.str transform_protocol: The transform protocol. Only **esp** supported for now.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if transform_protocol is not None:
            pulumi.set(__self__, "transform_protocol", transform_protocol)

    @property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[builtins.str]:
        """
        The authentication algorithm, SHA1 and MD5 are less secure, please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[builtins.str]:
        """
        The encapsulation mode, only **tunnel** supported for now.
        """
        return pulumi.get(self, "encapsulation_mode")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[builtins.str]:
        """
        The encryption algorithm, 3DES is less secure, please use them with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[builtins.int]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        """
        return pulumi.get(self, "lifetime_seconds")

    @property
    @pulumi.getter
    def pfs(self) -> Optional[builtins.str]:
        """
        The DH key group used by PFS.
        """
        return pulumi.get(self, "pfs")

    @property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> Optional[builtins.str]:
        """
        The transform protocol. Only **esp** supported for now.
        """
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class VpnConnectionPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleIndex":
            suggest = "rule_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Optional[Sequence[builtins.str]] = None,
                 rule_index: Optional[builtins.int] = None,
                 source: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] destinations: The list of destination CIDRs.
        :param builtins.int rule_index: The rule index.
        :param builtins.str source: The source CIDR.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of destination CIDRs.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[builtins.int]:
        """
        The rule index.
        """
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The source CIDR.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class VpnGatewayCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateChain":
            suggest = "certificate_chain"
        elif key == "encCertificate":
            suggest = "enc_certificate"
        elif key == "encPrivateKey":
            suggest = "enc_private_key"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "certificateChainExpireTime":
            suggest = "certificate_chain_expire_time"
        elif key == "certificateChainSerialNumber":
            suggest = "certificate_chain_serial_number"
        elif key == "certificateChainSubject":
            suggest = "certificate_chain_subject"
        elif key == "certificateExpireTime":
            suggest = "certificate_expire_time"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateSerialNumber":
            suggest = "certificate_serial_number"
        elif key == "certificateSubject":
            suggest = "certificate_subject"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "encCertificateExpireTime":
            suggest = "enc_certificate_expire_time"
        elif key == "encCertificateSerialNumber":
            suggest = "enc_certificate_serial_number"
        elif key == "encCertificateSubject":
            suggest = "enc_certificate_subject"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_chain: builtins.str,
                 content: builtins.str,
                 enc_certificate: builtins.str,
                 enc_private_key: builtins.str,
                 name: builtins.str,
                 private_key: builtins.str,
                 certificate_chain_expire_time: Optional[builtins.str] = None,
                 certificate_chain_serial_number: Optional[builtins.str] = None,
                 certificate_chain_subject: Optional[builtins.str] = None,
                 certificate_expire_time: Optional[builtins.str] = None,
                 certificate_id: Optional[builtins.str] = None,
                 certificate_serial_number: Optional[builtins.str] = None,
                 certificate_subject: Optional[builtins.str] = None,
                 created_at: Optional[builtins.str] = None,
                 enc_certificate_expire_time: Optional[builtins.str] = None,
                 enc_certificate_serial_number: Optional[builtins.str] = None,
                 enc_certificate_subject: Optional[builtins.str] = None,
                 issuer: Optional[builtins.str] = None,
                 signature_algorithm: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 updated_at: Optional[builtins.str] = None):
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        if certificate_chain_expire_time is not None:
            pulumi.set(__self__, "certificate_chain_expire_time", certificate_chain_expire_time)
        if certificate_chain_serial_number is not None:
            pulumi.set(__self__, "certificate_chain_serial_number", certificate_chain_serial_number)
        if certificate_chain_subject is not None:
            pulumi.set(__self__, "certificate_chain_subject", certificate_chain_subject)
        if certificate_expire_time is not None:
            pulumi.set(__self__, "certificate_expire_time", certificate_expire_time)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_serial_number is not None:
            pulumi.set(__self__, "certificate_serial_number", certificate_serial_number)
        if certificate_subject is not None:
            pulumi.set(__self__, "certificate_subject", certificate_subject)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enc_certificate_expire_time is not None:
            pulumi.set(__self__, "enc_certificate_expire_time", enc_certificate_expire_time)
        if enc_certificate_serial_number is not None:
            pulumi.set(__self__, "enc_certificate_serial_number", enc_certificate_serial_number)
        if enc_certificate_subject is not None:
            pulumi.set(__self__, "enc_certificate_subject", enc_certificate_subject)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> builtins.str:
        return pulumi.get(self, "certificate_chain")

    @property
    @pulumi.getter
    def content(self) -> builtins.str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> builtins.str:
        return pulumi.get(self, "enc_certificate")

    @property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> builtins.str:
        return pulumi.get(self, "enc_private_key")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> builtins.str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="certificateChainExpireTime")
    def certificate_chain_expire_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_chain_expire_time")

    @property
    @pulumi.getter(name="certificateChainSerialNumber")
    def certificate_chain_serial_number(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_chain_serial_number")

    @property
    @pulumi.getter(name="certificateChainSubject")
    def certificate_chain_subject(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_chain_subject")

    @property
    @pulumi.getter(name="certificateExpireTime")
    def certificate_expire_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_expire_time")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSerialNumber")
    def certificate_serial_number(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_serial_number")

    @property
    @pulumi.getter(name="certificateSubject")
    def certificate_subject(self) -> Optional[builtins.str]:
        return pulumi.get(self, "certificate_subject")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="encCertificateExpireTime")
    def enc_certificate_expire_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "enc_certificate_expire_time")

    @property
    @pulumi.getter(name="encCertificateSerialNumber")
    def enc_certificate_serial_number(self) -> Optional[builtins.str]:
        return pulumi.get(self, "enc_certificate_serial_number")

    @property
    @pulumi.getter(name="encCertificateSubject")
    def enc_certificate_subject(self) -> Optional[builtins.str]:
        return pulumi.get(self, "enc_certificate_subject")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[builtins.str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[builtins.str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class VpnGatewayEip1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayEip1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayEip1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayEip1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[builtins.str] = None,
                 bandwidth_name: Optional[builtins.str] = None,
                 bandwidth_size: Optional[builtins.int] = None,
                 charge_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str bandwidth_id: The bandwidth ID.
        :param builtins.str bandwidth_name: The bandwidth name.
        :param builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        :param builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        :param builtins.str id: The public IP ID.
        :param builtins.str ip_address: The public IP address.
        :param builtins.int ip_version: The public IP version.
        :param builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[builtins.str]:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[builtins.int]:
        """
        Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        """
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewayEip2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayEip2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayEip2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayEip2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[builtins.str] = None,
                 bandwidth_name: Optional[builtins.str] = None,
                 bandwidth_size: Optional[builtins.int] = None,
                 charge_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str bandwidth_id: The bandwidth ID.
        :param builtins.str bandwidth_name: The bandwidth name.
        :param builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        :param builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        :param builtins.str id: The public IP ID.
        :param builtins.str ip_address: The public IP address.
        :param builtins.int ip_version: The public IP version.
        :param builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[builtins.str]:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[builtins.int]:
        """
        Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        """
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewayMasterEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayMasterEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayMasterEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayMasterEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[builtins.str] = None,
                 bandwidth_name: Optional[builtins.str] = None,
                 bandwidth_size: Optional[builtins.int] = None,
                 charge_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str bandwidth_id: The bandwidth ID.
        :param builtins.str bandwidth_name: The bandwidth name.
        :param builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        :param builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        :param builtins.str id: The public IP ID.
        :param builtins.str ip_address: The public IP address.
        :param builtins.int ip_version: The public IP version.
        :param builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[builtins.str]:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[builtins.int]:
        """
        Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        """
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewaySlaveEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewaySlaveEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewaySlaveEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewaySlaveEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[builtins.str] = None,
                 bandwidth_name: Optional[builtins.str] = None,
                 bandwidth_size: Optional[builtins.int] = None,
                 charge_mode: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 ip_version: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str bandwidth_id: The bandwidth ID.
        :param builtins.str bandwidth_name: The bandwidth name.
        :param builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        :param builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        :param builtins.str id: The public IP ID.
        :param builtins.str ip_address: The public IP address.
        :param builtins.int ip_version: The public IP version.
        :param builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[builtins.str]:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[builtins.int]:
        """
        Bandwidth size in Mbit/s. When the flavor is **V300**, the value cannot be greater than **300**.
        """
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_num: builtins.int,
                 entity_type: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str,
                 value: builtins.str):
        """
        :param builtins.int bind_num: The number of bound APIs.
        :param builtins.str entity_type: The entity type of the ACL policy.
        :param builtins.str id: The ID of the ACL policy.
        :param builtins.str name: The name of the ACL policy.
        :param builtins.str type: The type of the ACL policy.
        :param builtins.str updated_at: The latest update time of the policy.
        :param builtins.str value: The value of the ACL policy.
        """
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> builtins.str:
        """
        The entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the ACL policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the policy.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the ACL policy.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiAssociatedAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_id: builtins.str,
                 bind_time: builtins.str,
                 entity_type: builtins.str,
                 env_id: builtins.str,
                 env_name: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str bind_id: The bind ID.
        :param builtins.str bind_time: The time that the ACL policy is bound to the API.
        :param builtins.str entity_type: The entity type of the ACL policy.
        :param builtins.str env_id: The ID of the environment where the API is published.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str id: The ID of the ACL policy.
        :param builtins.str name: The name of the ACL policy.
        :param builtins.str type: The type of the ACL policy.
        :param builtins.str value: One or more objects from which the access will be controlled.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> builtins.str:
        """
        The time that the ACL policy is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> builtins.str:
        """
        The entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the ACL policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        One or more objects from which the access will be controlled.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiAssociatedApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 bind_id: builtins.str,
                 bind_time: builtins.str,
                 description: builtins.str,
                 env_id: builtins.str,
                 env_name: builtins.str,
                 id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str bind_id: The bind ID.
        :param builtins.str bind_time: The time that the application is bound to the API.
        :param builtins.str description: The description of the application.
        :param builtins.str env_id: The ID of the environment where the API is published.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str id: The ID of the application.
        :param builtins.str name: The name of the application.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> builtins.str:
        """
        The time that the application is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApigApiAssociatedPluginsPluginResult(dict):
    def __init__(__self__, *,
                 bind_id: builtins.str,
                 bind_time: builtins.str,
                 content: builtins.str,
                 description: builtins.str,
                 env_id: builtins.str,
                 env_name: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str bind_id: The bind ID.
        :param builtins.str bind_time: The time that the plugin is bound to the API.
        :param builtins.str content: The configuration details for the plugin.
        :param builtins.str description: The description of the plugin.
        :param builtins.str env_id: The ID of the environment where the API is published.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str id: The ID of the plugin.
        :param builtins.str name: The name of the plugin.
        :param builtins.str type: The type of the plugin.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> builtins.str:
        """
        The time that the plugin is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter
    def content(self) -> builtins.str:
        """
        The configuration details for the plugin.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the plugin.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the plugin.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigApiAssociatedSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 bind_id: builtins.str,
                 bind_time: builtins.str,
                 env_id: builtins.str,
                 env_name: builtins.str,
                 id: builtins.str,
                 key: builtins.str,
                 name: builtins.str,
                 secret: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str bind_id: The bind ID.
        :param builtins.str bind_time: The time that the signature is bound to the API.
        :param builtins.str env_id: The ID of the environment where the API is published.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str id: The ID of the signature.
        :param builtins.str key: The signature key.
        :param builtins.str name: The name of the signature.
        :param builtins.str secret: The signature secret.
        :param builtins.str type: The type of the signature.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> builtins.str:
        """
        The time that the signature is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The signature key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the signature.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> builtins.str:
        """
        The signature secret.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the signature.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_id: builtins.str,
                 bind_time: builtins.str,
                 created_at: builtins.str,
                 description: builtins.str,
                 env_name: builtins.str,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 max_app_requests: builtins.int,
                 max_ip_requests: builtins.int,
                 max_user_requests: builtins.int,
                 name: builtins.str,
                 period: builtins.int,
                 period_unit: builtins.str,
                 type: builtins.str,
                 user_throttles: Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
        :param builtins.str bind_id: The bind ID.
        :param builtins.str bind_time: The time that the throttling policy is bound to the API, in RFC3339 format.
        :param builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param builtins.str description: The description of the throttling policy.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str id: The ID of the throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param builtins.str name: The name of the throttling policy.
        :param builtins.int period: The period of time for limiting the number of API calls.
        :param builtins.str period_unit: The time unit for limiting the number of API calls.
        :param builtins.str type: The type of the throttling policy.
        :param Sequence['GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        """
        return pulumi.get(self, "app_throttles")

    @property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> builtins.str:
        """
        The time that the throttling policy is bound to the API, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the throttling policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> builtins.str:
        """
        The time unit for limiting the number of API calls.
        """
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the throttling policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 throttling_object_name: builtins.str):
        """
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 throttling_object_name: builtins.str):
        """
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigApiBackendParamResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.str,
                 location: builtins.str,
                 name: builtins.str,
                 request_id: builtins.str,
                 system_param_type: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: The description of the constant or system parameter.
        :param builtins.str id: The ID of the backend parameter.
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The name of parameter.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str system_param_type: The type of the system parameter.
        :param builtins.str type: The name of parameter.
        :param builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiBasicConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 backend_type: builtins.str,
                 cors: builtins.bool,
                 description: builtins.str,
                 env_id: builtins.str,
                 env_name: builtins.str,
                 group_id: builtins.str,
                 group_name: builtins.str,
                 group_version: builtins.str,
                 id: builtins.str,
                 matching: builtins.str,
                 name: builtins.str,
                 publish_id: builtins.str,
                 published_at: builtins.str,
                 registered_at: builtins.str,
                 request_method: builtins.str,
                 request_path: builtins.str,
                 request_protocol: builtins.str,
                 security_authentication: builtins.str,
                 simple_authentication: builtins.bool,
                 tags: Sequence[builtins.str],
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str authorizer_id: The ID of the authorizer to which the API request used.
        :param builtins.str backend_type: The backend type of the API.
        :param builtins.bool cors: Whether CORS is supported.
        :param builtins.str description: The description of the API.
        :param builtins.str env_id: The ID of the environment where the API is published.
        :param builtins.str env_name: The name of the environment where the API is published.
        :param builtins.str group_id: The ID of group corresponding to the API.
        :param builtins.str group_name: The name of group corresponding to the API.
        :param builtins.str group_version: The version of group corresponding to the API.
        :param builtins.str id: The ID of the API.
        :param builtins.str matching: The matching mode of the API.
        :param builtins.str name: The name of the API.
        :param builtins.str publish_id: The ID of publish corresponding to the API.
        :param builtins.str published_at: The published time of the API, in RFC3339 format.
        :param builtins.str registered_at: The registered time of the API, in RFC3339 format.
        :param builtins.str request_method: The request method of the API.
        :param builtins.str request_path: The request address of the API.
        :param builtins.str request_protocol: The request protocol of the API.
        :param builtins.str security_authentication: The security authentication mode of the API request.
        :param builtins.bool simple_authentication: Whether the authentication of the application code is enabled.
        :param Sequence[builtins.str] tags: The list of tags configuration.
        :param builtins.str type: The type of the API.
        :param builtins.str updated_at: The latest update time of the API, in RFC3339 format.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_type", backend_type)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "group_version", group_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "matching", matching)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publish_id", publish_id)
        pulumi.set(__self__, "published_at", published_at)
        pulumi.set(__self__, "registered_at", registered_at)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_path", request_path)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "security_authentication", security_authentication)
        pulumi.set(__self__, "simple_authentication", simple_authentication)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the authorizer to which the API request used.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> builtins.str:
        """
        The backend type of the API.
        """
        return pulumi.get(self, "backend_type")

    @property
    @pulumi.getter
    def cors(self) -> builtins.bool:
        """
        Whether CORS is supported.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the API.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        """
        The ID of group corresponding to the API.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        The name of group corresponding to the API.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupVersion")
    def group_version(self) -> builtins.str:
        """
        The version of group corresponding to the API.
        """
        return pulumi.get(self, "group_version")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def matching(self) -> builtins.str:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "matching")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> builtins.str:
        """
        The ID of publish corresponding to the API.
        """
        return pulumi.get(self, "publish_id")

    @property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> builtins.str:
        """
        The published time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "published_at")

    @property
    @pulumi.getter(name="registeredAt")
    def registered_at(self) -> builtins.str:
        """
        The registered time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "registered_at")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> builtins.str:
        """
        The request address of the API.
        """
        return pulumi.get(self, "request_path")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> builtins.str:
        """
        The request protocol of the API.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> builtins.str:
        """
        The security authentication mode of the API request.
        """
        return pulumi.get(self, "security_authentication")

    @property
    @pulumi.getter(name="simpleAuthentication")
    def simple_authentication(self) -> builtins.bool:
        """
        Whether the authentication of the application code is enabled.
        """
        return pulumi.get(self, "simple_authentication")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        The list of tags configuration.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the API.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigApiFuncGraphResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 function_alias_urn: builtins.str,
                 function_urn: builtins.str,
                 id: builtins.str,
                 invocation_type: builtins.str,
                 network_type: builtins.str,
                 request_protocol: builtins.str,
                 timeout: builtins.int,
                 version: builtins.str):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str id: The ID of the FunctionGraph backend configuration.
        :param builtins.str invocation_type: The invocation type.
        :param builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the FunctionGraph backend configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> builtins.str:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> builtins.str:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> builtins.str:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApigApiFuncGraphPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 backend_params: Sequence['outputs.GetApigApiFuncGraphPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiFuncGraphPolicyConditionResult'],
                 effective_mode: builtins.str,
                 function_alias_urn: builtins.str,
                 function_urn: builtins.str,
                 id: builtins.str,
                 invocation_type: builtins.str,
                 name: builtins.str,
                 network_type: builtins.str,
                 request_protocol: builtins.str,
                 timeout: builtins.int,
                 version: builtins.str):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApigApiFuncGraphPolicyBackendParamArgs'] backend_params: The configaiton list of the backend parameters.
        :param Sequence['GetApigApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str id: The ID of the FunctionGraph backend policy.
        :param builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param builtins.str name: The name of the backend policy.
        :param builtins.str network_type: The network (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiFuncGraphPolicyBackendParamResult']:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiFuncGraphPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the FunctionGraph backend policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> builtins.str:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the backend policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> builtins.str:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> builtins.str:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApigApiFuncGraphPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.str,
                 location: builtins.str,
                 name: builtins.str,
                 request_id: builtins.str,
                 system_param_type: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: The description of the constant or system parameter.
        :param builtins.str id: The ID of the backend parameter.
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The name of parameter.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str system_param_type: The type of the system parameter.
        :param builtins.str type: The name of parameter.
        :param builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiFuncGraphPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: builtins.str,
                 frontend_authorizer_name: builtins.str,
                 id: builtins.str,
                 param_name: builtins.str,
                 request_id: builtins.str,
                 request_location: builtins.str,
                 source: builtins.str,
                 sys_name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str id: The ID of the backend policy condition.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str request_location: The location of the corresponding request parameter.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type of the backend policy.
        :param builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiMockResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 id: builtins.str,
                 response: builtins.str,
                 status_code: builtins.int):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str id: The ID of the mock backend configuration.
        :param builtins.str response: The response of the mock backend configuration.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the mock backend configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def response(self) -> builtins.str:
        """
        The response of the mock backend configuration.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApigApiMockPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 backend_params: Sequence['outputs.GetApigApiMockPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiMockPolicyConditionResult'],
                 effective_mode: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 response: builtins.str,
                 status_code: builtins.int):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApigApiMockPolicyBackendParamArgs'] backend_params: The configuration list of backend parameters.
        :param Sequence['GetApigApiMockPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str id: The ID of the mock backend policy.
        :param builtins.str name: The backend policy name.
        :param builtins.str response: The response of the backend policy.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiMockPolicyBackendParamResult']:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiMockPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the mock backend policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The backend policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def response(self) -> builtins.str:
        """
        The response of the backend policy.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApigApiMockPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.str,
                 location: builtins.str,
                 name: builtins.str,
                 request_id: builtins.str,
                 system_param_type: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: The description of the constant or system parameter.
        :param builtins.str id: The ID of the backend parameter.
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The name of parameter.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str system_param_type: The type of the system parameter.
        :param builtins.str type: The name of parameter.
        :param builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiMockPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: builtins.str,
                 frontend_authorizer_name: builtins.str,
                 id: builtins.str,
                 param_name: builtins.str,
                 request_id: builtins.str,
                 request_location: builtins.str,
                 source: builtins.str,
                 sys_name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str id: The ID of the backend policy condition.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str request_location: The location of the corresponding request parameter.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type of the backend policy.
        :param builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiRequestParamResult(dict):
    def __init__(__self__, *,
                 default: builtins.str,
                 description: builtins.str,
                 enumeration: builtins.str,
                 example: builtins.str,
                 id: builtins.str,
                 location: builtins.str,
                 maximum: builtins.int,
                 minimum: builtins.int,
                 name: builtins.str,
                 passthrough: builtins.bool,
                 required: builtins.bool,
                 type: builtins.str,
                 valid_enable: builtins.int):
        """
        :param builtins.str default: The default value of the parameter.
        :param builtins.str description: The parameter description.
        :param builtins.str enumeration: The enumerated value.
        :param builtins.str example: The parameter example.
        :param builtins.str id: The ID of the request parameter.
        :param builtins.str location: Where this parameter is located.
        :param builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param builtins.str name: The name of the request parameter.
        :param builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param builtins.bool required: Whether this parameter is required.
        :param builtins.str type: The parameter type.
        :param builtins.int valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enumeration", enumeration)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "passthrough", passthrough)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "valid_enable", valid_enable)

    @property
    @pulumi.getter
    def default(self) -> builtins.str:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The parameter description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enumeration(self) -> builtins.str:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @property
    @pulumi.getter
    def example(self) -> builtins.str:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the request parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maximum(self) -> builtins.int:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> builtins.int:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the request parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passthrough(self) -> builtins.bool:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter
    def required(self) -> builtins.bool:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> builtins.int:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class GetApigApiWebResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 backend_address: builtins.str,
                 host_header: builtins.str,
                 id: builtins.str,
                 path: builtins.str,
                 request_method: builtins.str,
                 request_protocol: builtins.str,
                 retry_count: builtins.int,
                 ssl_enable: builtins.bool,
                 timeout: builtins.int,
                 vpc_channel_id: builtins.str):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str id: The ID of the backend configuration.
        :param builtins.str path: The backend request path.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str request_protocol: The web protocol type of the API request.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> builtins.str:
        """
        The backend service address.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> builtins.str:
        """
        The web protocol type of the API request.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> builtins.bool:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApigApiWebPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: builtins.str,
                 backend_address: builtins.str,
                 backend_params: Sequence['outputs.GetApigApiWebPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiWebPolicyConditionResult'],
                 effective_mode: builtins.str,
                 host_header: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 path: builtins.str,
                 request_method: builtins.str,
                 request_protocol: builtins.str,
                 retry_count: builtins.int,
                 timeout: builtins.int,
                 vpc_channel_id: builtins.str):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address
        :param Sequence['GetApigApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
        :param Sequence['GetApigApiWebPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str id: The ID of the web policy.
        :param builtins.str name: The name of the web policy.
        :param builtins.str path: The backend request address.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str request_protocol: The backend request protocol.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> builtins.str:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiWebPolicyBackendParamResult']:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiWebPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the web policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApigApiWebPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.str,
                 location: builtins.str,
                 name: builtins.str,
                 request_id: builtins.str,
                 system_param_type: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: The description of the constant or system parameter.
        :param builtins.str id: The ID of the backend parameter.
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The name of parameter.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str system_param_type: The type of the system parameter.
        :param builtins.str type: The name of parameter.
        :param builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiWebPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: builtins.str,
                 frontend_authorizer_name: builtins.str,
                 id: builtins.str,
                 param_name: builtins.str,
                 request_id: builtins.str,
                 request_location: builtins.str,
                 source: builtins.str,
                 sys_name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str id: The ID of the backend policy condition.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str request_id: The ID of the corresponding request parameter.
        :param builtins.str request_location: The location of the corresponding request parameter.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type of the backend policy.
        :param builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigAppcodesAppcodeResult(dict):
    def __init__(__self__, *,
                 application_id: builtins.str,
                 created_at: builtins.str,
                 id: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str application_id: The ID of the application.
        :param builtins.str created_at: The creation time of the APPCODE, in RFC3339 format.
        :param builtins.str id: The ID of the APPCODE.
        :param builtins.str value: The APPCODE value (content).
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the APPCODE, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the APPCODE.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The APPCODE value (content).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApplicationQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 bound_app_num: builtins.int,
                 call_limits: builtins.int,
                 created_at: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 time_interval: builtins.int,
                 time_unit: builtins.str):
        """
        :param builtins.int bound_app_num: The number of applications bound to the quota policy.
        :param builtins.int call_limits: The maximum number of times a application quota can be called.
        :param builtins.str created_at: The creation time of the application quota, in RFC3339 format.
        :param builtins.str description: The description of the application quota.
        :param builtins.str id: The ID of the application quota.
        :param builtins.str name: The name of the application quota.
        :param builtins.int time_interval: The time limit of a quota.
        :param builtins.str time_unit: The time unit.
        """
        pulumi.set(__self__, "bound_app_num", bound_app_num)
        pulumi.set(__self__, "call_limits", call_limits)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_interval", time_interval)
        pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="boundAppNum")
    def bound_app_num(self) -> builtins.int:
        """
        The number of applications bound to the quota policy.
        """
        return pulumi.get(self, "bound_app_num")

    @property
    @pulumi.getter(name="callLimits")
    def call_limits(self) -> builtins.int:
        """
        The maximum number of times a application quota can be called.
        """
        return pulumi.get(self, "call_limits")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the application quota, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the application quota.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the application quota.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the application quota.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> builtins.int:
        """
        The time limit of a quota.
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> builtins.str:
        """
        The time unit.
        """
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetApigApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app_key: builtins.str,
                 app_secret: builtins.str,
                 app_type: builtins.str,
                 bind_num: builtins.int,
                 created_at: builtins.str,
                 created_by: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 status: builtins.int,
                 updated_at: builtins.str):
        """
        :param builtins.str app_key: The key of the application.
        :param builtins.str app_secret: The secret of the application.
        :param builtins.str app_type: The type of the application.
        :param builtins.int bind_num: The number of bound APIs.
        :param builtins.str created_at: The creation time of the application.
        :param builtins.str created_by: The creator of the application.
        :param builtins.str description: The description of the application.
        :param builtins.str id: The ID of the application.
        :param builtins.str name: The name of the application.
        :param builtins.int status: The status of the application.
        :param builtins.str updated_at: The latest update time of the application.
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "app_secret", app_secret)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> builtins.str:
        """
        The key of the application.
        """
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> builtins.str:
        """
        The secret of the application.
        """
        return pulumi.get(self, "app_secret")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> builtins.str:
        """
        The type of the application.
        """
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the application.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The creator of the application.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> builtins.int:
        """
        The status of the application.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the application.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigChannelsVpcChannelResult(dict):
    def __init__(__self__, *,
                 balance_strategy: builtins.int,
                 created_at: builtins.str,
                 id: builtins.str,
                 member_groups: Sequence['outputs.GetApigChannelsVpcChannelMemberGroupResult'],
                 member_type: builtins.str,
                 name: builtins.str,
                 port: builtins.int,
                 type: builtins.int):
        """
        :param builtins.int balance_strategy: The distribution algorithm.
        :param builtins.str created_at: The creation time of channel, in RFC3339 format.
        :param builtins.str id: The ID of the VPC channel.
        :param Sequence['GetApigChannelsVpcChannelMemberGroupArgs'] member_groups: The parameter member groups of the VPC channels.
        :param builtins.str member_type: The member type of the VPC channel.
        :param builtins.str name: The name of the VPC channel.
        :param builtins.int port: The port of the backend server.
        :param builtins.int type: The type of the VPC channel.
        """
        pulumi.set(__self__, "balance_strategy", balance_strategy)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "member_groups", member_groups)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> builtins.int:
        """
        The distribution algorithm.
        """
        return pulumi.get(self, "balance_strategy")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of channel, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the VPC channel.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> Sequence['outputs.GetApigChannelsVpcChannelMemberGroupResult']:
        """
        The parameter member groups of the VPC channels.
        """
        return pulumi.get(self, "member_groups")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> builtins.str:
        """
        The member type of the VPC channel.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the VPC channel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port of the backend server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> builtins.int:
        """
        The type of the VPC channel.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigChannelsVpcChannelMemberGroupResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.str,
                 microservice_labels: Sequence['outputs.GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult'],
                 microservice_port: builtins.int,
                 microservice_version: builtins.str,
                 name: builtins.str,
                 weight: builtins.int):
        """
        :param builtins.str description: The description of the member group.
        :param builtins.str id: The ID of the member group.
        :param Sequence['GetApigChannelsVpcChannelMemberGroupMicroserviceLabelArgs'] microservice_labels: The microservice tags of the backend server group.
        :param builtins.int microservice_port: The microservice port of the backend server group.
        :param builtins.str microservice_version: The microservice version of the backend server group.
        :param builtins.str name: The name of the member group.
        :param builtins.int weight: The weight of the current member group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "microservice_labels", microservice_labels)
        pulumi.set(__self__, "microservice_port", microservice_port)
        pulumi.set(__self__, "microservice_version", microservice_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the member group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the member group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Sequence['outputs.GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult']:
        """
        The microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> builtins.int:
        """
        The microservice port of the backend server group.
        """
        return pulumi.get(self, "microservice_port")

    @property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> builtins.str:
        """
        The microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the member group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def weight(self) -> builtins.int:
        """
        The weight of the current member group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name of the microservice label.
        :param builtins.str value: The value of the microservice label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the microservice label.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the microservice label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigCustomAuthorizersAuthorizerResult(dict):
    def __init__(__self__, *,
                 cache_age: builtins.int,
                 created_at: builtins.str,
                 function_alias_uri: builtins.str,
                 function_type: builtins.str,
                 function_urn: builtins.str,
                 function_version: builtins.str,
                 id: builtins.str,
                 identities: Sequence['outputs.GetApigCustomAuthorizersAuthorizerIdentityResult'],
                 is_body_send: builtins.bool,
                 name: builtins.str,
                 network_type: builtins.str,
                 type: builtins.str,
                 user_data: builtins.str):
        """
        :param builtins.int cache_age: The maximum cache age of custom authorizer.
        :param builtins.str created_at: The creation time of custom authorizer.
        :param builtins.str function_alias_uri: The version alias URI of the FGS function.
        :param builtins.str function_type: The type of the FGS function.
        :param builtins.str function_urn: The URN of the FGS function.
        :param builtins.str function_version: The version of the FGS function.
        :param builtins.str id: The ID of the custom authorizer.
        :param Sequence['GetApigCustomAuthorizersAuthorizerIdentityArgs'] identities: The parameter identities of the custom authorizer.
        :param builtins.bool is_body_send: Whether to send the body of custom authorizer.
        :param builtins.str name: The name of the custom authorizer.
        :param builtins.str network_type: The network architecture types of function.
        :param builtins.str type: The type of the custom authorizer.
        :param builtins.str user_data: The user data of custom authorizer.
        """
        pulumi.set(__self__, "cache_age", cache_age)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "function_alias_uri", function_alias_uri)
        pulumi.set(__self__, "function_type", function_type)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "function_version", function_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_body_send", is_body_send)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="cacheAge")
    def cache_age(self) -> builtins.int:
        """
        The maximum cache age of custom authorizer.
        """
        return pulumi.get(self, "cache_age")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of custom authorizer.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="functionAliasUri")
    def function_alias_uri(self) -> builtins.str:
        """
        The version alias URI of the FGS function.
        """
        return pulumi.get(self, "function_alias_uri")

    @property
    @pulumi.getter(name="functionType")
    def function_type(self) -> builtins.str:
        """
        The type of the FGS function.
        """
        return pulumi.get(self, "function_type")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FGS function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> builtins.str:
        """
        The version of the FGS function.
        """
        return pulumi.get(self, "function_version")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the custom authorizer.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetApigCustomAuthorizersAuthorizerIdentityResult']:
        """
        The parameter identities of the custom authorizer.
        """
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="isBodySend")
    def is_body_send(self) -> builtins.bool:
        """
        Whether to send the body of custom authorizer.
        """
        return pulumi.get(self, "is_body_send")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the custom authorizer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> builtins.str:
        """
        The network architecture types of function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the custom authorizer.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> builtins.str:
        """
        The user data of custom authorizer.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class GetApigCustomAuthorizersAuthorizerIdentityResult(dict):
    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 validation: builtins.str):
        """
        :param builtins.str location: The parameter location of identity.
        :param builtins.str name: The name of the parameter to be verified.
        :param builtins.str validation: The parameter verification expression of identity.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The parameter location of identity.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the parameter to be verified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def validation(self) -> builtins.str:
        """
        The parameter verification expression of identity.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GetApigEndpointConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 domain_id: builtins.str,
                 id: builtins.str,
                 packet_id: builtins.int,
                 status: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str created_at: The creation time of the endpoint connection, in RFC3339 format.
        :param builtins.str domain_id: The IAM account ID of the endpoint connection creator.
        :param builtins.str id: The ID of the endpoint connection.
        :param builtins.int packet_id: The packet ID of the endpoint connection.
        :param builtins.str status: The current status of the endpoint connection.
        :param builtins.str updated_at: The latest time of the endpoint connection, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "packet_id", packet_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> builtins.str:
        """
        The IAM account ID of the endpoint connection creator.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the endpoint connection.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> builtins.int:
        """
        The packet ID of the endpoint connection.
        """
        return pulumi.get(self, "packet_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current status of the endpoint connection.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigEnvironmentVariablesVariableResult(dict):
    def __init__(__self__, *,
                 env_id: builtins.str,
                 group_id: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str env_id: The environment ID corresponding to the environment variable.
        :param builtins.str group_id: The group ID corresponding to the environment variable.
        :param builtins.str id: The ID of the environment variable.
        :param builtins.str name: The name of the environment variable.
        :param builtins.str value: The value of the environment variable.
        """
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> builtins.str:
        """
        The environment ID corresponding to the environment variable.
        """
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        """
        The group ID corresponding to the environment variable.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the environment variable.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 create_time: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApigGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 description: builtins.str,
                 environments: Sequence['outputs.GetApigGroupsGroupEnvironmentResult'],
                 id: builtins.str,
                 is_default: builtins.int,
                 name: builtins.str,
                 on_sell_status: builtins.int,
                 sl_domain: builtins.str,
                 sl_domains: Sequence[builtins.str],
                 status: builtins.int,
                 updated_at: builtins.str,
                 url_domains: Sequence['outputs.GetApigGroupsGroupUrlDomainResult']):
        """
        :param Sequence['GetApigGroupsGroupEnvironmentArgs'] environments: The array of one or more environments of the associated group.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "on_sell_status", on_sell_status)
        pulumi.set(__self__, "sl_domain", sl_domain)
        pulumi.set(__self__, "sl_domains", sl_domains)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url_domains", url_domains)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetApigGroupsGroupEnvironmentResult']:
        """
        The array of one or more environments of the associated group.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> builtins.int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onSellStatus")
    def on_sell_status(self) -> builtins.int:
        return pulumi.get(self, "on_sell_status")

    @property
    @pulumi.getter(name="slDomain")
    def sl_domain(self) -> builtins.str:
        return pulumi.get(self, "sl_domain")

    @property
    @pulumi.getter(name="slDomains")
    def sl_domains(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "sl_domains")

    @property
    @pulumi.getter
    def status(self) -> builtins.int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="urlDomains")
    def url_domains(self) -> Sequence['outputs.GetApigGroupsGroupUrlDomainResult']:
        return pulumi.get(self, "url_domains")


@pulumi.output_type
class GetApigGroupsGroupEnvironmentResult(dict):
    def __init__(__self__, *,
                 environment_id: builtins.str,
                 variables: Sequence['outputs.GetApigGroupsGroupEnvironmentVariableResult']):
        """
        :param builtins.str environment_id: The ID of the environment to which the variables belongs.
        :param Sequence['GetApigGroupsGroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> builtins.str:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetApigGroupsGroupEnvironmentVariableResult']:
        """
        The array of one or more environment variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApigGroupsGroupEnvironmentVariableResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str id: The ID of the variable that the group has.
        :param builtins.str name: The variable name.
        :param builtins.str value: The variable value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigGroupsGroupUrlDomainResult(dict):
    def __init__(__self__, *,
                 cname_status: builtins.int,
                 id: builtins.str,
                 is_has_trusted_root_ca: builtins.bool,
                 min_ssl_version: builtins.str,
                 name: builtins.str,
                 ssl_id: builtins.str,
                 ssl_name: builtins.str,
                 verified_client_certificate_enabled: builtins.bool):
        pulumi.set(__self__, "cname_status", cname_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_has_trusted_root_ca", is_has_trusted_root_ca)
        pulumi.set(__self__, "min_ssl_version", min_ssl_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ssl_id", ssl_id)
        pulumi.set(__self__, "ssl_name", ssl_name)
        pulumi.set(__self__, "verified_client_certificate_enabled", verified_client_certificate_enabled)

    @property
    @pulumi.getter(name="cnameStatus")
    def cname_status(self) -> builtins.int:
        return pulumi.get(self, "cname_status")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isHasTrustedRootCa")
    def is_has_trusted_root_ca(self) -> builtins.bool:
        return pulumi.get(self, "is_has_trusted_root_ca")

    @property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> builtins.str:
        return pulumi.get(self, "min_ssl_version")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> builtins.str:
        return pulumi.get(self, "ssl_id")

    @property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> builtins.str:
        return pulumi.get(self, "ssl_name")

    @property
    @pulumi.getter(name="verifiedClientCertificateEnabled")
    def verified_client_certificate_enabled(self) -> builtins.bool:
        return pulumi.get(self, "verified_client_certificate_enabled")


@pulumi.output_type
class GetApigInstanceFeaturesFeatureResult(dict):
    def __init__(__self__, *,
                 config: builtins.str,
                 enabled: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str config: The detailed configuration of the instance feature.
        :param builtins.bool enabled: Whether the feature is enabled.
        :param builtins.str id: The ID of the feature.
        :param builtins.str name: The name of the feature.
        :param builtins.str updated_at: The latest update time of the feature, in RFC3339 format.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def config(self) -> builtins.str:
        """
        The detailed configuration of the instance feature.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Whether the feature is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the feature.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the feature.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the feature, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 edition: builtins.str,
                 eip_address: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 loadbalancer_provider: builtins.str,
                 name: builtins.str,
                 status: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str created_at: The creation time of the instance, in RFC3339 format.
        :param builtins.str edition: The edition of instance.
        :param builtins.str eip_address: The elastic IP address of instance binding.
        :param builtins.str enterprise_project_id: The enterprise project ID of the instance.
        :param builtins.str id: The ID of instance.
        :param builtins.str loadbalancer_provider: The type of load balancer used by the instance.
        :param builtins.str name: The name of instance.
        :param builtins.str status: The status of instance.
        :param builtins.str type: The type of instance.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "loadbalancer_provider", loadbalancer_provider)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the instance, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def edition(self) -> builtins.str:
        """
        The edition of instance.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> builtins.str:
        """
        The elastic IP address of instance binding.
        """
        return pulumi.get(self, "eip_address")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        """
        The enterprise project ID of the instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadbalancerProvider")
    def loadbalancer_provider(self) -> builtins.str:
        """
        The type of load balancer used by the instance.
        """
        return pulumi.get(self, "loadbalancer_provider")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of instance.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 algorithm: builtins.str,
                 bind_num: builtins.int,
                 created_at: builtins.str,
                 id: builtins.str,
                 key: builtins.str,
                 name: builtins.str,
                 secret: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str algorithm: The algorithm of the signature.
        :param builtins.int bind_num: The number of bound APIs.
        :param builtins.str created_at: The creation time of the signature.
        :param builtins.str id: The ID of the signature.
        :param builtins.str key: The key of the signature.
        :param builtins.str name: The name of the signature.
        :param builtins.str secret: The secret of the signature.
        :param builtins.str type: The type of the signature.
        :param builtins.str updated_at: The latest update time of the signature.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def algorithm(self) -> builtins.str:
        """
        The algorithm of the signature.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the signature.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key of the signature.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the signature.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> builtins.str:
        """
        The secret of the signature.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the signature.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the signature.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetApigThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_num: builtins.int,
                 created_at: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 max_app_requests: builtins.int,
                 max_ip_requests: builtins.int,
                 max_user_requests: builtins.int,
                 name: builtins.str,
                 period: builtins.int,
                 period_unit: builtins.str,
                 type: builtins.str,
                 user_throttles: Sequence['outputs.GetApigThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetApigThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
        :param builtins.int bind_num: The number of APIs bound to the throttling policy.
        :param builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param builtins.str description: The description of throttling policy.
        :param builtins.str id: The ID of the throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param builtins.str name: The name of the throttling policy.
        :param builtins.int period: The period of time for limiting the number of API calls.
        :param builtins.str period_unit: The time unit for limiting the number of API calls.
        :param builtins.str type: The type of the throttling policy.
        :param Sequence['GetApigThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetApigThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        """
        return pulumi.get(self, "app_throttles")

    @property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> builtins.int:
        """
        The number of APIs bound to the throttling policy.
        """
        return pulumi.get(self, "bind_num")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of throttling policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> builtins.str:
        """
        The time unit for limiting the number of API calls.
        """
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the throttling policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetApigThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 throttling_object_name: builtins.str):
        """
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 throttling_object_name: builtins.str):
        """
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetCbhAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 name: builtins.str,
                 region_id: builtins.str,
                 status: builtins.str,
                 type: builtins.str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> builtins.str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCbhFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 asset: builtins.int,
                 data_disk_size: builtins.float,
                 ecs_system_data_size: builtins.int,
                 id: builtins.str,
                 max_connection: builtins.int,
                 memory: builtins.int,
                 type: builtins.str,
                 vcpus: builtins.int):
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "ecs_system_data_size", ecs_system_data_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_connection", max_connection)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter
    def asset(self) -> builtins.int:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> builtins.float:
        return pulumi.get(self, "data_disk_size")

    @property
    @pulumi.getter(name="ecsSystemDataSize")
    def ecs_system_data_size(self) -> builtins.int:
        return pulumi.get(self, "ecs_system_data_size")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> builtins.int:
        return pulumi.get(self, "max_connection")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetCbhInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 flavor_id: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 private_ip: builtins.str,
                 public_ip: builtins.str,
                 public_ip_id: builtins.str,
                 security_group_id: builtins.str,
                 status: builtins.str,
                 subnet_id: builtins.str,
                 version: builtins.str,
                 vpc_id: builtins.str):
        """
        :param builtins.str availability_zone: Indicates the availability zone name.
        :param builtins.str flavor_id: Indicates the specification of the instance.
        :param builtins.str id: Indicates the ID of the instance.
        :param builtins.str name: Indicates the instance name.
        :param builtins.str private_ip: Indicates the private IP address of the instance.
        :param builtins.str public_ip: Indicates the elastic IP address.
        :param builtins.str public_ip_id: Indicates the ID of the elastic IP.
        :param builtins.str security_group_id: Indicates the ID of a security group.
        :param builtins.str status: Indicates the status of the instance.
        :param builtins.str subnet_id: Indicates the ID of a subnet.
        :param builtins.str version: Indicates the current version of the instance image.
        :param builtins.str vpc_id: Indicates the ID of a VPC.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        """
        Indicates the availability zone name.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> builtins.str:
        """
        Indicates the specification of the instance.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Indicates the ID of the instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        """
        Indicates the private IP address of the instance.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> builtins.str:
        """
        Indicates the elastic IP address.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> builtins.str:
        """
        Indicates the ID of the elastic IP.
        """
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Indicates the status of the instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Indicates the current version of the instance image.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetCbrBackupChildrenResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: builtins.str,
                 created_at: builtins.str,
                 description: builtins.str,
                 enterprise_project_id: builtins.str,
                 expired_at: builtins.str,
                 extend_infos: Sequence['outputs.GetCbrBackupChildrenExtendInfoResult'],
                 id: builtins.str,
                 name: builtins.str,
                 replication_records: Sequence['outputs.GetCbrBackupChildrenReplicationRecordResult'],
                 resource_az: builtins.str,
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_size: builtins.int,
                 resource_type: builtins.str,
                 status: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str checkpoint_id: The restore point ID of the sub-backup resource.
        :param builtins.str created_at: The creation time of the sub-backup.
        :param builtins.str description: The sub-backup description.
        :param builtins.str enterprise_project_id: The enterprise project to which the backup sub-backup resource belongs.
        :param builtins.str expired_at: The expiration time of the sub-backup.
        :param Sequence['GetCbrBackupChildrenExtendInfoArgs'] extend_infos: The extended information.
        :param builtins.str id: The sub-backup ID.
        :param builtins.str name: The sub-backup name.
        :param Sequence['GetCbrBackupChildrenReplicationRecordArgs'] replication_records: The replication records.
        :param builtins.str resource_az: The availability zone where the backup sub-backup resource is located.
        :param builtins.str resource_id: The sub-backup resource ID.
        :param builtins.str resource_name: The sub-backup resource name.
        :param builtins.int resource_size: The sub-backup resource size, in GB.
        :param builtins.str resource_type: The sub-backup resource type.
        :param builtins.str status: The sub-backup status.
        :param builtins.str type: The sub-backup type.
        :param builtins.str updated_at: The latest update time of the sub-backup.
        :param builtins.str vault_id: The vault to which the backup sub-backup resource belongs.
        """
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "extend_infos", extend_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replication_records", replication_records)
        pulumi.set(__self__, "resource_az", resource_az)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> builtins.str:
        """
        The restore point ID of the sub-backup resource.
        """
        return pulumi.get(self, "checkpoint_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The sub-backup description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        """
        The enterprise project to which the backup sub-backup resource belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> builtins.str:
        """
        The expiration time of the sub-backup.
        """
        return pulumi.get(self, "expired_at")

    @property
    @pulumi.getter(name="extendInfos")
    def extend_infos(self) -> Sequence['outputs.GetCbrBackupChildrenExtendInfoResult']:
        """
        The extended information.
        """
        return pulumi.get(self, "extend_infos")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The sub-backup ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The sub-backup name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="replicationRecords")
    def replication_records(self) -> Sequence['outputs.GetCbrBackupChildrenReplicationRecordResult']:
        """
        The replication records.
        """
        return pulumi.get(self, "replication_records")

    @property
    @pulumi.getter(name="resourceAz")
    def resource_az(self) -> builtins.str:
        """
        The availability zone where the backup sub-backup resource is located.
        """
        return pulumi.get(self, "resource_az")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The sub-backup resource ID.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        The sub-backup resource name.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> builtins.int:
        """
        The sub-backup resource size, in GB.
        """
        return pulumi.get(self, "resource_size")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The sub-backup resource type.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The sub-backup type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The latest update time of the sub-backup.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The vault to which the backup sub-backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupChildrenExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: builtins.bool,
                 bootable: builtins.bool,
                 contain_system_disk: builtins.bool,
                 encrypted: builtins.bool,
                 incremental: builtins.bool,
                 is_system_disk: builtins.bool,
                 os_registry_images: Sequence[builtins.str],
                 snapshot_id: builtins.str,
                 support_lld: builtins.bool,
                 supported_restore_mode: builtins.str):
        """
        :param builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param builtins.bool bootable: Whether the backup is a system disk backup.
        :param builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param builtins.bool encrypted: Whether the backup is encrypted.
        :param builtins.bool incremental: Whether the backup is an incremental backup.
        :param builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[builtins.str] os_registry_images: The ID list of images created using backups.
        :param builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param builtins.bool support_lld: Whether to allow lazyloading for fast restoration.
        :param builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @property
    @pulumi.getter
    def bootable(self) -> builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @property
    @pulumi.getter
    def encrypted(self) -> builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def incremental(self) -> builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> builtins.bool:
        """
        Whether to allow lazyloading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetCbrBackupChildrenReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 destination_backup_id: builtins.str,
                 destination_checkpoint_id: builtins.str,
                 destination_project_id: builtins.str,
                 destination_region: builtins.str,
                 destination_vault_id: builtins.str,
                 extra_infos: Sequence['outputs.GetCbrBackupChildrenReplicationRecordExtraInfoResult'],
                 id: builtins.str,
                 source_backup_id: builtins.str,
                 source_checkpoint_id: builtins.str,
                 source_project_id: builtins.str,
                 source_region: builtins.str,
                 status: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str created_at: The creation time of the replication.
        :param builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param builtins.str destination_project_id: The ID of the replication destination project.
        :param builtins.str destination_region: The replication destination region.
        :param builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetCbrBackupChildrenReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
        :param builtins.str id: The replication record ID.
        :param builtins.str source_backup_id: The ID of the source backup used for replication.
        :param builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param builtins.str source_project_id: The ID of the replication source project.
        :param builtins.str source_region: The replication source region.
        :param builtins.str status: The replication status.
        :param builtins.str vault_id: The ID of the vault where the backup resides.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the replication.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetCbrBackupChildrenReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        """
        return pulumi.get(self, "extra_infos")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The replication record ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The replication status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The ID of the vault where the backup resides.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupChildrenReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: builtins.bool,
                 destination_vault_id: builtins.str,
                 fail_code: builtins.str,
                 fail_reason: builtins.str,
                 progress: builtins.int):
        """
        :param builtins.bool auto_trigger: Whether replication is automatically scheduled.
        :param builtins.str destination_vault_id: The destination vault ID.
        :param builtins.str fail_code: The error code.
        :param builtins.str fail_reason: The error cause.
        :param builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> builtins.bool:
        """
        Whether replication is automatically scheduled.
        """
        return pulumi.get(self, "auto_trigger")

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @property
    @pulumi.getter
    def progress(self) -> builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetCbrBackupExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: builtins.bool,
                 bootable: builtins.bool,
                 contain_system_disk: builtins.bool,
                 encrypted: builtins.bool,
                 incremental: builtins.bool,
                 is_system_disk: builtins.bool,
                 os_registry_images: Sequence[builtins.str],
                 snapshot_id: builtins.str,
                 support_lld: builtins.bool,
                 supported_restore_mode: builtins.str):
        """
        :param builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param builtins.bool bootable: Whether the backup is a system disk backup.
        :param builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param builtins.bool encrypted: Whether the backup is encrypted.
        :param builtins.bool incremental: Whether the backup is an incremental backup.
        :param builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[builtins.str] os_registry_images: The ID list of images created using backups.
        :param builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param builtins.bool support_lld: Whether to allow lazyloading for fast restoration.
        :param builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @property
    @pulumi.getter
    def bootable(self) -> builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @property
    @pulumi.getter
    def encrypted(self) -> builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def incremental(self) -> builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> builtins.bool:
        """
        Whether to allow lazyloading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetCbrBackupReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 destination_backup_id: builtins.str,
                 destination_checkpoint_id: builtins.str,
                 destination_project_id: builtins.str,
                 destination_region: builtins.str,
                 destination_vault_id: builtins.str,
                 extra_infos: Sequence['outputs.GetCbrBackupReplicationRecordExtraInfoResult'],
                 id: builtins.str,
                 source_backup_id: builtins.str,
                 source_checkpoint_id: builtins.str,
                 source_project_id: builtins.str,
                 source_region: builtins.str,
                 status: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str created_at: The creation time of the replication.
        :param builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param builtins.str destination_project_id: The ID of the replication destination project.
        :param builtins.str destination_region: The replication destination region.
        :param builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetCbrBackupReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
        :param builtins.str id: The replication record ID.
        :param builtins.str source_backup_id: The ID of the source backup used for replication.
        :param builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param builtins.str source_project_id: The ID of the replication source project.
        :param builtins.str source_region: The replication source region.
        :param builtins.str status: The replication status.
        :param builtins.str vault_id: The ID of the vault where the backup resides.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the replication.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetCbrBackupReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        """
        return pulumi.get(self, "extra_infos")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The replication record ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The replication status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The ID of the vault where the backup resides.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: builtins.bool,
                 destination_vault_id: builtins.str,
                 fail_code: builtins.str,
                 fail_reason: builtins.str,
                 progress: builtins.int):
        """
        :param builtins.bool auto_trigger: Whether replication is automatically scheduled.
        :param builtins.str destination_vault_id: The destination vault ID.
        :param builtins.str fail_code: The error code.
        :param builtins.str fail_reason: The error cause.
        :param builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> builtins.bool:
        """
        Whether replication is automatically scheduled.
        """
        return pulumi.get(self, "auto_trigger")

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @property
    @pulumi.getter
    def progress(self) -> builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetCbrPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 associated_vaults: Sequence['outputs.GetCbrPoliciesPolicyAssociatedVaultResult'],
                 backup_cycles: Sequence['outputs.GetCbrPoliciesPolicyBackupCycleResult'],
                 backup_quantity: builtins.int,
                 destination_project_id: builtins.str,
                 destination_region: builtins.str,
                 enable_acceleration: builtins.bool,
                 enabled: builtins.bool,
                 id: builtins.str,
                 long_term_retentions: Sequence['outputs.GetCbrPoliciesPolicyLongTermRetentionResult'],
                 name: builtins.str,
                 time_period: builtins.int,
                 time_zone: builtins.str,
                 type: builtins.str):
        """
        :param Sequence['GetCbrPoliciesPolicyAssociatedVaultArgs'] associated_vaults: The vault associated with the CBR policy
        :param Sequence['GetCbrPoliciesPolicyBackupCycleArgs'] backup_cycles: The scheduling rule for the CBR policy backup execution.
        :param builtins.int backup_quantity: The maximum number of retained backups.
        :param builtins.str destination_project_id: The ID of the replication destination project.
        :param builtins.str destination_region: The name of the replication destination region.
        :param builtins.bool enable_acceleration: Whether to enable the acceleration function to shorten the replication time for cross-region
        :param builtins.bool enabled: Whether to enable the CBR policy.
        :param builtins.str id: The policy ID.
        :param Sequence['GetCbrPoliciesPolicyLongTermRetentionArgs'] long_term_retentions: The long-term retention rules.
        :param builtins.str name: The policy name.
        :param builtins.int time_period: The duration (in days) for retained backups.
        :param builtins.str time_zone: The UTC time zone.
        :param builtins.str type: The protection type of the CBR policy.
        """
        pulumi.set(__self__, "associated_vaults", associated_vaults)
        pulumi.set(__self__, "backup_cycles", backup_cycles)
        pulumi.set(__self__, "backup_quantity", backup_quantity)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "long_term_retentions", long_term_retentions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_period", time_period)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="associatedVaults")
    def associated_vaults(self) -> Sequence['outputs.GetCbrPoliciesPolicyAssociatedVaultResult']:
        """
        The vault associated with the CBR policy
        """
        return pulumi.get(self, "associated_vaults")

    @property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> Sequence['outputs.GetCbrPoliciesPolicyBackupCycleResult']:
        """
        The scheduling rule for the CBR policy backup execution.
        """
        return pulumi.get(self, "backup_cycles")

    @property
    @pulumi.getter(name="backupQuantity")
    def backup_quantity(self) -> builtins.int:
        """
        The maximum number of retained backups.
        """
        return pulumi.get(self, "backup_quantity")

    @property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> builtins.str:
        """
        The name of the replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> builtins.bool:
        """
        Whether to enable the acceleration function to shorten the replication time for cross-region
        """
        return pulumi.get(self, "enable_acceleration")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Whether to enable the CBR policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="longTermRetentions")
    def long_term_retentions(self) -> Sequence['outputs.GetCbrPoliciesPolicyLongTermRetentionResult']:
        """
        The long-term retention rules.
        """
        return pulumi.get(self, "long_term_retentions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> builtins.int:
        """
        The duration (in days) for retained backups.
        """
        return pulumi.get(self, "time_period")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> builtins.str:
        """
        The UTC time zone.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The protection type of the CBR policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCbrPoliciesPolicyAssociatedVaultResult(dict):
    def __init__(__self__, *,
                 destination_vault_id: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str destination_vault_id: The destination vault ID associated with CBR policy
        :param builtins.str vault_id: The vault ID of the associated CBR policy
        """
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> builtins.str:
        """
        The destination vault ID associated with CBR policy
        """
        return pulumi.get(self, "destination_vault_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The vault ID of the associated CBR policy
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrPoliciesPolicyBackupCycleResult(dict):
    def __init__(__self__, *,
                 days: builtins.str,
                 execution_times: Sequence[builtins.str],
                 interval: builtins.int):
        """
        :param builtins.str days: The weekly backup time.
        :param Sequence[builtins.str] execution_times: The execution time of the policy.
        :param builtins.int interval: The number of days between each backup.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "execution_times", execution_times)
        pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def days(self) -> builtins.str:
        """
        The weekly backup time.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> Sequence[builtins.str]:
        """
        The execution time of the policy.
        """
        return pulumi.get(self, "execution_times")

    @property
    @pulumi.getter
    def interval(self) -> builtins.int:
        """
        The number of days between each backup.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class GetCbrPoliciesPolicyLongTermRetentionResult(dict):
    def __init__(__self__, *,
                 daily: builtins.int,
                 full_backup_interval: builtins.int,
                 monthly: builtins.int,
                 weekly: builtins.int,
                 yearly: builtins.int):
        """
        :param builtins.int daily: The latest backup of each day is saved in the long term.
        :param builtins.int full_backup_interval: How often (after how many incremental backups) a full backup is performed.
        :param builtins.int monthly: The latest backup of each month is saved in the long term.
        :param builtins.int weekly: The latest backup of each week is saved in the long term.
        :param builtins.int yearly: The latest backup of each year is saved in the long term.
        """
        pulumi.set(__self__, "daily", daily)
        pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        pulumi.set(__self__, "monthly", monthly)
        pulumi.set(__self__, "weekly", weekly)
        pulumi.set(__self__, "yearly", yearly)

    @property
    @pulumi.getter
    def daily(self) -> builtins.int:
        """
        The latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> builtins.int:
        """
        How often (after how many incremental backups) a full backup is performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.int:
        """
        The latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @property
    @pulumi.getter
    def weekly(self) -> builtins.int:
        """
        The latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @property
    @pulumi.getter
    def yearly(self) -> builtins.int:
        """
        The latest backup of each year is saved in the long term.
        """
        return pulumi.get(self, "yearly")


@pulumi.output_type
class GetCbrVaultsVaultResult(dict):
    def __init__(__self__, *,
                 allocated: builtins.float,
                 auto_bind: builtins.bool,
                 auto_expand_enabled: builtins.bool,
                 bind_rules: Mapping[str, builtins.str],
                 consistent_level: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 policy_id: builtins.str,
                 protection_type: builtins.str,
                 resources: Sequence['outputs.GetCbrVaultsVaultResourceResult'],
                 size: builtins.int,
                 spec_code: builtins.str,
                 status: builtins.str,
                 storage: builtins.str,
                 tags: Mapping[str, builtins.str],
                 type: builtins.str,
                 used: builtins.float):
        """
        :param builtins.float allocated: The allocated capacity of the vault, in GB.
        :param builtins.bool auto_bind: Whether automatic association is supported.
        :param builtins.bool auto_expand_enabled: Whether to enable automatic expansion of the backup protection type vault.
        :param Mapping[str, builtins.str] bind_rules: The rules for automatic association.
        :param builtins.str consistent_level: The consistent level (specification) of the vault.
        :param builtins.str enterprise_project_id: The enterprise project ID.
        :param builtins.str id: The vault ID in UUID format.
        :param builtins.str name: The vault name.
        :param builtins.str policy_id: The ID of the policy associated with the vault.
        :param builtins.str protection_type: The protection type of the vault.
        :param Sequence['GetCbrVaultsVaultResourceArgs'] resources: The array of one or more resources to attach to the vault.
        :param builtins.int size: The vault capacity, in GB.
        :param builtins.str spec_code: The specification code.
        :param builtins.str status: The vault status.
        :param builtins.str storage: The name of the bucket for the vault.
        :param Mapping[str, builtins.str] tags: The key/value pairs to associate with the vault.
        :param builtins.str type: The object type of the vault.
        :param builtins.float used: The used capacity, in GB.
        """
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "auto_bind", auto_bind)
        pulumi.set(__self__, "auto_expand_enabled", auto_expand_enabled)
        pulumi.set(__self__, "bind_rules", bind_rules)
        pulumi.set(__self__, "consistent_level", consistent_level)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "protection_type", protection_type)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> builtins.float:
        """
        The allocated capacity of the vault, in GB.
        """
        return pulumi.get(self, "allocated")

    @property
    @pulumi.getter(name="autoBind")
    def auto_bind(self) -> builtins.bool:
        """
        Whether automatic association is supported.
        """
        return pulumi.get(self, "auto_bind")

    @property
    @pulumi.getter(name="autoExpandEnabled")
    def auto_expand_enabled(self) -> builtins.bool:
        """
        Whether to enable automatic expansion of the backup protection type vault.
        """
        return pulumi.get(self, "auto_expand_enabled")

    @property
    @pulumi.getter(name="bindRules")
    def bind_rules(self) -> Mapping[str, builtins.str]:
        """
        The rules for automatic association.
        """
        return pulumi.get(self, "bind_rules")

    @property
    @pulumi.getter(name="consistentLevel")
    def consistent_level(self) -> builtins.str:
        """
        The consistent level (specification) of the vault.
        """
        return pulumi.get(self, "consistent_level")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The vault ID in UUID format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The vault name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.str:
        """
        The ID of the policy associated with the vault.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> builtins.str:
        """
        The protection type of the vault.
        """
        return pulumi.get(self, "protection_type")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetCbrVaultsVaultResourceResult']:
        """
        The array of one or more resources to attach to the vault.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The vault capacity, in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> builtins.str:
        """
        The specification code.
        """
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The vault status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> builtins.str:
        """
        The name of the bucket for the vault.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        """
        The key/value pairs to associate with the vault.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The object type of the vault.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def used(self) -> builtins.float:
        """
        The used capacity, in GB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetCbrVaultsVaultResourceResult(dict):
    def __init__(__self__, *,
                 excludes: Sequence[builtins.str],
                 includes: Sequence[builtins.str],
                 server_id: builtins.str):
        """
        :param Sequence[builtins.str] excludes: The array of disk IDs which will be excluded in the backup.
        :param Sequence[builtins.str] includes: The array of disk or SFS file system IDs which will be included in the backup.
        :param builtins.str server_id: The ID of the ECS instance to be backed up.
        """
        pulumi.set(__self__, "excludes", excludes)
        pulumi.set(__self__, "includes", includes)
        pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter
    def excludes(self) -> Sequence[builtins.str]:
        """
        The array of disk IDs which will be excluded in the backup.
        """
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[builtins.str]:
        """
        The array of disk or SFS file system IDs which will be included in the backup.
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        """
        The ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class GetCceAddonTemplateSupportVersionResult(dict):
    def __init__(__self__, *,
                 bare_metals: Sequence[builtins.str],
                 virtual_machines: Sequence[builtins.str]):
        pulumi.set(__self__, "bare_metals", bare_metals)
        pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="bareMetals")
    def bare_metals(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "bare_metals")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class GetCceClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: builtins.str,
                 insecure_skip_tls_verify: builtins.bool,
                 name: builtins.str,
                 server: builtins.str):
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "insecure_skip_tls_verify", insecure_skip_tls_verify)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> builtins.str:
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter(name="insecureSkipTlsVerify")
    def insecure_skip_tls_verify(self) -> builtins.bool:
        return pulumi.get(self, "insecure_skip_tls_verify")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> builtins.str:
        return pulumi.get(self, "server")


@pulumi.output_type
class GetCceClusterCertificateContextResult(dict):
    def __init__(__self__, *,
                 cluster: builtins.str,
                 name: builtins.str,
                 user: builtins.str):
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cluster(self) -> builtins.str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def user(self) -> builtins.str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetCceClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: builtins.str,
                 client_key_data: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> builtins.str:
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> builtins.str:
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCceClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 url: builtins.str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCceClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str):
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetCceClustersClusterResult(dict):
    def __init__(__self__, *,
                 authentication_mode: builtins.str,
                 billing_mode: builtins.int,
                 certificate_clusters: Sequence['outputs.GetCceClustersClusterCertificateClusterResult'],
                 certificate_users: Sequence['outputs.GetCceClustersClusterCertificateUserResult'],
                 cluster_type: builtins.str,
                 cluster_version: builtins.str,
                 container_network_cidr: builtins.str,
                 container_network_type: builtins.str,
                 description: builtins.str,
                 endpoints: Sequence['outputs.GetCceClustersClusterEndpointResult'],
                 eni_subnet_cidr: builtins.str,
                 eni_subnet_id: builtins.str,
                 enterprise_project_id: builtins.str,
                 flavor_id: builtins.str,
                 id: builtins.str,
                 kube_config_raw: builtins.str,
                 masters: Sequence['outputs.GetCceClustersClusterMasterResult'],
                 name: builtins.str,
                 security_group_id: builtins.str,
                 service_network_cidr: builtins.str,
                 status: builtins.str,
                 subnet_id: builtins.str,
                 vpc_id: builtins.str):
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "certificate_clusters", certificate_clusters)
        pulumi.set(__self__, "certificate_users", certificate_users)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "container_network_cidr", container_network_cidr)
        pulumi.set(__self__, "container_network_type", container_network_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "eni_subnet_cidr", eni_subnet_cidr)
        pulumi.set(__self__, "eni_subnet_id", eni_subnet_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kube_config_raw", kube_config_raw)
        pulumi.set(__self__, "masters", masters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "service_network_cidr", service_network_cidr)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> builtins.str:
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> builtins.int:
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="certificateClusters")
    def certificate_clusters(self) -> Sequence['outputs.GetCceClustersClusterCertificateClusterResult']:
        return pulumi.get(self, "certificate_clusters")

    @property
    @pulumi.getter(name="certificateUsers")
    def certificate_users(self) -> Sequence['outputs.GetCceClustersClusterCertificateUserResult']:
        return pulumi.get(self, "certificate_users")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> builtins.str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> builtins.str:
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> builtins.str:
        return pulumi.get(self, "container_network_cidr")

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> builtins.str:
        return pulumi.get(self, "container_network_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetCceClustersClusterEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> builtins.str:
        return pulumi.get(self, "eni_subnet_cidr")

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> builtins.str:
        return pulumi.get(self, "eni_subnet_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> builtins.str:
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> builtins.str:
        return pulumi.get(self, "kube_config_raw")

    @property
    @pulumi.getter
    def masters(self) -> Sequence['outputs.GetCceClustersClusterMasterResult']:
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> builtins.str:
        return pulumi.get(self, "service_network_cidr")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetCceClustersClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: builtins.str,
                 name: builtins.str,
                 server: builtins.str):
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> builtins.str:
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> builtins.str:
        return pulumi.get(self, "server")


@pulumi.output_type
class GetCceClustersClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: builtins.str,
                 client_key_data: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> builtins.str:
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> builtins.str:
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCceClustersClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 url: builtins.str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCceClustersClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str):
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetCceNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCceNodeHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCceNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCceNodePoolHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCceNodePoolRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCceNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCceNodesNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 billing_mode: builtins.int,
                 data_volumes: Sequence['outputs.GetCceNodesNodeDataVolumeResult'],
                 ecs_group_id: builtins.str,
                 enterprise_project_id: builtins.str,
                 flavor_id: builtins.str,
                 hostname_configs: Sequence['outputs.GetCceNodesNodeHostnameConfigResult'],
                 id: builtins.str,
                 key_pair: builtins.str,
                 name: builtins.str,
                 os: builtins.str,
                 private_ip: builtins.str,
                 public_ip: builtins.str,
                 root_volumes: Sequence['outputs.GetCceNodesNodeRootVolumeResult'],
                 server_id: builtins.str,
                 status: builtins.str,
                 subnet_id: builtins.str,
                 tags: Mapping[str, builtins.str]):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "ecs_group_id", ecs_group_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "hostname_configs", hostname_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_pair", key_pair)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "root_volumes", root_volumes)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> builtins.int:
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetCceNodesNodeDataVolumeResult']:
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="ecsGroupId")
    def ecs_group_id(self) -> builtins.str:
        return pulumi.get(self, "ecs_group_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> builtins.str:
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter(name="hostnameConfigs")
    def hostname_configs(self) -> Sequence['outputs.GetCceNodesNodeHostnameConfigResult']:
        return pulumi.get(self, "hostname_configs")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> builtins.str:
        return pulumi.get(self, "key_pair")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> builtins.str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> builtins.str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="rootVolumes")
    def root_volumes(self) -> Sequence['outputs.GetCceNodesNodeRootVolumeResult']:
        return pulumi.get(self, "root_volumes")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetCceNodesNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCceNodesNodeHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: builtins.str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCceNodesNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, builtins.str],
                 size: builtins.int,
                 volumetype: builtins.str):
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetCdmFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 cpu: builtins.str,
                 id: builtins.str,
                 memory: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> builtins.str:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> builtins.str:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetComputeFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 cpu_core_count: builtins.int,
                 generation: builtins.str,
                 id: builtins.str,
                 memory_size: builtins.int,
                 performance_type: builtins.str,
                 storage_type: builtins.str):
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "performance_type", performance_type)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> builtins.int:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter
    def generation(self) -> builtins.str:
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> builtins.int:
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="performanceType")
    def performance_type(self) -> builtins.str:
        return pulumi.get(self, "performance_type")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetComputeInstanceNetworkResult(dict):
    def __init__(__self__, *,
                 fixed_ip_v4: builtins.str,
                 fixed_ip_v6: builtins.str,
                 mac: builtins.str,
                 port: builtins.str,
                 uuid: builtins.str):
        pulumi.set(__self__, "fixed_ip_v4", fixed_ip_v4)
        pulumi.set(__self__, "fixed_ip_v6", fixed_ip_v6)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> builtins.str:
        return pulumi.get(self, "fixed_ip_v4")

    @property
    @pulumi.getter(name="fixedIpV6")
    def fixed_ip_v6(self) -> builtins.str:
        return pulumi.get(self, "fixed_ip_v6")

    @property
    @pulumi.getter
    def mac(self) -> builtins.str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def port(self) -> builtins.str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def uuid(self) -> builtins.str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetComputeInstanceSchedulerHintResult(dict):
    def __init__(__self__, *,
                 group: builtins.str):
        pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def group(self) -> builtins.str:
        return pulumi.get(self, "group")


@pulumi.output_type
class GetComputeInstanceVolumeAttachedResult(dict):
    def __init__(__self__, *,
                 boot_index: builtins.int,
                 is_sys_volume: builtins.bool,
                 pci_address: builtins.str,
                 size: builtins.int,
                 type: builtins.str,
                 volume_id: builtins.str):
        pulumi.set(__self__, "boot_index", boot_index)
        pulumi.set(__self__, "is_sys_volume", is_sys_volume)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> builtins.int:
        return pulumi.get(self, "boot_index")

    @property
    @pulumi.getter(name="isSysVolume")
    def is_sys_volume(self) -> builtins.bool:
        return pulumi.get(self, "is_sys_volume")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> builtins.str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> builtins.str:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetComputeInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 charging_mode: builtins.str,
                 enterprise_project_id: builtins.str,
                 expired_time: builtins.str,
                 flavor_id: builtins.str,
                 flavor_name: builtins.str,
                 id: builtins.str,
                 image_id: builtins.str,
                 image_name: builtins.str,
                 key_pair: builtins.str,
                 name: builtins.str,
                 networks: Sequence['outputs.GetComputeInstancesInstanceNetworkResult'],
                 public_ip: builtins.str,
                 scheduler_hints: Sequence['outputs.GetComputeInstancesInstanceSchedulerHintResult'],
                 security_group_ids: Sequence[builtins.str],
                 status: builtins.str,
                 system_disk_id: builtins.str,
                 tags: Mapping[str, builtins.str],
                 user_data: builtins.str,
                 volume_attacheds: Sequence['outputs.GetComputeInstancesInstanceVolumeAttachedResult']):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charging_mode", charging_mode)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "flavor_name", flavor_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "key_pair", key_pair)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_id", system_disk_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "volume_attacheds", volume_attacheds)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> builtins.str:
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> builtins.str:
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> builtins.str:
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> builtins.str:
        return pulumi.get(self, "flavor_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> builtins.str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> builtins.str:
        return pulumi.get(self, "key_pair")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetComputeInstancesInstanceNetworkResult']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> builtins.str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Sequence['outputs.GetComputeInstancesInstanceSchedulerHintResult']:
        return pulumi.get(self, "scheduler_hints")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemDiskId")
    def system_disk_id(self) -> builtins.str:
        return pulumi.get(self, "system_disk_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> builtins.str:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="volumeAttacheds")
    def volume_attacheds(self) -> Sequence['outputs.GetComputeInstancesInstanceVolumeAttachedResult']:
        return pulumi.get(self, "volume_attacheds")


@pulumi.output_type
class GetComputeInstancesInstanceNetworkResult(dict):
    def __init__(__self__, *,
                 fixed_ip_v4: builtins.str,
                 fixed_ip_v6: builtins.str,
                 mac: builtins.str,
                 port: builtins.str,
                 uuid: builtins.str):
        pulumi.set(__self__, "fixed_ip_v4", fixed_ip_v4)
        pulumi.set(__self__, "fixed_ip_v6", fixed_ip_v6)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fixedIpV4")
    def fixed_ip_v4(self) -> builtins.str:
        return pulumi.get(self, "fixed_ip_v4")

    @property
    @pulumi.getter(name="fixedIpV6")
    def fixed_ip_v6(self) -> builtins.str:
        return pulumi.get(self, "fixed_ip_v6")

    @property
    @pulumi.getter
    def mac(self) -> builtins.str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def port(self) -> builtins.str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def uuid(self) -> builtins.str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetComputeInstancesInstanceSchedulerHintResult(dict):
    def __init__(__self__, *,
                 group: builtins.str):
        pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def group(self) -> builtins.str:
        return pulumi.get(self, "group")


@pulumi.output_type
class GetComputeInstancesInstanceVolumeAttachedResult(dict):
    def __init__(__self__, *,
                 boot_index: builtins.int,
                 is_sys_volume: builtins.bool,
                 pci_address: builtins.str,
                 size: builtins.int,
                 type: builtins.str,
                 volume_id: builtins.str):
        pulumi.set(__self__, "boot_index", boot_index)
        pulumi.set(__self__, "is_sys_volume", is_sys_volume)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="bootIndex")
    def boot_index(self) -> builtins.int:
        return pulumi.get(self, "boot_index")

    @property
    @pulumi.getter(name="isSysVolume")
    def is_sys_volume(self) -> builtins.bool:
        return pulumi.get(self, "is_sys_volume")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> builtins.str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> builtins.str:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetComputeServergroupsServergroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 members: Sequence[builtins.str],
                 name: builtins.str,
                 policies: Sequence[builtins.str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policies(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "policies")


@pulumi.output_type
class GetCssFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: builtins.str,
                 disk_range: builtins.str,
                 id: builtins.str,
                 memory: builtins.int,
                 name: builtins.str,
                 region: builtins.str,
                 type: builtins.str,
                 vcpus: builtins.int,
                 version: builtins.str):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "disk_range", disk_range)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> builtins.str:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="diskRange")
    def disk_range(self) -> builtins.str:
        return pulumi.get(self, "disk_range")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDcsAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_name: builtins.str,
                 account_role: builtins.str,
                 account_type: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str account_name: Account name.
        :param builtins.str account_role: Account permissions.
        :param builtins.str account_type: Account type.
        :param builtins.str description: Account description.
        :param builtins.str id: Account ID.
        :param builtins.str status: Account status.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> builtins.str:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> builtins.str:
        """
        Account permissions.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> builtins.str:
        """
        Account type.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Account description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Account ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Account status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDcsFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 available_zones: Sequence[builtins.str],
                 cache_mode: builtins.str,
                 capacity: builtins.float,
                 charging_modes: Sequence[builtins.str],
                 cpu_architecture: builtins.str,
                 engine: builtins.str,
                 engine_versions: builtins.str,
                 ip_count: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "available_zones", available_zones)
        pulumi.set(__self__, "cache_mode", cache_mode)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "cpu_architecture", cpu_architecture)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "ip_count", ip_count)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "available_zones")

    @property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> builtins.str:
        return pulumi.get(self, "cache_mode")

    @property
    @pulumi.getter
    def capacity(self) -> builtins.float:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "charging_modes")

    @property
    @pulumi.getter(name="cpuArchitecture")
    def cpu_architecture(self) -> builtins.str:
        return pulumi.get(self, "cpu_architecture")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> builtins.str:
        return pulumi.get(self, "engine_versions")

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> builtins.int:
        return pulumi.get(self, "ip_count")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDdsFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 memory: builtins.str,
                 spec_code: builtins.str,
                 type: builtins.str,
                 vcpus: builtins.str):
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter
    def memory(self) -> builtins.str:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> builtins.str:
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.str:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetDmsKafkaFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[builtins.str],
                 charging_modes: Sequence[builtins.str],
                 id: builtins.str,
                 ios: Sequence['outputs.GetDmsKafkaFlavorsFlavorIoResult'],
                 properties: Sequence['outputs.GetDmsKafkaFlavorsFlavorPropertyResult'],
                 support_features: Sequence['outputs.GetDmsKafkaFlavorsFlavorSupportFeatureResult'],
                 type: builtins.str,
                 vm_specification: builtins.str):
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vm_specification", vm_specification)

    @property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "arch_types")

    @property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "charging_modes")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ios(self) -> Sequence['outputs.GetDmsKafkaFlavorsFlavorIoResult']:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsKafkaFlavorsFlavorPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDmsKafkaFlavorsFlavorSupportFeatureResult']:
        return pulumi.get(self, "support_features")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> builtins.str:
        return pulumi.get(self, "vm_specification")


@pulumi.output_type
class GetDmsKafkaFlavorsFlavorIoResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[builtins.str],
                 storage_spec_code: builtins.str,
                 type: builtins.str,
                 unavailability_zones: Sequence[builtins.str]):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailability_zones", unavailability_zones)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> builtins.str:
        return pulumi.get(self, "storage_spec_code")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unavailabilityZones")
    def unavailability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "unavailability_zones")


@pulumi.output_type
class GetDmsKafkaFlavorsFlavorPropertyResult(dict):
    def __init__(__self__, *,
                 flavor_alias: builtins.str,
                 max_bandwidth_per_broker: builtins.int,
                 max_broker: builtins.int,
                 max_consumer_per_broker: builtins.int,
                 max_partition_per_broker: builtins.int,
                 max_storage_per_node: builtins.int,
                 max_tps_per_broker: builtins.int,
                 min_broker: builtins.int,
                 min_storage_per_node: builtins.int):
        pulumi.set(__self__, "flavor_alias", flavor_alias)
        pulumi.set(__self__, "max_bandwidth_per_broker", max_bandwidth_per_broker)
        pulumi.set(__self__, "max_broker", max_broker)
        pulumi.set(__self__, "max_consumer_per_broker", max_consumer_per_broker)
        pulumi.set(__self__, "max_partition_per_broker", max_partition_per_broker)
        pulumi.set(__self__, "max_storage_per_node", max_storage_per_node)
        pulumi.set(__self__, "max_tps_per_broker", max_tps_per_broker)
        pulumi.set(__self__, "min_broker", min_broker)
        pulumi.set(__self__, "min_storage_per_node", min_storage_per_node)

    @property
    @pulumi.getter(name="flavorAlias")
    def flavor_alias(self) -> builtins.str:
        return pulumi.get(self, "flavor_alias")

    @property
    @pulumi.getter(name="maxBandwidthPerBroker")
    def max_bandwidth_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_bandwidth_per_broker")

    @property
    @pulumi.getter(name="maxBroker")
    def max_broker(self) -> builtins.int:
        return pulumi.get(self, "max_broker")

    @property
    @pulumi.getter(name="maxConsumerPerBroker")
    def max_consumer_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_consumer_per_broker")

    @property
    @pulumi.getter(name="maxPartitionPerBroker")
    def max_partition_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_partition_per_broker")

    @property
    @pulumi.getter(name="maxStoragePerNode")
    def max_storage_per_node(self) -> builtins.int:
        return pulumi.get(self, "max_storage_per_node")

    @property
    @pulumi.getter(name="maxTpsPerBroker")
    def max_tps_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_tps_per_broker")

    @property
    @pulumi.getter(name="minBroker")
    def min_broker(self) -> builtins.int:
        return pulumi.get(self, "min_broker")

    @property
    @pulumi.getter(name="minStoragePerNode")
    def min_storage_per_node(self) -> builtins.int:
        return pulumi.get(self, "min_storage_per_node")


@pulumi.output_type
class GetDmsKafkaFlavorsFlavorSupportFeatureResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetDmsKafkaFlavorsFlavorSupportFeaturePropertyResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsKafkaFlavorsFlavorSupportFeaturePropertyResult']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDmsKafkaFlavorsFlavorSupportFeaturePropertyResult(dict):
    def __init__(__self__, *,
                 max_node: builtins.int,
                 max_task: builtins.int,
                 min_node: builtins.int,
                 min_task: builtins.int):
        pulumi.set(__self__, "max_node", max_node)
        pulumi.set(__self__, "max_task", max_task)
        pulumi.set(__self__, "min_node", min_node)
        pulumi.set(__self__, "min_task", min_task)

    @property
    @pulumi.getter(name="maxNode")
    def max_node(self) -> builtins.int:
        return pulumi.get(self, "max_node")

    @property
    @pulumi.getter(name="maxTask")
    def max_task(self) -> builtins.int:
        return pulumi.get(self, "max_task")

    @property
    @pulumi.getter(name="minNode")
    def min_node(self) -> builtins.int:
        return pulumi.get(self, "min_node")

    @property
    @pulumi.getter(name="minTask")
    def min_task(self) -> builtins.int:
        return pulumi.get(self, "min_task")


@pulumi.output_type
class GetDmsKafkaInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 access_user: builtins.str,
                 availability_zones: Sequence[builtins.str],
                 connect_address: builtins.str,
                 cross_vpc_accesses: Sequence['outputs.GetDmsKafkaInstancesInstanceCrossVpcAccessResult'],
                 description: builtins.str,
                 dumping: builtins.bool,
                 enable_auto_topic: builtins.bool,
                 enable_public_ip: builtins.bool,
                 enabled_mechanisms: Sequence[builtins.str],
                 engine_version: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 maintain_begin: builtins.str,
                 maintain_end: builtins.str,
                 management_connect_address: builtins.str,
                 manager_user: builtins.str,
                 manegement_connect_address: builtins.str,
                 name: builtins.str,
                 network_id: builtins.str,
                 partition_num: builtins.int,
                 port: builtins.int,
                 product_id: builtins.str,
                 public_conn_addresses: builtins.str,
                 public_ip_ids: Sequence[builtins.str],
                 resource_spec_code: builtins.str,
                 retention_policy: builtins.str,
                 security_group_id: builtins.str,
                 security_protocol: builtins.str,
                 ssl_enable: builtins.bool,
                 status: builtins.str,
                 storage_space: builtins.int,
                 storage_spec_code: builtins.str,
                 tags: Mapping[str, builtins.str],
                 type: builtins.str,
                 used_storage_space: builtins.int,
                 user_id: builtins.str,
                 user_name: builtins.str,
                 vpc_id: builtins.str):
        pulumi.set(__self__, "access_user", access_user)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "connect_address", connect_address)
        pulumi.set(__self__, "cross_vpc_accesses", cross_vpc_accesses)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dumping", dumping)
        pulumi.set(__self__, "enable_auto_topic", enable_auto_topic)
        pulumi.set(__self__, "enable_public_ip", enable_public_ip)
        pulumi.set(__self__, "enabled_mechanisms", enabled_mechanisms)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maintain_begin", maintain_begin)
        pulumi.set(__self__, "maintain_end", maintain_end)
        pulumi.set(__self__, "management_connect_address", management_connect_address)
        pulumi.set(__self__, "manager_user", manager_user)
        pulumi.set(__self__, "manegement_connect_address", manegement_connect_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "public_conn_addresses", public_conn_addresses)
        pulumi.set(__self__, "public_ip_ids", public_ip_ids)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "retention_policy", retention_policy)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_protocol", security_protocol)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used_storage_space", used_storage_space)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accessUser")
    def access_user(self) -> builtins.str:
        return pulumi.get(self, "access_user")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="connectAddress")
    def connect_address(self) -> builtins.str:
        return pulumi.get(self, "connect_address")

    @property
    @pulumi.getter(name="crossVpcAccesses")
    def cross_vpc_accesses(self) -> Sequence['outputs.GetDmsKafkaInstancesInstanceCrossVpcAccessResult']:
        return pulumi.get(self, "cross_vpc_accesses")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dumping(self) -> builtins.bool:
        return pulumi.get(self, "dumping")

    @property
    @pulumi.getter(name="enableAutoTopic")
    def enable_auto_topic(self) -> builtins.bool:
        return pulumi.get(self, "enable_auto_topic")

    @property
    @pulumi.getter(name="enablePublicIp")
    def enable_public_ip(self) -> builtins.bool:
        return pulumi.get(self, "enable_public_ip")

    @property
    @pulumi.getter(name="enabledMechanisms")
    def enabled_mechanisms(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "enabled_mechanisms")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> builtins.str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> builtins.str:
        return pulumi.get(self, "maintain_begin")

    @property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> builtins.str:
        return pulumi.get(self, "maintain_end")

    @property
    @pulumi.getter(name="managementConnectAddress")
    def management_connect_address(self) -> builtins.str:
        return pulumi.get(self, "management_connect_address")

    @property
    @pulumi.getter(name="managerUser")
    def manager_user(self) -> builtins.str:
        return pulumi.get(self, "manager_user")

    @property
    @pulumi.getter(name="manegementConnectAddress")
    @_utilities.deprecated("""typo in manegement_connect_address, please use \"management_connect_address\" instead.""")
    def manegement_connect_address(self) -> builtins.str:
        return pulumi.get(self, "manegement_connect_address")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> builtins.str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> builtins.int:
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> builtins.str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="publicConnAddresses")
    def public_conn_addresses(self) -> builtins.str:
        return pulumi.get(self, "public_conn_addresses")

    @property
    @pulumi.getter(name="publicIpIds")
    def public_ip_ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "public_ip_ids")

    @property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> builtins.str:
        return pulumi.get(self, "resource_spec_code")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> builtins.str:
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> builtins.str:
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> builtins.bool:
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> builtins.int:
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> builtins.str:
        return pulumi.get(self, "storage_spec_code")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> builtins.int:
        return pulumi.get(self, "used_storage_space")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> builtins.str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetDmsKafkaInstancesInstanceCrossVpcAccessResult(dict):
    def __init__(__self__, *,
                 advertised_ip: builtins.str,
                 lisenter_ip: builtins.str,
                 listener_ip: builtins.str,
                 port: builtins.int,
                 port_id: builtins.str):
        pulumi.set(__self__, "advertised_ip", advertised_ip)
        pulumi.set(__self__, "lisenter_ip", lisenter_ip)
        pulumi.set(__self__, "listener_ip", listener_ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="advertisedIp")
    def advertised_ip(self) -> builtins.str:
        return pulumi.get(self, "advertised_ip")

    @property
    @pulumi.getter(name="lisenterIp")
    @_utilities.deprecated("""typo in lisenter_ip, please use \"listener_ip\" instead.""")
    def lisenter_ip(self) -> builtins.str:
        return pulumi.get(self, "lisenter_ip")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> builtins.str:
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> builtins.str:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetDmsKafkaMessagesMessageResult(dict):
    def __init__(__self__, *,
                 app_id: builtins.str,
                 huge_message: builtins.bool,
                 key: builtins.str,
                 message_id: builtins.str,
                 message_offset: builtins.int,
                 partition: builtins.int,
                 size: builtins.int,
                 tag: builtins.str,
                 timestamp: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str app_id: Indicates the application ID.
        :param builtins.bool huge_message: Indicates the big data flag.
        :param builtins.str key: Indicates the message key.
        :param builtins.str message_id: Indicates the message ID.
        :param builtins.int message_offset: Indicates the message offset.
        :param builtins.int partition: Indicates the partition where the message is located.
        :param builtins.int size: Indicates the message size.
        :param builtins.str tag: Indicates the message label.
        :param builtins.str timestamp: Indicates the message production time.
        :param builtins.str value: Indicates the message content.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "huge_message", huge_message)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "message_offset", message_offset)
        pulumi.set(__self__, "partition", partition)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> builtins.str:
        """
        Indicates the application ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="hugeMessage")
    def huge_message(self) -> builtins.bool:
        """
        Indicates the big data flag.
        """
        return pulumi.get(self, "huge_message")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Indicates the message key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="messageId")
    def message_id(self) -> builtins.str:
        """
        Indicates the message ID.
        """
        return pulumi.get(self, "message_id")

    @property
    @pulumi.getter(name="messageOffset")
    def message_offset(self) -> builtins.int:
        """
        Indicates the message offset.
        """
        return pulumi.get(self, "message_offset")

    @property
    @pulumi.getter
    def partition(self) -> builtins.int:
        """
        Indicates the partition where the message is located.
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        Indicates the message size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tag(self) -> builtins.str:
        """
        Indicates the message label.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def timestamp(self) -> builtins.str:
        """
        Indicates the message production time.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Indicates the message content.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDmsKafkaUsersUserResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 default_app: builtins.bool,
                 description: builtins.str,
                 name: builtins.str,
                 role: builtins.str):
        """
        :param builtins.str created_at: Indicates the create time.
        :param builtins.bool default_app: Indicates whether the application is the default application.
        :param builtins.str description: Indicates the description.
        :param builtins.str name: Indicates the username.
        :param builtins.str role: Indicates the user role.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_app", default_app)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultApp")
    def default_app(self) -> builtins.bool:
        """
        Indicates whether the application is the default application.
        """
        return pulumi.get(self, "default_app")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Indicates the description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Indicates the username.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        Indicates the user role.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[builtins.str],
                 charging_modes: Sequence[builtins.str],
                 id: builtins.str,
                 ios: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorIoResult'],
                 properties: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorPropertyResult'],
                 support_features: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeatureResult'],
                 type: builtins.str,
                 vm_specification: builtins.str):
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vm_specification", vm_specification)

    @property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "arch_types")

    @property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "charging_modes")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ios(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorIoResult']:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeatureResult']:
        return pulumi.get(self, "support_features")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> builtins.str:
        return pulumi.get(self, "vm_specification")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorIoResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[builtins.str],
                 storage_spec_code: builtins.str,
                 type: builtins.str,
                 unavailability_zones: Sequence[builtins.str]):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailability_zones", unavailability_zones)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> builtins.str:
        return pulumi.get(self, "storage_spec_code")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unavailabilityZones")
    def unavailability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "unavailability_zones")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorPropertyResult(dict):
    def __init__(__self__, *,
                 flavor_alias: builtins.str,
                 max_bandwidth_per_broker: builtins.int,
                 max_broker: builtins.int,
                 max_consumer_per_broker: builtins.int,
                 max_partition_per_broker: builtins.int,
                 max_storage_per_node: builtins.int,
                 max_tps_per_broker: builtins.int,
                 min_broker: builtins.int,
                 min_storage_per_node: builtins.int):
        pulumi.set(__self__, "flavor_alias", flavor_alias)
        pulumi.set(__self__, "max_bandwidth_per_broker", max_bandwidth_per_broker)
        pulumi.set(__self__, "max_broker", max_broker)
        pulumi.set(__self__, "max_consumer_per_broker", max_consumer_per_broker)
        pulumi.set(__self__, "max_partition_per_broker", max_partition_per_broker)
        pulumi.set(__self__, "max_storage_per_node", max_storage_per_node)
        pulumi.set(__self__, "max_tps_per_broker", max_tps_per_broker)
        pulumi.set(__self__, "min_broker", min_broker)
        pulumi.set(__self__, "min_storage_per_node", min_storage_per_node)

    @property
    @pulumi.getter(name="flavorAlias")
    def flavor_alias(self) -> builtins.str:
        return pulumi.get(self, "flavor_alias")

    @property
    @pulumi.getter(name="maxBandwidthPerBroker")
    def max_bandwidth_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_bandwidth_per_broker")

    @property
    @pulumi.getter(name="maxBroker")
    def max_broker(self) -> builtins.int:
        return pulumi.get(self, "max_broker")

    @property
    @pulumi.getter(name="maxConsumerPerBroker")
    def max_consumer_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_consumer_per_broker")

    @property
    @pulumi.getter(name="maxPartitionPerBroker")
    def max_partition_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_partition_per_broker")

    @property
    @pulumi.getter(name="maxStoragePerNode")
    def max_storage_per_node(self) -> builtins.int:
        return pulumi.get(self, "max_storage_per_node")

    @property
    @pulumi.getter(name="maxTpsPerBroker")
    def max_tps_per_broker(self) -> builtins.int:
        return pulumi.get(self, "max_tps_per_broker")

    @property
    @pulumi.getter(name="minBroker")
    def min_broker(self) -> builtins.int:
        return pulumi.get(self, "min_broker")

    @property
    @pulumi.getter(name="minStoragePerNode")
    def min_storage_per_node(self) -> builtins.int:
        return pulumi.get(self, "min_storage_per_node")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorSupportFeatureResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult(dict):
    def __init__(__self__, *,
                 max_node: builtins.int,
                 max_task: builtins.int,
                 min_node: builtins.int,
                 min_task: builtins.int):
        pulumi.set(__self__, "max_node", max_node)
        pulumi.set(__self__, "max_task", max_task)
        pulumi.set(__self__, "min_node", min_node)
        pulumi.set(__self__, "min_task", min_task)

    @property
    @pulumi.getter(name="maxNode")
    def max_node(self) -> builtins.int:
        return pulumi.get(self, "max_node")

    @property
    @pulumi.getter(name="maxTask")
    def max_task(self) -> builtins.int:
        return pulumi.get(self, "max_task")

    @property
    @pulumi.getter(name="minNode")
    def min_node(self) -> builtins.int:
        return pulumi.get(self, "min_node")

    @property
    @pulumi.getter(name="minTask")
    def min_task(self) -> builtins.int:
        return pulumi.get(self, "min_task")


@pulumi.output_type
class GetDwsFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[builtins.str],
                 datastore_type: builtins.str,
                 datastore_version: builtins.str,
                 elastic_volume_specs: Sequence['outputs.GetDwsFlavorsFlavorElasticVolumeSpecResult'],
                 flavor_id: builtins.str,
                 memory: builtins.int,
                 size: builtins.int,
                 vcpus: builtins.int,
                 volumetype: builtins.str):
        """
        :param Sequence[builtins.str] availability_zones: The list of availability zones.
        :param builtins.str datastore_type: The type of datastore.
        :param builtins.str datastore_version: The version of datastore.
        :param Sequence['GetDwsFlavorsFlavorElasticVolumeSpecArgs'] elastic_volume_specs: The typical specification, If the volume specification is elastic.
        :param builtins.str flavor_id: The name of the dws node flavor.
        :param builtins.int memory: The ram of the dws node flavor in GB.
        :param builtins.int size: The default disk size in GB.
        :param builtins.int vcpus: The vcpus of the dws node flavor.
        :param builtins.str volumetype: Disk type.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "datastore_type", datastore_type)
        pulumi.set(__self__, "datastore_version", datastore_version)
        pulumi.set(__self__, "elastic_volume_specs", elastic_volume_specs)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        """
        The list of availability zones.
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> builtins.str:
        """
        The type of datastore.
        """
        return pulumi.get(self, "datastore_type")

    @property
    @pulumi.getter(name="datastoreVersion")
    def datastore_version(self) -> builtins.str:
        """
        The version of datastore.
        """
        return pulumi.get(self, "datastore_version")

    @property
    @pulumi.getter(name="elasticVolumeSpecs")
    def elastic_volume_specs(self) -> Sequence['outputs.GetDwsFlavorsFlavorElasticVolumeSpecResult']:
        """
        The typical specification, If the volume specification is elastic.
        """
        return pulumi.get(self, "elastic_volume_specs")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> builtins.str:
        """
        The name of the dws node flavor.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        """
        The ram of the dws node flavor in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The default disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        """
        The vcpus of the dws node flavor.
        """
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def volumetype(self) -> builtins.str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetDwsFlavorsFlavorElasticVolumeSpecResult(dict):
    def __init__(__self__, *,
                 max_size: builtins.int,
                 min_size: builtins.int,
                 step: builtins.int):
        """
        :param builtins.int max_size: Maximum disk size.
        :param builtins.int min_size: Minimum disk size.
        :param builtins.int step: Disk size increment step.
        """
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> builtins.int:
        """
        Maximum disk size.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> builtins.int:
        """
        Minimum disk size.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def step(self) -> builtins.int:
        """
        Disk size increment step.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class GetElbFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 bandwidth: builtins.int,
                 cps: builtins.int,
                 id: builtins.str,
                 max_connections: builtins.int,
                 name: builtins.str,
                 qps: builtins.int,
                 type: builtins.str):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cps", cps)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> builtins.int:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def cps(self) -> builtins.int:
        return pulumi.get(self, "cps")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> builtins.int:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qps(self) -> builtins.int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetElbPoolsPoolResult(dict):
    def __init__(__self__, *,
                 connection_drain_enabled: builtins.bool,
                 connection_drain_timeout: builtins.int,
                 description: builtins.str,
                 healthmonitor_id: builtins.str,
                 id: builtins.str,
                 ip_version: builtins.str,
                 lb_method: builtins.str,
                 listeners: Sequence['outputs.GetElbPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetElbPoolsPoolLoadbalancerResult'],
                 members: Sequence['outputs.GetElbPoolsPoolMemberResult'],
                 minimum_healthy_member_count: builtins.int,
                 name: builtins.str,
                 persistences: Sequence['outputs.GetElbPoolsPoolPersistenceResult'],
                 protection_reason: builtins.str,
                 protection_status: builtins.str,
                 protocol: builtins.str,
                 slow_start_duration: builtins.int,
                 slow_start_enabled: builtins.bool,
                 type: builtins.str,
                 vpc_id: builtins.str):
        """
        :param builtins.bool connection_drain_enabled: Whether to enable delayed logout.
        :param builtins.int connection_drain_timeout: The timeout of the delayed logout in seconds.
        :param builtins.str description: The description of pool.
        :param builtins.str healthmonitor_id: The health monitor ID of the ELB pool.
        :param builtins.str id: The pool ID.
        :param builtins.str ip_version: The IP version of pool.
        :param builtins.str lb_method: The method of the ELB pool.
        :param Sequence['GetElbPoolsPoolListenerArgs'] listeners: Listener list. For details, see Data structure of the listener field.
        :param Sequence['GetElbPoolsPoolLoadbalancerArgs'] loadbalancers: Loadbalancer list. For details, see Data structure of the loadbalancer field.
        :param Sequence['GetElbPoolsPoolMemberArgs'] members: Loadbalancer list. For details, see Data structure of the members field.
        :param builtins.int minimum_healthy_member_count: The timeout of the delayed logout in seconds.
        :param builtins.str name: The pool name.
        :param Sequence['GetElbPoolsPoolPersistenceArgs'] persistences: Whether connections in the same session will be processed by the same pool member or not.
        :param builtins.str protection_reason: The reason for update protection.
        :param builtins.str protection_status: The protection status for update.
        :param builtins.str protocol: The protocol of pool.
        :param builtins.int slow_start_duration: The slow start duration, in seconds.
        :param builtins.bool slow_start_enabled: Whether to enable slow start.
        :param builtins.str type: The type of the backend server group.
        :param builtins.str vpc_id: The ID of the VPC where the backend server group works.
        """
        pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "minimum_healthy_member_count", minimum_healthy_member_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "slow_start_duration", slow_start_duration)
        pulumi.set(__self__, "slow_start_enabled", slow_start_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> builtins.bool:
        """
        Whether to enable delayed logout.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> builtins.str:
        """
        The health monitor ID of the ELB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The pool ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.str:
        """
        The IP version of pool.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> builtins.str:
        """
        The method of the ELB pool.
        """
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetElbPoolsPoolListenerResult']:
        """
        Listener list. For details, see Data structure of the listener field.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetElbPoolsPoolLoadbalancerResult']:
        """
        Loadbalancer list. For details, see Data structure of the loadbalancer field.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetElbPoolsPoolMemberResult']:
        """
        Loadbalancer list. For details, see Data structure of the members field.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="minimumHealthyMemberCount")
    def minimum_healthy_member_count(self) -> builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "minimum_healthy_member_count")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetElbPoolsPoolPersistenceResult']:
        """
        Whether connections in the same session will be processed by the same pool member or not.
        """
        return pulumi.get(self, "persistences")

    @property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> builtins.str:
        """
        The reason for update protection.
        """
        return pulumi.get(self, "protection_reason")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> builtins.str:
        """
        The protection status for update.
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The protocol of pool.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="slowStartDuration")
    def slow_start_duration(self) -> builtins.int:
        """
        The slow start duration, in seconds.
        """
        return pulumi.get(self, "slow_start_duration")

    @property
    @pulumi.getter(name="slowStartEnabled")
    def slow_start_enabled(self) -> builtins.bool:
        """
        Whether to enable slow start.
        """
        return pulumi.get(self, "slow_start_enabled")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the backend server group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        The ID of the VPC where the backend server group works.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetElbPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The listener ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The loadbalancer ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The loadbalancer ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The member ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: builtins.str,
                 timeout: builtins.int,
                 type: builtins.str):
        """
        :param builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param builtins.int timeout: The stickiness duration, in minutes.
        :param builtins.str type: The type of persistence mode.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> builtins.str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        The stickiness duration, in minutes.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEvsVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 attachments: Sequence['outputs.GetEvsVolumesVolumeAttachmentResult'],
                 availability_zone: builtins.str,
                 bootable: builtins.bool,
                 create_at: builtins.str,
                 description: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 iops: builtins.int,
                 name: builtins.str,
                 service_type: builtins.str,
                 shareable: builtins.bool,
                 size: builtins.int,
                 status: builtins.str,
                 tags: Mapping[str, builtins.str],
                 throughput: builtins.int,
                 update_at: builtins.str,
                 volume_type: builtins.str,
                 wwn: builtins.str):
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "shareable", shareable)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "throughput", throughput)
        pulumi.set(__self__, "update_at", update_at)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "wwn", wwn)

    @property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetEvsVolumesVolumeAttachmentResult']:
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def bootable(self) -> builtins.bool:
        return pulumi.get(self, "bootable")

    @property
    @pulumi.getter(name="createAt")
    def create_at(self) -> builtins.str:
        return pulumi.get(self, "create_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iops(self) -> builtins.int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> builtins.str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def shareable(self) -> builtins.bool:
        return pulumi.get(self, "shareable")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def throughput(self) -> builtins.int:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> builtins.str:
        return pulumi.get(self, "update_at")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> builtins.str:
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter
    def wwn(self) -> builtins.str:
        return pulumi.get(self, "wwn")


@pulumi.output_type
class GetEvsVolumesVolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 attached_at: builtins.str,
                 attached_mode: builtins.str,
                 device_name: builtins.str,
                 id: builtins.str,
                 server_id: builtins.str):
        pulumi.set(__self__, "attached_at", attached_at)
        pulumi.set(__self__, "attached_mode", attached_mode)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> builtins.str:
        return pulumi.get(self, "attached_at")

    @property
    @pulumi.getter(name="attachedMode")
    def attached_mode(self) -> builtins.str:
        return pulumi.get(self, "attached_mode")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> builtins.str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        return pulumi.get(self, "server_id")


@pulumi.output_type
class GetIdentityGroupUserResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 enabled: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 password_expires_at: builtins.str,
                 password_status: builtins.bool,
                 password_strength: builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)
        pulumi.set(__self__, "password_strength", password_strength)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> builtins.str:
        return pulumi.get(self, "password_expires_at")

    @property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> builtins.bool:
        return pulumi.get(self, "password_status")

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> builtins.str:
        return pulumi.get(self, "password_strength")


@pulumi.output_type
class GetIdentityProjectsProjectResult(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 id: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIdentityUsersUserResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 enabled: builtins.bool,
                 groups: Sequence[builtins.str],
                 id: builtins.str,
                 name: builtins.str,
                 password_expires_at: builtins.str,
                 password_status: builtins.bool):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def groups(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> builtins.str:
        return pulumi.get(self, "password_expires_at")

    @property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> builtins.bool:
        return pulumi.get(self, "password_status")


@pulumi.output_type
class GetImagesImagesImageResult(dict):
    def __init__(__self__, *,
                 active_at: builtins.str,
                 architecture: builtins.str,
                 backup_id: builtins.str,
                 container_format: builtins.str,
                 created_at: builtins.str,
                 data_origin: builtins.str,
                 description: builtins.str,
                 disk_format: builtins.str,
                 enterprise_project_id: builtins.str,
                 file: builtins.str,
                 id: builtins.str,
                 image_type: builtins.str,
                 max_ram_mb: builtins.int,
                 min_disk_gb: builtins.int,
                 min_ram_mb: builtins.int,
                 name: builtins.str,
                 os: builtins.str,
                 os_version: builtins.str,
                 owner: builtins.str,
                 protected: builtins.bool,
                 schema: builtins.str,
                 size_bytes: builtins.int,
                 status: builtins.str,
                 updated_at: builtins.str,
                 visibility: builtins.str):
        pulumi.set(__self__, "active_at", active_at)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "container_format", container_format)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_origin", data_origin)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_format", disk_format)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "max_ram_mb", max_ram_mb)
        pulumi.set(__self__, "min_disk_gb", min_disk_gb)
        pulumi.set(__self__, "min_ram_mb", min_ram_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "protected", protected)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "size_bytes", size_bytes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> builtins.str:
        return pulumi.get(self, "active_at")

    @property
    @pulumi.getter
    def architecture(self) -> builtins.str:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> builtins.str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> builtins.str:
        return pulumi.get(self, "container_format")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> builtins.str:
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> builtins.str:
        return pulumi.get(self, "disk_format")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def file(self) -> builtins.str:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> builtins.str:
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="maxRamMb")
    def max_ram_mb(self) -> builtins.int:
        return pulumi.get(self, "max_ram_mb")

    @property
    @pulumi.getter(name="minDiskGb")
    def min_disk_gb(self) -> builtins.int:
        return pulumi.get(self, "min_disk_gb")

    @property
    @pulumi.getter(name="minRamMb")
    def min_ram_mb(self) -> builtins.int:
        return pulumi.get(self, "min_ram_mb")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> builtins.str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> builtins.str:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def protected(self) -> builtins.bool:
        return pulumi.get(self, "protected")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> builtins.int:
        return pulumi.get(self, "size_bytes")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visibility(self) -> builtins.str:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class GetKpsFailedTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 keypair_name: builtins.str,
                 operate_type: builtins.str,
                 server_id: builtins.str,
                 server_name: builtins.str,
                 task_error_code: builtins.str,
                 task_error_msg: builtins.str,
                 task_time: builtins.str):
        """
        :param builtins.str id: The ID of the task.
        :param builtins.str keypair_name: The name of the keypair associated with the task.
        :param builtins.str operate_type: The operation type of the task.
        :param builtins.str server_id: The ID of the instance associated with the task.
        :param builtins.str server_name: The name of the instance associated with the task.
        :param builtins.str task_error_code: The error code of the task execution failure.
        :param builtins.str task_error_msg: The error information of the task execution failure.
        :param builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_error_code", task_error_code)
        pulumi.set(__self__, "task_error_msg", task_error_msg)
        pulumi.set(__self__, "task_time", task_time)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> builtins.str:
        """
        The operation type of the task.
        """
        return pulumi.get(self, "operate_type")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="taskErrorCode")
    def task_error_code(self) -> builtins.str:
        """
        The error code of the task execution failure.
        """
        return pulumi.get(self, "task_error_code")

    @property
    @pulumi.getter(name="taskErrorMsg")
    def task_error_msg(self) -> builtins.str:
        """
        The error information of the task execution failure.
        """
        return pulumi.get(self, "task_error_msg")

    @property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetKpsKeypairsKeypairResult(dict):
    def __init__(__self__, *,
                 fingerprint: builtins.str,
                 is_managed: builtins.bool,
                 name: builtins.str,
                 public_key: builtins.str,
                 scope: builtins.str):
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "is_managed", is_managed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def fingerprint(self) -> builtins.str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> builtins.bool:
        return pulumi.get(self, "is_managed")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> builtins.str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetKpsRunningTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 keypair_name: builtins.str,
                 operate_type: builtins.str,
                 server_id: builtins.str,
                 server_name: builtins.str,
                 task_time: builtins.str):
        """
        :param builtins.str id: The ID of the task.
        :param builtins.str keypair_name: The name of the keypair associated with the task.
        :param builtins.str operate_type: The operation type of the task.
        :param builtins.str server_id: The ID of the instance associated with the task.
        :param builtins.str server_name: The name of the instance associated with the task.
        :param builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_time", task_time)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> builtins.str:
        """
        The operation type of the task.
        """
        return pulumi.get(self, "operate_type")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetLbListenersListenerResult(dict):
    def __init__(__self__, *,
                 connection_limit: builtins.int,
                 default_pool_id: builtins.str,
                 default_tls_container_ref: builtins.str,
                 description: builtins.str,
                 http2_enable: builtins.bool,
                 id: builtins.str,
                 loadbalancers: Sequence['outputs.GetLbListenersListenerLoadbalancerResult'],
                 name: builtins.str,
                 protocol: builtins.str,
                 protocol_port: builtins.int,
                 sni_container_refs: Sequence[builtins.str]):
        """
        :param builtins.int connection_limit: The maximum number of connections allowed for the listener.
        :param builtins.str default_pool_id: The ID of the default pool with which the ELB listener is associated.
        :param builtins.str default_tls_container_ref: The ID of the server certificate used by the listener.
        :param builtins.str description: The description of the ELB listener.
        :param builtins.bool http2_enable: Whether the ELB listener uses HTTP/2.
        :param builtins.str id: The ELB listener ID.
        :param Sequence['GetLbListenersListenerLoadbalancerArgs'] loadbalancers: Loadbalancer list. For details, see Data structure of the loadbalancer field.
        :param builtins.str name: The listener name.
        :param builtins.str protocol: The listener protocol.
        :param builtins.int protocol_port: The front-end listening port of the listener.
        :param Sequence[builtins.str] sni_container_refs: List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        """
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "default_pool_id", default_pool_id)
        pulumi.set(__self__, "default_tls_container_ref", default_tls_container_ref)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "http2_enable", http2_enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "sni_container_refs", sni_container_refs)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> builtins.int:
        """
        The maximum number of connections allowed for the listener.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> builtins.str:
        """
        The ID of the default pool with which the ELB listener is associated.
        """
        return pulumi.get(self, "default_pool_id")

    @property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> builtins.str:
        """
        The ID of the server certificate used by the listener.
        """
        return pulumi.get(self, "default_tls_container_ref")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the ELB listener.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> builtins.bool:
        """
        Whether the ELB listener uses HTTP/2.
        """
        return pulumi.get(self, "http2_enable")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ELB listener ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetLbListenersListenerLoadbalancerResult']:
        """
        Loadbalancer list. For details, see Data structure of the loadbalancer field.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The listener name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The listener protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> builtins.int:
        """
        The front-end listening port of the listener.
        """
        return pulumi.get(self, "protocol_port")

    @property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> Sequence[builtins.str]:
        """
        List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        """
        return pulumi.get(self, "sni_container_refs")


@pulumi.output_type
class GetLbListenersListenerLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The loadbalancer ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The loadbalancer ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLbPoolsPoolResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 healthmonitor_id: builtins.str,
                 id: builtins.str,
                 lb_method: builtins.str,
                 listeners: Sequence['outputs.GetLbPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetLbPoolsPoolLoadbalancerResult'],
                 members: Sequence['outputs.GetLbPoolsPoolMemberResult'],
                 name: builtins.str,
                 persistences: Sequence['outputs.GetLbPoolsPoolPersistenceResult'],
                 protocol: builtins.str):
        """
        :param builtins.str description: The description of pool.
        :param builtins.str healthmonitor_id: Specifies the health monitor ID of the LB pool.
        :param builtins.str id: The pool ID.
        :param builtins.str lb_method: The method of the LB pool.
        :param Sequence['GetLbPoolsPoolListenerArgs'] listeners: Listener list. For details, see Data structure of the listener field.
        :param Sequence['GetLbPoolsPoolLoadbalancerArgs'] loadbalancers: Loadbalancer list. For details, see Data structure of the loadbalancer field.
        :param Sequence['GetLbPoolsPoolMemberArgs'] members: Loadbalancer list. For details, see Data structure of the members field.
        :param builtins.str name: The pool name.
        :param builtins.str protocol: The protocol of pool.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> builtins.str:
        """
        Specifies the health monitor ID of the LB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The pool ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> builtins.str:
        """
        The method of the LB pool.
        """
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLbPoolsPoolListenerResult']:
        """
        Listener list. For details, see Data structure of the listener field.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetLbPoolsPoolLoadbalancerResult']:
        """
        Loadbalancer list. For details, see Data structure of the loadbalancer field.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetLbPoolsPoolMemberResult']:
        """
        Loadbalancer list. For details, see Data structure of the members field.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetLbPoolsPoolPersistenceResult']:
        return pulumi.get(self, "persistences")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The protocol of pool.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetLbPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The listener ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The listener ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLbPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The loadbalancer ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The loadbalancer ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLbPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The member ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLbPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param builtins.str type: The type of persistence mode.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> builtins.str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkingSecgroupRuleResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 description: builtins.str,
                 direction: builtins.str,
                 ethertype: builtins.str,
                 id: builtins.str,
                 port_range_max: builtins.int,
                 port_range_min: builtins.int,
                 ports: builtins.str,
                 priority: builtins.int,
                 protocol: builtins.str,
                 remote_address_group_id: builtins.str,
                 remote_group_id: builtins.str,
                 remote_ip_prefix: builtins.str):
        """
        :param builtins.int port_range_max: schema: Deprecated
        :param builtins.int port_range_min: schema: Deprecated
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ethertype", ethertype)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address_group_id", remote_address_group_id)
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        pulumi.set(__self__, "remote_ip_prefix", remote_ip_prefix)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> builtins.str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def ethertype(self) -> builtins.str:
        return pulumi.get(self, "ethertype")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_max")

    @property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> builtins.int:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "port_range_min")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def priority(self) -> builtins.int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="remoteAddressGroupId")
    def remote_address_group_id(self) -> builtins.str:
        return pulumi.get(self, "remote_address_group_id")

    @property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> builtins.str:
        return pulumi.get(self, "remote_group_id")

    @property
    @pulumi.getter(name="remoteIpPrefix")
    def remote_ip_prefix(self) -> builtins.str:
        return pulumi.get(self, "remote_ip_prefix")


@pulumi.output_type
class GetNetworkingSecgroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 description: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 updated_at: builtins.str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetObsBucketsBucketResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 created_at: builtins.str,
                 enterprise_project_id: builtins.str,
                 region: builtins.str,
                 storage_class: builtins.str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetRdsBackupsBackupResult(dict):
    def __init__(__self__, *,
                 associated_with_ddm: builtins.bool,
                 begin_time: builtins.str,
                 databases: Sequence['outputs.GetRdsBackupsBackupDatabaseResult'],
                 datastores: Sequence['outputs.GetRdsBackupsBackupDatastoreResult'],
                 end_time: builtins.str,
                 id: builtins.str,
                 instance_id: builtins.str,
                 name: builtins.str,
                 size: builtins.int,
                 status: builtins.str,
                 type: builtins.str):
        """
        :param builtins.bool associated_with_ddm: Whether a DDM instance has been associated.
        :param builtins.str begin_time: Backup start time in the "yyyy-mm-ddThh:mm:ssZ" format.
        :param Sequence['GetRdsBackupsBackupDatabaseArgs'] databases: Database been backed up.
        :param builtins.str end_time: Backup end time in the "yyyy-mm-ddThh:mm:ssZ" format.
        :param builtins.str id: Backup ID.
        :param builtins.str instance_id: RDS instance ID.
        :param builtins.str name: Backup name.
        :param builtins.int size: Backup size in KB.
        :param builtins.str status: Backup status.
        :param builtins.str type: Backup type.
        """
        pulumi.set(__self__, "associated_with_ddm", associated_with_ddm)
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="associatedWithDdm")
    def associated_with_ddm(self) -> builtins.bool:
        """
        Whether a DDM instance has been associated.
        """
        return pulumi.get(self, "associated_with_ddm")

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> builtins.str:
        """
        Backup start time in the "yyyy-mm-ddThh:mm:ssZ" format.
        """
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetRdsBackupsBackupDatabaseResult']:
        """
        Database been backed up.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetRdsBackupsBackupDatastoreResult']:
        return pulumi.get(self, "datastores")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> builtins.str:
        """
        Backup end time in the "yyyy-mm-ddThh:mm:ssZ" format.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Backup ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.str:
        """
        RDS instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Backup name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        Backup size in KB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Backup status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Backup type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRdsBackupsBackupDatabaseResult(dict):
    def __init__(__self__, *,
                 name: builtins.str):
        """
        :param builtins.str name: Database to be backed up for Microsoft SQL Server.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Database to be backed up for Microsoft SQL Server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRdsBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str type: DB engine.
        :param builtins.str version: DB engine version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        DB engine.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        DB engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRdsEngineVersionsVersionResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRdsFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[builtins.str],
                 db_versions: Sequence[builtins.str],
                 group_type: builtins.str,
                 id: builtins.str,
                 instance_mode: builtins.str,
                 memory: builtins.int,
                 mode: builtins.str,
                 name: builtins.str,
                 vcpus: builtins.int):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "db_versions", db_versions)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_mode", instance_mode)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="dbVersions")
    def db_versions(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "db_versions")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> builtins.str:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceMode")
    def instance_mode(self) -> builtins.str:
        return pulumi.get(self, "instance_mode")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use instance_mode instead""")
    def mode(self) -> builtins.str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetRdsInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[builtins.str],
                 backup_strategies: Sequence['outputs.GetRdsInstancesInstanceBackupStrategyResult'],
                 created: builtins.str,
                 dbs: Sequence['outputs.GetRdsInstancesInstanceDbResult'],
                 enterprise_project_id: builtins.str,
                 fixed_ip: builtins.str,
                 flavor: builtins.str,
                 ha_replication_mode: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 nodes: Sequence['outputs.GetRdsInstancesInstanceNodeResult'],
                 param_group_id: builtins.str,
                 private_ips: Sequence[builtins.str],
                 public_ips: Sequence[builtins.str],
                 region: builtins.str,
                 security_group_id: builtins.str,
                 ssl_enable: builtins.bool,
                 status: builtins.str,
                 subnet_id: builtins.str,
                 tags: Mapping[str, builtins.str],
                 time_zone: builtins.str,
                 volumes: Sequence['outputs.GetRdsInstancesInstanceVolumeResult'],
                 vpc_id: builtins.str):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "dbs", dbs)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "fixed_ip", fixed_ip)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ha_replication_mode", ha_replication_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "param_group_id", param_group_id)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetRdsInstancesInstanceBackupStrategyResult']:
        return pulumi.get(self, "backup_strategies")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def dbs(self) -> Sequence['outputs.GetRdsInstancesInstanceDbResult']:
        return pulumi.get(self, "dbs")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> builtins.str:
        return pulumi.get(self, "fixed_ip")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="haReplicationMode")
    def ha_replication_mode(self) -> builtins.str:
        return pulumi.get(self, "ha_replication_mode")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetRdsInstancesInstanceNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="paramGroupId")
    def param_group_id(self) -> builtins.str:
        return pulumi.get(self, "param_group_id")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> builtins.bool:
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> builtins.str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetRdsInstancesInstanceVolumeResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetRdsInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: builtins.int,
                 start_time: builtins.str):
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> builtins.int:
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetRdsInstancesInstanceDbResult(dict):
    def __init__(__self__, *,
                 port: builtins.int,
                 type: builtins.str,
                 user_name: builtins.str,
                 version: builtins.str):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRdsInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 role: builtins.str,
                 status: builtins.str):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRdsInstancesInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 disk_encryption_id: builtins.str,
                 size: builtins.int,
                 type: builtins.str):
        pulumi.set(__self__, "disk_encryption_id", disk_encryption_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="diskEncryptionId")
    def disk_encryption_id(self) -> builtins.str:
        return pulumi.get(self, "disk_encryption_id")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRdsPgAccountsUserResult(dict):
    def __init__(__self__, *,
                 attributes: Sequence['outputs.GetRdsPgAccountsUserAttributeResult'],
                 description: builtins.str,
                 memberofs: Sequence[builtins.str],
                 name: builtins.str):
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "memberofs", memberofs)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GetRdsPgAccountsUserAttributeResult']:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def memberofs(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "memberofs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRdsPgAccountsUserAttributeResult(dict):
    def __init__(__self__, *,
                 rolbypassrls: builtins.bool,
                 rolcanlogin: builtins.bool,
                 rolconnlimit: builtins.int,
                 rolcreatedb: builtins.bool,
                 rolcreaterole: builtins.bool,
                 rolinherit: builtins.bool,
                 rolreplication: builtins.bool,
                 rolsuper: builtins.bool):
        pulumi.set(__self__, "rolbypassrls", rolbypassrls)
        pulumi.set(__self__, "rolcanlogin", rolcanlogin)
        pulumi.set(__self__, "rolconnlimit", rolconnlimit)
        pulumi.set(__self__, "rolcreatedb", rolcreatedb)
        pulumi.set(__self__, "rolcreaterole", rolcreaterole)
        pulumi.set(__self__, "rolinherit", rolinherit)
        pulumi.set(__self__, "rolreplication", rolreplication)
        pulumi.set(__self__, "rolsuper", rolsuper)

    @property
    @pulumi.getter
    def rolbypassrls(self) -> builtins.bool:
        return pulumi.get(self, "rolbypassrls")

    @property
    @pulumi.getter
    def rolcanlogin(self) -> builtins.bool:
        return pulumi.get(self, "rolcanlogin")

    @property
    @pulumi.getter
    def rolconnlimit(self) -> builtins.int:
        return pulumi.get(self, "rolconnlimit")

    @property
    @pulumi.getter
    def rolcreatedb(self) -> builtins.bool:
        return pulumi.get(self, "rolcreatedb")

    @property
    @pulumi.getter
    def rolcreaterole(self) -> builtins.bool:
        return pulumi.get(self, "rolcreaterole")

    @property
    @pulumi.getter
    def rolinherit(self) -> builtins.bool:
        return pulumi.get(self, "rolinherit")

    @property
    @pulumi.getter
    def rolreplication(self) -> builtins.bool:
        return pulumi.get(self, "rolreplication")

    @property
    @pulumi.getter
    def rolsuper(self) -> builtins.bool:
        return pulumi.get(self, "rolsuper")


@pulumi.output_type
class GetRdsPgDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: builtins.str,
                 description: builtins.str,
                 lc_collate: builtins.str,
                 name: builtins.str,
                 owner: builtins.str,
                 size: builtins.int):
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "lc_collate", lc_collate)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> builtins.str:
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> builtins.str:
        return pulumi.get(self, "lc_collate")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetRdsPgPluginsPluginResult(dict):
    def __init__(__self__, *,
                 created: builtins.bool,
                 description: builtins.str,
                 name: builtins.str,
                 shared_preload_libraries: builtins.str,
                 version: builtins.str):
        """
        :param builtins.bool created: Indicates whether the plugin has been created.
        :param builtins.str description: Indicates the plugin description.
        :param builtins.str name: Indicates the plugin name.
        :param builtins.str shared_preload_libraries: Indicates the dependent preloaded library.
        :param builtins.str version: Indicates the plugin version.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shared_preload_libraries", shared_preload_libraries)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> builtins.bool:
        """
        Indicates whether the plugin has been created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Indicates the plugin description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Indicates the plugin name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sharedPreloadLibraries")
    def shared_preload_libraries(self) -> builtins.str:
        """
        Indicates the dependent preloaded library.
        """
        return pulumi.get(self, "shared_preload_libraries")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Indicates the plugin version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRdsPgSqlLimitsSqlLimitResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 is_effective: builtins.bool,
                 max_concurrency: builtins.int,
                 max_waiting: builtins.int,
                 query_id: builtins.str,
                 query_string: builtins.str,
                 search_path: builtins.str):
        """
        :param builtins.str id: Indicates the ID of SQL limit.
        :param builtins.bool is_effective: Indicates whether the SQL limit is effective.
        :param builtins.int max_concurrency: Indicates the number of SQL statements executed simultaneously.
        :param builtins.int max_waiting: Indicates the max waiting time in seconds.
        :param builtins.str query_id: Indicates the query ID.
        :param builtins.str query_string: Indicates the text form of SQL statement.
        :param builtins.str search_path: Indicates the query order for names that are not schema qualified.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_effective", is_effective)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "max_waiting", max_waiting)
        pulumi.set(__self__, "query_id", query_id)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "search_path", search_path)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Indicates the ID of SQL limit.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEffective")
    def is_effective(self) -> builtins.bool:
        """
        Indicates whether the SQL limit is effective.
        """
        return pulumi.get(self, "is_effective")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> builtins.int:
        """
        Indicates the number of SQL statements executed simultaneously.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> builtins.int:
        """
        Indicates the max waiting time in seconds.
        """
        return pulumi.get(self, "max_waiting")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> builtins.str:
        """
        Indicates the query ID.
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> builtins.str:
        """
        Indicates the text form of SQL statement.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> builtins.str:
        """
        Indicates the query order for names that are not schema qualified.
        """
        return pulumi.get(self, "search_path")


@pulumi.output_type
class GetRdsStorageTypesStorageTypeResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, builtins.str],
                 name: builtins.str,
                 support_compute_group_types: Sequence[builtins.str]):
        """
        :param Mapping[str, builtins.str] az_status: The status details of the AZs to which the specification belongs.
        :param builtins.str name: Storage type.
        :param Sequence[builtins.str] support_compute_group_types: Performance specifications.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "support_compute_group_types", support_compute_group_types)

    @property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, builtins.str]:
        """
        The status details of the AZs to which the specification belongs.
        """
        return pulumi.get(self, "az_status")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Storage type.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="supportComputeGroupTypes")
    def support_compute_group_types(self) -> Sequence[builtins.str]:
        """
        Performance specifications.
        """
        return pulumi.get(self, "support_compute_group_types")


@pulumi.output_type
class GetSfsTurboDataTasksTaskResult(dict):
    def __init__(__self__, *,
                 dest_prefix: builtins.str,
                 dest_target: builtins.str,
                 end_time: builtins.str,
                 id: builtins.str,
                 message: builtins.str,
                 src_prefix: builtins.str,
                 src_target: builtins.str,
                 start_time: builtins.str,
                 status: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str dest_prefix: The destination path prefix of the data task.
        :param builtins.str dest_target: The target end information of the data task.
        :param builtins.str end_time: The end time of the data task, in RFC3339 format.
        :param builtins.str id: The ID of the data task.
        :param builtins.str message: The data task execution result information.
        :param builtins.str src_prefix: The source path prefix of the data task.
        :param builtins.str src_target: The linkage directory name.
        :param builtins.str start_time: The start time of the data task, in RFC3339 format.
        :param builtins.str status: The status of the data task.
        :param builtins.str type: The type of the data task.
        """
        pulumi.set(__self__, "dest_prefix", dest_prefix)
        pulumi.set(__self__, "dest_target", dest_target)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "src_prefix", src_prefix)
        pulumi.set(__self__, "src_target", src_target)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> builtins.str:
        """
        The destination path prefix of the data task.
        """
        return pulumi.get(self, "dest_prefix")

    @property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> builtins.str:
        """
        The target end information of the data task.
        """
        return pulumi.get(self, "dest_target")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> builtins.str:
        """
        The end time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the data task.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        The data task execution result information.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> builtins.str:
        """
        The source path prefix of the data task.
        """
        return pulumi.get(self, "src_prefix")

    @property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> builtins.str:
        """
        The linkage directory name.
        """
        return pulumi.get(self, "src_target")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        """
        The start time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the data task.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the data task.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSfsTurboDuTasksTaskResult(dict):
    def __init__(__self__, *,
                 begin_time: builtins.str,
                 dir_usages: Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageResult'],
                 end_time: builtins.str,
                 id: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str begin_time: The start time of the DU task, in RFC3339 format.
        :param Sequence['GetSfsTurboDuTasksTaskDirUsageArgs'] dir_usages: The resource usages of a directory (including subdirectories).
        :param builtins.str end_time: The end time of the DU task, in RFC3339 format.
        :param builtins.str id: The ID of the DU task.
        :param builtins.str status: The status of the DU task.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "dir_usages", dir_usages)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> builtins.str:
        """
        The start time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageResult']:
        """
        The resource usages of a directory (including subdirectories).
        """
        return pulumi.get(self, "dir_usages")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> builtins.str:
        """
        The end time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the DU task.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the DU task.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSfsTurboDuTasksTaskDirUsageResult(dict):
    def __init__(__self__, *,
                 file_counts: Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageFileCountResult'],
                 message: builtins.str,
                 path: builtins.str,
                 used_capacity: builtins.int):
        """
        :param Sequence['GetSfsTurboDuTasksTaskDirUsageFileCountArgs'] file_counts: The total number of files in the directory.
        :param builtins.str message: The error message.
        :param builtins.str path: The full path to a legal directory in the file system.
        :param builtins.int used_capacity: The used capacity, in byte.
        """
        pulumi.set(__self__, "file_counts", file_counts)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "used_capacity", used_capacity)

    @property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageFileCountResult']:
        """
        The total number of files in the directory.
        """
        return pulumi.get(self, "file_counts")

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The full path to a legal directory in the file system.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> builtins.int:
        """
        The used capacity, in byte.
        """
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class GetSfsTurboDuTasksTaskDirUsageFileCountResult(dict):
    def __init__(__self__, *,
                 block: builtins.int,
                 char: builtins.int,
                 dir: builtins.int,
                 pipe: builtins.int,
                 regular: builtins.int,
                 socket: builtins.int,
                 symlink: builtins.int):
        """
        :param builtins.int block: The number of block devices.
        :param builtins.int char: The number of character devices.
        :param builtins.int dir: The number of directories.
        :param builtins.int pipe: The number of pipe files.
        :param builtins.int regular: The number of common files.
        :param builtins.int socket: The number of sockets.
        :param builtins.int symlink: The number of symbolic links.
        """
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "char", char)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "pipe", pipe)
        pulumi.set(__self__, "regular", regular)
        pulumi.set(__self__, "socket", socket)
        pulumi.set(__self__, "symlink", symlink)

    @property
    @pulumi.getter
    def block(self) -> builtins.int:
        """
        The number of block devices.
        """
        return pulumi.get(self, "block")

    @property
    @pulumi.getter
    def char(self) -> builtins.int:
        """
        The number of character devices.
        """
        return pulumi.get(self, "char")

    @property
    @pulumi.getter
    def dir(self) -> builtins.int:
        """
        The number of directories.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def pipe(self) -> builtins.int:
        """
        The number of pipe files.
        """
        return pulumi.get(self, "pipe")

    @property
    @pulumi.getter
    def regular(self) -> builtins.int:
        """
        The number of common files.
        """
        return pulumi.get(self, "regular")

    @property
    @pulumi.getter
    def socket(self) -> builtins.int:
        """
        The number of sockets.
        """
        return pulumi.get(self, "socket")

    @property
    @pulumi.getter
    def symlink(self) -> builtins.int:
        """
        The number of symbolic links.
        """
        return pulumi.get(self, "symlink")


@pulumi.output_type
class GetSfsTurboObsTargetsTargetResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 file_system_path: builtins.str,
                 id: builtins.str,
                 obs: Sequence['outputs.GetSfsTurboObsTargetsTargetObResult'],
                 status: builtins.str):
        """
        :param builtins.str created_at: The creation time of the OBS target.
        :param builtins.str file_system_path: The linkage directory name of the OBS target.
        :param builtins.str id: The ID of the OBS target.
        :param Sequence['GetSfsTurboObsTargetsTargetObArgs'] obs: The detail of the OBS bucket.
        :param builtins.str status: The status of the OBS target.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "file_system_path", file_system_path)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "obs", obs)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the OBS target.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> builtins.str:
        """
        The linkage directory name of the OBS target.
        """
        return pulumi.get(self, "file_system_path")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the OBS target.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def obs(self) -> Sequence['outputs.GetSfsTurboObsTargetsTargetObResult']:
        """
        The detail of the OBS bucket.
        """
        return pulumi.get(self, "obs")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the OBS target.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSfsTurboObsTargetsTargetObResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 endpoint: builtins.str):
        """
        :param builtins.str bucket: The name of the OBS bucket associated with the OBS target.
        :param builtins.str endpoint: The domain name of the region where the OBS bucket belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The name of the OBS bucket associated with the OBS target.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        The domain name of the region where the OBS bucket belongs.
        """
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class GetSfsTurboPermRulesRuleResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 ip_cidr: builtins.str,
                 rw_type: builtins.str,
                 user_type: builtins.str):
        """
        :param builtins.str id: The ID of the permission rule.
        :param builtins.str ip_cidr: The IP address or IP address range of the authorized object.
        :param builtins.str rw_type: The read and write permission of the authorized object.
        :param builtins.str user_type: The file system access permission granted to the user of the authorized object.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_cidr", ip_cidr)
        pulumi.set(__self__, "rw_type", rw_type)
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the permission rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> builtins.str:
        """
        The IP address or IP address range of the authorized object.
        """
        return pulumi.get(self, "ip_cidr")

    @property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> builtins.str:
        """
        The read and write permission of the authorized object.
        """
        return pulumi.get(self, "rw_type")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> builtins.str:
        """
        The file system access permission granted to the user of the authorized object.
        """
        return pulumi.get(self, "user_type")


@pulumi.output_type
class GetSfsTurbosTurboResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 available_capacity: builtins.str,
                 crypt_key_id: builtins.str,
                 enhanced: builtins.bool,
                 enterprise_project_id: builtins.str,
                 export_location: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 security_group_id: builtins.str,
                 share_proto: builtins.str,
                 share_type: builtins.str,
                 size: builtins.int,
                 subnet_id: builtins.str,
                 version: builtins.str,
                 vpc_id: builtins.str):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "available_capacity", available_capacity)
        pulumi.set(__self__, "crypt_key_id", crypt_key_id)
        pulumi.set(__self__, "enhanced", enhanced)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "export_location", export_location)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "share_proto", share_proto)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="availableCapacity")
    def available_capacity(self) -> builtins.str:
        return pulumi.get(self, "available_capacity")

    @property
    @pulumi.getter(name="cryptKeyId")
    def crypt_key_id(self) -> builtins.str:
        return pulumi.get(self, "crypt_key_id")

    @property
    @pulumi.getter
    def enhanced(self) -> builtins.bool:
        return pulumi.get(self, "enhanced")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="exportLocation")
    def export_location(self) -> builtins.str:
        return pulumi.get(self, "export_location")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="shareProto")
    def share_proto(self) -> builtins.str:
        return pulumi.get(self, "share_proto")

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> builtins.str:
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpcAddressGroupsAddressGroupResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[builtins.str],
                 created_at: builtins.str,
                 description: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 ip_extra_sets: Sequence['outputs.GetVpcAddressGroupsAddressGroupIpExtraSetResult'],
                 ip_version: builtins.int,
                 max_capacity: builtins.int,
                 name: builtins.str,
                 status: builtins.str,
                 status_message: builtins.str,
                 updated_at: builtins.str):
        """
        :param Sequence[builtins.str] addresses: IP address sets in an IP address group.
        :param builtins.str created_at: Time when the IP address group is created.
        :param builtins.str description: The supplementary information about the IP address group.
        :param builtins.str enterprise_project_id: Enterprise project ID.
        :param builtins.str id: IP address group ID, which uniquely identifies the IP address group.
        :param Sequence['GetVpcAddressGroupsAddressGroupIpExtraSetArgs'] ip_extra_sets: IP addresses and their remarks in an IP address group.
        :param builtins.int ip_version: Whether it is an IPv4 or IPv6 address group.
        :param builtins.int max_capacity: Maximum number of entries in an address group,
        :param builtins.str name: IP address group name.
        :param builtins.str status: The status of IP address group.
        :param builtins.str status_message: The status details of IP address group.
        :param builtins.str updated_at: Time when the IP address group was last updated.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_extra_sets", ip_extra_sets)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[builtins.str]:
        """
        IP address sets in an IP address group.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Time when the IP address group is created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The supplementary information about the IP address group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        """
        Enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        IP address group ID, which uniquely identifies the IP address group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipExtraSets")
    def ip_extra_sets(self) -> Sequence['outputs.GetVpcAddressGroupsAddressGroupIpExtraSetResult']:
        """
        IP addresses and their remarks in an IP address group.
        """
        return pulumi.get(self, "ip_extra_sets")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.int:
        """
        Whether it is an IPv4 or IPv6 address group.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> builtins.int:
        """
        Maximum number of entries in an address group,
        """
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        IP address group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of IP address group.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> builtins.str:
        """
        The status details of IP address group.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Time when the IP address group was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetVpcAddressGroupsAddressGroupIpExtraSetResult(dict):
    def __init__(__self__, *,
                 ip: builtins.str,
                 remarks: builtins.str):
        """
        :param builtins.str ip: An IP address, IP address range, or CIDR block.
        :param builtins.str remarks: Provides supplementary information about the IP address, IP address range, or CIDR block.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "remarks", remarks)

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        """
        An IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def remarks(self) -> builtins.str:
        """
        Provides supplementary information about the IP address, IP address range, or CIDR block.
        """
        return pulumi.get(self, "remarks")


@pulumi.output_type
class GetVpcBandwidthPublicipResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 ip_address: builtins.str,
                 ip_version: builtins.int,
                 type: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> builtins.str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.int:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVpcEipsEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_id: builtins.str,
                 bandwidth_name: builtins.str,
                 bandwidth_share_type: builtins.str,
                 bandwidth_size: builtins.int,
                 created_at: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 ip_version: builtins.int,
                 name: builtins.str,
                 port_id: builtins.str,
                 private_ip: builtins.str,
                 public_ip: builtins.str,
                 public_ipv6: builtins.str,
                 status: builtins.str,
                 tags: Mapping[str, builtins.str],
                 type: builtins.str):
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_share_type", bandwidth_share_type)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ipv6", public_ipv6)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> builtins.str:
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> builtins.str:
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthShareType")
    def bandwidth_share_type(self) -> builtins.str:
        return pulumi.get(self, "bandwidth_share_type")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> builtins.int:
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.int:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> builtins.str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> builtins.str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpv6")
    def public_ipv6(self) -> builtins.str:
        return pulumi.get(self, "public_ipv6")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVpcRouteResult(dict):
    def __init__(__self__, *,
                 destination: builtins.str,
                 nexthop: builtins.str):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)

    @property
    @pulumi.getter
    def destination(self) -> builtins.str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthop(self) -> builtins.str:
        return pulumi.get(self, "nexthop")


@pulumi.output_type
class GetVpcRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 destination: builtins.str,
                 nexthop: builtins.str,
                 type: builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> builtins.str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthop(self) -> builtins.str:
        return pulumi.get(self, "nexthop")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVpcRoutesRouteResult(dict):
    def __init__(__self__, *,
                 destination: builtins.str,
                 id: builtins.str,
                 nexthop: builtins.str,
                 type: builtins.str,
                 vpc_id: builtins.str):
        """
        :param builtins.str destination: The route destination.
        :param builtins.str id: The route ID.
        :param builtins.str nexthop: The next hop of the route.
        :param builtins.str type: The route type.
        :param builtins.str vpc_id: The ID of the VPC to which the route belongs.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nexthop", nexthop)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def destination(self) -> builtins.str:
        """
        The route destination.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The route ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nexthop(self) -> builtins.str:
        """
        The next hop of the route.
        """
        return pulumi.get(self, "nexthop")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The route type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        The ID of the VPC to which the route belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpcSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 availability_zone: builtins.str,
                 cidr: builtins.str,
                 description: builtins.str,
                 dhcp_enable: builtins.bool,
                 dns_lists: Sequence[builtins.str],
                 gateway_ip: builtins.str,
                 id: builtins.str,
                 ipv4_subnet_id: builtins.str,
                 ipv6_cidr: builtins.str,
                 ipv6_enable: builtins.bool,
                 ipv6_gateway: builtins.str,
                 ipv6_subnet_id: builtins.str,
                 name: builtins.str,
                 primary_dns: builtins.str,
                 secondary_dns: builtins.str,
                 status: builtins.str,
                 subnet_id: builtins.str,
                 tags: Mapping[str, builtins.str],
                 vpc_id: builtins.str):
        """
        :param builtins.str subnet_id: schema: Deprecated
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dhcp_enable", dhcp_enable)
        pulumi.set(__self__, "dns_lists", dns_lists)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_subnet_id", ipv4_subnet_id)
        pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)
        pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        pulumi.set(__self__, "ipv6_gateway", ipv6_gateway)
        pulumi.set(__self__, "ipv6_subnet_id", ipv6_subnet_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_dns", primary_dns)
        pulumi.set(__self__, "secondary_dns", secondary_dns)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> builtins.str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def cidr(self) -> builtins.str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpEnable")
    def dhcp_enable(self) -> builtins.bool:
        return pulumi.get(self, "dhcp_enable")

    @property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_lists")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> builtins.str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> builtins.str:
        return pulumi.get(self, "ipv4_subnet_id")

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> builtins.str:
        return pulumi.get(self, "ipv6_cidr")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> builtins.bool:
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="ipv6Gateway")
    def ipv6_gateway(self) -> builtins.str:
        return pulumi.get(self, "ipv6_gateway")

    @property
    @pulumi.getter(name="ipv6SubnetId")
    def ipv6_subnet_id(self) -> builtins.str:
        return pulumi.get(self, "ipv6_subnet_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> builtins.str:
        return pulumi.get(self, "primary_dns")

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> builtins.str:
        return pulumi.get(self, "secondary_dns")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpcepPublicServicesServiceResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 is_charge: builtins.bool,
                 owner: builtins.str,
                 service_name: builtins.str,
                 service_type: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_charge", is_charge)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCharge")
    def is_charge(self) -> builtins.bool:
        return pulumi.get(self, "is_charge")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> builtins.str:
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetVpcsVpcResult(dict):
    def __init__(__self__, *,
                 cidr: builtins.str,
                 description: builtins.str,
                 enterprise_project_id: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 secondary_cidrs: Sequence[builtins.str],
                 status: builtins.str,
                 tags: Mapping[str, builtins.str]):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secondary_cidrs", secondary_cidrs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def cidr(self) -> builtins.str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secondaryCidrs")
    def secondary_cidrs(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "secondary_cidrs")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVpnConnectionHealthChecksConnectionHealthCheckResult(dict):
    def __init__(__self__, *,
                 connection_id: builtins.str,
                 destination_ip: builtins.str,
                 id: builtins.str,
                 proto_type: builtins.str,
                 source_ip: builtins.str,
                 status: builtins.str,
                 type: builtins.str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "proto_type", proto_type)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> builtins.str:
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="protoType")
    def proto_type(self) -> builtins.str:
        return pulumi.get(self, "proto_type")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> builtins.str:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVpnConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 connection_monitor_id: builtins.str,
                 created_at: builtins.str,
                 customer_gateway_id: builtins.str,
                 enable_nqa: builtins.bool,
                 enterprise_project_id: builtins.str,
                 gateway_id: builtins.str,
                 gateway_ip: builtins.str,
                 ha_role: builtins.str,
                 id: builtins.str,
                 ikepolicies: Sequence['outputs.GetVpnConnectionsConnectionIkepolicyResult'],
                 ipsecpolicies: Sequence['outputs.GetVpnConnectionsConnectionIpsecpolicyResult'],
                 name: builtins.str,
                 peer_subnets: Sequence[builtins.str],
                 policy_rules: Sequence['outputs.GetVpnConnectionsConnectionPolicyRuleResult'],
                 status: builtins.str,
                 tunnel_local_address: builtins.str,
                 tunnel_peer_address: builtins.str,
                 updated_at: builtins.str,
                 vpn_type: builtins.str):
        pulumi.set(__self__, "connection_monitor_id", connection_monitor_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "ha_role", ha_role)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ikepolicies", ikepolicies)
        pulumi.set(__self__, "ipsecpolicies", ipsecpolicies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_subnets", peer_subnets)
        pulumi.set(__self__, "policy_rules", policy_rules)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tunnel_local_address", tunnel_local_address)
        pulumi.set(__self__, "tunnel_peer_address", tunnel_peer_address)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpn_type", vpn_type)

    @property
    @pulumi.getter(name="connectionMonitorId")
    def connection_monitor_id(self) -> builtins.str:
        return pulumi.get(self, "connection_monitor_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> builtins.str:
        return pulumi.get(self, "customer_gateway_id")

    @property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> builtins.bool:
        return pulumi.get(self, "enable_nqa")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> builtins.str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> builtins.str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="haRole")
    def ha_role(self) -> builtins.str:
        return pulumi.get(self, "ha_role")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ikepolicies(self) -> Sequence['outputs.GetVpnConnectionsConnectionIkepolicyResult']:
        return pulumi.get(self, "ikepolicies")

    @property
    @pulumi.getter
    def ipsecpolicies(self) -> Sequence['outputs.GetVpnConnectionsConnectionIpsecpolicyResult']:
        return pulumi.get(self, "ipsecpolicies")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "peer_subnets")

    @property
    @pulumi.getter(name="policyRules")
    def policy_rules(self) -> Sequence['outputs.GetVpnConnectionsConnectionPolicyRuleResult']:
        return pulumi.get(self, "policy_rules")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelLocalAddress")
    def tunnel_local_address(self) -> builtins.str:
        return pulumi.get(self, "tunnel_local_address")

    @property
    @pulumi.getter(name="tunnelPeerAddress")
    def tunnel_peer_address(self) -> builtins.str:
        return pulumi.get(self, "tunnel_peer_address")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> builtins.str:
        return pulumi.get(self, "vpn_type")


@pulumi.output_type
class GetVpnConnectionsConnectionIkepolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: builtins.str,
                 authentication_method: builtins.str,
                 dh_group: builtins.str,
                 dpds: Sequence['outputs.GetVpnConnectionsConnectionIkepolicyDpdResult'],
                 encryption_algorithm: builtins.str,
                 ike_version: builtins.str,
                 lifetime_seconds: builtins.int,
                 local_id: builtins.str,
                 local_id_type: builtins.str,
                 peer_id: builtins.str,
                 peer_id_type: builtins.str,
                 phase1_negotiation_mode: builtins.str):
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "dh_group", dh_group)
        pulumi.set(__self__, "dpds", dpds)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "local_id", local_id)
        pulumi.set(__self__, "local_id_type", local_id_type)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "peer_id_type", peer_id_type)
        pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> builtins.str:
        return pulumi.get(self, "authentication_algorithm")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> builtins.str:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> builtins.str:
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter
    def dpds(self) -> Sequence['outputs.GetVpnConnectionsConnectionIkepolicyDpdResult']:
        return pulumi.get(self, "dpds")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> builtins.str:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> builtins.str:
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> builtins.int:
        return pulumi.get(self, "lifetime_seconds")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> builtins.str:
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> builtins.str:
        return pulumi.get(self, "local_id_type")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> builtins.str:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> builtins.str:
        return pulumi.get(self, "peer_id_type")

    @property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> builtins.str:
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class GetVpnConnectionsConnectionIkepolicyDpdResult(dict):
    def __init__(__self__, *,
                 interval: builtins.int,
                 msg: builtins.str,
                 timeout: builtins.int):
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "msg", msg)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def interval(self) -> builtins.int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def msg(self) -> builtins.str:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetVpnConnectionsConnectionIpsecpolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: builtins.str,
                 encapsulation_mode: builtins.str,
                 encryption_algorithm: builtins.str,
                 lifetime_seconds: builtins.int,
                 pfs: builtins.str,
                 transform_protocol: builtins.str):
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "pfs", pfs)
        pulumi.set(__self__, "transform_protocol", transform_protocol)

    @property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> builtins.str:
        return pulumi.get(self, "authentication_algorithm")

    @property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> builtins.str:
        return pulumi.get(self, "encapsulation_mode")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> builtins.str:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> builtins.int:
        return pulumi.get(self, "lifetime_seconds")

    @property
    @pulumi.getter
    def pfs(self) -> builtins.str:
        return pulumi.get(self, "pfs")

    @property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> builtins.str:
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class GetVpnConnectionsConnectionPolicyRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Sequence[builtins.str],
                 rule_index: builtins.int,
                 source: builtins.str):
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "rule_index", rule_index)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> builtins.int:
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetVpnCustomerGatewaysCustomerGatewayResult(dict):
    def __init__(__self__, *,
                 asn: builtins.int,
                 ca_certificates: Sequence['outputs.GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult'],
                 created_at: builtins.str,
                 id: builtins.str,
                 id_type: builtins.str,
                 id_value: builtins.str,
                 ip: builtins.str,
                 name: builtins.str,
                 route_mode: builtins.str,
                 updated_at: builtins.str):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "ca_certificates", ca_certificates)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_type", id_type)
        pulumi.set(__self__, "id_value", id_value)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def asn(self) -> builtins.int:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Sequence['outputs.GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult']:
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> builtins.str:
        return pulumi.get(self, "id_type")

    @property
    @pulumi.getter(name="idValue")
    def id_value(self) -> builtins.str:
        return pulumi.get(self, "id_value")

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> builtins.str:
        return pulumi.get(self, "route_mode")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult(dict):
    def __init__(__self__, *,
                 expire_time: builtins.str,
                 is_updatable: builtins.bool,
                 issuer: builtins.str,
                 serial_number: builtins.str,
                 signature_algorithm: builtins.str,
                 subject: builtins.str):
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "is_updatable", is_updatable)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> builtins.str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="isUpdatable")
    def is_updatable(self) -> builtins.bool:
        return pulumi.get(self, "is_updatable")

    @property
    @pulumi.getter
    def issuer(self) -> builtins.str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> builtins.str:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> builtins.str:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter
    def subject(self) -> builtins.str:
        return pulumi.get(self, "subject")


@pulumi.output_type
class GetVpnGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 access_private_ips: Sequence[builtins.str],
                 access_subnet_id: builtins.str,
                 access_vpc_id: builtins.str,
                 attachment_type: builtins.str,
                 availability_zones: Sequence[builtins.str],
                 bgp_asn: builtins.int,
                 connect_subnet: builtins.str,
                 connection_number: builtins.int,
                 created_at: builtins.str,
                 eips: Sequence['outputs.GetVpnGatewaysGatewayEipResult'],
                 enterprise_project_id: builtins.str,
                 er_attachment_id: builtins.str,
                 er_id: builtins.str,
                 flavor: builtins.str,
                 ha_mode: builtins.str,
                 id: builtins.str,
                 local_subnets: Sequence[builtins.str],
                 name: builtins.str,
                 network_type: builtins.str,
                 status: builtins.str,
                 updated_at: builtins.str,
                 used_connection_group: builtins.int,
                 used_connection_number: builtins.int,
                 vpc_id: builtins.str):
        """
        :param Sequence[builtins.str] access_private_ips: The list of private access IPs.
        :param builtins.str access_subnet_id: The ID of the access subnet.
        :param builtins.str access_vpc_id: The ID of the access VPC.
        :param builtins.str attachment_type: The attachment type.
        :param Sequence[builtins.str] availability_zones: The availability zone IDs.
        :param builtins.int bgp_asn: The ASN number of BGP
        :param builtins.str connect_subnet: The VPC network segment used by the VPN gateway
        :param builtins.int connection_number: The max number of connections.
        :param builtins.str created_at: The create time.
        :param builtins.str enterprise_project_id: The enterprise project ID
        :param builtins.str er_attachment_id: The ER attachment ID.
        :param builtins.str er_id: The ID of the ER to which the VPN gateway is connected.
        :param builtins.str flavor: The flavor of the VPN gateway.
        :param builtins.str ha_mode: The HA mode.
        :param builtins.str id: The ID of the gateway
        :param Sequence[builtins.str] local_subnets: The local subnets.
        :param builtins.str name: The name of the gateway.
        :param builtins.str network_type: The network type of the gateway.
        :param builtins.str status: The status of the gateway.
        :param builtins.str updated_at: The update time.
        :param builtins.int used_connection_group: The number of used connection groups.
        :param builtins.int used_connection_number: The number of used connections.
        :param builtins.str vpc_id: The ID of the VPC to which the VPN gateway is connected.
        """
        pulumi.set(__self__, "access_private_ips", access_private_ips)
        pulumi.set(__self__, "access_subnet_id", access_subnet_id)
        pulumi.set(__self__, "access_vpc_id", access_vpc_id)
        pulumi.set(__self__, "attachment_type", attachment_type)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "connect_subnet", connect_subnet)
        pulumi.set(__self__, "connection_number", connection_number)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "er_attachment_id", er_attachment_id)
        pulumi.set(__self__, "er_id", er_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_subnets", local_subnets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used_connection_group", used_connection_group)
        pulumi.set(__self__, "used_connection_number", used_connection_number)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accessPrivateIps")
    def access_private_ips(self) -> Sequence[builtins.str]:
        """
        The list of private access IPs.
        """
        return pulumi.get(self, "access_private_ips")

    @property
    @pulumi.getter(name="accessSubnetId")
    def access_subnet_id(self) -> builtins.str:
        """
        The ID of the access subnet.
        """
        return pulumi.get(self, "access_subnet_id")

    @property
    @pulumi.getter(name="accessVpcId")
    def access_vpc_id(self) -> builtins.str:
        """
        The ID of the access VPC.
        """
        return pulumi.get(self, "access_vpc_id")

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> builtins.str:
        """
        The attachment type.
        """
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        """
        The availability zone IDs.
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> builtins.int:
        """
        The ASN number of BGP
        """
        return pulumi.get(self, "bgp_asn")

    @property
    @pulumi.getter(name="connectSubnet")
    def connect_subnet(self) -> builtins.str:
        """
        The VPC network segment used by the VPN gateway
        """
        return pulumi.get(self, "connect_subnet")

    @property
    @pulumi.getter(name="connectionNumber")
    def connection_number(self) -> builtins.int:
        """
        The max number of connections.
        """
        return pulumi.get(self, "connection_number")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def eips(self) -> Sequence['outputs.GetVpnGatewaysGatewayEipResult']:
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> builtins.str:
        """
        The enterprise project ID
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="erAttachmentId")
    def er_attachment_id(self) -> builtins.str:
        """
        The ER attachment ID.
        """
        return pulumi.get(self, "er_attachment_id")

    @property
    @pulumi.getter(name="erId")
    def er_id(self) -> builtins.str:
        """
        The ID of the ER to which the VPN gateway is connected.
        """
        return pulumi.get(self, "er_id")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        """
        The flavor of the VPN gateway.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> builtins.str:
        """
        The HA mode.
        """
        return pulumi.get(self, "ha_mode")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the gateway
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Sequence[builtins.str]:
        """
        The local subnets.
        """
        return pulumi.get(self, "local_subnets")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> builtins.str:
        """
        The network type of the gateway.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="usedConnectionGroup")
    def used_connection_group(self) -> builtins.int:
        """
        The number of used connection groups.
        """
        return pulumi.get(self, "used_connection_group")

    @property
    @pulumi.getter(name="usedConnectionNumber")
    def used_connection_number(self) -> builtins.int:
        """
        The number of used connections.
        """
        return pulumi.get(self, "used_connection_number")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        The ID of the VPC to which the VPN gateway is connected.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpnGatewaysGatewayEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_billing_info: builtins.str,
                 bandwidth_id: builtins.str,
                 bandwidth_name: builtins.str,
                 bandwidth_size: builtins.int,
                 billing_info: builtins.str,
                 charge_mode: builtins.str,
                 id: builtins.str,
                 ip_address: builtins.str,
                 ip_version: builtins.int,
                 type: builtins.str):
        """
        :param builtins.str bandwidth_billing_info: The bandwidth billing info.
        :param builtins.str bandwidth_id: The bandwidth ID.
        :param builtins.str bandwidth_name: The bandwidth name.
        :param builtins.int bandwidth_size: Bandwidth size in Mbit/s.
        :param builtins.str billing_info: The billing info.
        :param builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        :param builtins.str id: The public IP ID.
        :param builtins.str ip_address: The public IP address.
        :param builtins.int ip_version: The public IP version.
        :param builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        pulumi.set(__self__, "bandwidth_billing_info", bandwidth_billing_info)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthBillingInfo")
    def bandwidth_billing_info(self) -> builtins.str:
        """
        The bandwidth billing info.
        """
        return pulumi.get(self, "bandwidth_billing_info")

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> builtins.str:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> builtins.str:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> builtins.int:
        """
        Bandwidth size in Mbit/s.
        """
        return pulumi.get(self, "bandwidth_size")

    @property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> builtins.str:
        """
        The billing info.
        """
        return pulumi.get(self, "billing_info")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> builtins.str:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> builtins.str:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.int:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.
        """
        return pulumi.get(self, "type")


