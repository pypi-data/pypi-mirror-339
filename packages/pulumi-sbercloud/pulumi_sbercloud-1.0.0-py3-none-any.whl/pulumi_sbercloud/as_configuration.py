# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AsConfigurationArgs', 'AsConfiguration']

@pulumi.input_type
class AsConfigurationArgs:
    def __init__(__self__, *,
                 instance_config: pulumi.Input['AsConfigurationInstanceConfigArgs'],
                 scaling_configuration_name: pulumi.Input[builtins.str],
                 region: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a AsConfiguration resource.
        """
        pulumi.set(__self__, "instance_config", instance_config)
        pulumi.set(__self__, "scaling_configuration_name", scaling_configuration_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> pulumi.Input['AsConfigurationInstanceConfigArgs']:
        return pulumi.get(self, "instance_config")

    @instance_config.setter
    def instance_config(self, value: pulumi.Input['AsConfigurationInstanceConfigArgs']):
        pulumi.set(self, "instance_config", value)

    @property
    @pulumi.getter(name="scalingConfigurationName")
    def scaling_configuration_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "scaling_configuration_name")

    @scaling_configuration_name.setter
    def scaling_configuration_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "scaling_configuration_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AsConfigurationState:
    def __init__(__self__, *,
                 instance_config: Optional[pulumi.Input['AsConfigurationInstanceConfigArgs']] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering AsConfiguration resources.
        """
        if instance_config is not None:
            pulumi.set(__self__, "instance_config", instance_config)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_configuration_name is not None:
            pulumi.set(__self__, "scaling_configuration_name", scaling_configuration_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> Optional[pulumi.Input['AsConfigurationInstanceConfigArgs']]:
        return pulumi.get(self, "instance_config")

    @instance_config.setter
    def instance_config(self, value: Optional[pulumi.Input['AsConfigurationInstanceConfigArgs']]):
        pulumi.set(self, "instance_config", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalingConfigurationName")
    def scaling_configuration_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scaling_configuration_name")

    @scaling_configuration_name.setter
    def scaling_configuration_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_configuration_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


class AsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_config: Optional[pulumi.Input[Union['AsConfigurationInstanceConfigArgs', 'AsConfigurationInstanceConfigArgsDict']]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a AsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AsConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_config: Optional[pulumi.Input[Union['AsConfigurationInstanceConfigArgs', 'AsConfigurationInstanceConfigArgsDict']]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_configuration_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AsConfigurationArgs.__new__(AsConfigurationArgs)

            if instance_config is None and not opts.urn:
                raise TypeError("Missing required property 'instance_config'")
            __props__.__dict__["instance_config"] = instance_config
            __props__.__dict__["region"] = region
            if scaling_configuration_name is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_configuration_name'")
            __props__.__dict__["scaling_configuration_name"] = scaling_configuration_name
            __props__.__dict__["status"] = None
        super(AsConfiguration, __self__).__init__(
            'sbercloud:index/asConfiguration:AsConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_config: Optional[pulumi.Input[Union['AsConfigurationInstanceConfigArgs', 'AsConfigurationInstanceConfigArgsDict']]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            scaling_configuration_name: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None) -> 'AsConfiguration':
        """
        Get an existing AsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AsConfigurationState.__new__(_AsConfigurationState)

        __props__.__dict__["instance_config"] = instance_config
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_configuration_name"] = scaling_configuration_name
        __props__.__dict__["status"] = status
        return AsConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> pulumi.Output['outputs.AsConfigurationInstanceConfig']:
        return pulumi.get(self, "instance_config")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="scalingConfigurationName")
    def scaling_configuration_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "scaling_configuration_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "status")

