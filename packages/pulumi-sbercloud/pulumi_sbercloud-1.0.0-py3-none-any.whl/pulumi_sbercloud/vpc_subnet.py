# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VpcSubnetArgs', 'VpcSubnet']

@pulumi.input_type
class VpcSubnetArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[builtins.str],
                 gateway_ip: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[builtins.str]] = None,
                 dns_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ntp_server_address: Optional[pulumi.Input[builtins.str]] = None,
                 primary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 secondary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a VpcSubnet resource.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_enable is not None:
            pulumi.set(__self__, "dhcp_enable", dhcp_enable)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if dns_lists is not None:
            pulumi.set(__self__, "dns_lists", dns_lists)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_server_address is not None:
            pulumi.set(__self__, "ntp_server_address", ntp_server_address)
        if primary_dns is not None:
            pulumi.set(__self__, "primary_dns", primary_dns)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secondary_dns is not None:
            pulumi.set(__self__, "secondary_dns", secondary_dns)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpEnable")
    def dhcp_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcp_enable")

    @dhcp_enable.setter
    def dhcp_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcp_enable", value)

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_lists")

    @dns_lists.setter
    def dns_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_lists", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServerAddress")
    def ntp_server_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ntp_server_address")

    @ntp_server_address.setter
    def ntp_server_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ntp_server_address", value)

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "primary_dns")

    @primary_dns.setter
    def primary_dns(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "primary_dns", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "secondary_dns")

    @secondary_dns.setter
    def secondary_dns(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secondary_dns", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _VpcSubnetState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 cidr: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[builtins.str]] = None,
                 dns_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 gateway_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ntp_server_address: Optional[pulumi.Input[builtins.str]] = None,
                 primary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 secondary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering VpcSubnet resources.
        :param pulumi.Input[builtins.str] subnet_id: schema: Deprecated
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_enable is not None:
            pulumi.set(__self__, "dhcp_enable", dhcp_enable)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if dns_lists is not None:
            pulumi.set(__self__, "dns_lists", dns_lists)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if ipv4_subnet_id is not None:
            pulumi.set(__self__, "ipv4_subnet_id", ipv4_subnet_id)
        if ipv6_cidr is not None:
            pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if ipv6_gateway is not None:
            pulumi.set(__self__, "ipv6_gateway", ipv6_gateway)
        if ipv6_subnet_id is not None:
            pulumi.set(__self__, "ipv6_subnet_id", ipv6_subnet_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_server_address is not None:
            pulumi.set(__self__, "ntp_server_address", ntp_server_address)
        if primary_dns is not None:
            pulumi.set(__self__, "primary_dns", primary_dns)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secondary_dns is not None:
            pulumi.set(__self__, "secondary_dns", secondary_dns)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpEnable")
    def dhcp_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcp_enable")

    @dhcp_enable.setter
    def dhcp_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcp_enable", value)

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_lists")

    @dns_lists.setter
    def dns_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_lists", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv4_subnet_id")

    @ipv4_subnet_id.setter
    def ipv4_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_subnet_id", value)

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_cidr")

    @ipv6_cidr.setter
    def ipv6_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_cidr", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter(name="ipv6Gateway")
    def ipv6_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_gateway")

    @ipv6_gateway.setter
    def ipv6_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_gateway", value)

    @property
    @pulumi.getter(name="ipv6SubnetId")
    def ipv6_subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_subnet_id")

    @ipv6_subnet_id.setter
    def ipv6_subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_subnet_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServerAddress")
    def ntp_server_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ntp_server_address")

    @ntp_server_address.setter
    def ntp_server_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ntp_server_address", value)

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "primary_dns")

    @primary_dns.setter
    def primary_dns(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "primary_dns", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "secondary_dns")

    @secondary_dns.setter
    def secondary_dns(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secondary_dns", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class VpcSubnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 cidr: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[builtins.str]] = None,
                 dns_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 gateway_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ntp_server_address: Optional[pulumi.Input[builtins.str]] = None,
                 primary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 secondary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a VpcSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcSubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpcSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcSubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcSubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 cidr: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[builtins.str]] = None,
                 dns_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 gateway_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ntp_server_address: Optional[pulumi.Input[builtins.str]] = None,
                 primary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 secondary_dns: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcSubnetArgs.__new__(VpcSubnetArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_enable"] = dhcp_enable
            __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
            __props__.__dict__["dns_lists"] = dns_lists
            if gateway_ip is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_ip'")
            __props__.__dict__["gateway_ip"] = gateway_ip
            __props__.__dict__["ipv6_enable"] = ipv6_enable
            __props__.__dict__["name"] = name
            __props__.__dict__["ntp_server_address"] = ntp_server_address
            __props__.__dict__["primary_dns"] = primary_dns
            __props__.__dict__["region"] = region
            __props__.__dict__["secondary_dns"] = secondary_dns
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["ipv4_subnet_id"] = None
            __props__.__dict__["ipv6_cidr"] = None
            __props__.__dict__["ipv6_gateway"] = None
            __props__.__dict__["ipv6_subnet_id"] = None
            __props__.__dict__["subnet_id"] = None
        super(VpcSubnet, __self__).__init__(
            'sbercloud:index/vpcSubnet:VpcSubnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[builtins.str]] = None,
            cidr: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dhcp_enable: Optional[pulumi.Input[builtins.bool]] = None,
            dhcp_lease_time: Optional[pulumi.Input[builtins.str]] = None,
            dns_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            gateway_ip: Optional[pulumi.Input[builtins.str]] = None,
            ipv4_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            ipv6_cidr: Optional[pulumi.Input[builtins.str]] = None,
            ipv6_enable: Optional[pulumi.Input[builtins.bool]] = None,
            ipv6_gateway: Optional[pulumi.Input[builtins.str]] = None,
            ipv6_subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            ntp_server_address: Optional[pulumi.Input[builtins.str]] = None,
            primary_dns: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            secondary_dns: Optional[pulumi.Input[builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'VpcSubnet':
        """
        Get an existing VpcSubnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] subnet_id: schema: Deprecated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcSubnetState.__new__(_VpcSubnetState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_enable"] = dhcp_enable
        __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
        __props__.__dict__["dns_lists"] = dns_lists
        __props__.__dict__["gateway_ip"] = gateway_ip
        __props__.__dict__["ipv4_subnet_id"] = ipv4_subnet_id
        __props__.__dict__["ipv6_cidr"] = ipv6_cidr
        __props__.__dict__["ipv6_enable"] = ipv6_enable
        __props__.__dict__["ipv6_gateway"] = ipv6_gateway
        __props__.__dict__["ipv6_subnet_id"] = ipv6_subnet_id
        __props__.__dict__["name"] = name
        __props__.__dict__["ntp_server_address"] = ntp_server_address
        __props__.__dict__["primary_dns"] = primary_dns
        __props__.__dict__["region"] = region
        __props__.__dict__["secondary_dns"] = secondary_dns
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return VpcSubnet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpEnable")
    def dhcp_enable(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcp_enable")

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "dhcp_lease_time")

    @property
    @pulumi.getter(name="dnsLists")
    def dns_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "dns_lists")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "ipv4_subnet_id")

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "ipv6_cidr")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="ipv6Gateway")
    def ipv6_gateway(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "ipv6_gateway")

    @property
    @pulumi.getter(name="ipv6SubnetId")
    def ipv6_subnet_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "ipv6_subnet_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ntpServerAddress")
    def ntp_server_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ntp_server_address")

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "primary_dns")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "secondary_dns")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[builtins.str]:
        """
        schema: Deprecated
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "vpc_id")

