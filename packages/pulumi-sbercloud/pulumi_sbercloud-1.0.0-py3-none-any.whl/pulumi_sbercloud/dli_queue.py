# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DliQueueArgs', 'DliQueue']

@pulumi.input_type
class DliQueueArgs:
    def __init__(__self__, *,
                 cu_count: pulumi.Input[builtins.int],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 elastic_resource_pool_name: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 feature: Optional[pulumi.Input[builtins.str]] = None,
                 management_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 queue_type: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 resource_mode: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_policies: Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]] = None,
                 spark_driver: Optional[pulumi.Input['DliQueueSparkDriverArgs']] = None,
                 subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_cidr: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DliQueue resource.
        :param pulumi.Input[builtins.str] elastic_resource_pool_name: The name of the elastic resource pool to which the queue belongs.
        :param pulumi.Input[builtins.int] resource_mode: The queue resource mode.
        :param pulumi.Input[builtins.str] vpc_cidr: The CIDR block of the queue.
        """
        pulumi.set(__self__, "cu_count", cu_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if elastic_resource_pool_name is not None:
            pulumi.set(__self__, "elastic_resource_pool_name", elastic_resource_pool_name)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if feature is not None:
            pulumi.set(__self__, "feature", feature)
        if management_subnet_cidr is not None:
            warnings.warn("""management_subnet_cidr is Deprecated""", DeprecationWarning)
            pulumi.log.warn("""management_subnet_cidr is deprecated: management_subnet_cidr is Deprecated""")
        if management_subnet_cidr is not None:
            pulumi.set(__self__, "management_subnet_cidr", management_subnet_cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if queue_type is not None:
            pulumi.set(__self__, "queue_type", queue_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_mode is not None:
            pulumi.set(__self__, "resource_mode", resource_mode)
        if scaling_policies is not None:
            pulumi.set(__self__, "scaling_policies", scaling_policies)
        if spark_driver is not None:
            pulumi.set(__self__, "spark_driver", spark_driver)
        if subnet_cidr is not None:
            warnings.warn("""subnet_cidr is Deprecated""", DeprecationWarning)
            pulumi.log.warn("""subnet_cidr is deprecated: subnet_cidr is Deprecated""")
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)

    @property
    @pulumi.getter(name="cuCount")
    def cu_count(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cu_count")

    @cu_count.setter
    def cu_count(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cu_count", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="elasticResourcePoolName")
    def elastic_resource_pool_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the elastic resource pool to which the queue belongs.
        """
        return pulumi.get(self, "elastic_resource_pool_name")

    @elastic_resource_pool_name.setter
    def elastic_resource_pool_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "elastic_resource_pool_name", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def feature(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "feature")

    @feature.setter
    def feature(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "feature", value)

    @property
    @pulumi.getter(name="managementSubnetCidr")
    @_utilities.deprecated("""management_subnet_cidr is Deprecated""")
    def management_subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "management_subnet_cidr")

    @management_subnet_cidr.setter
    def management_subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "management_subnet_cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="queueType")
    def queue_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "queue_type")

    @queue_type.setter
    def queue_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "queue_type", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceMode")
    def resource_mode(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The queue resource mode.
        """
        return pulumi.get(self, "resource_mode")

    @resource_mode.setter
    def resource_mode(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "resource_mode", value)

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]]:
        return pulumi.get(self, "scaling_policies")

    @scaling_policies.setter
    def scaling_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]]):
        pulumi.set(self, "scaling_policies", value)

    @property
    @pulumi.getter(name="sparkDriver")
    def spark_driver(self) -> Optional[pulumi.Input['DliQueueSparkDriverArgs']]:
        return pulumi.get(self, "spark_driver")

    @spark_driver.setter
    def spark_driver(self, value: Optional[pulumi.Input['DliQueueSparkDriverArgs']]):
        pulumi.set(self, "spark_driver", value)

    @property
    @pulumi.getter(name="subnetCidr")
    @_utilities.deprecated("""subnet_cidr is Deprecated""")
    def subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_cidr", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR block of the queue.
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_cidr", value)


@pulumi.input_type
class _DliQueueState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[builtins.int]] = None,
                 cu_count: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 elastic_resource_pool_name: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 feature: Optional[pulumi.Input[builtins.str]] = None,
                 management_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 queue_type: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 resource_mode: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_policies: Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]] = None,
                 spark_driver: Optional[pulumi.Input['DliQueueSparkDriverArgs']] = None,
                 subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_cidr: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DliQueue resources.
        :param pulumi.Input[builtins.str] elastic_resource_pool_name: The name of the elastic resource pool to which the queue belongs.
        :param pulumi.Input[builtins.int] resource_mode: The queue resource mode.
        :param pulumi.Input[builtins.str] vpc_cidr: The CIDR block of the queue.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if cu_count is not None:
            pulumi.set(__self__, "cu_count", cu_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if elastic_resource_pool_name is not None:
            pulumi.set(__self__, "elastic_resource_pool_name", elastic_resource_pool_name)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if feature is not None:
            pulumi.set(__self__, "feature", feature)
        if management_subnet_cidr is not None:
            warnings.warn("""management_subnet_cidr is Deprecated""", DeprecationWarning)
            pulumi.log.warn("""management_subnet_cidr is deprecated: management_subnet_cidr is Deprecated""")
        if management_subnet_cidr is not None:
            pulumi.set(__self__, "management_subnet_cidr", management_subnet_cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if queue_type is not None:
            pulumi.set(__self__, "queue_type", queue_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_mode is not None:
            pulumi.set(__self__, "resource_mode", resource_mode)
        if scaling_policies is not None:
            pulumi.set(__self__, "scaling_policies", scaling_policies)
        if spark_driver is not None:
            pulumi.set(__self__, "spark_driver", spark_driver)
        if subnet_cidr is not None:
            warnings.warn("""subnet_cidr is Deprecated""", DeprecationWarning)
            pulumi.log.warn("""subnet_cidr is deprecated: subnet_cidr is Deprecated""")
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="cuCount")
    def cu_count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cu_count")

    @cu_count.setter
    def cu_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cu_count", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="elasticResourcePoolName")
    def elastic_resource_pool_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the elastic resource pool to which the queue belongs.
        """
        return pulumi.get(self, "elastic_resource_pool_name")

    @elastic_resource_pool_name.setter
    def elastic_resource_pool_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "elastic_resource_pool_name", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def feature(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "feature")

    @feature.setter
    def feature(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "feature", value)

    @property
    @pulumi.getter(name="managementSubnetCidr")
    @_utilities.deprecated("""management_subnet_cidr is Deprecated""")
    def management_subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "management_subnet_cidr")

    @management_subnet_cidr.setter
    def management_subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "management_subnet_cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="queueType")
    def queue_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "queue_type")

    @queue_type.setter
    def queue_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "queue_type", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceMode")
    def resource_mode(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The queue resource mode.
        """
        return pulumi.get(self, "resource_mode")

    @resource_mode.setter
    def resource_mode(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "resource_mode", value)

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]]:
        return pulumi.get(self, "scaling_policies")

    @scaling_policies.setter
    def scaling_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DliQueueScalingPolicyArgs']]]]):
        pulumi.set(self, "scaling_policies", value)

    @property
    @pulumi.getter(name="sparkDriver")
    def spark_driver(self) -> Optional[pulumi.Input['DliQueueSparkDriverArgs']]:
        return pulumi.get(self, "spark_driver")

    @spark_driver.setter
    def spark_driver(self, value: Optional[pulumi.Input['DliQueueSparkDriverArgs']]):
        pulumi.set(self, "spark_driver", value)

    @property
    @pulumi.getter(name="subnetCidr")
    @_utilities.deprecated("""subnet_cidr is Deprecated""")
    def subnet_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_cidr", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR block of the queue.
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_cidr", value)


class DliQueue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cu_count: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 elastic_resource_pool_name: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 feature: Optional[pulumi.Input[builtins.str]] = None,
                 management_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 queue_type: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 resource_mode: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DliQueueScalingPolicyArgs', 'DliQueueScalingPolicyArgsDict']]]]] = None,
                 spark_driver: Optional[pulumi.Input[Union['DliQueueSparkDriverArgs', 'DliQueueSparkDriverArgsDict']]] = None,
                 subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a DliQueue resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] elastic_resource_pool_name: The name of the elastic resource pool to which the queue belongs.
        :param pulumi.Input[builtins.int] resource_mode: The queue resource mode.
        :param pulumi.Input[builtins.str] vpc_cidr: The CIDR block of the queue.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DliQueueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DliQueue resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DliQueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DliQueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cu_count: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 elastic_resource_pool_name: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 feature: Optional[pulumi.Input[builtins.str]] = None,
                 management_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 queue_type: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 resource_mode: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DliQueueScalingPolicyArgs', 'DliQueueScalingPolicyArgsDict']]]]] = None,
                 spark_driver: Optional[pulumi.Input[Union['DliQueueSparkDriverArgs', 'DliQueueSparkDriverArgsDict']]] = None,
                 subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 vpc_cidr: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DliQueueArgs.__new__(DliQueueArgs)

            if cu_count is None and not opts.urn:
                raise TypeError("Missing required property 'cu_count'")
            __props__.__dict__["cu_count"] = cu_count
            __props__.__dict__["description"] = description
            __props__.__dict__["elastic_resource_pool_name"] = elastic_resource_pool_name
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["feature"] = feature
            __props__.__dict__["management_subnet_cidr"] = management_subnet_cidr
            __props__.__dict__["name"] = name
            __props__.__dict__["platform"] = platform
            __props__.__dict__["queue_type"] = queue_type
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_mode"] = resource_mode
            __props__.__dict__["scaling_policies"] = scaling_policies
            __props__.__dict__["spark_driver"] = spark_driver
            __props__.__dict__["subnet_cidr"] = subnet_cidr
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vpc_cidr"] = vpc_cidr
            __props__.__dict__["create_time"] = None
        super(DliQueue, __self__).__init__(
            'sbercloud:index/dliQueue:DliQueue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[builtins.int]] = None,
            cu_count: Optional[pulumi.Input[builtins.int]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            elastic_resource_pool_name: Optional[pulumi.Input[builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            feature: Optional[pulumi.Input[builtins.str]] = None,
            management_subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            platform: Optional[pulumi.Input[builtins.str]] = None,
            queue_type: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            resource_mode: Optional[pulumi.Input[builtins.int]] = None,
            scaling_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DliQueueScalingPolicyArgs', 'DliQueueScalingPolicyArgsDict']]]]] = None,
            spark_driver: Optional[pulumi.Input[Union['DliQueueSparkDriverArgs', 'DliQueueSparkDriverArgsDict']]] = None,
            subnet_cidr: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            vpc_cidr: Optional[pulumi.Input[builtins.str]] = None) -> 'DliQueue':
        """
        Get an existing DliQueue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] elastic_resource_pool_name: The name of the elastic resource pool to which the queue belongs.
        :param pulumi.Input[builtins.int] resource_mode: The queue resource mode.
        :param pulumi.Input[builtins.str] vpc_cidr: The CIDR block of the queue.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DliQueueState.__new__(_DliQueueState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["cu_count"] = cu_count
        __props__.__dict__["description"] = description
        __props__.__dict__["elastic_resource_pool_name"] = elastic_resource_pool_name
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["feature"] = feature
        __props__.__dict__["management_subnet_cidr"] = management_subnet_cidr
        __props__.__dict__["name"] = name
        __props__.__dict__["platform"] = platform
        __props__.__dict__["queue_type"] = queue_type
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_mode"] = resource_mode
        __props__.__dict__["scaling_policies"] = scaling_policies
        __props__.__dict__["spark_driver"] = spark_driver
        __props__.__dict__["subnet_cidr"] = subnet_cidr
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_cidr"] = vpc_cidr
        return DliQueue(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="cuCount")
    def cu_count(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "cu_count")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="elasticResourcePoolName")
    def elastic_resource_pool_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the elastic resource pool to which the queue belongs.
        """
        return pulumi.get(self, "elastic_resource_pool_name")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def feature(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "feature")

    @property
    @pulumi.getter(name="managementSubnetCidr")
    @_utilities.deprecated("""management_subnet_cidr is Deprecated""")
    def management_subnet_cidr(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "management_subnet_cidr")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="queueType")
    def queue_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "queue_type")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceMode")
    def resource_mode(self) -> pulumi.Output[builtins.int]:
        """
        The queue resource mode.
        """
        return pulumi.get(self, "resource_mode")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> pulumi.Output[Sequence['outputs.DliQueueScalingPolicy']]:
        return pulumi.get(self, "scaling_policies")

    @property
    @pulumi.getter(name="sparkDriver")
    def spark_driver(self) -> pulumi.Output[Optional['outputs.DliQueueSparkDriver']]:
        return pulumi.get(self, "spark_driver")

    @property
    @pulumi.getter(name="subnetCidr")
    @_utilities.deprecated("""subnet_cidr is Deprecated""")
    def subnet_cidr(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "subnet_cidr")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> pulumi.Output[builtins.str]:
        """
        The CIDR block of the queue.
        """
        return pulumi.get(self, "vpc_cidr")

