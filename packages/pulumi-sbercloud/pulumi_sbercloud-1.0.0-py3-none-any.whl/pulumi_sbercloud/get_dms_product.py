# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDmsProductResult',
    'AwaitableGetDmsProductResult',
    'get_dms_product',
    'get_dms_product_output',
]

@pulumi.output_type
class GetDmsProductResult:
    """
    A collection of values returned by getDmsProduct.
    """
    def __init__(__self__, availability_zones=None, bandwidth=None, engine=None, id=None, instance_type=None, io_type=None, node_num=None, partition_num=None, region=None, storage=None, storage_spec_code=None, storage_spec_codes=None, version=None, vm_specification=None):
        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError("Expected argument 'availability_zones' to be a list")
        pulumi.set(__self__, "availability_zones", availability_zones)
        if bandwidth and not isinstance(bandwidth, str):
            raise TypeError("Expected argument 'bandwidth' to be a str")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if io_type and not isinstance(io_type, str):
            raise TypeError("Expected argument 'io_type' to be a str")
        pulumi.set(__self__, "io_type", io_type)
        if node_num and not isinstance(node_num, str):
            raise TypeError("Expected argument 'node_num' to be a str")
        pulumi.set(__self__, "node_num", node_num)
        if partition_num and not isinstance(partition_num, str):
            raise TypeError("Expected argument 'partition_num' to be a str")
        pulumi.set(__self__, "partition_num", partition_num)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if storage and not isinstance(storage, str):
            raise TypeError("Expected argument 'storage' to be a str")
        pulumi.set(__self__, "storage", storage)
        if storage_spec_code and not isinstance(storage_spec_code, str):
            raise TypeError("Expected argument 'storage_spec_code' to be a str")
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        if storage_spec_codes and not isinstance(storage_spec_codes, list):
            raise TypeError("Expected argument 'storage_spec_codes' to be a list")
        pulumi.set(__self__, "storage_spec_codes", storage_spec_codes)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if vm_specification and not isinstance(vm_specification, str):
            raise TypeError("Expected argument 'vm_specification' to be a str")
        pulumi.set(__self__, "vm_specification", vm_specification)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def bandwidth(self) -> builtins.str:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> builtins.str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ioType")
    @_utilities.deprecated("""io_type has deprecated, please use storage_spec_code""")
    def io_type(self) -> builtins.str:
        return pulumi.get(self, "io_type")

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> builtins.str:
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> builtins.str:
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def storage(self) -> builtins.str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> builtins.str:
        return pulumi.get(self, "storage_spec_code")

    @property
    @pulumi.getter(name="storageSpecCodes")
    def storage_spec_codes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "storage_spec_codes")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> builtins.str:
        return pulumi.get(self, "vm_specification")


class AwaitableGetDmsProductResult(GetDmsProductResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsProductResult(
            availability_zones=self.availability_zones,
            bandwidth=self.bandwidth,
            engine=self.engine,
            id=self.id,
            instance_type=self.instance_type,
            io_type=self.io_type,
            node_num=self.node_num,
            partition_num=self.partition_num,
            region=self.region,
            storage=self.storage,
            storage_spec_code=self.storage_spec_code,
            storage_spec_codes=self.storage_spec_codes,
            version=self.version,
            vm_specification=self.vm_specification)


def get_dms_product(availability_zones: Optional[Sequence[builtins.str]] = None,
                    bandwidth: Optional[builtins.str] = None,
                    engine: Optional[builtins.str] = None,
                    instance_type: Optional[builtins.str] = None,
                    io_type: Optional[builtins.str] = None,
                    node_num: Optional[builtins.str] = None,
                    partition_num: Optional[builtins.str] = None,
                    region: Optional[builtins.str] = None,
                    storage: Optional[builtins.str] = None,
                    storage_spec_code: Optional[builtins.str] = None,
                    version: Optional[builtins.str] = None,
                    vm_specification: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsProductResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['availabilityZones'] = availability_zones
    __args__['bandwidth'] = bandwidth
    __args__['engine'] = engine
    __args__['instanceType'] = instance_type
    __args__['ioType'] = io_type
    __args__['nodeNum'] = node_num
    __args__['partitionNum'] = partition_num
    __args__['region'] = region
    __args__['storage'] = storage
    __args__['storageSpecCode'] = storage_spec_code
    __args__['version'] = version
    __args__['vmSpecification'] = vm_specification
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsProduct:getDmsProduct', __args__, opts=opts, typ=GetDmsProductResult).value

    return AwaitableGetDmsProductResult(
        availability_zones=pulumi.get(__ret__, 'availability_zones'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        engine=pulumi.get(__ret__, 'engine'),
        id=pulumi.get(__ret__, 'id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        io_type=pulumi.get(__ret__, 'io_type'),
        node_num=pulumi.get(__ret__, 'node_num'),
        partition_num=pulumi.get(__ret__, 'partition_num'),
        region=pulumi.get(__ret__, 'region'),
        storage=pulumi.get(__ret__, 'storage'),
        storage_spec_code=pulumi.get(__ret__, 'storage_spec_code'),
        storage_spec_codes=pulumi.get(__ret__, 'storage_spec_codes'),
        version=pulumi.get(__ret__, 'version'),
        vm_specification=pulumi.get(__ret__, 'vm_specification'))
def get_dms_product_output(availability_zones: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                           bandwidth: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           engine: Optional[pulumi.Input[builtins.str]] = None,
                           instance_type: Optional[pulumi.Input[builtins.str]] = None,
                           io_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           node_num: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           partition_num: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           storage: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           storage_spec_code: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           version: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           vm_specification: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsProductResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['availabilityZones'] = availability_zones
    __args__['bandwidth'] = bandwidth
    __args__['engine'] = engine
    __args__['instanceType'] = instance_type
    __args__['ioType'] = io_type
    __args__['nodeNum'] = node_num
    __args__['partitionNum'] = partition_num
    __args__['region'] = region
    __args__['storage'] = storage
    __args__['storageSpecCode'] = storage_spec_code
    __args__['version'] = version
    __args__['vmSpecification'] = vm_specification
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsProduct:getDmsProduct', __args__, opts=opts, typ=GetDmsProductResult)
    return __ret__.apply(lambda __response__: GetDmsProductResult(
        availability_zones=pulumi.get(__response__, 'availability_zones'),
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        engine=pulumi.get(__response__, 'engine'),
        id=pulumi.get(__response__, 'id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        io_type=pulumi.get(__response__, 'io_type'),
        node_num=pulumi.get(__response__, 'node_num'),
        partition_num=pulumi.get(__response__, 'partition_num'),
        region=pulumi.get(__response__, 'region'),
        storage=pulumi.get(__response__, 'storage'),
        storage_spec_code=pulumi.get(__response__, 'storage_spec_code'),
        storage_spec_codes=pulumi.get(__response__, 'storage_spec_codes'),
        version=pulumi.get(__response__, 'version'),
        vm_specification=pulumi.get(__response__, 'vm_specification')))
