# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AsBandwidthPolicyArgs', 'AsBandwidthPolicy']

@pulumi.input_type
class AsBandwidthPolicyArgs:
    def __init__(__self__, *,
                 bandwidth_id: pulumi.Input[builtins.str],
                 scaling_policy_name: pulumi.Input[builtins.str],
                 scaling_policy_type: pulumi.Input[builtins.str],
                 alarm_id: Optional[pulumi.Input[builtins.str]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_action: Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']] = None,
                 scheduled_policy: Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']] = None):
        """
        The set of arguments for constructing a AsBandwidthPolicy resource.
        :param pulumi.Input[builtins.str] bandwidth_id: Specifies the scaling bandwidth ID.
        :param pulumi.Input[builtins.str] scaling_policy_name: Specifies the AS policy name.
        :param pulumi.Input[builtins.str] scaling_policy_type: Specifies the AS policy type.
        :param pulumi.Input[builtins.str] alarm_id: Specifies the alarm rule ID.
        :param pulumi.Input[builtins.int] cool_down_time: Specifies the cooldown period (in seconds).
        :param pulumi.Input[builtins.str] description: Specifies the description of the AS policy.
        """
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "scaling_policy_name", scaling_policy_name)
        pulumi.set(__self__, "scaling_policy_type", scaling_policy_type)
        if alarm_id is not None:
            pulumi.set(__self__, "alarm_id", alarm_id)
        if cool_down_time is not None:
            pulumi.set(__self__, "cool_down_time", cool_down_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_policy_action is not None:
            pulumi.set(__self__, "scaling_policy_action", scaling_policy_action)
        if scheduled_policy is not None:
            pulumi.set(__self__, "scheduled_policy", scheduled_policy)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the scaling bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bandwidth_id", value)

    @property
    @pulumi.getter(name="scalingPolicyName")
    def scaling_policy_name(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the AS policy name.
        """
        return pulumi.get(self, "scaling_policy_name")

    @scaling_policy_name.setter
    def scaling_policy_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "scaling_policy_name", value)

    @property
    @pulumi.getter(name="scalingPolicyType")
    def scaling_policy_type(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the AS policy type.
        """
        return pulumi.get(self, "scaling_policy_type")

    @scaling_policy_type.setter
    def scaling_policy_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "scaling_policy_type", value)

    @property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @alarm_id.setter
    def alarm_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alarm_id", value)

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the cooldown period (in seconds).
        """
        return pulumi.get(self, "cool_down_time")

    @cool_down_time.setter
    def cool_down_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cool_down_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the description of the AS policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalingPolicyAction")
    def scaling_policy_action(self) -> Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']]:
        return pulumi.get(self, "scaling_policy_action")

    @scaling_policy_action.setter
    def scaling_policy_action(self, value: Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']]):
        pulumi.set(self, "scaling_policy_action", value)

    @property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']]:
        return pulumi.get(self, "scheduled_policy")

    @scheduled_policy.setter
    def scheduled_policy(self, value: Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']]):
        pulumi.set(self, "scheduled_policy", value)


@pulumi.input_type
class _AsBandwidthPolicyState:
    def __init__(__self__, *,
                 alarm_id: Optional[pulumi.Input[builtins.str]] = None,
                 bandwidth_id: Optional[pulumi.Input[builtins.str]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_action: Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']] = None,
                 scaling_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_type: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_resource_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering AsBandwidthPolicy resources.
        :param pulumi.Input[builtins.str] alarm_id: Specifies the alarm rule ID.
        :param pulumi.Input[builtins.str] bandwidth_id: Specifies the scaling bandwidth ID.
        :param pulumi.Input[builtins.int] cool_down_time: Specifies the cooldown period (in seconds).
        :param pulumi.Input[builtins.str] description: Specifies the description of the AS policy.
        :param pulumi.Input[builtins.str] scaling_policy_name: Specifies the AS policy name.
        :param pulumi.Input[builtins.str] scaling_policy_type: Specifies the AS policy type.
        :param pulumi.Input[builtins.str] scaling_resource_type: the scaling resource type.
        :param pulumi.Input[builtins.str] status: the AS policy status.
        """
        if alarm_id is not None:
            pulumi.set(__self__, "alarm_id", alarm_id)
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if cool_down_time is not None:
            pulumi.set(__self__, "cool_down_time", cool_down_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scaling_policy_action is not None:
            pulumi.set(__self__, "scaling_policy_action", scaling_policy_action)
        if scaling_policy_name is not None:
            pulumi.set(__self__, "scaling_policy_name", scaling_policy_name)
        if scaling_policy_type is not None:
            pulumi.set(__self__, "scaling_policy_type", scaling_policy_type)
        if scaling_resource_type is not None:
            pulumi.set(__self__, "scaling_resource_type", scaling_resource_type)
        if scheduled_policy is not None:
            pulumi.set(__self__, "scheduled_policy", scheduled_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @alarm_id.setter
    def alarm_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alarm_id", value)

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the scaling bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @bandwidth_id.setter
    def bandwidth_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bandwidth_id", value)

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the cooldown period (in seconds).
        """
        return pulumi.get(self, "cool_down_time")

    @cool_down_time.setter
    def cool_down_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cool_down_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the description of the AS policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalingPolicyAction")
    def scaling_policy_action(self) -> Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']]:
        return pulumi.get(self, "scaling_policy_action")

    @scaling_policy_action.setter
    def scaling_policy_action(self, value: Optional[pulumi.Input['AsBandwidthPolicyScalingPolicyActionArgs']]):
        pulumi.set(self, "scaling_policy_action", value)

    @property
    @pulumi.getter(name="scalingPolicyName")
    def scaling_policy_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the AS policy name.
        """
        return pulumi.get(self, "scaling_policy_name")

    @scaling_policy_name.setter
    def scaling_policy_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_policy_name", value)

    @property
    @pulumi.getter(name="scalingPolicyType")
    def scaling_policy_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the AS policy type.
        """
        return pulumi.get(self, "scaling_policy_type")

    @scaling_policy_type.setter
    def scaling_policy_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_policy_type", value)

    @property
    @pulumi.getter(name="scalingResourceType")
    def scaling_resource_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the scaling resource type.
        """
        return pulumi.get(self, "scaling_resource_type")

    @scaling_resource_type.setter
    def scaling_resource_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_resource_type", value)

    @property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']]:
        return pulumi.get(self, "scheduled_policy")

    @scheduled_policy.setter
    def scheduled_policy(self, value: Optional[pulumi.Input['AsBandwidthPolicyScheduledPolicyArgs']]):
        pulumi.set(self, "scheduled_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the AS policy status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


class AsBandwidthPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_id: Optional[pulumi.Input[builtins.str]] = None,
                 bandwidth_id: Optional[pulumi.Input[builtins.str]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_action: Optional[pulumi.Input[Union['AsBandwidthPolicyScalingPolicyActionArgs', 'AsBandwidthPolicyScalingPolicyActionArgsDict']]] = None,
                 scaling_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input[Union['AsBandwidthPolicyScheduledPolicyArgs', 'AsBandwidthPolicyScheduledPolicyArgsDict']]] = None,
                 __props__=None):
        """
        Create a AsBandwidthPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] alarm_id: Specifies the alarm rule ID.
        :param pulumi.Input[builtins.str] bandwidth_id: Specifies the scaling bandwidth ID.
        :param pulumi.Input[builtins.int] cool_down_time: Specifies the cooldown period (in seconds).
        :param pulumi.Input[builtins.str] description: Specifies the description of the AS policy.
        :param pulumi.Input[builtins.str] scaling_policy_name: Specifies the AS policy name.
        :param pulumi.Input[builtins.str] scaling_policy_type: Specifies the AS policy type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AsBandwidthPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AsBandwidthPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AsBandwidthPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AsBandwidthPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_id: Optional[pulumi.Input[builtins.str]] = None,
                 bandwidth_id: Optional[pulumi.Input[builtins.str]] = None,
                 cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_action: Optional[pulumi.Input[Union['AsBandwidthPolicyScalingPolicyActionArgs', 'AsBandwidthPolicyScalingPolicyActionArgsDict']]] = None,
                 scaling_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_policy_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduled_policy: Optional[pulumi.Input[Union['AsBandwidthPolicyScheduledPolicyArgs', 'AsBandwidthPolicyScheduledPolicyArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AsBandwidthPolicyArgs.__new__(AsBandwidthPolicyArgs)

            __props__.__dict__["alarm_id"] = alarm_id
            if bandwidth_id is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth_id'")
            __props__.__dict__["bandwidth_id"] = bandwidth_id
            __props__.__dict__["cool_down_time"] = cool_down_time
            __props__.__dict__["description"] = description
            __props__.__dict__["region"] = region
            __props__.__dict__["scaling_policy_action"] = scaling_policy_action
            if scaling_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_policy_name'")
            __props__.__dict__["scaling_policy_name"] = scaling_policy_name
            if scaling_policy_type is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_policy_type'")
            __props__.__dict__["scaling_policy_type"] = scaling_policy_type
            __props__.__dict__["scheduled_policy"] = scheduled_policy
            __props__.__dict__["scaling_resource_type"] = None
            __props__.__dict__["status"] = None
        super(AsBandwidthPolicy, __self__).__init__(
            'sbercloud:index/asBandwidthPolicy:AsBandwidthPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_id: Optional[pulumi.Input[builtins.str]] = None,
            bandwidth_id: Optional[pulumi.Input[builtins.str]] = None,
            cool_down_time: Optional[pulumi.Input[builtins.int]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            scaling_policy_action: Optional[pulumi.Input[Union['AsBandwidthPolicyScalingPolicyActionArgs', 'AsBandwidthPolicyScalingPolicyActionArgsDict']]] = None,
            scaling_policy_name: Optional[pulumi.Input[builtins.str]] = None,
            scaling_policy_type: Optional[pulumi.Input[builtins.str]] = None,
            scaling_resource_type: Optional[pulumi.Input[builtins.str]] = None,
            scheduled_policy: Optional[pulumi.Input[Union['AsBandwidthPolicyScheduledPolicyArgs', 'AsBandwidthPolicyScheduledPolicyArgsDict']]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None) -> 'AsBandwidthPolicy':
        """
        Get an existing AsBandwidthPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] alarm_id: Specifies the alarm rule ID.
        :param pulumi.Input[builtins.str] bandwidth_id: Specifies the scaling bandwidth ID.
        :param pulumi.Input[builtins.int] cool_down_time: Specifies the cooldown period (in seconds).
        :param pulumi.Input[builtins.str] description: Specifies the description of the AS policy.
        :param pulumi.Input[builtins.str] scaling_policy_name: Specifies the AS policy name.
        :param pulumi.Input[builtins.str] scaling_policy_type: Specifies the AS policy type.
        :param pulumi.Input[builtins.str] scaling_resource_type: the scaling resource type.
        :param pulumi.Input[builtins.str] status: the AS policy status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AsBandwidthPolicyState.__new__(_AsBandwidthPolicyState)

        __props__.__dict__["alarm_id"] = alarm_id
        __props__.__dict__["bandwidth_id"] = bandwidth_id
        __props__.__dict__["cool_down_time"] = cool_down_time
        __props__.__dict__["description"] = description
        __props__.__dict__["region"] = region
        __props__.__dict__["scaling_policy_action"] = scaling_policy_action
        __props__.__dict__["scaling_policy_name"] = scaling_policy_name
        __props__.__dict__["scaling_policy_type"] = scaling_policy_type
        __props__.__dict__["scaling_resource_type"] = scaling_resource_type
        __props__.__dict__["scheduled_policy"] = scheduled_policy
        __props__.__dict__["status"] = status
        return AsBandwidthPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the alarm rule ID.
        """
        return pulumi.get(self, "alarm_id")

    @property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the scaling bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @property
    @pulumi.getter(name="coolDownTime")
    def cool_down_time(self) -> pulumi.Output[builtins.int]:
        """
        Specifies the cooldown period (in seconds).
        """
        return pulumi.get(self, "cool_down_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the description of the AS policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="scalingPolicyAction")
    def scaling_policy_action(self) -> pulumi.Output['outputs.AsBandwidthPolicyScalingPolicyAction']:
        return pulumi.get(self, "scaling_policy_action")

    @property
    @pulumi.getter(name="scalingPolicyName")
    def scaling_policy_name(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the AS policy name.
        """
        return pulumi.get(self, "scaling_policy_name")

    @property
    @pulumi.getter(name="scalingPolicyType")
    def scaling_policy_type(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the AS policy type.
        """
        return pulumi.get(self, "scaling_policy_type")

    @property
    @pulumi.getter(name="scalingResourceType")
    def scaling_resource_type(self) -> pulumi.Output[builtins.str]:
        """
        the scaling resource type.
        """
        return pulumi.get(self, "scaling_resource_type")

    @property
    @pulumi.getter(name="scheduledPolicy")
    def scheduled_policy(self) -> pulumi.Output['outputs.AsBandwidthPolicyScheduledPolicy']:
        return pulumi.get(self, "scheduled_policy")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        the AS policy status.
        """
        return pulumi.get(self, "status")

