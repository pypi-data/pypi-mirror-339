# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RdsMysqlDatabaseTableRestoreArgs', 'RdsMysqlDatabaseTableRestore']

@pulumi.input_type
class RdsMysqlDatabaseTableRestoreArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[builtins.str],
                 restore_time: pulumi.Input[builtins.int],
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]] = None,
                 is_fast_restore: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]] = None):
        """
        The set of arguments for constructing a RdsMysqlDatabaseTableRestore resource.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of RDS MySQL instance.
        :param pulumi.Input[builtins.int] restore_time: Specifies the restoration time point.
        :param pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]] databases: Specifies the databases that will be restored.
        :param pulumi.Input[builtins.bool] is_fast_restore: Specifies whether to use fast restoration.
        :param pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]] restore_tables: Specifies the tables that will be restored.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "restore_time", restore_time)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if is_fast_restore is not None:
            pulumi.set(__self__, "is_fast_restore", is_fast_restore)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_tables is not None:
            pulumi.set(__self__, "restore_tables", restore_tables)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the ID of RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Input[builtins.int]:
        """
        Specifies the restoration time point.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "restore_time", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]]:
        """
        Specifies the databases that will be restored.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="isFastRestore")
    def is_fast_restore(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to use fast restoration.
        """
        return pulumi.get(self, "is_fast_restore")

    @is_fast_restore.setter
    def is_fast_restore(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_fast_restore", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]]:
        """
        Specifies the tables that will be restored.
        """
        return pulumi.get(self, "restore_tables")

    @restore_tables.setter
    def restore_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]]):
        pulumi.set(self, "restore_tables", value)


@pulumi.input_type
class _RdsMysqlDatabaseTableRestoreState:
    def __init__(__self__, *,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_fast_restore: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]] = None,
                 restore_time: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering RdsMysqlDatabaseTableRestore resources.
        :param pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]] databases: Specifies the databases that will be restored.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of RDS MySQL instance.
        :param pulumi.Input[builtins.bool] is_fast_restore: Specifies whether to use fast restoration.
        :param pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]] restore_tables: Specifies the tables that will be restored.
        :param pulumi.Input[builtins.int] restore_time: Specifies the restoration time point.
        """
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_fast_restore is not None:
            pulumi.set(__self__, "is_fast_restore", is_fast_restore)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_tables is not None:
            pulumi.set(__self__, "restore_tables", restore_tables)
        if restore_time is not None:
            pulumi.set(__self__, "restore_time", restore_time)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]]:
        """
        Specifies the databases that will be restored.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the ID of RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isFastRestore")
    def is_fast_restore(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to use fast restoration.
        """
        return pulumi.get(self, "is_fast_restore")

    @is_fast_restore.setter
    def is_fast_restore(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_fast_restore", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]]:
        """
        Specifies the tables that will be restored.
        """
        return pulumi.get(self, "restore_tables")

    @restore_tables.setter
    def restore_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdsMysqlDatabaseTableRestoreRestoreTableArgs']]]]):
        pulumi.set(self, "restore_tables", value)

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the restoration time point.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "restore_time", value)


class RdsMysqlDatabaseTableRestore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreDatabaseArgs', 'RdsMysqlDatabaseTableRestoreDatabaseArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_fast_restore: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreRestoreTableArgs', 'RdsMysqlDatabaseTableRestoreRestoreTableArgsDict']]]]] = None,
                 restore_time: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Create a RdsMysqlDatabaseTableRestore resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreDatabaseArgs', 'RdsMysqlDatabaseTableRestoreDatabaseArgsDict']]]] databases: Specifies the databases that will be restored.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of RDS MySQL instance.
        :param pulumi.Input[builtins.bool] is_fast_restore: Specifies whether to use fast restoration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreRestoreTableArgs', 'RdsMysqlDatabaseTableRestoreRestoreTableArgsDict']]]] restore_tables: Specifies the tables that will be restored.
        :param pulumi.Input[builtins.int] restore_time: Specifies the restoration time point.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdsMysqlDatabaseTableRestoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RdsMysqlDatabaseTableRestore resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdsMysqlDatabaseTableRestoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdsMysqlDatabaseTableRestoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreDatabaseArgs', 'RdsMysqlDatabaseTableRestoreDatabaseArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_fast_restore: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreRestoreTableArgs', 'RdsMysqlDatabaseTableRestoreRestoreTableArgsDict']]]]] = None,
                 restore_time: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdsMysqlDatabaseTableRestoreArgs.__new__(RdsMysqlDatabaseTableRestoreArgs)

            __props__.__dict__["databases"] = databases
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_fast_restore"] = is_fast_restore
            __props__.__dict__["region"] = region
            __props__.__dict__["restore_tables"] = restore_tables
            if restore_time is None and not opts.urn:
                raise TypeError("Missing required property 'restore_time'")
            __props__.__dict__["restore_time"] = restore_time
        super(RdsMysqlDatabaseTableRestore, __self__).__init__(
            'sbercloud:index/rdsMysqlDatabaseTableRestore:RdsMysqlDatabaseTableRestore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreDatabaseArgs', 'RdsMysqlDatabaseTableRestoreDatabaseArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[builtins.str]] = None,
            is_fast_restore: Optional[pulumi.Input[builtins.bool]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            restore_tables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreRestoreTableArgs', 'RdsMysqlDatabaseTableRestoreRestoreTableArgsDict']]]]] = None,
            restore_time: Optional[pulumi.Input[builtins.int]] = None) -> 'RdsMysqlDatabaseTableRestore':
        """
        Get an existing RdsMysqlDatabaseTableRestore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreDatabaseArgs', 'RdsMysqlDatabaseTableRestoreDatabaseArgsDict']]]] databases: Specifies the databases that will be restored.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of RDS MySQL instance.
        :param pulumi.Input[builtins.bool] is_fast_restore: Specifies whether to use fast restoration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdsMysqlDatabaseTableRestoreRestoreTableArgs', 'RdsMysqlDatabaseTableRestoreRestoreTableArgsDict']]]] restore_tables: Specifies the tables that will be restored.
        :param pulumi.Input[builtins.int] restore_time: Specifies the restoration time point.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdsMysqlDatabaseTableRestoreState.__new__(_RdsMysqlDatabaseTableRestoreState)

        __props__.__dict__["databases"] = databases
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_fast_restore"] = is_fast_restore
        __props__.__dict__["region"] = region
        __props__.__dict__["restore_tables"] = restore_tables
        __props__.__dict__["restore_time"] = restore_time
        return RdsMysqlDatabaseTableRestore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence['outputs.RdsMysqlDatabaseTableRestoreDatabase']]]:
        """
        Specifies the databases that will be restored.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the ID of RDS MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isFastRestore")
    def is_fast_restore(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Specifies whether to use fast restoration.
        """
        return pulumi.get(self, "is_fast_restore")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreTables")
    def restore_tables(self) -> pulumi.Output[Optional[Sequence['outputs.RdsMysqlDatabaseTableRestoreRestoreTable']]]:
        """
        Specifies the tables that will be restored.
        """
        return pulumi.get(self, "restore_tables")

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Output[builtins.int]:
        """
        Specifies the restoration time point.
        """
        return pulumi.get(self, "restore_time")

