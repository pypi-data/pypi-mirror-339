# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVpcEipsResult',
    'AwaitableGetVpcEipsResult',
    'get_vpc_eips',
    'get_vpc_eips_output',
]

@pulumi.output_type
class GetVpcEipsResult:
    """
    A collection of values returned by getVpcEips.
    """
    def __init__(__self__, eips=None, enterprise_project_id=None, id=None, ids=None, ip_version=None, port_ids=None, private_ips=None, public_ips=None, region=None, tags=None):
        if eips and not isinstance(eips, list):
            raise TypeError("Expected argument 'eips' to be a list")
        pulumi.set(__self__, "eips", eips)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if ip_version and not isinstance(ip_version, int):
            raise TypeError("Expected argument 'ip_version' to be a int")
        pulumi.set(__self__, "ip_version", ip_version)
        if port_ids and not isinstance(port_ids, list):
            raise TypeError("Expected argument 'port_ids' to be a list")
        pulumi.set(__self__, "port_ids", port_ids)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if public_ips and not isinstance(public_ips, list):
            raise TypeError("Expected argument 'public_ips' to be a list")
        pulumi.set(__self__, "public_ips", public_ips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def eips(self) -> Sequence['outputs.GetVpcEipsEipResult']:
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="portIds")
    def port_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "port_ids")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "tags")


class AwaitableGetVpcEipsResult(GetVpcEipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcEipsResult(
            eips=self.eips,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ids=self.ids,
            ip_version=self.ip_version,
            port_ids=self.port_ids,
            private_ips=self.private_ips,
            public_ips=self.public_ips,
            region=self.region,
            tags=self.tags)


def get_vpc_eips(enterprise_project_id: Optional[builtins.str] = None,
                 ids: Optional[Sequence[builtins.str]] = None,
                 ip_version: Optional[builtins.int] = None,
                 port_ids: Optional[Sequence[builtins.str]] = None,
                 private_ips: Optional[Sequence[builtins.str]] = None,
                 public_ips: Optional[Sequence[builtins.str]] = None,
                 region: Optional[builtins.str] = None,
                 tags: Optional[Mapping[str, builtins.str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcEipsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ids'] = ids
    __args__['ipVersion'] = ip_version
    __args__['portIds'] = port_ids
    __args__['privateIps'] = private_ips
    __args__['publicIps'] = public_ips
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getVpcEips:getVpcEips', __args__, opts=opts, typ=GetVpcEipsResult).value

    return AwaitableGetVpcEipsResult(
        eips=pulumi.get(__ret__, 'eips'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        port_ids=pulumi.get(__ret__, 'port_ids'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        public_ips=pulumi.get(__ret__, 'public_ips'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'))
def get_vpc_eips_output(enterprise_project_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        ids: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                        ip_version: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                        port_ids: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                        private_ips: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                        public_ips: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                        region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Mapping[str, builtins.str]]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpcEipsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ids'] = ids
    __args__['ipVersion'] = ip_version
    __args__['portIds'] = port_ids
    __args__['privateIps'] = private_ips
    __args__['publicIps'] = public_ips
    __args__['region'] = region
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getVpcEips:getVpcEips', __args__, opts=opts, typ=GetVpcEipsResult)
    return __ret__.apply(lambda __response__: GetVpcEipsResult(
        eips=pulumi.get(__response__, 'eips'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        port_ids=pulumi.get(__response__, 'port_ids'),
        private_ips=pulumi.get(__response__, 'private_ips'),
        public_ips=pulumi.get(__response__, 'public_ips'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags')))
