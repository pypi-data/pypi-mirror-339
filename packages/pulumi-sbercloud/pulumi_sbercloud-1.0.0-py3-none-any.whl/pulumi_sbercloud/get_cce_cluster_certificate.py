# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCceClusterCertificateResult',
    'AwaitableGetCceClusterCertificateResult',
    'get_cce_cluster_certificate',
    'get_cce_cluster_certificate_output',
]

@pulumi.output_type
class GetCceClusterCertificateResult:
    """
    A collection of values returned by getCceClusterCertificate.
    """
    def __init__(__self__, cluster_id=None, clusters=None, contexts=None, current_context=None, duration=None, id=None, kube_config_raw=None, region=None, users=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if contexts and not isinstance(contexts, list):
            raise TypeError("Expected argument 'contexts' to be a list")
        pulumi.set(__self__, "contexts", contexts)
        if current_context and not isinstance(current_context, str):
            raise TypeError("Expected argument 'current_context' to be a str")
        pulumi.set(__self__, "current_context", current_context)
        if duration and not isinstance(duration, int):
            raise TypeError("Expected argument 'duration' to be a int")
        pulumi.set(__self__, "duration", duration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kube_config_raw and not isinstance(kube_config_raw, str):
            raise TypeError("Expected argument 'kube_config_raw' to be a str")
        pulumi.set(__self__, "kube_config_raw", kube_config_raw)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> builtins.str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetCceClusterCertificateClusterResult']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def contexts(self) -> Sequence['outputs.GetCceClusterCertificateContextResult']:
        return pulumi.get(self, "contexts")

    @property
    @pulumi.getter(name="currentContext")
    def current_context(self) -> builtins.str:
        return pulumi.get(self, "current_context")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> builtins.str:
        return pulumi.get(self, "kube_config_raw")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetCceClusterCertificateUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetCceClusterCertificateResult(GetCceClusterCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCceClusterCertificateResult(
            cluster_id=self.cluster_id,
            clusters=self.clusters,
            contexts=self.contexts,
            current_context=self.current_context,
            duration=self.duration,
            id=self.id,
            kube_config_raw=self.kube_config_raw,
            region=self.region,
            users=self.users)


def get_cce_cluster_certificate(cluster_id: Optional[builtins.str] = None,
                                duration: Optional[builtins.int] = None,
                                region: Optional[builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCceClusterCertificateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['duration'] = duration
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getCceClusterCertificate:getCceClusterCertificate', __args__, opts=opts, typ=GetCceClusterCertificateResult).value

    return AwaitableGetCceClusterCertificateResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        clusters=pulumi.get(__ret__, 'clusters'),
        contexts=pulumi.get(__ret__, 'contexts'),
        current_context=pulumi.get(__ret__, 'current_context'),
        duration=pulumi.get(__ret__, 'duration'),
        id=pulumi.get(__ret__, 'id'),
        kube_config_raw=pulumi.get(__ret__, 'kube_config_raw'),
        region=pulumi.get(__ret__, 'region'),
        users=pulumi.get(__ret__, 'users'))
def get_cce_cluster_certificate_output(cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                                       duration: Optional[pulumi.Input[builtins.int]] = None,
                                       region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCceClusterCertificateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['duration'] = duration
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getCceClusterCertificate:getCceClusterCertificate', __args__, opts=opts, typ=GetCceClusterCertificateResult)
    return __ret__.apply(lambda __response__: GetCceClusterCertificateResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        clusters=pulumi.get(__response__, 'clusters'),
        contexts=pulumi.get(__response__, 'contexts'),
        current_context=pulumi.get(__response__, 'current_context'),
        duration=pulumi.get(__response__, 'duration'),
        id=pulumi.get(__response__, 'id'),
        kube_config_raw=pulumi.get(__response__, 'kube_config_raw'),
        region=pulumi.get(__response__, 'region'),
        users=pulumi.get(__response__, 'users')))
