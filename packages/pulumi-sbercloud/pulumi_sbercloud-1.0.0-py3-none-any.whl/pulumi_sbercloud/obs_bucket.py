# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ObsBucketArgs', 'ObsBucket']

@pulumi.input_type
class ObsBucketArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[builtins.str],
                 acl: Optional[pulumi.Input[builtins.str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]] = None,
                 encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_destroy: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 parallel_fs: Optional[pulumi.Input[builtins.bool]] = None,
                 policy: Optional[pulumi.Input[builtins.str]] = None,
                 policy_format: Optional[pulumi.Input[builtins.str]] = None,
                 quota: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 sse_algorithm: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 user_domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[builtins.bool]] = None,
                 website: Optional[pulumi.Input['ObsBucketWebsiteArgs']] = None):
        """
        The set of arguments for constructing a ObsBucket resource.
        """
        pulumi.set(__self__, "bucket", bucket)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_key_project_id is not None:
            pulumi.set(__self__, "kms_key_project_id", kms_key_project_id)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if parallel_fs is not None:
            pulumi.set(__self__, "parallel_fs", parallel_fs)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policy_format is not None:
            pulumi.set(__self__, "policy_format", policy_format)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_domain_names is not None:
            pulumi.set(__self__, "user_domain_names", user_domain_names)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]]:
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="kmsKeyProjectId")
    def kms_key_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_project_id")

    @kms_key_project_id.setter
    def kms_key_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_project_id", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]]:
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]]:
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="parallelFs")
    def parallel_fs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "parallel_fs")

    @parallel_fs.setter
    def parallel_fs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "parallel_fs", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyFormat")
    def policy_format(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_format")

    @policy_format.setter
    def policy_format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_format", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "quota", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sse_algorithm", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userDomainNames")
    def user_domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "user_domain_names")

    @user_domain_names.setter
    def user_domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_domain_names", value)

    @property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "versioning", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['ObsBucketWebsiteArgs']]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['ObsBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _ObsBucketState:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input[builtins.str]] = None,
                 bucket: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_version: Optional[pulumi.Input[builtins.str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]] = None,
                 encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_destroy: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 parallel_fs: Optional[pulumi.Input[builtins.bool]] = None,
                 policy: Optional[pulumi.Input[builtins.str]] = None,
                 policy_format: Optional[pulumi.Input[builtins.str]] = None,
                 quota: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 sse_algorithm: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 storage_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketStorageInfoArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 user_domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[builtins.bool]] = None,
                 website: Optional[pulumi.Input['ObsBucketWebsiteArgs']] = None):
        """
        Input properties used for looking up and filtering ObsBucket resources.
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_domain_name is not None:
            pulumi.set(__self__, "bucket_domain_name", bucket_domain_name)
        if bucket_version is not None:
            pulumi.set(__self__, "bucket_version", bucket_version)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_key_project_id is not None:
            pulumi.set(__self__, "kms_key_project_id", kms_key_project_id)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if parallel_fs is not None:
            pulumi.set(__self__, "parallel_fs", parallel_fs)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policy_format is not None:
            pulumi.set(__self__, "policy_format", policy_format)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if storage_infos is not None:
            pulumi.set(__self__, "storage_infos", storage_infos)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_domain_names is not None:
            pulumi.set(__self__, "user_domain_names", user_domain_names)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketDomainName")
    def bucket_domain_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "bucket_domain_name")

    @bucket_domain_name.setter
    def bucket_domain_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_domain_name", value)

    @property
    @pulumi.getter(name="bucketVersion")
    def bucket_version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "bucket_version")

    @bucket_version.setter
    def bucket_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_version", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]]:
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="kmsKeyProjectId")
    def kms_key_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_project_id")

    @kms_key_project_id.setter
    def kms_key_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_project_id", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]]:
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]]:
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="parallelFs")
    def parallel_fs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "parallel_fs")

    @parallel_fs.setter
    def parallel_fs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "parallel_fs", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyFormat")
    def policy_format(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_format")

    @policy_format.setter
    def policy_format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_format", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "quota", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sse_algorithm", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="storageInfos")
    def storage_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketStorageInfoArgs']]]]:
        return pulumi.get(self, "storage_infos")

    @storage_infos.setter
    def storage_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObsBucketStorageInfoArgs']]]]):
        pulumi.set(self, "storage_infos", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userDomainNames")
    def user_domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "user_domain_names")

    @user_domain_names.setter
    def user_domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_domain_names", value)

    @property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "versioning", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['ObsBucketWebsiteArgs']]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['ObsBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


class ObsBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[builtins.str]] = None,
                 bucket: Optional[pulumi.Input[builtins.str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketCorsRuleArgs', 'ObsBucketCorsRuleArgsDict']]]]] = None,
                 encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_destroy: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLifecycleRuleArgs', 'ObsBucketLifecycleRuleArgsDict']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLoggingArgs', 'ObsBucketLoggingArgsDict']]]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 parallel_fs: Optional[pulumi.Input[builtins.bool]] = None,
                 policy: Optional[pulumi.Input[builtins.str]] = None,
                 policy_format: Optional[pulumi.Input[builtins.str]] = None,
                 quota: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 sse_algorithm: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 user_domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[builtins.bool]] = None,
                 website: Optional[pulumi.Input[Union['ObsBucketWebsiteArgs', 'ObsBucketWebsiteArgsDict']]] = None,
                 __props__=None):
        """
        Create a ObsBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObsBucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ObsBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ObsBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObsBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[builtins.str]] = None,
                 bucket: Optional[pulumi.Input[builtins.str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketCorsRuleArgs', 'ObsBucketCorsRuleArgsDict']]]]] = None,
                 encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 force_destroy: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLifecycleRuleArgs', 'ObsBucketLifecycleRuleArgsDict']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLoggingArgs', 'ObsBucketLoggingArgsDict']]]]] = None,
                 multi_az: Optional[pulumi.Input[builtins.bool]] = None,
                 parallel_fs: Optional[pulumi.Input[builtins.bool]] = None,
                 policy: Optional[pulumi.Input[builtins.str]] = None,
                 policy_format: Optional[pulumi.Input[builtins.str]] = None,
                 quota: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 sse_algorithm: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 user_domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[builtins.bool]] = None,
                 website: Optional[pulumi.Input[Union['ObsBucketWebsiteArgs', 'ObsBucketWebsiteArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObsBucketArgs.__new__(ObsBucketArgs)

            __props__.__dict__["acl"] = acl
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["cors_rules"] = cors_rules
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["kms_key_project_id"] = kms_key_project_id
            __props__.__dict__["lifecycle_rules"] = lifecycle_rules
            __props__.__dict__["loggings"] = loggings
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["parallel_fs"] = parallel_fs
            __props__.__dict__["policy"] = policy
            __props__.__dict__["policy_format"] = policy_format
            __props__.__dict__["quota"] = quota
            __props__.__dict__["region"] = region
            __props__.__dict__["sse_algorithm"] = sse_algorithm
            __props__.__dict__["storage_class"] = storage_class
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_domain_names"] = user_domain_names
            __props__.__dict__["versioning"] = versioning
            __props__.__dict__["website"] = website
            __props__.__dict__["bucket_domain_name"] = None
            __props__.__dict__["bucket_version"] = None
            __props__.__dict__["storage_infos"] = None
        super(ObsBucket, __self__).__init__(
            'sbercloud:index/obsBucket:ObsBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl: Optional[pulumi.Input[builtins.str]] = None,
            bucket: Optional[pulumi.Input[builtins.str]] = None,
            bucket_domain_name: Optional[pulumi.Input[builtins.str]] = None,
            bucket_version: Optional[pulumi.Input[builtins.str]] = None,
            cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketCorsRuleArgs', 'ObsBucketCorsRuleArgsDict']]]]] = None,
            encryption: Optional[pulumi.Input[builtins.bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            force_destroy: Optional[pulumi.Input[builtins.bool]] = None,
            kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
            kms_key_project_id: Optional[pulumi.Input[builtins.str]] = None,
            lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLifecycleRuleArgs', 'ObsBucketLifecycleRuleArgsDict']]]]] = None,
            loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketLoggingArgs', 'ObsBucketLoggingArgsDict']]]]] = None,
            multi_az: Optional[pulumi.Input[builtins.bool]] = None,
            parallel_fs: Optional[pulumi.Input[builtins.bool]] = None,
            policy: Optional[pulumi.Input[builtins.str]] = None,
            policy_format: Optional[pulumi.Input[builtins.str]] = None,
            quota: Optional[pulumi.Input[builtins.int]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            sse_algorithm: Optional[pulumi.Input[builtins.str]] = None,
            storage_class: Optional[pulumi.Input[builtins.str]] = None,
            storage_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ObsBucketStorageInfoArgs', 'ObsBucketStorageInfoArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            user_domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            versioning: Optional[pulumi.Input[builtins.bool]] = None,
            website: Optional[pulumi.Input[Union['ObsBucketWebsiteArgs', 'ObsBucketWebsiteArgsDict']]] = None) -> 'ObsBucket':
        """
        Get an existing ObsBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObsBucketState.__new__(_ObsBucketState)

        __props__.__dict__["acl"] = acl
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["bucket_domain_name"] = bucket_domain_name
        __props__.__dict__["bucket_version"] = bucket_version
        __props__.__dict__["cors_rules"] = cors_rules
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["kms_key_project_id"] = kms_key_project_id
        __props__.__dict__["lifecycle_rules"] = lifecycle_rules
        __props__.__dict__["loggings"] = loggings
        __props__.__dict__["multi_az"] = multi_az
        __props__.__dict__["parallel_fs"] = parallel_fs
        __props__.__dict__["policy"] = policy
        __props__.__dict__["policy_format"] = policy_format
        __props__.__dict__["quota"] = quota
        __props__.__dict__["region"] = region
        __props__.__dict__["sse_algorithm"] = sse_algorithm
        __props__.__dict__["storage_class"] = storage_class
        __props__.__dict__["storage_infos"] = storage_infos
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_domain_names"] = user_domain_names
        __props__.__dict__["versioning"] = versioning
        __props__.__dict__["website"] = website
        return ObsBucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketDomainName")
    def bucket_domain_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "bucket_domain_name")

    @property
    @pulumi.getter(name="bucketVersion")
    def bucket_version(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "bucket_version")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> pulumi.Output[Optional[Sequence['outputs.ObsBucketCorsRule']]]:
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="kmsKeyProjectId")
    def kms_key_project_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kms_key_project_id")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> pulumi.Output[Optional[Sequence['outputs.ObsBucketLifecycleRule']]]:
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter
    def loggings(self) -> pulumi.Output[Optional[Sequence['outputs.ObsBucketLogging']]]:
        return pulumi.get(self, "loggings")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="parallelFs")
    def parallel_fs(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "parallel_fs")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="policyFormat")
    def policy_format(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "policy_format")

    @property
    @pulumi.getter
    def quota(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "sse_algorithm")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="storageInfos")
    def storage_infos(self) -> pulumi.Output[Sequence['outputs.ObsBucketStorageInfo']]:
        return pulumi.get(self, "storage_infos")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userDomainNames")
    def user_domain_names(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "user_domain_names")

    @property
    @pulumi.getter
    def versioning(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "versioning")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional['outputs.ObsBucketWebsite']]:
        return pulumi.get(self, "website")

