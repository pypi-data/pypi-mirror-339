# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RdsPgDatabaseArgs', 'RdsPgDatabase']

@pulumi.input_type
class RdsPgDatabaseArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[builtins.str],
                 character_set: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_revoke_public_privilege: Optional[pulumi.Input[builtins.bool]] = None,
                 lc_collate: Optional[pulumi.Input[builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 template: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a RdsPgDatabase resource.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[builtins.str] character_set: Specifies the database character set.
        :param pulumi.Input[builtins.str] description: Specifies the database description.
        :param pulumi.Input[builtins.bool] is_revoke_public_privilege: Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        :param pulumi.Input[builtins.str] lc_collate: Specifies the database collocation.
        :param pulumi.Input[builtins.str] lc_ctype: Specifies the database classification.
        :param pulumi.Input[builtins.str] name: Specifies the database name.
        :param pulumi.Input[builtins.str] owner: Specifies the database user.
        :param pulumi.Input[builtins.str] template: Specifies the name of the database template.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_revoke_public_privilege is not None:
            pulumi.set(__self__, "is_revoke_public_privilege", is_revoke_public_privilege)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_ctype is not None:
            pulumi.set(__self__, "lc_ctype", lc_ctype)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database character set.
        """
        return pulumi.get(self, "character_set")

    @character_set.setter
    def character_set(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "character_set", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isRevokePublicPrivilege")
    def is_revoke_public_privilege(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        """
        return pulumi.get(self, "is_revoke_public_privilege")

    @is_revoke_public_privilege.setter
    def is_revoke_public_privilege(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_revoke_public_privilege", value)

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database collocation.
        """
        return pulumi.get(self, "lc_collate")

    @lc_collate.setter
    def lc_collate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lc_collate", value)

    @property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database classification.
        """
        return pulumi.get(self, "lc_ctype")

    @lc_ctype.setter
    def lc_ctype(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lc_ctype", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database user.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the name of the database template.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class _RdsPgDatabaseState:
    def __init__(__self__, *,
                 character_set: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_revoke_public_privilege: Optional[pulumi.Input[builtins.bool]] = None,
                 lc_collate: Optional[pulumi.Input[builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 template: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering RdsPgDatabase resources.
        :param pulumi.Input[builtins.str] character_set: Specifies the database character set.
        :param pulumi.Input[builtins.str] description: Specifies the database description.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[builtins.bool] is_revoke_public_privilege: Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        :param pulumi.Input[builtins.str] lc_collate: Specifies the database collocation.
        :param pulumi.Input[builtins.str] lc_ctype: Specifies the database classification.
        :param pulumi.Input[builtins.str] name: Specifies the database name.
        :param pulumi.Input[builtins.str] owner: Specifies the database user.
        :param pulumi.Input[builtins.int] size: Indicates the database size, in bytes.
        :param pulumi.Input[builtins.str] template: Specifies the name of the database template.
        """
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_revoke_public_privilege is not None:
            pulumi.set(__self__, "is_revoke_public_privilege", is_revoke_public_privilege)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_ctype is not None:
            pulumi.set(__self__, "lc_ctype", lc_ctype)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database character set.
        """
        return pulumi.get(self, "character_set")

    @character_set.setter
    def character_set(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "character_set", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isRevokePublicPrivilege")
    def is_revoke_public_privilege(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        """
        return pulumi.get(self, "is_revoke_public_privilege")

    @is_revoke_public_privilege.setter
    def is_revoke_public_privilege(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_revoke_public_privilege", value)

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database collocation.
        """
        return pulumi.get(self, "lc_collate")

    @lc_collate.setter
    def lc_collate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lc_collate", value)

    @property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database classification.
        """
        return pulumi.get(self, "lc_ctype")

    @lc_ctype.setter
    def lc_ctype(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lc_ctype", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the database user.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Indicates the database size, in bytes.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies the name of the database template.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template", value)


class RdsPgDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 character_set: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_revoke_public_privilege: Optional[pulumi.Input[builtins.bool]] = None,
                 lc_collate: Optional[pulumi.Input[builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 template: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a RdsPgDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] character_set: Specifies the database character set.
        :param pulumi.Input[builtins.str] description: Specifies the database description.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[builtins.bool] is_revoke_public_privilege: Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        :param pulumi.Input[builtins.str] lc_collate: Specifies the database collocation.
        :param pulumi.Input[builtins.str] lc_ctype: Specifies the database classification.
        :param pulumi.Input[builtins.str] name: Specifies the database name.
        :param pulumi.Input[builtins.str] owner: Specifies the database user.
        :param pulumi.Input[builtins.str] template: Specifies the name of the database template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdsPgDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RdsPgDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdsPgDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdsPgDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 character_set: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_revoke_public_privilege: Optional[pulumi.Input[builtins.bool]] = None,
                 lc_collate: Optional[pulumi.Input[builtins.str]] = None,
                 lc_ctype: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 template: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdsPgDatabaseArgs.__new__(RdsPgDatabaseArgs)

            __props__.__dict__["character_set"] = character_set
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_revoke_public_privilege"] = is_revoke_public_privilege
            __props__.__dict__["lc_collate"] = lc_collate
            __props__.__dict__["lc_ctype"] = lc_ctype
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["region"] = region
            __props__.__dict__["template"] = template
            __props__.__dict__["size"] = None
        super(RdsPgDatabase, __self__).__init__(
            'sbercloud:index/rdsPgDatabase:RdsPgDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            character_set: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            instance_id: Optional[pulumi.Input[builtins.str]] = None,
            is_revoke_public_privilege: Optional[pulumi.Input[builtins.bool]] = None,
            lc_collate: Optional[pulumi.Input[builtins.str]] = None,
            lc_ctype: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            size: Optional[pulumi.Input[builtins.int]] = None,
            template: Optional[pulumi.Input[builtins.str]] = None) -> 'RdsPgDatabase':
        """
        Get an existing RdsPgDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] character_set: Specifies the database character set.
        :param pulumi.Input[builtins.str] description: Specifies the database description.
        :param pulumi.Input[builtins.str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[builtins.bool] is_revoke_public_privilege: Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        :param pulumi.Input[builtins.str] lc_collate: Specifies the database collocation.
        :param pulumi.Input[builtins.str] lc_ctype: Specifies the database classification.
        :param pulumi.Input[builtins.str] name: Specifies the database name.
        :param pulumi.Input[builtins.str] owner: Specifies the database user.
        :param pulumi.Input[builtins.int] size: Indicates the database size, in bytes.
        :param pulumi.Input[builtins.str] template: Specifies the name of the database template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdsPgDatabaseState.__new__(_RdsPgDatabaseState)

        __props__.__dict__["character_set"] = character_set
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_revoke_public_privilege"] = is_revoke_public_privilege
        __props__.__dict__["lc_collate"] = lc_collate
        __props__.__dict__["lc_ctype"] = lc_ctype
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["template"] = template
        return RdsPgDatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the database character set.
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Specifies the database description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isRevokePublicPrivilege")
    def is_revoke_public_privilege(self) -> pulumi.Output[builtins.bool]:
        """
        Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        """
        return pulumi.get(self, "is_revoke_public_privilege")

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the database collocation.
        """
        return pulumi.get(self, "lc_collate")

    @property
    @pulumi.getter(name="lcCtype")
    def lc_ctype(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the database classification.
        """
        return pulumi.get(self, "lc_ctype")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the database user.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[builtins.int]:
        """
        Indicates the database size, in bytes.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the name of the database template.
        """
        return pulumi.get(self, "template")

