# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsZoneArgs', 'DnsZone']

@pulumi.input_type
class DnsZoneArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DnsZone resource.
        :param pulumi.Input[builtins.str] description: The description of the zone.
        :param pulumi.Input[builtins.str] email: The email address of the administrator managing the zone.
        :param pulumi.Input[builtins.str] enterprise_project_id: The enterprise project ID of the zone.
        :param pulumi.Input[builtins.str] name: The name of the zone.
        :param pulumi.Input[builtins.str] proxy_pattern: The recursive resolution proxy mode for subdomains of the private zone.
        :param pulumi.Input[builtins.str] status: The status of the zone.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The key/value pairs to associate with the zone.
        :param pulumi.Input[builtins.int] ttl: The time to live (TTL) of the zone.
        :param pulumi.Input[builtins.str] zone_type: The type of zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the zone.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The enterprise project ID of the zone.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The recursive resolution proxy mode for subdomains of the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "proxy_pattern", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]]:
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The status of the zone.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The time to live (TTL) of the zone.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of zone.
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_type", value)


@pulumi.input_type
class _DnsZoneState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsZone resources.
        :param pulumi.Input[builtins.str] description: The description of the zone.
        :param pulumi.Input[builtins.str] email: The email address of the administrator managing the zone.
        :param pulumi.Input[builtins.str] enterprise_project_id: The enterprise project ID of the zone.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[builtins.str] name: The name of the zone.
        :param pulumi.Input[builtins.str] proxy_pattern: The recursive resolution proxy mode for subdomains of the private zone.
        :param pulumi.Input[builtins.str] status: The status of the zone.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The key/value pairs to associate with the zone.
        :param pulumi.Input[builtins.int] ttl: The time to live (TTL) of the zone.
        :param pulumi.Input[builtins.str] zone_type: The type of zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if masters is not None:
            pulumi.set(__self__, "masters", masters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the zone.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The enterprise project ID of the zone.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "masters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The recursive resolution proxy mode for subdomains of the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "proxy_pattern", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]]:
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The status of the zone.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The time to live (TTL) of the zone.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of zone.
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_type", value)


class DnsZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsZoneRouterArgs', 'DnsZoneRouterArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the zone.
        :param pulumi.Input[builtins.str] email: The email address of the administrator managing the zone.
        :param pulumi.Input[builtins.str] enterprise_project_id: The enterprise project ID of the zone.
        :param pulumi.Input[builtins.str] name: The name of the zone.
        :param pulumi.Input[builtins.str] proxy_pattern: The recursive resolution proxy mode for subdomains of the private zone.
        :param pulumi.Input[builtins.str] status: The status of the zone.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The key/value pairs to associate with the zone.
        :param pulumi.Input[builtins.int] ttl: The time to live (TTL) of the zone.
        :param pulumi.Input[builtins.str] zone_type: The type of zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DnsZoneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsZoneRouterArgs', 'DnsZoneRouterArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 zone_type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsZoneArgs.__new__(DnsZoneArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["email"] = email
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["proxy_pattern"] = proxy_pattern
            __props__.__dict__["region"] = region
            __props__.__dict__["routers"] = routers
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["zone_type"] = zone_type
            __props__.__dict__["masters"] = None
        super(DnsZone, __self__).__init__(
            'sbercloud:index/dnsZone:DnsZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            email: Optional[pulumi.Input[builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[builtins.str]] = None,
            masters: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            proxy_pattern: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            routers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsZoneRouterArgs', 'DnsZoneRouterArgsDict']]]]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            ttl: Optional[pulumi.Input[builtins.int]] = None,
            zone_type: Optional[pulumi.Input[builtins.str]] = None) -> 'DnsZone':
        """
        Get an existing DnsZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the zone.
        :param pulumi.Input[builtins.str] email: The email address of the administrator managing the zone.
        :param pulumi.Input[builtins.str] enterprise_project_id: The enterprise project ID of the zone.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[builtins.str] name: The name of the zone.
        :param pulumi.Input[builtins.str] proxy_pattern: The recursive resolution proxy mode for subdomains of the private zone.
        :param pulumi.Input[builtins.str] status: The status of the zone.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The key/value pairs to associate with the zone.
        :param pulumi.Input[builtins.int] ttl: The time to live (TTL) of the zone.
        :param pulumi.Input[builtins.str] zone_type: The type of zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsZoneState.__new__(_DnsZoneState)

        __props__.__dict__["description"] = description
        __props__.__dict__["email"] = email
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["masters"] = masters
        __props__.__dict__["name"] = name
        __props__.__dict__["proxy_pattern"] = proxy_pattern
        __props__.__dict__["region"] = region
        __props__.__dict__["routers"] = routers
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["zone_type"] = zone_type
        return DnsZone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the zone.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[builtins.str]:
        """
        The email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[builtins.str]:
        """
        The enterprise project ID of the zone.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def masters(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> pulumi.Output[builtins.str]:
        """
        The recursive resolution proxy mode for subdomains of the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def routers(self) -> pulumi.Output[Optional[Sequence['outputs.DnsZoneRouter']]]:
        return pulumi.get(self, "routers")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        The status of the zone.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The time to live (TTL) of the zone.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The type of zone.
        """
        return pulumi.get(self, "zone_type")

