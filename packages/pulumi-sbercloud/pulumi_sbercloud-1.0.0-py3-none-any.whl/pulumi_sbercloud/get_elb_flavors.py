# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetElbFlavorsResult',
    'AwaitableGetElbFlavorsResult',
    'get_elb_flavors',
    'get_elb_flavors_output',
]

@pulumi.output_type
class GetElbFlavorsResult:
    """
    A collection of values returned by getElbFlavors.
    """
    def __init__(__self__, bandwidth=None, cps=None, flavors=None, id=None, ids=None, max_connections=None, name=None, qps=None, region=None, type=None):
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if cps and not isinstance(cps, int):
            raise TypeError("Expected argument 'cps' to be a int")
        pulumi.set(__self__, "cps", cps)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if max_connections and not isinstance(max_connections, int):
            raise TypeError("Expected argument 'max_connections' to be a int")
        pulumi.set(__self__, "max_connections", max_connections)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if qps and not isinstance(qps, int):
            raise TypeError("Expected argument 'qps' to be a int")
        pulumi.set(__self__, "qps", qps)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[builtins.int]:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def cps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cps")

    @property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetElbFlavorsFlavorResult']:
        return pulumi.get(self, "flavors")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetElbFlavorsResult(GetElbFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetElbFlavorsResult(
            bandwidth=self.bandwidth,
            cps=self.cps,
            flavors=self.flavors,
            id=self.id,
            ids=self.ids,
            max_connections=self.max_connections,
            name=self.name,
            qps=self.qps,
            region=self.region,
            type=self.type)


def get_elb_flavors(bandwidth: Optional[builtins.int] = None,
                    cps: Optional[builtins.int] = None,
                    max_connections: Optional[builtins.int] = None,
                    name: Optional[builtins.str] = None,
                    qps: Optional[builtins.int] = None,
                    region: Optional[builtins.str] = None,
                    type: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetElbFlavorsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bandwidth'] = bandwidth
    __args__['cps'] = cps
    __args__['maxConnections'] = max_connections
    __args__['name'] = name
    __args__['qps'] = qps
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getElbFlavors:getElbFlavors', __args__, opts=opts, typ=GetElbFlavorsResult).value

    return AwaitableGetElbFlavorsResult(
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        cps=pulumi.get(__ret__, 'cps'),
        flavors=pulumi.get(__ret__, 'flavors'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        max_connections=pulumi.get(__ret__, 'max_connections'),
        name=pulumi.get(__ret__, 'name'),
        qps=pulumi.get(__ret__, 'qps'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_elb_flavors_output(bandwidth: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           cps: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           max_connections: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           qps: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetElbFlavorsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bandwidth'] = bandwidth
    __args__['cps'] = cps
    __args__['maxConnections'] = max_connections
    __args__['name'] = name
    __args__['qps'] = qps
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getElbFlavors:getElbFlavors', __args__, opts=opts, typ=GetElbFlavorsResult)
    return __ret__.apply(lambda __response__: GetElbFlavorsResult(
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        cps=pulumi.get(__response__, 'cps'),
        flavors=pulumi.get(__response__, 'flavors'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        max_connections=pulumi.get(__response__, 'max_connections'),
        name=pulumi.get(__response__, 'name'),
        qps=pulumi.get(__response__, 'qps'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
