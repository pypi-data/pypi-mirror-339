# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DmsKafkaTopicArgs', 'DmsKafkaTopic']

@pulumi.input_type
class DmsKafkaTopicArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[builtins.str],
                 partitions: pulumi.Input[builtins.int],
                 aging_time: Optional[pulumi.Input[builtins.int]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 new_partition_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 replicas: Optional[pulumi.Input[builtins.int]] = None,
                 sync_flushing: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_replication: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a DmsKafkaTopic resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "partitions", partitions)
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if new_partition_brokers is not None:
            pulumi.set(__self__, "new_partition_brokers", new_partition_brokers)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if sync_flushing is not None:
            pulumi.set(__self__, "sync_flushing", sync_flushing)
        if sync_replication is not None:
            pulumi.set(__self__, "sync_replication", sync_replication)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def partitions(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newPartitionBrokers")
    def new_partition_brokers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "new_partition_brokers")

    @new_partition_brokers.setter
    def new_partition_brokers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "new_partition_brokers", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="syncFlushing")
    def sync_flushing(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sync_flushing")

    @sync_flushing.setter
    def sync_flushing(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sync_flushing", value)

    @property
    @pulumi.getter(name="syncReplication")
    def sync_replication(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sync_replication")

    @sync_replication.setter
    def sync_replication(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sync_replication", value)


@pulumi.input_type
class _DmsKafkaTopicState:
    def __init__(__self__, *,
                 aging_time: Optional[pulumi.Input[builtins.int]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 new_partition_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 partitions: Optional[pulumi.Input[builtins.int]] = None,
                 policies_only: Optional[pulumi.Input[builtins.bool]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 replicas: Optional[pulumi.Input[builtins.int]] = None,
                 sync_flushing: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_replication: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DmsKafkaTopic resources.
        """
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if new_partition_brokers is not None:
            pulumi.set(__self__, "new_partition_brokers", new_partition_brokers)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if policies_only is not None:
            pulumi.set(__self__, "policies_only", policies_only)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if sync_flushing is not None:
            pulumi.set(__self__, "sync_flushing", sync_flushing)
        if sync_replication is not None:
            pulumi.set(__self__, "sync_replication", sync_replication)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsKafkaTopicConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newPartitionBrokers")
    def new_partition_brokers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "new_partition_brokers")

    @new_partition_brokers.setter
    def new_partition_brokers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "new_partition_brokers", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="policiesOnly")
    def policies_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "policies_only")

    @policies_only.setter
    def policies_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "policies_only", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="syncFlushing")
    def sync_flushing(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sync_flushing")

    @sync_flushing.setter
    def sync_flushing(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sync_flushing", value)

    @property
    @pulumi.getter(name="syncReplication")
    def sync_replication(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sync_replication")

    @sync_replication.setter
    def sync_replication(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sync_replication", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


class DmsKafkaTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aging_time: Optional[pulumi.Input[builtins.int]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsKafkaTopicConfigArgs', 'DmsKafkaTopicConfigArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 new_partition_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 partitions: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 replicas: Optional[pulumi.Input[builtins.int]] = None,
                 sync_flushing: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_replication: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a DmsKafkaTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DmsKafkaTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DmsKafkaTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DmsKafkaTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DmsKafkaTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aging_time: Optional[pulumi.Input[builtins.int]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsKafkaTopicConfigArgs', 'DmsKafkaTopicConfigArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 new_partition_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 partitions: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 replicas: Optional[pulumi.Input[builtins.int]] = None,
                 sync_flushing: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_replication: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DmsKafkaTopicArgs.__new__(DmsKafkaTopicArgs)

            __props__.__dict__["aging_time"] = aging_time
            __props__.__dict__["configs"] = configs
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["new_partition_brokers"] = new_partition_brokers
            if partitions is None and not opts.urn:
                raise TypeError("Missing required property 'partitions'")
            __props__.__dict__["partitions"] = partitions
            __props__.__dict__["region"] = region
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["sync_flushing"] = sync_flushing
            __props__.__dict__["sync_replication"] = sync_replication
            __props__.__dict__["created_at"] = None
            __props__.__dict__["policies_only"] = None
            __props__.__dict__["type"] = None
        super(DmsKafkaTopic, __self__).__init__(
            'sbercloud:index/dmsKafkaTopic:DmsKafkaTopic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aging_time: Optional[pulumi.Input[builtins.int]] = None,
            configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsKafkaTopicConfigArgs', 'DmsKafkaTopicConfigArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            instance_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            new_partition_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
            partitions: Optional[pulumi.Input[builtins.int]] = None,
            policies_only: Optional[pulumi.Input[builtins.bool]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            replicas: Optional[pulumi.Input[builtins.int]] = None,
            sync_flushing: Optional[pulumi.Input[builtins.bool]] = None,
            sync_replication: Optional[pulumi.Input[builtins.bool]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'DmsKafkaTopic':
        """
        Get an existing DmsKafkaTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DmsKafkaTopicState.__new__(_DmsKafkaTopicState)

        __props__.__dict__["aging_time"] = aging_time
        __props__.__dict__["configs"] = configs
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["new_partition_brokers"] = new_partition_brokers
        __props__.__dict__["partitions"] = partitions
        __props__.__dict__["policies_only"] = policies_only
        __props__.__dict__["region"] = region
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["sync_flushing"] = sync_flushing
        __props__.__dict__["sync_replication"] = sync_replication
        __props__.__dict__["type"] = type
        return DmsKafkaTopic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "aging_time")

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Sequence['outputs.DmsKafkaTopicConfig']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newPartitionBrokers")
    def new_partition_brokers(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "new_partition_brokers")

    @property
    @pulumi.getter
    def partitions(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="policiesOnly")
    def policies_only(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "policies_only")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="syncFlushing")
    def sync_flushing(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "sync_flushing")

    @property
    @pulumi.getter(name="syncReplication")
    def sync_replication(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "sync_replication")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "type")

