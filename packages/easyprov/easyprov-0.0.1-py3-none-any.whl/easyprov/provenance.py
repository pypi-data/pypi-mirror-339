"""
Set of function to write provenance in conventional files
"""

import json
from pathlib import Path


def _prov_from_git(pth):
    in_between = []
    for fld in pth.parents[:-1]:
        git_dir = fld / ".git"
        if not git_dir.exists():
            in_between.append(fld.name)
        else:
            lines = [line.strip() for line in open(git_dir / "config").readlines() if len(line.strip()) > 0]
            for i, line in enumerate(lines):
                if line.startswith("[remote"):
                    for subline in lines[i + 1 :]:
                        if subline.startswith("url = "):
                            url = subline.split(" = ")[-1]
                            prov = url.split("/")[-1][:-4]
                            for name in reversed(in_between):
                                prov += f"/{name}"

                            return prov + f"/{pth.name}"

                    return None

            return None

    return None


def fmt_prov(pth):
    """Format pth as a useful provenance

    Args:
        pth (Path): pth to shorten

    Returns:
        (str)
    """
    prov = _prov_from_git(pth)
    if prov is not None:
        return prov

    parts = list(pth.parts)
    try:
        ind = parts.index("script")
        if ind == 0:
            return "/".join(parts[ind + 1 :])

        return "/".join(parts[ind - 1 :])
    except ValueError:
        return parts[-1]


def json_dump(data, pth, pth_script, **kwds):
    """Write data in json file.

    Args:
        data (dict): data to write
        pth (str|Path): path to file to write
        pth_script (str|Path): path to script that generated data
        **kwds: additional arguments that will be passed to dump

    Returns:
        None
    """
    data["_comment"] = f"This file has been generated by {fmt_prov(Path(pth_script))}"
    json.dump(data, open(pth, "w"), **kwds)
    del data["_comment"]


def csv_dump(data, header, pth, pth_script, **kwds):
    """Write dataframe in csv file.

    Args:
        data (pd.DataFrame): data to write
        header (str|dict): meat info associated with data
        pth (str|Path): path to file to write
        pth_script (str|Path): path to script that generated data
        **kwds: additional arguments that will be passed to pd.to_csv

    Returns:
        None
    """
    if isinstance(header, str):
        lines = [line.strip() if line.startswith("#") else f"#{line.strip()}" for line in header.splitlines()]
    elif isinstance(header, dict):
        lines = [f"# {k}: {descr}" for k, descr in header.items()]
    else:
        raise UserWarning(f"invalid header {header}")

    with open(pth, "w", encoding="utf-8") as fhw:
        fhw.write(f"# This file has been generated by {fmt_prov(Path(pth_script))}\n#\n")
        for line in lines:
            fhw.write(line + "\n")

        fhw.write("#\n")
        data.to_csv(fhw, sep=";", lineterminator="\n", **kwds)


def rst_dump(data, pth, pth_script, **kwds):
    """Write data in rst file.

    Args:
        data (str): data to write
        pth (str|Path): path to file to write
        pth_script (str|Path): path to script that generated data
        **kwds: additional arguments that will be passed to write

    Returns:
        None
    """
    with open(pth, "w", encoding="utf-8") as fhw:
        fhw.write(f".. generated by {fmt_prov(Path(pth_script))}\n\n")
        fhw.write(data)


def fig_dump(data, pth, pth_script, **kwds):
    """Write figure in svg|png file.

    Args:
        data (matplotlib.Figure): data to write
        pth (str|Path): path to file to write
        pth_script (str|Path): path to script that generated data
        **kwds: additional arguments that will be passed to savefig

    Returns:
        None
    """
    file_ext = Path(pth).name.split(".")[-1]
    assert file_ext in ["svg", "png"]

    data.savefig(pth, metadata={"Creator": fmt_prov(Path(pth_script))}, **kwds)
