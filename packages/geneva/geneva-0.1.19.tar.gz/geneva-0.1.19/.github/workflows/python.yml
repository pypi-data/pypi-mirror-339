name: Python
on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - src/**
      - .github/workflows/python.yml

jobs:
  # Minimal test job that runs without any extras and ensures tests pass
  # (tests that rely on extras should be skipped)
  minimal_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install dependencies
        run: |
          uv sync --locked
      - name: Run lint
        run: |
          uv run ruff format --check src
          uv run ruff check src
          uv run pyright
      - name: Run tests
        run: |
          uv run -m pytest src/tests --runxfail -n auto --cov=src/geneva
  tests:
    permissions:
      contents: read
      id-token: write
    runs-on: warp-ubuntu-latest-x64-32x
    timeout-minutes: 30
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.12"
    env:
      UV_PYTHON: ${{ matrix.python-version }}
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
      - name: Install dependencies
        run: |
          uv sync --all-groups --all-extras --no-extra prefect --locked
      - name: Run lint
        run: |
          uv run ruff format --check src
          uv run ruff check src
          uv run pyright
      - name: Run tests (xdist)
        run: |
          uv run -m pytest src/tests -rx -n auto --cov=src/geneva --cov-append -v
      - name: Generate coverage report
        run: |
          uv run coverage xml
      - name: Minimize uv cache
        run: uv cache prune --ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@main
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          flags: unit-${{ matrix.python-version }}
