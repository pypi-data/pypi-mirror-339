# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateAlertRequest(BaseModel):
    """
    CreateAlertRequest
    """ # noqa: E501
    state: Optional[StrictStr] = Field(default='ACTIVE', description="The alert wanted state", alias="_state")
    severity: Optional[StrictStr] = Field(default='INFO', description="The alert wanted severity", alias="_severity")
    clear_notes: Optional[StrictStr] = Field(default=None, description="Clear notes", alias="_clearNotes")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="The name of the alert", alias="_name")
    template_id: StrictStr = Field(description="The id of a template that is configured in the settings service.", alias="_templateId")
    __properties: ClassVar[List[str]] = ["_state", "_severity", "_clearNotes", "_name", "_templateId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CLEARED', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CLEARED', 'SUSPENDED')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRITICAL', 'MAJOR', 'MINOR', 'INFO']):
            raise ValueError("must be one of enum values ('CRITICAL', 'MAJOR', 'MINOR', 'INFO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAlertRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAlertRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_state": obj.get("_state") if obj.get("_state") is not None else 'ACTIVE',
            "_severity": obj.get("_severity") if obj.get("_severity") is not None else 'INFO',
            "_clearNotes": obj.get("_clearNotes"),
            "_name": obj.get("_name"),
            "_templateId": obj.get("_templateId")
        })
        return _obj


