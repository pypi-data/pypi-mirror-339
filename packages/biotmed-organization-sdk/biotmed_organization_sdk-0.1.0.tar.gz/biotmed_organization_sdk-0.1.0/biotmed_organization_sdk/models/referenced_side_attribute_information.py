# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from biotmed_organization_sdk.models.basic_entity_data import BasicEntityData
from typing import Optional, Set
from typing_extensions import Self

class ReferencedSideAttributeInformation(BaseModel):
    """
    ReferencedSideAttributeInformation
    """ # noqa: E501
    name: StrictStr = Field(description="The reference side attribute name from the attribute reference configuration")
    display_name: StrictStr = Field(description="The reference side attribute display name from the attribute reference configuration", alias="displayName")
    count: StrictInt = Field(description="Total count of all the referencers from this specific template and attribute")
    attribute_id: StrictStr = Field(description="Attribute ID of the referencer", alias="attributeId")
    template_id: StrictStr = Field(description="Template ID of the referencer", alias="templateId")
    referrer: BasicEntityData = Field(description="If count is 1 - holds the information about the single referencer")
    __properties: ClassVar[List[str]] = ["name", "displayName", "count", "attributeId", "templateId", "referrer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferencedSideAttributeInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of referrer
        if self.referrer:
            _dict['referrer'] = self.referrer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferencedSideAttributeInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "count": obj.get("count"),
            "attributeId": obj.get("attributeId"),
            "templateId": obj.get("templateId"),
            "referrer": BasicEntityData.from_dict(obj["referrer"]) if obj.get("referrer") is not None else None
        })
        return _obj


