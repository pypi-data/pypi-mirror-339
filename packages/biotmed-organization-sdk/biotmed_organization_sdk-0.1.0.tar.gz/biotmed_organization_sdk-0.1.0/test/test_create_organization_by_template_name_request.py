# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from biotmed_organization_sdk.models.create_organization_by_template_name_request import CreateOrganizationByTemplateNameRequest

class TestCreateOrganizationByTemplateNameRequest(unittest.TestCase):
    """CreateOrganizationByTemplateNameRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrganizationByTemplateNameRequest:
        """Test CreateOrganizationByTemplateNameRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrganizationByTemplateNameRequest`
        """
        model = CreateOrganizationByTemplateNameRequest()
        if include_optional:
            return CreateOrganizationByTemplateNameRequest(
                name = 'Example Inc.',
                description = 'Lorem Ipsum',
                headquarters = biotmed_organization_sdk.models.address.Address(
                    country_code = 'US', 
                    state = 'Massachusetts', 
                    city = 'Boston', 
                    zip_code = '02101', 
                    address1 = '11', 
                    address2 = 'Entry B, Apartment 1', ),
                phone = '+12345678901',
                timezone = 'Europe/Oslo',
                locale = 'en-us',
                primary_administrator = biotmed_organization_sdk.models.organization_admin_user_request.OrganizationAdminUserRequest(
                    _name = biotmed_organization_sdk.models.name.Name(
                        first_name = 'John', 
                        last_name = 'Smith', ), 
                    _description = 'Lorem Ipsum', 
                    _email = 'john.smith@biot-med.com', 
                    _phone = '+12345678901', 
                    _locale = 'en-us', 
                    _gender = 'FEMALE', 
                    _date_of_birth = '2007-12-20', 
                    _address = biotmed_organization_sdk.models.address.Address(
                        country_code = 'US', 
                        state = 'Massachusetts', 
                        city = 'Boston', 
                        zip_code = '02101', 
                        address1 = '11', 
                        address2 = 'Entry B, Apartment 1', ), 
                    _mfa = biotmed_organization_sdk.models.mfa_dto.MfaDto(
                        enabled = True, 
                        expiration_in_minutes = 1, ), 
                    _credential_type = 'PASSWORD', 
                    _employee_id = '', )
            )
        else:
            return CreateOrganizationByTemplateNameRequest(
                name = 'Example Inc.',
                primary_administrator = biotmed_organization_sdk.models.organization_admin_user_request.OrganizationAdminUserRequest(
                    _name = biotmed_organization_sdk.models.name.Name(
                        first_name = 'John', 
                        last_name = 'Smith', ), 
                    _description = 'Lorem Ipsum', 
                    _email = 'john.smith@biot-med.com', 
                    _phone = '+12345678901', 
                    _locale = 'en-us', 
                    _gender = 'FEMALE', 
                    _date_of_birth = '2007-12-20', 
                    _address = biotmed_organization_sdk.models.address.Address(
                        country_code = 'US', 
                        state = 'Massachusetts', 
                        city = 'Boston', 
                        zip_code = '02101', 
                        address1 = '11', 
                        address2 = 'Entry B, Apartment 1', ), 
                    _mfa = biotmed_organization_sdk.models.mfa_dto.MfaDto(
                        enabled = True, 
                        expiration_in_minutes = 1, ), 
                    _credential_type = 'PASSWORD', 
                    _employee_id = '', ),
        )
        """

    def testCreateOrganizationByTemplateNameRequest(self):
        """Test CreateOrganizationByTemplateNameRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
