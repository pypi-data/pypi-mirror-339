# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from biotmed_organization_sdk.models.delete_landing_page_request import DeleteLandingPageRequest
from biotmed_organization_sdk.models.get_landing_pages_response import GetLandingPagesResponse
from biotmed_organization_sdk.models.landing_page_response import LandingPageResponse
from biotmed_organization_sdk.models.set_landing_page_request import SetLandingPageRequest

from biotmed_organization_sdk.api_client import ApiClient, RequestSerialized
from biotmed_organization_sdk.api_response import ApiResponse
from biotmed_organization_sdk.rest import RESTResponseType


class LandingPageAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_landing_pages(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        delete_landing_page_request: DeleteLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete landing pages by type

        Delete landing pages by type    Landing pages with a null value in the organizationId cannot be deleted, as they are considered as global landing pages, although they can be updated with the set landing page API.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_DELETE_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param delete_landing_page_request: (required)
        :type delete_landing_page_request: DeleteLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_landing_pages_serialize(
            landing_page_type=landing_page_type,
            delete_landing_page_request=delete_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '204': None,
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_landing_pages_with_http_info(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        delete_landing_page_request: DeleteLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete landing pages by type

        Delete landing pages by type    Landing pages with a null value in the organizationId cannot be deleted, as they are considered as global landing pages, although they can be updated with the set landing page API.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_DELETE_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param delete_landing_page_request: (required)
        :type delete_landing_page_request: DeleteLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_landing_pages_serialize(
            landing_page_type=landing_page_type,
            delete_landing_page_request=delete_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '204': None,
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_landing_pages_without_preload_content(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        delete_landing_page_request: DeleteLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete landing pages by type

        Delete landing pages by type    Landing pages with a null value in the organizationId cannot be deleted, as they are considered as global landing pages, although they can be updated with the set landing page API.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_DELETE_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param delete_landing_page_request: (required)
        :type delete_landing_page_request: DeleteLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_landing_pages_serialize(
            landing_page_type=landing_page_type,
            delete_landing_page_request=delete_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '204': None,
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_landing_pages_serialize(
        self,
        landing_page_type,
        delete_landing_page_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if landing_page_type is not None:
            _path_params['landingPageType'] = landing_page_type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if delete_landing_page_request is not None:
            _body_params = delete_landing_page_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/landing-pages/{landingPageType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_landing_pages(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetLandingPagesResponse:
        """Get landing pages by type

        Get landing pages by type    Will return all the landing pages for a given landing page type. Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization.   Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_GET_LANDING_PAGES** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_landing_pages_serialize(
            landing_page_type=landing_page_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "GetLandingPagesResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_landing_pages_with_http_info(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetLandingPagesResponse]:
        """Get landing pages by type

        Get landing pages by type    Will return all the landing pages for a given landing page type. Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization.   Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_GET_LANDING_PAGES** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_landing_pages_serialize(
            landing_page_type=landing_page_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "GetLandingPagesResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_landing_pages_without_preload_content(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get landing pages by type

        Get landing pages by type    Will return all the landing pages for a given landing page type. Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization.   Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_GET_LANDING_PAGES** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_landing_pages_serialize(
            landing_page_type=landing_page_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "GetLandingPagesResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_landing_pages_serialize(
        self,
        landing_page_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if landing_page_type is not None:
            _path_params['landingPageType'] = landing_page_type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/landing-pages/{landingPageType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def set_landing_pages(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        set_landing_page_request: SetLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LandingPageResponse:
        """Set a landing page

        Set a landing page    Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization. If an override exists for an organization, it will be used instead of the global landing page, if not, the global landing page will be used.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| |url|string|true|The landing page URL|https://example.com/auth/invitation| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_SET_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param set_landing_page_request: (required)
        :type set_landing_page_request: SetLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_landing_pages_serialize(
            landing_page_type=landing_page_type,
            set_landing_page_request=set_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "LandingPageResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def set_landing_pages_with_http_info(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        set_landing_page_request: SetLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LandingPageResponse]:
        """Set a landing page

        Set a landing page    Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization. If an override exists for an organization, it will be used instead of the global landing page, if not, the global landing page will be used.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| |url|string|true|The landing page URL|https://example.com/auth/invitation| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_SET_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param set_landing_page_request: (required)
        :type set_landing_page_request: SetLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_landing_pages_serialize(
            landing_page_type=landing_page_type,
            set_landing_page_request=set_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "LandingPageResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def set_landing_pages_without_preload_content(
        self,
        landing_page_type: Annotated[StrictStr, Field(description="The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]")],
        set_landing_page_request: SetLandingPageRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Set a landing page

        Set a landing page    Landing pages with a null value in the organizationId field are considered as global landing pages. Those with a value in the organizationId field are overrides for that specific organization. If an override exists for an organization, it will be used instead of the global landing page, if not, the global landing page will be used.   Request Body Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |userType|string|true|The type of the user. Can be one of the following: [patient, caregiver, organization-user]|patient| |organizationId|string|true|A UUID formatted string|3fa85f64-5717-4562-b3fc-2c963f66afa6| |url|string|true|The landing page URL|https://example.com/auth/invitation| Path Parameters:  | Parameter   |Type   | Mandatory| Description          | Example   | |-------------|-------|----------|----------------------|-----------| |landingPageType|string|true|The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD]|ACCEPT_INVITATION|   This API requires **LANDING_PAGE_SET_LANDING_PAGE** permission(s).  

        :param landing_page_type: The type of the landing page. Could be one of the following: [ACCEPT_INVITATION, FORGOT_PASSWORD] (required)
        :type landing_page_type: str
        :param set_landing_page_request: (required)
        :type set_landing_page_request: SetLandingPageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_landing_pages_serialize(
            landing_page_type=landing_page_type,
            set_landing_page_request=set_landing_page_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '200': "LandingPageResponse",
            '500': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '504': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _set_landing_pages_serialize(
        self,
        landing_page_type,
        set_landing_page_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if landing_page_type is not None:
            _path_params['landingPageType'] = landing_page_type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if set_landing_page_request is not None:
            _body_params = set_landing_page_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/landing-pages/{landingPageType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


