# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_organization_sdk.models.basic_referenced_entity_data_uuidid import BasicReferencedEntityDataUUIDId
from biotmed_organization_sdk.models.basic_template_data import BasicTemplateData
from biotmed_organization_sdk.models.referenced_side_attribute_information import ReferencedSideAttributeInformation
from typing import Optional, Set
from typing_extensions import Self

class PatientAlertResponse(BaseModel):
    """
    PatientAlertResponse
    """ # noqa: E501
    state: Optional[StrictStr] = Field(default='ACTIVE', description="The alert wanted state", alias="_state")
    severity: Optional[StrictStr] = Field(default='INFO', description="The alert wanted severity", alias="_severity")
    clear_notes: Optional[StrictStr] = Field(default=None, description="Clear notes", alias="_clearNotes")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="The name of the alert", alias="_name")
    id: StrictStr = Field(description="The id of the alert instance", alias="_id")
    template: Optional[BasicTemplateData] = Field(default=None, alias="_template")
    referencers: Optional[Dict[str, ReferencedSideAttributeInformation]] = Field(default=None, description="An object that contains all the referencers of this entity. Each referencer is the RSAN and it's an object that contains the count of the referrers, and information of the referrer (in case count = 1)", alias="_referencers")
    owner_organization: BasicReferencedEntityDataUUIDId = Field(alias="_ownerOrganization")
    clear_date_time: Optional[datetime] = Field(default=None, description="Clear Date time of the alert", alias="_clearDateTime")
    clear_trigger: StrictStr = Field(description="The alert cleared trigger type", alias="_clearTrigger")
    cleared_by: BasicReferencedEntityDataUUIDId = Field(alias="_clearedBy")
    creation_time: datetime = Field(description="A UTC date-time in the ISO-8601 format", alias="_creationTime")
    last_modified_time: datetime = Field(description="A UTC date-time in the ISO-8601 format", alias="_lastModifiedTime")
    patient: BasicReferencedEntityDataUUIDId = Field(alias="_patient")
    set_date_time: datetime = Field(description="Set Date time of the alert", alias="_setDateTime")
    caption: Optional[StrictStr] = Field(default=None, alias="_caption")
    __properties: ClassVar[List[str]] = ["_state", "_severity", "_clearNotes", "_name", "_id", "_template", "_referencers", "_ownerOrganization", "_clearDateTime", "_clearTrigger", "_clearedBy", "_creationTime", "_lastModifiedTime", "_patient", "_setDateTime", "_caption"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CLEARED', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CLEARED', 'SUSPENDED')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRITICAL', 'MAJOR', 'MINOR', 'INFO']):
            raise ValueError("must be one of enum values ('CRITICAL', 'MAJOR', 'MINOR', 'INFO')")
        return value

    @field_validator('clear_trigger')
    def clear_trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MANUAL', 'AUTOMATIC']):
            raise ValueError("must be one of enum values ('MANUAL', 'AUTOMATIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatientAlertResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['_template'] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in referencers (dict)
        _field_dict = {}
        if self.referencers:
            for _key in self.referencers:
                if self.referencers[_key]:
                    _field_dict[_key] = self.referencers[_key].to_dict()
            _dict['_referencers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of owner_organization
        if self.owner_organization:
            _dict['_ownerOrganization'] = self.owner_organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cleared_by
        if self.cleared_by:
            _dict['_clearedBy'] = self.cleared_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patient
        if self.patient:
            _dict['_patient'] = self.patient.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatientAlertResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_state": obj.get("_state") if obj.get("_state") is not None else 'ACTIVE',
            "_severity": obj.get("_severity") if obj.get("_severity") is not None else 'INFO',
            "_clearNotes": obj.get("_clearNotes"),
            "_name": obj.get("_name"),
            "_id": obj.get("_id"),
            "_template": BasicTemplateData.from_dict(obj["_template"]) if obj.get("_template") is not None else None,
            "_referencers": dict(
                (_k, ReferencedSideAttributeInformation.from_dict(_v))
                for _k, _v in obj["_referencers"].items()
            )
            if obj.get("_referencers") is not None
            else None,
            "_ownerOrganization": BasicReferencedEntityDataUUIDId.from_dict(obj["_ownerOrganization"]) if obj.get("_ownerOrganization") is not None else None,
            "_clearDateTime": obj.get("_clearDateTime"),
            "_clearTrigger": obj.get("_clearTrigger"),
            "_clearedBy": BasicReferencedEntityDataUUIDId.from_dict(obj["_clearedBy"]) if obj.get("_clearedBy") is not None else None,
            "_creationTime": obj.get("_creationTime"),
            "_lastModifiedTime": obj.get("_lastModifiedTime"),
            "_patient": BasicReferencedEntityDataUUIDId.from_dict(obj["_patient"]) if obj.get("_patient") is not None else None,
            "_setDateTime": obj.get("_setDateTime"),
            "_caption": obj.get("_caption")
        })
        return _obj


