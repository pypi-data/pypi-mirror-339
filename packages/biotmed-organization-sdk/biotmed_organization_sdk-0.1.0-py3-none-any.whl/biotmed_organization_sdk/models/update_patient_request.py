# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_organization_sdk.models.address_update_request import AddressUpdateRequest
from biotmed_organization_sdk.models.mfa_update_request import MfaUpdateRequest
from biotmed_organization_sdk.models.name_update_request import NameUpdateRequest
from biotmed_organization_sdk.models.reference_attribute_uuidid_request import ReferenceAttributeUUIDIdRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdatePatientRequest(BaseModel):
    """
    UpdatePatientRequest
    """ # noqa: E501
    name: Optional[NameUpdateRequest] = Field(default=None, alias="_name")
    description: Optional[StrictStr] = Field(default=None, description="A description, can be up to 5000 characters long", alias="_description")
    email: Optional[StrictStr] = Field(default=None, description="An email address in the RFC-5322 specification", alias="_email")
    phone: Optional[StrictStr] = Field(default=None, description="An E.164 formatted phone number", alias="_phone")
    locale: Optional[StrictStr] = Field(default=None, description="Locale in the following format: {language-ISO639}-{countryCode-ISO3166} lowercase.", alias="_locale")
    gender: Optional[StrictStr] = Field(default=None, description="A persons gender", alias="_gender")
    date_of_birth: Optional[StrictStr] = Field(default=None, description="A UTC date in the ISO-8601 format", alias="_dateOfBirth")
    address: Optional[AddressUpdateRequest] = Field(default=None, alias="_address")
    mfa: Optional[MfaUpdateRequest] = Field(default=None, alias="_mfa")
    additional_phone: Optional[StrictStr] = Field(default=None, description="An E.164 formatted phone number", alias="_additionalPhone")
    national_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="A person's national ID", alias="_nationalId")
    can_login: Optional[StrictBool] = Field(default=None, description="Determine whether a patient has the ability to login to the system or not", alias="_canLogin")
    owner_organization: Optional[ReferenceAttributeUUIDIdRequest] = Field(default=None, alias="_ownerOrganization")
    caregiver: Optional[ReferenceAttributeUUIDIdRequest] = Field(default=None, alias="_caregiver")
    __properties: ClassVar[List[str]] = ["_name", "_description", "_email", "_phone", "_locale", "_gender", "_dateOfBirth", "_address", "_mfa", "_additionalPhone", "_nationalId", "_canLogin", "_ownerOrganization", "_caregiver"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MALE', 'FEMALE', 'UNDISCLOSED']):
            raise ValueError("must be one of enum values ('MALE', 'FEMALE', 'UNDISCLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePatientRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['_name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['_address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mfa
        if self.mfa:
            _dict['_mfa'] = self.mfa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_organization
        if self.owner_organization:
            _dict['_ownerOrganization'] = self.owner_organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of caregiver
        if self.caregiver:
            _dict['_caregiver'] = self.caregiver.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePatientRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_name": NameUpdateRequest.from_dict(obj["_name"]) if obj.get("_name") is not None else None,
            "_description": obj.get("_description"),
            "_email": obj.get("_email"),
            "_phone": obj.get("_phone"),
            "_locale": obj.get("_locale"),
            "_gender": obj.get("_gender"),
            "_dateOfBirth": obj.get("_dateOfBirth"),
            "_address": AddressUpdateRequest.from_dict(obj["_address"]) if obj.get("_address") is not None else None,
            "_mfa": MfaUpdateRequest.from_dict(obj["_mfa"]) if obj.get("_mfa") is not None else None,
            "_additionalPhone": obj.get("_additionalPhone"),
            "_nationalId": obj.get("_nationalId"),
            "_canLogin": obj.get("_canLogin"),
            "_ownerOrganization": ReferenceAttributeUUIDIdRequest.from_dict(obj["_ownerOrganization"]) if obj.get("_ownerOrganization") is not None else None,
            "_caregiver": ReferenceAttributeUUIDIdRequest.from_dict(obj["_caregiver"]) if obj.get("_caregiver") is not None else None
        })
        return _obj


