# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_organization_sdk.models.address import Address
from biotmed_organization_sdk.models.organization_admin_user_request import OrganizationAdminUserRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationByTemplateNameRequest(BaseModel):
    """
    CreateOrganizationByTemplateNameRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=32)] = Field(description="An organization's name", alias="_name")
    description: Optional[StrictStr] = Field(default=None, description="A description, can be up to 5000 characters long", alias="_description")
    headquarters: Optional[Address] = Field(default=None, alias="_headquarters")
    phone: Optional[StrictStr] = Field(default=None, description="An E.164 formatted phone number", alias="_phone")
    timezone: Optional[StrictStr] = Field(default=None, description="A java time zone supported by the java runtime environment", alias="_timezone")
    locale: Optional[StrictStr] = Field(default=None, description="Locale in the following format: {language-ISO639}-{countryCode-ISO3166} lowercase.", alias="_locale")
    primary_administrator: OrganizationAdminUserRequest = Field(alias="_primaryAdministrator")
    __properties: ClassVar[List[str]] = ["_name", "_description", "_headquarters", "_phone", "_timezone", "_locale", "_primaryAdministrator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationByTemplateNameRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headquarters
        if self.headquarters:
            _dict['_headquarters'] = self.headquarters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_administrator
        if self.primary_administrator:
            _dict['_primaryAdministrator'] = self.primary_administrator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationByTemplateNameRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_name": obj.get("_name"),
            "_description": obj.get("_description"),
            "_headquarters": Address.from_dict(obj["_headquarters"]) if obj.get("_headquarters") is not None else None,
            "_phone": obj.get("_phone"),
            "_timezone": obj.get("_timezone"),
            "_locale": obj.get("_locale"),
            "_primaryAdministrator": OrganizationAdminUserRequest.from_dict(obj["_primaryAdministrator"]) if obj.get("_primaryAdministrator") is not None else None
        })
        return _obj


