# coding: utf-8

"""
    BioT Organization Service

    APIs document (version: 9.2.19)

    The version of the OpenAPI document: 9.2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_organization_sdk.models.filter_v2 import FilterV2
from biotmed_organization_sdk.models.order import Order
from typing import Optional, Set
from typing_extensions import Self

class SearchRequestV2(BaseModel):
    """
    SearchRequestV2
    """ # noqa: E501
    filter: Optional[Dict[str, FilterV2]] = Field(default=None, description="Each additionalProp can filter one field, inside additionalProp there are many optional conditions that can be used for filtering that field. When multiple conditions are specified, they are bundled together using logical AND operators, this means that only the items that match all filter conditions for that field will be returned")
    sort: Optional[List[Order]] = Field(default=None, description="Results can be sorted by multiple fields, the order of the fields in the sort request governs the hierarchy of the sort.The first field is the primary sort, the second is used when two values of the first field are the same, and so forth")
    free_text_search: Optional[StrictStr] = Field(default=None, description="Free text search strings - will be bundled to the filters with the logical AND operator. Possible to pass a few strings with space between them, the search will return a result if one of strings appears in the data entity (OR operator).", alias="freeTextSearch")
    limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    page: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["filter", "sort", "freeTextSearch", "limit", "page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequestV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in filter (dict)
        _field_dict = {}
        if self.filter:
            for _key in self.filter:
                if self.filter[_key]:
                    _field_dict[_key] = self.filter[_key].to_dict()
            _dict['filter'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item in self.sort:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequestV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": dict(
                (_k, FilterV2.from_dict(_v))
                for _k, _v in obj["filter"].items()
            )
            if obj.get("filter") is not None
            else None,
            "sort": [Order.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "freeTextSearch": obj.get("freeTextSearch"),
            "limit": obj.get("limit"),
            "page": obj.get("page")
        })
        return _obj


