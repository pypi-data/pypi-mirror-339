# Generated by the protocol buffer compiler.  DO NOT EDIT!
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FieldCardinality",
    "FieldKind",
    "NullValue",
    "Syntax",
    "Any",
    "Api",
    "BoolValue",
    "BytesValue",
    "DoubleValue",
    "Duration",
    "Empty",
    "Enum",
    "EnumValue",
    "Field",
    "FieldMask",
    "FloatValue",
    "Int32Value",
    "Int64Value",
    "ListValue",
    "Method",
    "Mixin",
    "Option",
    "SourceContext",
    "StringValue",
    "Struct",
    "Timestamp",
    "Type",
    "UInt32Value",
    "UInt64Value",
    "Value",
)

import datetime
from dataclasses import dataclass
from typing import (
    Dict,
    List,
    Optional,
)

import betterproto2

from ...message_pool import default_message_pool

betterproto2.check_compiler_version("0.4.0")


class FieldCardinality(betterproto2.Enum):
    """
    Whether a field is optional, required, or repeated.
    """

    CARDINALITY_UNKNOWN = 0
    """
    For fields with unknown cardinality.
    """

    CARDINALITY_OPTIONAL = 1
    """
    For optional fields.
    """

    CARDINALITY_REQUIRED = 2
    """
    For required fields. Proto2 syntax only.
    """

    CARDINALITY_REPEATED = 3
    """
    For repeated fields.
    """


class FieldKind(betterproto2.Enum):
    """
    Basic field types.
    """

    TYPE_UNKNOWN = 0
    """
    Field type unknown.
    """

    TYPE_DOUBLE = 1
    """
    Field type double.
    """

    TYPE_FLOAT = 2
    """
    Field type float.
    """

    TYPE_INT64 = 3
    """
    Field type int64.
    """

    TYPE_UINT64 = 4
    """
    Field type uint64.
    """

    TYPE_INT32 = 5
    """
    Field type int32.
    """

    TYPE_FIXED64 = 6
    """
    Field type fixed64.
    """

    TYPE_FIXED32 = 7
    """
    Field type fixed32.
    """

    TYPE_BOOL = 8
    """
    Field type bool.
    """

    TYPE_STRING = 9
    """
    Field type string.
    """

    TYPE_GROUP = 10
    """
    Field type group. Proto2 syntax only, and deprecated.
    """

    TYPE_MESSAGE = 11
    """
    Field type message.
    """

    TYPE_BYTES = 12
    """
    Field type bytes.
    """

    TYPE_UINT32 = 13
    """
    Field type uint32.
    """

    TYPE_ENUM = 14
    """
    Field type enum.
    """

    TYPE_SFIXED32 = 15
    """
    Field type sfixed32.
    """

    TYPE_SFIXED64 = 16
    """
    Field type sfixed64.
    """

    TYPE_SINT32 = 17
    """
    Field type sint32.
    """

    TYPE_SINT64 = 18
    """
    Field type sint64.
    """


class NullValue(betterproto2.Enum):
    """
    `NullValue` is a singleton enumeration to represent the null value for the
    `Value` type union.

    The JSON representation for `NullValue` is JSON `null`.
    """

    _ = 0
    """
    Null value.
    """


class Syntax(betterproto2.Enum):
    """
    The syntax in which a protocol buffer element is defined.
    """

    PROTO2 = 0
    """
    Syntax `proto2`.
    """

    PROTO3 = 1
    """
    Syntax `proto3`.
    """

    EDITIONS = 2
    """
    Syntax `editions`.
    """


@dataclass(eq=False, repr=False)
class Any(betterproto2.Message):
    """
    `Any` contains an arbitrary serialized protocol buffer message along with a
    URL that describes the type of the serialized message.

    Protobuf library provides support to pack/unpack Any values in the form
    of utility functions or additional generated methods of the Any type.

    Example 1: Pack and unpack a message in C++.

        Foo foo = ...;
        Any any;
        any.PackFrom(foo);
        ...
        if (any.UnpackTo(&foo)) {
          ...
        }

    Example 2: Pack and unpack a message in Java.

        Foo foo = ...;
        Any any = Any.pack(foo);
        ...
        if (any.is(Foo.class)) {
          foo = any.unpack(Foo.class);
        }
        // or ...
        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
          foo = any.unpack(Foo.getDefaultInstance());
        }

     Example 3: Pack and unpack a message in Python.

        foo = Foo(...)
        any = Any()
        any.Pack(foo)
        ...
        if any.Is(Foo.DESCRIPTOR):
          any.Unpack(foo)
          ...

     Example 4: Pack and unpack a message in Go

         foo := &pb.Foo{...}
         any, err := anypb.New(foo)
         if err != nil {
           ...
         }
         ...
         foo := &pb.Foo{}
         if err := any.UnmarshalTo(foo); err != nil {
           ...
         }

    The pack methods provided by protobuf library will by default use
    'type.googleapis.com/full.type.name' as the type URL and the unpack
    methods only use the fully qualified type name after the last '/'
    in the type URL, for example "foo.bar.com/x/y.z" will yield type
    name "y.z".

    JSON
    ====
    The JSON representation of an `Any` value uses the regular
    representation of the deserialized, embedded message, with an
    additional field `@type` which contains the type URL. Example:

        package google.profile;
        message Person {
          string first_name = 1;
          string last_name = 2;
        }

        {
          "@type": "type.googleapis.com/google.profile.Person",
          "firstName": <string>,
          "lastName": <string>
        }

    If the embedded message type is well-known and has a custom JSON
    representation, that representation will be embedded adding a field
    `value` which holds the custom JSON in addition to the `@type`
    field. Example (for message [google.protobuf.Duration][]):

        {
          "@type": "type.googleapis.com/google.protobuf.Duration",
          "value": "1.212s"
        }
    """

    type_url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A URL/resource name that uniquely identifies the type of the serialized
    protocol buffer message. This string must contain at least
    one "/" character. The last segment of the URL's path must represent
    the fully qualified name of the type (as in
    `path/google.protobuf.Duration`). The name should be in a canonical form
    (e.g., leading "." is not accepted).

    In practice, teams usually precompile into the binary all types that they
    expect it to use in the context of Any. However, for URLs which use the
    scheme `http`, `https`, or no scheme, one can optionally set up a type
    server that maps type URLs to message definitions as follows:

    * If no scheme is provided, `https` is assumed.
    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
      value in binary format, or produce an error.
    * Applications are allowed to cache lookup results based on the
      URL, or have them precompiled into a binary to avoid any
      lookup. Therefore, binary compatibility needs to be preserved
      on changes to types. (Use versioned type names to manage
      breaking changes.)

    Note: this functionality is not currently available in the official
    protobuf release, and it is not used for type URLs beginning with
    type.googleapis.com. As of May 2023, there are no widely used type server
    implementations and no plans to implement one.

    Schemes other than `http`, `https` (or the empty scheme) might be
    used with implementation specific semantics.
    """

    value: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    Must be a valid serialized protocol buffer of the above specified type.
    """

    def pack(self, message: betterproto2.Message, message_pool: "betterproto2.MessagePool | None" = None) -> None:
        """
        Pack the given message in the `Any` object.

        The message type must be registered in the message pool, which is done automatically when the module defining
        the message type is imported.
        """
        message_pool = message_pool or default_message_pool

        self.type_url = message_pool.type_to_url[type(message)]
        self.value = bytes(message)

    def unpack(self, message_pool: "betterproto2.MessagePool | None" = None) -> betterproto2.Message:
        """
        Return the message packed inside the `Any` object.

        The target message type must be registered in the message pool, which is done automatically when the module
        defining the message type is imported.
        """
        message_pool = message_pool or default_message_pool

        message_type = message_pool.url_to_type[self.type_url]

        return message_type().parse(self.value)

    def to_dict(self) -> dict:  # pyright: ignore [reportIncompatibleMethodOverride]
        # TOOO improve when dict is updated
        return {"@type": self.type_url, "value": self.unpack().to_dict()}


default_message_pool.register_message("google.protobuf", "Any", Any)


@dataclass(eq=False, repr=False)
class Api(betterproto2.Message):
    """
    Api is a light-weight descriptor for an API Interface.

    Interfaces are also described as "protocol buffer services" in some contexts,
    such as by the "service" keyword in a .proto file, but they are different
    from API Services, which represent a concrete implementation of an interface
    as opposed to simply a description of methods and bindings. They are also
    sometimes simply referred to as "APIs" in other contexts, such as the name of
    this message itself. See https://cloud.google.com/apis/design/glossary for
    detailed terminology.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully qualified name of this interface, including package name
    followed by the interface's simple name.
    """

    methods: "List[Method]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The methods of this interface, in unspecified order.
    """

    options: "List[Option]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Any metadata attached to the interface.
    """

    version: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    A version string for this interface. If specified, must have the form
    `major-version.minor-version`, as in `1.10`. If the minor version is
    omitted, it defaults to zero. If the entire version field is empty, the
    major version is derived from the package name, as outlined below. If the
    field is not empty, the version in the package name will be verified to be
    consistent with what is provided here.

    The versioning schema uses [semantic
    versioning](http://semver.org) where the major version number
    indicates a breaking change and the minor version an additive,
    non-breaking change. Both version numbers are signals to users
    what to expect from different versions, and should be carefully
    chosen based on the product plan.

    The major version is also reflected in the package name of the
    interface, which must end in `v<major-version>`, as in
    `google.feature.v1`. For major versions 0 and 1, the suffix can
    be omitted. Zero major versions must only be used for
    experimental, non-GA interfaces.
    """

    source_context: "Optional[SourceContext]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Source context for the protocol buffer service represented by this
    message.
    """

    mixins: "List[Mixin]" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Included interfaces. See [Mixin][].
    """

    syntax: "Syntax" = betterproto2.field(7, betterproto2.TYPE_ENUM, default_factory=lambda: Syntax(0))
    """
    The source syntax of the service.
    """


default_message_pool.register_message("google.protobuf", "Api", Api)


@dataclass(eq=False, repr=False)
class BoolValue(betterproto2.Message):
    """
    Wrapper message for `bool`.

    The JSON representation for `BoolValue` is JSON `true` and `false`.
    """

    value: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    The bool value.
    """


default_message_pool.register_message("google.protobuf", "BoolValue", BoolValue)


@dataclass(eq=False, repr=False)
class BytesValue(betterproto2.Message):
    """
    Wrapper message for `bytes`.

    The JSON representation for `BytesValue` is JSON string.
    """

    value: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    The bytes value.
    """


default_message_pool.register_message("google.protobuf", "BytesValue", BytesValue)


@dataclass(eq=False, repr=False)
class DoubleValue(betterproto2.Message):
    """
    Wrapper message for `double`.

    The JSON representation for `DoubleValue` is JSON number.
    """

    value: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    The double value.
    """


default_message_pool.register_message("google.protobuf", "DoubleValue", DoubleValue)


@dataclass(eq=False, repr=False)
class Duration(betterproto2.Message):
    """
    A Duration represents a signed, fixed-length span of time represented
    as a count of seconds and fractions of seconds at nanosecond
    resolution. It is independent of any calendar and concepts like "day"
    or "month". It is related to Timestamp in that the difference between
    two Timestamp values is a Duration and it can be added or subtracted
    from a Timestamp. Range is approximately +-10,000 years.

    # Examples

    Example 1: Compute Duration from two Timestamps in pseudo code.

        Timestamp start = ...;
        Timestamp end = ...;
        Duration duration = ...;

        duration.seconds = end.seconds - start.seconds;
        duration.nanos = end.nanos - start.nanos;

        if (duration.seconds < 0 && duration.nanos > 0) {
          duration.seconds += 1;
          duration.nanos -= 1000000000;
        } else if (duration.seconds > 0 && duration.nanos < 0) {
          duration.seconds -= 1;
          duration.nanos += 1000000000;
        }

    Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

        Timestamp start = ...;
        Duration duration = ...;
        Timestamp end = ...;

        end.seconds = start.seconds + duration.seconds;
        end.nanos = start.nanos + duration.nanos;

        if (end.nanos < 0) {
          end.seconds -= 1;
          end.nanos += 1000000000;
        } else if (end.nanos >= 1000000000) {
          end.seconds += 1;
          end.nanos -= 1000000000;
        }

    Example 3: Compute Duration from datetime.timedelta in Python.

        td = datetime.timedelta(days=3, minutes=10)
        duration = Duration()
        duration.FromTimedelta(td)

    # JSON Mapping

    In JSON format, the Duration type is encoded as a string rather than an
    object, where the string ends in the suffix "s" (indicating seconds) and
    is preceded by the number of seconds, with nanoseconds expressed as
    fractional seconds. For example, 3 seconds with 0 nanoseconds should be
    encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
    be expressed in JSON format as "3.000000001s", and 3 seconds and 1
    microsecond should be expressed in JSON format as "3.000001s".
    """

    seconds: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Signed seconds of the span of time. Must be from -315,576,000,000
    to +315,576,000,000 inclusive. Note: these bounds are computed from:
    60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    nanos: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Signed fractions of a second at nanosecond resolution of the span
    of time. Durations less than one second are represented with a 0
    `seconds` field and a positive or negative `nanos` field. For durations
    of one second or more, a non-zero value for the `nanos` field must be
    of the same sign as the `seconds` field. Must be from -999,999,999
    to +999,999,999 inclusive.
    """

    @classmethod
    def from_timedelta(
        cls, delta: datetime.timedelta, *, _1_microsecond: datetime.timedelta = datetime.timedelta(microseconds=1)
    ) -> "Duration":
        total_ms = delta // _1_microsecond
        seconds = int(total_ms / 1e6)
        nanos = int((total_ms % 1e6) * 1e3)
        return cls(seconds, nanos)

    def to_timedelta(self) -> datetime.timedelta:
        return datetime.timedelta(seconds=self.seconds, microseconds=self.nanos / 1e3)

    @staticmethod
    def delta_to_json(delta: datetime.timedelta) -> str:
        parts = str(delta.total_seconds()).split(".")
        if len(parts) > 1:
            while len(parts[1]) not in (3, 6, 9):
                parts[1] = f"{parts[1]}0"
        return f"{'.'.join(parts)}s"


default_message_pool.register_message("google.protobuf", "Duration", Duration)


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    """
    A generic empty message that you can re-use to avoid defining duplicated
    empty messages in your APIs. A typical example is to use it as the request
    or the response type of an API method. For instance:

        service Foo {
          rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
        }
    """

    pass


default_message_pool.register_message("google.protobuf", "Empty", Empty)


@dataclass(eq=False, repr=False)
class Enum(betterproto2.Message):
    """
    Enum type definition.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Enum type name.
    """

    enumvalue: "List[EnumValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, wraps=betterproto2.TYPE_ENUM, repeated=True
    )
    """
    Enum value definitions.
    """

    options: "List[Option]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Protocol buffer options.
    """

    source_context: "Optional[SourceContext]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The source context.
    """

    syntax: "Syntax" = betterproto2.field(5, betterproto2.TYPE_ENUM, default_factory=lambda: Syntax(0))
    """
    The source syntax.
    """

    edition: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The source edition string, only valid when syntax is SYNTAX_EDITIONS.
    """


default_message_pool.register_message("google.protobuf", "Enum", Enum)


@dataclass(eq=False, repr=False)
class EnumValue(betterproto2.Message):
    """
    Enum value definition.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Enum value name.
    """

    number: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Enum value number.
    """

    options: "List[Option]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Protocol buffer options.
    """


default_message_pool.register_message("google.protobuf", "EnumValue", EnumValue)


@dataclass(eq=False, repr=False)
class Field(betterproto2.Message):
    """
    A single field of a message type.
    """

    kind: "FieldKind" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: FieldKind(0))
    """
    The field type.
    """

    cardinality: "FieldCardinality" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: FieldCardinality(0)
    )
    """
    The field cardinality.
    """

    number: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The field number.
    """

    name: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The field name.
    """

    type_url: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The field type URL, without the scheme, for message or enumeration
    types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
    """

    oneof_index: "int" = betterproto2.field(7, betterproto2.TYPE_INT32)
    """
    The index of the field type in `Type.oneofs`, for message or enumeration
    types. The first type has index 1; zero means the type is not in the list.
    """

    packed: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    Whether to use alternative packed wire representation.
    """

    options: "List[Option]" = betterproto2.field(9, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The protocol buffer options.
    """

    json_name: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    The field JSON name.
    """

    default_value: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)
    """
    The string value of the default value of this field. Proto2 syntax only.
    """


default_message_pool.register_message("google.protobuf", "Field", Field)


@dataclass(eq=False, repr=False)
class FieldMask(betterproto2.Message):
    """
    `FieldMask` represents a set of symbolic field paths, for example:

        paths: "f.a"
        paths: "f.b.d"

    Here `f` represents a field in some root message, `a` and `b`
    fields in the message found in `f`, and `d` a field found in the
    message in `f.b`.

    Field masks are used to specify a subset of fields that should be
    returned by a get operation or modified by an update operation.
    Field masks also have a custom JSON encoding (see below).

    # Field Masks in Projections

    When used in the context of a projection, a response message or
    sub-message is filtered by the API to only contain those fields as
    specified in the mask. For example, if the mask in the previous
    example is applied to a response message as follows:

        f {
          a : 22
          b {
            d : 1
            x : 2
          }
          y : 13
        }
        z: 8

    The result will not contain specific values for fields x,y and z
    (their value will be set to the default, and omitted in proto text
    output):

        f {
          a : 22
          b {
            d : 1
          }
        }

    A repeated field is not allowed except at the last position of a
    paths string.

    If a FieldMask object is not present in a get operation, the
    operation applies to all fields (as if a FieldMask of all fields
    had been specified).

    Note that a field mask does not necessarily apply to the
    top-level response message. In case of a REST get operation, the
    field mask applies directly to the response, but in case of a REST
    list operation, the mask instead applies to each individual message
    in the returned resource list. In case of a REST custom method,
    other definitions may be used. Where the mask applies will be
    clearly documented together with its declaration in the API.  In
    any case, the effect on the returned resource/resources is required
    behavior for APIs.

    # Field Masks in Update Operations

    A field mask in update operations specifies which fields of the
    targeted resource are going to be updated. The API is required
    to only change the values of the fields as specified in the mask
    and leave the others untouched. If a resource is passed in to
    describe the updated values, the API ignores the values of all
    fields not covered by the mask.

    If a repeated field is specified for an update operation, new values will
    be appended to the existing repeated field in the target resource. Note that
    a repeated field is only allowed in the last position of a `paths` string.

    If a sub-message is specified in the last position of the field mask for an
    update operation, then new value will be merged into the existing sub-message
    in the target resource.

    For example, given the target message:

        f {
          b {
            d: 1
            x: 2
          }
          c: [1]
        }

    And an update message:

        f {
          b {
            d: 10
          }
          c: [2]
        }

    then if the field mask is:

     paths: ["f.b", "f.c"]

    then the result will be:

        f {
          b {
            d: 10
            x: 2
          }
          c: [1, 2]
        }

    An implementation may provide options to override this default behavior for
    repeated and message fields.

    In order to reset a field's value to the default, the field must
    be in the mask and set to the default value in the provided resource.
    Hence, in order to reset all fields of a resource, provide a default
    instance of the resource and set all fields in the mask, or do
    not provide a mask as described below.

    If a field mask is not present on update, the operation applies to
    all fields (as if a field mask of all fields has been specified).
    Note that in the presence of schema evolution, this may mean that
    fields the client does not know and has therefore not filled into
    the request will be reset to their default. If this is unwanted
    behavior, a specific service may require a client to always specify
    a field mask, producing an error if not.

    As with get operations, the location of the resource which
    describes the updated values in the request message depends on the
    operation kind. In any case, the effect of the field mask is
    required to be honored by the API.

    ## Considerations for HTTP REST

    The HTTP kind of an update operation which uses a field mask must
    be set to PATCH instead of PUT in order to satisfy HTTP semantics
    (PUT must only be used for full updates).

    # JSON Encoding of Field Masks

    In JSON, a field mask is encoded as a single string where paths are
    separated by a comma. Fields name in each path are converted
    to/from lower-camel naming conventions.

    As an example, consider the following message declarations:

        message Profile {
          User user = 1;
          Photo photo = 2;
        }
        message User {
          string display_name = 1;
          string address = 2;
        }

    In proto a field mask for `Profile` may look as such:

        mask {
          paths: "user.display_name"
          paths: "photo"
        }

    In JSON, the same mask is represented as below:

        {
          mask: "user.displayName,photo"
        }

    # Field Masks and Oneof Fields

    Field masks treat fields in oneofs just as regular fields. Consider the
    following message:

        message SampleMessage {
          oneof test_oneof {
            string name = 4;
            SubMessage sub_message = 9;
          }
        }

    The field mask can be:

        mask {
          paths: "name"
        }

    Or:

        mask {
          paths: "sub_message"
        }

    Note that oneof type names ("test_oneof" in this case) cannot be used in
    paths.

    ## Field Mask Verification

    The implementation of any API method which has a FieldMask type field in the
    request should verify the included field paths, and return an
    `INVALID_ARGUMENT` error if any path is unmappable.
    """

    paths: "List[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    The set of field mask paths.
    """


default_message_pool.register_message("google.protobuf", "FieldMask", FieldMask)


@dataclass(eq=False, repr=False)
class FloatValue(betterproto2.Message):
    """
    Wrapper message for `float`.

    The JSON representation for `FloatValue` is JSON number.
    """

    value: "float" = betterproto2.field(1, betterproto2.TYPE_FLOAT)
    """
    The float value.
    """


default_message_pool.register_message("google.protobuf", "FloatValue", FloatValue)


@dataclass(eq=False, repr=False)
class Int32Value(betterproto2.Message):
    """
    Wrapper message for `int32`.

    The JSON representation for `Int32Value` is JSON number.
    """

    value: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    The int32 value.
    """


default_message_pool.register_message("google.protobuf", "Int32Value", Int32Value)


@dataclass(eq=False, repr=False)
class Int64Value(betterproto2.Message):
    """
    Wrapper message for `int64`.

    The JSON representation for `Int64Value` is JSON string.
    """

    value: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    The int64 value.
    """


default_message_pool.register_message("google.protobuf", "Int64Value", Int64Value)


@dataclass(eq=False, repr=False)
class ListValue(betterproto2.Message):
    """
    `ListValue` is a wrapper around a repeated field of values.

    The JSON representation for `ListValue` is JSON array.
    """

    values: "List[Value]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Repeated field of dynamically typed values.
    """


default_message_pool.register_message("google.protobuf", "ListValue", ListValue)


@dataclass(eq=False, repr=False)
class Method(betterproto2.Message):
    """
    Method represents a method of an API interface.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The simple name of this method.
    """

    request_type_url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A URL of the input message type.
    """

    request_streaming: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If true, the request is streamed.
    """

    response_type_url: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The URL of the output message type.
    """

    response_streaming: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If true, the response is streamed.
    """

    options: "List[Option]" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Any metadata attached to the method.
    """

    syntax: "Syntax" = betterproto2.field(7, betterproto2.TYPE_ENUM, default_factory=lambda: Syntax(0))
    """
    The source syntax of this method.
    """


default_message_pool.register_message("google.protobuf", "Method", Method)


@dataclass(eq=False, repr=False)
class Mixin(betterproto2.Message):
    """
    Declares an API Interface to be included in this interface. The including
    interface must redeclare all the methods from the included interface, but
    documentation and options are inherited as follows:

    - If after comment and whitespace stripping, the documentation
      string of the redeclared method is empty, it will be inherited
      from the original method.

    - Each annotation belonging to the service config (http,
      visibility) which is not set in the redeclared method will be
      inherited.

    - If an http annotation is inherited, the path pattern will be
      modified as follows. Any version prefix will be replaced by the
      version of the including interface plus the [root][] path if
      specified.

    Example of a simple mixin:

        package google.acl.v1;
        service AccessControl {
          // Get the underlying ACL object.
          rpc GetAcl(GetAclRequest) returns (Acl) {
            option (google.api.http).get = "/v1/{resource=**}:getAcl";
          }
        }

        package google.storage.v2;
        service Storage {
          rpc GetAcl(GetAclRequest) returns (Acl);

          // Get a data record.
          rpc GetData(GetDataRequest) returns (Data) {
            option (google.api.http).get = "/v2/{resource=**}";
          }
        }

    Example of a mixin configuration:

        apis:
        - name: google.storage.v2.Storage
          mixins:
          - name: google.acl.v1.AccessControl

    The mixin construct implies that all methods in `AccessControl` are
    also declared with same name and request/response types in
    `Storage`. A documentation generator or annotation processor will
    see the effective `Storage.GetAcl` method after inherting
    documentation and annotations as follows:

        service Storage {
          // Get the underlying ACL object.
          rpc GetAcl(GetAclRequest) returns (Acl) {
            option (google.api.http).get = "/v2/{resource=**}:getAcl";
          }
          ...
        }

    Note how the version in the path pattern changed from `v1` to `v2`.

    If the `root` field in the mixin is specified, it should be a
    relative path under which inherited HTTP paths are placed. Example:

        apis:
        - name: google.storage.v2.Storage
          mixins:
          - name: google.acl.v1.AccessControl
            root: acls

    This implies the following inherited HTTP annotation:

        service Storage {
          // Get the underlying ACL object.
          rpc GetAcl(GetAclRequest) returns (Acl) {
            option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
          }
          ...
        }
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully qualified name of the interface which is included.
    """

    root: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    If non-empty specifies a path under which inherited HTTP paths
    are rooted.
    """


default_message_pool.register_message("google.protobuf", "Mixin", Mixin)


@dataclass(eq=False, repr=False)
class Option(betterproto2.Message):
    """
    A protocol buffer option, which can be attached to a message, field,
    enumeration, etc.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The option's name. For protobuf built-in options (options defined in
    descriptor.proto), this is the short name. For example, `"map_entry"`.
    For custom options, it should be the fully-qualified name. For example,
    `"google.api.http"`.
    """

    value: "Optional[Any]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The option's value packed in an Any message. If the value is a primitive,
    the corresponding wrapper type defined in google/protobuf/wrappers.proto
    should be used. If the value is an enum, it should be stored as an int32
    value using the google.protobuf.Int32Value type.
    """


default_message_pool.register_message("google.protobuf", "Option", Option)


@dataclass(eq=False, repr=False)
class SourceContext(betterproto2.Message):
    """
    `SourceContext` represents information about the source of a
    protobuf element, like the file in which it is defined.
    """

    file_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The path-qualified name of the .proto file that contained the associated
    protobuf element.  For example: `"google/protobuf/source_context.proto"`.
    """


default_message_pool.register_message("google.protobuf", "SourceContext", SourceContext)


@dataclass(eq=False, repr=False)
class StringValue(betterproto2.Message):
    """
    Wrapper message for `string`.

    The JSON representation for `StringValue` is JSON string.
    """

    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The string value.
    """


default_message_pool.register_message("google.protobuf", "StringValue", StringValue)


@dataclass(eq=False, repr=False)
class Struct(betterproto2.Message):
    """
    `Struct` represents a structured data value, consisting of fields
    which map to dynamically typed values. In some languages, `Struct`
    might be supported by a native representation. For example, in
    scripting languages like JS a struct is represented as an
    object. The details of that representation are described together
    with the proto support for the language.

    The JSON representation for `Struct` is JSON object.
    """

    fields: "Dict[str, Value]" = betterproto2.field(
        1, betterproto2.TYPE_MAP, map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE)
    )
    """
    Unordered map of dynamically typed values.
    """


default_message_pool.register_message("google.protobuf", "Struct", Struct)


@dataclass(eq=False, repr=False)
class Timestamp(betterproto2.Message):
    """
    A Timestamp represents a point in time independent of any time zone or local
    calendar, encoded as a count of seconds and fractions of seconds at
    nanosecond resolution. The count is relative to an epoch at UTC midnight on
    January 1, 1970, in the proleptic Gregorian calendar which extends the
    Gregorian calendar backwards to year one.

    All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
    second table is needed for interpretation, using a [24-hour linear
    smear](https://developers.google.com/time/smear).

    The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
    restricting to that range, we ensure that we can convert to and from [RFC
    3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

    # Examples

    Example 1: Compute Timestamp from POSIX `time()`.

        Timestamp timestamp;
        timestamp.set_seconds(time(NULL));
        timestamp.set_nanos(0);

    Example 2: Compute Timestamp from POSIX `gettimeofday()`.

        struct timeval tv;
        gettimeofday(&tv, NULL);

        Timestamp timestamp;
        timestamp.set_seconds(tv.tv_sec);
        timestamp.set_nanos(tv.tv_usec * 1000);

    Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

        FILETIME ft;
        GetSystemTimeAsFileTime(&ft);
        UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

        // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
        // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
        Timestamp timestamp;
        timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
        timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

    Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

        long millis = System.currentTimeMillis();

        Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
            .setNanos((int) ((millis % 1000) * 1000000)).build();

    Example 5: Compute Timestamp from Java `Instant.now()`.

        Instant now = Instant.now();

        Timestamp timestamp =
            Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                .setNanos(now.getNano()).build();

    Example 6: Compute Timestamp from current time in Python.

        timestamp = Timestamp()
        timestamp.GetCurrentTime()

    # JSON Mapping

    In JSON format, the Timestamp type is encoded as a string in the
    [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
    format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
    where {year} is always expressed using four digits while {month}, {day},
    {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
    seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
    are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
    is required. A proto3 JSON serializer should always use UTC (as indicated by
    "Z") when printing the Timestamp type and a proto3 JSON parser should be
    able to accept both UTC and other timezones (as indicated by an offset).

    For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
    01:30 UTC on January 15, 2017.

    In JavaScript, one can convert a Date object to this format using the
    standard
    [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
    method. In Python, a standard `datetime.datetime` object can be converted
    to this format using
    [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
    the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
    the Joda Time's [`ISODateTimeFormat.dateTime()`](
    http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
    ) to obtain a formatter capable of generating timestamps in this format.
    """

    seconds: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Represents seconds of UTC time since Unix epoch
    1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    9999-12-31T23:59:59Z inclusive.
    """

    nanos: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Non-negative fractions of a second at nanosecond resolution. Negative
    second values with fractions must still have non-negative nanos values
    that count forward in time. Must be from 0 to 999,999,999
    inclusive.
    """

    @classmethod
    def from_datetime(cls, dt: datetime.datetime) -> "Timestamp":
        # manual epoch offset calulation to avoid rounding errors,
        # to support negative timestamps (before 1970) and skirt
        # around datetime bugs (apparently 0 isn't a year in [0, 9999]??)
        offset = dt - datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc)
        # below is the same as timedelta.total_seconds() but without dividing by 1e6
        # so we end up with microseconds as integers instead of seconds as float
        offset_us = (offset.days * 24 * 60 * 60 + offset.seconds) * 10**6 + offset.microseconds
        seconds, us = divmod(offset_us, 10**6)
        return cls(seconds, us * 1000)

    def to_datetime(self) -> datetime.datetime:
        # datetime.fromtimestamp() expects a timestamp in seconds, not microseconds
        # if we pass it as a floating point number, we will run into rounding errors
        # see also #407
        offset = datetime.timedelta(seconds=self.seconds, microseconds=self.nanos // 1000)
        return datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc) + offset

    @staticmethod
    def timestamp_to_json(dt: datetime.datetime) -> str:
        nanos = dt.microsecond * 1e3
        if dt.tzinfo is not None:
            # change timezone aware datetime objects to utc
            dt = dt.astimezone(datetime.timezone.utc)
        copy = dt.replace(microsecond=0, tzinfo=None)
        result = copy.isoformat()
        if (nanos % 1e9) == 0:
            # If there are 0 fractional digits, the fractional
            # point '.' should be omitted when serializing.
            return f"{result}Z"
        if (nanos % 1e6) == 0:
            # Serialize 3 fractional digits.
            return f"{result}.{int(nanos // 1e6):03d}Z"
        if (nanos % 1e3) == 0:
            # Serialize 6 fractional digits.
            return f"{result}.{int(nanos // 1e3):06d}Z"
        # Serialize 9 fractional digits.
        return f"{result}.{nanos:09d}"


default_message_pool.register_message("google.protobuf", "Timestamp", Timestamp)


@dataclass(eq=False, repr=False)
class Type(betterproto2.Message):
    """
    A protocol buffer message type.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully qualified message name.
    """

    fields: "List[Field]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of fields.
    """

    oneofs: "List[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    The list of types appearing in `oneof` definitions in this type.
    """

    options: "List[Option]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The protocol buffer options.
    """

    source_context: "Optional[SourceContext]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The source context.
    """

    syntax: "Syntax" = betterproto2.field(6, betterproto2.TYPE_ENUM, default_factory=lambda: Syntax(0))
    """
    The source syntax.
    """

    edition: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    The source edition string, only valid when syntax is SYNTAX_EDITIONS.
    """


default_message_pool.register_message("google.protobuf", "Type", Type)


@dataclass(eq=False, repr=False)
class UInt32Value(betterproto2.Message):
    """
    Wrapper message for `uint32`.

    The JSON representation for `UInt32Value` is JSON number.
    """

    value: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The uint32 value.
    """


default_message_pool.register_message("google.protobuf", "UInt32Value", UInt32Value)


@dataclass(eq=False, repr=False)
class UInt64Value(betterproto2.Message):
    """
    Wrapper message for `uint64`.

    The JSON representation for `UInt64Value` is JSON string.
    """

    value: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    The uint64 value.
    """


default_message_pool.register_message("google.protobuf", "UInt64Value", UInt64Value)


@dataclass(eq=False, repr=False)
class Value(betterproto2.Message):
    """
    `Value` represents a dynamically typed value which can be either
    null, a number, a string, a boolean, a recursive struct value, or a
    list of values. A producer of value is expected to set one of these
    variants. Absence of any variant indicates an error.

    The JSON representation for `Value` is JSON value.

    Oneofs:
        - kind: The kind of value.
    """

    null_value: "Optional[NullValue]" = betterproto2.field(1, betterproto2.TYPE_ENUM, optional=True, group="kind")
    """
    Represents a null value.
    """

    number_value: "Optional[float]" = betterproto2.field(2, betterproto2.TYPE_DOUBLE, optional=True, group="kind")
    """
    Represents a double value.
    """

    string_value: "Optional[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True, group="kind")
    """
    Represents a string value.
    """

    bool_value: "Optional[bool]" = betterproto2.field(4, betterproto2.TYPE_BOOL, optional=True, group="kind")
    """
    Represents a boolean value.
    """

    struct_value: "Optional[Struct]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True, group="kind")
    """
    Represents a structured value.
    """

    list_value: "Optional[ListValue]" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True, group="kind")
    """
    Represents a repeated `Value`.
    """


default_message_pool.register_message("google.protobuf", "Value", Value)
