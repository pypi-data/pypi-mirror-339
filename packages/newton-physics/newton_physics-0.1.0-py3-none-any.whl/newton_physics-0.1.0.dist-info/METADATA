Metadata-Version: 2.4
Name: newton-physics
Version: 0.1.0
Summary: A GPU-accelerated physics engine for robotics simulation
Author-email: Newton Developers <warp-python@nvidia.com>
License-Expression: Apache-2.0
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: warp-lang>=1.7.0.dev20250326
Provides-Extra: dev
Requires-Dist: coverage[toml]>=7.8.0; extra == "dev"
Requires-Dist: usd-core>=25.2.post1; platform_machine != "aarch64" and extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: furo; extra == "docs"
Provides-Extra: all
Requires-Dist: coverage[toml]>=7.8.0; extra == "all"
Requires-Dist: usd-core>=25.2.post1; platform_machine != "aarch64" and extra == "all"
Requires-Dist: sphinx; extra == "all"
Requires-Dist: furo; extra == "all"
Dynamic: license-file

# Newton

Newton is a GPU-accelerated physics simulation engine built upon [NVIDIA Warp](https://github.com/NVIDIA/warp), specifically targeting roboticists and simulation researchers.
It extends and generalizes Warp's existing `warp.sim` module, integrating [MuJoCo Warp](https://github.com/google-deepmind/mujoco_warp) as a primary backend.
Newton emphasizes GPU-based computation, differentiability, and user-defined extensibility, facilitating rapid iteration and scalable robotics simulation.

Newton is maintained by [Disney Research](https://www.disneyresearch.com/), [Google DeepMind](https://deepmind.google/), and [NVIDIA](https://www.nvidia.com/).

## Development

Although not required, [uv](https://docs.astral.sh/uv/) is recommended for setting up a development environment.

Running a basic example:

```bash
uv run newton/examples/example_quadruped.py
```

Running all tests:

```bash
uv run -m newton.tests
```

Running all tests with code coverage:

```bash
uv run -m newton.tests --coverage --coverage-html htmlcov
xdg-open htmlcov/index.html
```

Creating a wheel:

```bash
uv build --wheel
```

[Ruff](https://docs.astral.sh/ruff/) is used for Python linting and code formatting.
[pre-commit](https://pre-commit.com/) can be used to ensure that local code complies with Newton's checks.
From the top of the repository, run:

```bash
uvx pre-commit run -a
```

To automatically run pre-commit hooks with `git commit`:

```bash
uvx pre-commit install
```
