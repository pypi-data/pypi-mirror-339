# coding: utf-8

"""
    Washington Metropolitan Area Transit Authority API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_wmata.models.n_day_time_object import NDayTimeObject
from typing import Optional, Set
from typing_extensions import Self

class StationTimingObjectStationTimesInner(BaseModel):
    """
    StationTimingObjectStationTimesInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    station_name: Optional[StrictStr] = Field(default=None, alias="StationName")
    monday: Optional[NDayTimeObject] = Field(default=None, alias="Monday")
    tuesday: Optional[NDayTimeObject] = Field(default=None, alias="Tuesday")
    wednesday: Optional[NDayTimeObject] = Field(default=None, alias="Wednesday")
    thursday: Optional[NDayTimeObject] = Field(default=None, alias="Thursday")
    friday: Optional[NDayTimeObject] = Field(default=None, alias="Friday")
    saturday: Optional[NDayTimeObject] = Field(default=None, alias="Saturday")
    sunday: Optional[NDayTimeObject] = Field(default=None, alias="Sunday")
    __properties: ClassVar[List[str]] = ["Code", "StationName", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationTimingObjectStationTimesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of monday
        if self.monday:
            _dict['Monday'] = self.monday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tuesday
        if self.tuesday:
            _dict['Tuesday'] = self.tuesday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wednesday
        if self.wednesday:
            _dict['Wednesday'] = self.wednesday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thursday
        if self.thursday:
            _dict['Thursday'] = self.thursday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of friday
        if self.friday:
            _dict['Friday'] = self.friday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saturday
        if self.saturday:
            _dict['Saturday'] = self.saturday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sunday
        if self.sunday:
            _dict['Sunday'] = self.sunday.to_dict()
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['Code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationTimingObjectStationTimesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Code": obj.get("Code"),
            "StationName": obj.get("StationName"),
            "Monday": NDayTimeObject.from_dict(obj["Monday"]) if obj.get("Monday") is not None else None,
            "Tuesday": NDayTimeObject.from_dict(obj["Tuesday"]) if obj.get("Tuesday") is not None else None,
            "Wednesday": NDayTimeObject.from_dict(obj["Wednesday"]) if obj.get("Wednesday") is not None else None,
            "Thursday": NDayTimeObject.from_dict(obj["Thursday"]) if obj.get("Thursday") is not None else None,
            "Friday": NDayTimeObject.from_dict(obj["Friday"]) if obj.get("Friday") is not None else None,
            "Saturday": NDayTimeObject.from_dict(obj["Saturday"]) if obj.get("Saturday") is not None else None,
            "Sunday": NDayTimeObject.from_dict(obj["Sunday"]) if obj.get("Sunday") is not None else None
        })
        return _obj


