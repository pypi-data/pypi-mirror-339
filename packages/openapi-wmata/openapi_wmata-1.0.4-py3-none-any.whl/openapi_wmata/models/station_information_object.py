# coding: utf-8

"""
    Washington Metropolitan Area Transit Authority API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_wmata.models.line_code import LineCode
from openapi_wmata.models.station_information_object_address import StationInformationObjectAddress
from typing import Optional, Set
from typing_extensions import Self

class StationInformationObject(BaseModel):
    """
    StationInformationObject
    """ # noqa: E501
    address: Optional[StationInformationObjectAddress] = Field(default=None, alias="Address")
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lat")
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lon")
    line_code1: Optional[LineCode] = Field(default=None, alias="LineCode1")
    line_code2: Optional[LineCode] = Field(default=None, alias="LineCode2")
    line_code3: Optional[LineCode] = Field(default=None, alias="LineCode3")
    line_code4: Optional[LineCode] = Field(default=None, alias="LineCode4")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    station_together1: Optional[StrictStr] = Field(default=None, alias="StationTogether1")
    station_together2: Optional[StrictStr] = Field(default=None, alias="StationTogether2")
    __properties: ClassVar[List[str]] = ["Address", "Code", "Lat", "Lon", "LineCode1", "LineCode2", "LineCode3", "LineCode4", "Name", "StationTogether1", "StationTogether2"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationInformationObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['Code'] = None

        # set to None if line_code1 (nullable) is None
        # and model_fields_set contains the field
        if self.line_code1 is None and "line_code1" in self.model_fields_set:
            _dict['LineCode1'] = None

        # set to None if line_code2 (nullable) is None
        # and model_fields_set contains the field
        if self.line_code2 is None and "line_code2" in self.model_fields_set:
            _dict['LineCode2'] = None

        # set to None if line_code3 (nullable) is None
        # and model_fields_set contains the field
        if self.line_code3 is None and "line_code3" in self.model_fields_set:
            _dict['LineCode3'] = None

        # set to None if line_code4 (nullable) is None
        # and model_fields_set contains the field
        if self.line_code4 is None and "line_code4" in self.model_fields_set:
            _dict['LineCode4'] = None

        # set to None if station_together1 (nullable) is None
        # and model_fields_set contains the field
        if self.station_together1 is None and "station_together1" in self.model_fields_set:
            _dict['StationTogether1'] = None

        # set to None if station_together2 (nullable) is None
        # and model_fields_set contains the field
        if self.station_together2 is None and "station_together2" in self.model_fields_set:
            _dict['StationTogether2'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationInformationObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": StationInformationObjectAddress.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "Code": obj.get("Code"),
            "Lat": obj.get("Lat"),
            "Lon": obj.get("Lon"),
            "LineCode1": obj.get("LineCode1"),
            "LineCode2": obj.get("LineCode2"),
            "LineCode3": obj.get("LineCode3"),
            "LineCode4": obj.get("LineCode4"),
            "Name": obj.get("Name"),
            "StationTogether1": obj.get("StationTogether1"),
            "StationTogether2": obj.get("StationTogether2")
        })
        return _obj


