# coding: utf-8

"""
    Washington Metropolitan Area Transit Authority API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_wmata.models.line_code import LineCode
from openapi_wmata.models.standard_routes_object_standard_routes_inner_track_circuits_inner import StandardRoutesObjectStandardRoutesInnerTrackCircuitsInner
from typing import Optional, Set
from typing_extensions import Self

class StandardRoutesObjectStandardRoutesInner(BaseModel):
    """
    StandardRoutesObjectStandardRoutesInner
    """ # noqa: E501
    line_code: Optional[LineCode] = Field(default=None, alias="LineCode")
    track_num: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TrackNum")
    track_circuits: Optional[List[StandardRoutesObjectStandardRoutesInnerTrackCircuitsInner]] = Field(default=None, alias="TrackCircuits")
    __properties: ClassVar[List[str]] = ["LineCode", "TrackNum", "TrackCircuits"]

    @field_validator('track_num')
    def track_num_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandardRoutesObjectStandardRoutesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in track_circuits (list)
        _items = []
        if self.track_circuits:
            for _item_track_circuits in self.track_circuits:
                if _item_track_circuits:
                    _items.append(_item_track_circuits.to_dict())
            _dict['TrackCircuits'] = _items
        # set to None if line_code (nullable) is None
        # and model_fields_set contains the field
        if self.line_code is None and "line_code" in self.model_fields_set:
            _dict['LineCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandardRoutesObjectStandardRoutesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LineCode": obj.get("LineCode"),
            "TrackNum": obj.get("TrackNum"),
            "TrackCircuits": [StandardRoutesObjectStandardRoutesInnerTrackCircuitsInner.from_dict(_item) for _item in obj["TrackCircuits"]] if obj.get("TrackCircuits") is not None else None
        })
        return _obj


