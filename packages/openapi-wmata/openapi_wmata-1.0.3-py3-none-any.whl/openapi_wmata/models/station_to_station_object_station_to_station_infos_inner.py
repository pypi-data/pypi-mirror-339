# coding: utf-8

"""
    Washington Metropolitan Area Transit Authority API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_wmata.models.station_to_station_object_station_to_station_infos_inner_rail_fare import StationToStationObjectStationToStationInfosInnerRailFare
from typing import Optional, Set
from typing_extensions import Self

class StationToStationObjectStationToStationInfosInner(BaseModel):
    """
    StationToStationObjectStationToStationInfosInner
    """ # noqa: E501
    composite_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CompositeMiles")
    destination_station: Optional[StrictStr] = Field(default=None, alias="DestinationStation")
    rail_fare: Optional[StationToStationObjectStationToStationInfosInnerRailFare] = Field(default=None, alias="RailFare")
    rail_time: Optional[StrictInt] = Field(default=None, alias="RailTime")
    source_station: Optional[StrictStr] = Field(default=None, alias="SourceStation")
    __properties: ClassVar[List[str]] = ["CompositeMiles", "DestinationStation", "RailFare", "RailTime", "SourceStation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationToStationObjectStationToStationInfosInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rail_fare
        if self.rail_fare:
            _dict['RailFare'] = self.rail_fare.to_dict()
        # set to None if destination_station (nullable) is None
        # and model_fields_set contains the field
        if self.destination_station is None and "destination_station" in self.model_fields_set:
            _dict['DestinationStation'] = None

        # set to None if source_station (nullable) is None
        # and model_fields_set contains the field
        if self.source_station is None and "source_station" in self.model_fields_set:
            _dict['SourceStation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationToStationObjectStationToStationInfosInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CompositeMiles": obj.get("CompositeMiles"),
            "DestinationStation": obj.get("DestinationStation"),
            "RailFare": StationToStationObjectStationToStationInfosInnerRailFare.from_dict(obj["RailFare"]) if obj.get("RailFare") is not None else None,
            "RailTime": obj.get("RailTime"),
            "SourceStation": obj.get("SourceStation")
        })
        return _obj


