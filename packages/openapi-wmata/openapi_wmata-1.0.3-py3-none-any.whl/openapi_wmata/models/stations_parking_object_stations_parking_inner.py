# coding: utf-8

"""
    Washington Metropolitan Area Transit Authority API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_wmata.models.line_code import LineCode
from openapi_wmata.models.stations_parking_object_stations_parking_inner_all_day_parking import StationsParkingObjectStationsParkingInnerAllDayParking
from openapi_wmata.models.stations_parking_object_stations_parking_inner_short_term_parking import StationsParkingObjectStationsParkingInnerShortTermParking
from typing import Optional, Set
from typing_extensions import Self

class StationsParkingObjectStationsParkingInner(BaseModel):
    """
    StationsParkingObjectStationsParkingInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    notes: Optional[StrictStr] = Field(default=None, alias="Notes")
    all_day_parking: Optional[StationsParkingObjectStationsParkingInnerAllDayParking] = Field(default=None, alias="AllDayParking")
    short_term_parking: Optional[StationsParkingObjectStationsParkingInnerShortTermParking] = Field(default=None, alias="ShortTermParking")
    internal_destination2: Optional[StrictStr] = Field(default=None, alias="InternalDestination2")
    line_code: Optional[LineCode] = Field(default=None, alias="LineCode")
    start_station_code: Optional[StrictStr] = Field(default=None, alias="StartStationCode")
    __properties: ClassVar[List[str]] = ["Code", "Notes", "AllDayParking", "ShortTermParking", "InternalDestination2", "LineCode", "StartStationCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationsParkingObjectStationsParkingInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of all_day_parking
        if self.all_day_parking:
            _dict['AllDayParking'] = self.all_day_parking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_term_parking
        if self.short_term_parking:
            _dict['ShortTermParking'] = self.short_term_parking.to_dict()
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['Code'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['Notes'] = None

        # set to None if internal_destination2 (nullable) is None
        # and model_fields_set contains the field
        if self.internal_destination2 is None and "internal_destination2" in self.model_fields_set:
            _dict['InternalDestination2'] = None

        # set to None if line_code (nullable) is None
        # and model_fields_set contains the field
        if self.line_code is None and "line_code" in self.model_fields_set:
            _dict['LineCode'] = None

        # set to None if start_station_code (nullable) is None
        # and model_fields_set contains the field
        if self.start_station_code is None and "start_station_code" in self.model_fields_set:
            _dict['StartStationCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationsParkingObjectStationsParkingInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Code": obj.get("Code"),
            "Notes": obj.get("Notes"),
            "AllDayParking": StationsParkingObjectStationsParkingInnerAllDayParking.from_dict(obj["AllDayParking"]) if obj.get("AllDayParking") is not None else None,
            "ShortTermParking": StationsParkingObjectStationsParkingInnerShortTermParking.from_dict(obj["ShortTermParking"]) if obj.get("ShortTermParking") is not None else None,
            "InternalDestination2": obj.get("InternalDestination2"),
            "LineCode": obj.get("LineCode"),
            "StartStationCode": obj.get("StartStationCode")
        })
        return _obj


