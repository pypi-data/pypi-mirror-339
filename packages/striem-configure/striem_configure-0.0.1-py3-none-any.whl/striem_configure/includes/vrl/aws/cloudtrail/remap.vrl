%ocsf = true

ocsf = {"metadata": {"version": "1.3.0",
                     "product": {"vendor_name": "AWS",
                                 "name": "CloudTrail"},
                     "profiles": ["cloud", "datetime"]},
        "category_uid": 6,
        "category_name": "Application Activity",
        "class_uid": 6003,
        "class_name": "API Activity",
        "severity_id": 1,
        "severity": "Informational",
        "resources": [],
        "observables": [],
        "raw_data": encode_json(.)}

ocsf.time_dt = del(.eventTime)
ts = parse_timestamp(ocsf.time_dt, format: "%+") ?? now()
ocsf.time = to_unix_timestamp(ts)

ocsf.metadata.uid = del(.eventID)
ocsf.metadata.product.feature = {"name": del(.eventCategory)}
ocsf.metadata.product.version = del(.eventVersion)
ocsf.metadata.event_code = del(.eventType)

ocsf.cloud = {"provider": "AWS",
              "region": del(.awsRegion)}

eventName = del(.eventName) || "unknown"
ocsf.api = {"operation": string(eventName) ?? "unknown"}

if (del(.readOnly) == true || starts_with(ocsf.api.operation, "Describe") || starts_with(ocsf.api.operation, "List")) {
  ocsf.activity_id = 3
  ocsf.activity_name = "Read"
  ocsf.type = "API Activity: Read"
} else if (ocsf.api.operation == "RunInstances" || starts_with(ocsf.api.operation, "Create"))  {
  ocsf.activity_id = 1
  ocsf.activity_name = "Create"
  ocsf.type = "API Activity: Create"
} else {
  ocsf.activity_id = 99
  ocsf.activity_name = ocsf.api.operation
  ocsf.type = "API Activity: Other"
}

ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id

ocsf.api.service = {"name": string(del(.eventSource)) ?? "unknown"}

ocsf.api.request = {"uid": del(.requestID),
                    "data": del(.requestParameters)}

ocsf.actor = {"user": {"account": {"uid": del(.userIdentity.accountId)},
                       "type": del(.userIdentity.type),
                       "uid": del(.userIdentity.arn),
                       "uid_alt": del(.userIdentity.principalId),
                       "credential_uid": del(.userIdentity.accessKeyId),
                       "name": del(.userIdentity.userName)},
              "session": {"issuer": del(.userIdentity.sessionContext.sessionIssuer.arn),
                          "created_time_dt": del(.userIdentity.sessionContext.attributes.creationDate)}}

if (!is_null(ocsf.actor.user.uid_alt) && contains(string!(ocsf.actor.user.uid_alt), "@")) {
    ocsf.actor.user.email_addr = split(string!(ocsf.actor.user.uid_alt), ":")[-1]
} else if (!is_null(ocsf.actor.user.name) && contains(string!(ocsf.actor.user.name), "@")) {
    ocsf.actor.user.email_addr = split(string!(ocsf.actor.user.name), ":")[-1]
}

if ((ocsf.actor.user.type == "AssumedRole") && (is_null(ocsf.actor.user.email_addr))) {
  ocsf.actor.user.type = "System"
  ocsf.actor.user.type_id = 3
}

if (!is_null(ocsf.actor.user.email_addr)) {
  email = {"name": "user",
           "type": "Email Address",
           "type_id": 5,
           "value": ocsf.actor.user.email_addr}
  ocsf.observables = push(ocsf.observables, email)
} else {
  username = {"name": "user",
              "type": "User Name",
              "type_id": 4,
              "value": ocsf.actor.user.uid}
  ocsf.observables = push(ocsf.observables, username)
}

ts, _ = parse_timestamp(ocsf.actor.session.created_time_dt, format: "%+")
if (!is_null(ts)) {
  ocsf.actor.session.created_time = to_unix_timestamp(ts)
}

if (.userIdentity.sessionContext.attributes.mfaAuthenticated) != null {
  ocsf.actor.session.is_mfa = to_bool(del(.userIdentity.sessionContext.attributes.mfaAuthenticated)) ?? false
}

if (is_ipv4!(.sourceIPAddress) || is_ipv6!(.sourceIPAddress)) {
  ocsf.src_endpoint = {"ip": del(.sourceIPAddress)}
  src = {"name": "sourceIPAddress",
         "type": "IP Address",
         "type_id": 2,
         "value": ocsf.src_endpoint.ip}
  ocsf.observables = push(ocsf.observables, src)
} else {
  ocsf.src_endpoint = {"domain": del(.sourceIPAddress)}
}

resources = del(.resources)
if (is_array(resources)) {
  for_each(array!(resources)) -> |_i, v| {
    rsc = {"uid": v.ARN,
           "type": v.type,
           "namespace": ocsf.api.service.name,
           "owner":{"account": { "uid": v.accountId}}}
    ocsf.resources = push(ocsf.resources, rsc)
    observable = {"name": v.type,
                  "type": "Resource UID",
                  "type_id": 10,
                  "value": v.ARN}
    ocsf.observables = push(ocsf.observables, observable)
  }
}

if (ocsf.activity_id == 1) {
  tgt = slice(ocsf.api.operation, 6) ?? ""
  tgtarn = downcase(tgt) + "arn"
  rk = keys(.responseElements) ?? []
  rv, _ = get(.responseElements, rk)
  rv = object(rv) ?? object({})
  for_each(rv) -> |k, v| {
    dk = downcase(k)
    if (dk == tgtarn) {
      rsc = {"uid": v,
             "namespace": ocsf.api.service.name,
             "type": slice(k, 0, -3) ?? tgt}
      ocsf.resources = push(ocsf.resources, rsc)
    } else if (dk == "arn") {
      rsc = {"uid": v,
             "namespace": ocsf.api.service.name,
             "type": tgt}
      ocsf.resources = push(ocsf.resources, rsc)
    }
  }
}

ocsf.http_request = {"user_agent": del(.userAgent)}

unmapped, _ = compact(., string: true, array: true, null: true, nullish: true)
if (!is_null(unmapped) && !is_empty(unmapped)) {
  ocsf.unmapped = encode_json(unmapped)
}

. = compact(ocsf, string: true, array: true, null: true, nullish: true)
