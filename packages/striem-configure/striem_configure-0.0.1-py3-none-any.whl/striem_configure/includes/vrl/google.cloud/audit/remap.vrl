%ocsf = true

ocsf = {"metadata": {"version": "1.3.0"
                     "product": {"vendor_name": "Google"}},
        "category_uid": 6,
        "category_name", "Application Activity",
        "class_uid": 6003,
        "class_name": "API Activity",
        "activity_id": 99,
        "type_uid": 600399,
        "type": "API Activity: Other",
        "profiles: ["cloud", "datetime"]}

ocsf.time_dt = del(.timestamp)
ts = parse_timestamp(ocsf.time_dt, format: "%+") ?? now()
ocsf.time = to_unix_timestamp(ts)


ocsf.activity_name = .protoPayload.methodName || .protoPayload.metadata.event[0].eventName || "Other"

ocsf.severity = del(.severity)

if (ocsf.severity == "NOTICE" ) {
    ocsf.severity = "Informational"
    ocsf.severity_id = 1
} else {
    ocsf.severity_id = 99
}

ocsf.metadata.uid = del(.insertId)

productname = del(.protoPayload."@type")

ocsf.metadata.product.name, _ = replace(productname, "type.googleapis.com/", "", count: 1)

ocsf.metadata.log_provider = del(.logName)

orguid, _ = split(ocsf.metadata.log_provider, "/")[1]
ocsf.cloud = {"provider": "GCP", "org":{"uid": orguid}}

ocsf.actor = {"user": {"uid": del(.protoPayload.authenticationInfo.principalEmail)}}
ocsf.actor.user.email_addr = ocsf.actor.user.uid

ocsf.resources = [{ "name": del(.protoPayload.resourceName), "data": del(.resource) }]

ocsf.api = {"service": {"name": del(.protoPayload.serviceName)},
            "operation": del(.protoPayload.methodName) || .protoPayload.metadata.event[0].eventName,
            "request": {"uid": del(.protoPayload.metadata.event[0].eventId) || "unknown"},
            "response": {"data": del(.protoPayload.response)}}

ocsf.src_endpoint = {"ip": del(.protoPayload.requestMetadata.callerIp)}

if (is_null(ocsf.src_endpoint.ip)) {
    ocsf.src_endpoint.uid = "unknown"
}

ocsf.http_request = {"user_agent": del(.protoPayload.requestMetadata.callerSuppliedUserAgent)}

unmapped, _ = compact(., string: true, array: true, null: true, nullish: true)
if (!is_null(unmapped) && !is_empty(unmapped)) {
  ocsf.unmapped = encode_json(unmapped)
}

. = compact(ocsf, string: true, array: true, null: true, nullish: true)
