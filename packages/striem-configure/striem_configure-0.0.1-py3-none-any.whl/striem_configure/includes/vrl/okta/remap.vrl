%ocsf = true

ocsf = {"metadata": {"uid": uuid_v7(),
                     "version": "1.3.0",
                     "product": {"vendor_name": "Okta",
                                 "name": "Okta System Log"}},
        "category_uid": 3,
        "category_name": "Identity & Access Management",
        "class_uid": 3002,
        "class_name": "Authentication",
        "raw_data": encode_json(.)}

ocsf.time_dt = del(.published)
ts = parse_timestamp(ocsf.time_dt, format: "%+") ?? now()
ocsf.time = to_unix_timestamp(ts)

if (!is_null(.eventType)) {
  ocsf.type_uid = 300201
  ocsf.type_name = "Authentication Audit: Logon"
}

activity = del(.eventType)

if (!is_null(activity)) {
    if (is_string(activity) && contains(string!(activity), "user.authentication")) {
        ocsf.activity_id = 1
        ocsf.activity_name = "Logon"
    } else {
        ocsf.activity_name = activity
        ocsf.activity_id = 99
    }
}

ocsf.auth_protocol = del(.authenticationContext.authenticationProvider)

if (is_null(ocsf.auth_protocol)) {
    ocsf.auth_protocol = del(.debugContext.debugData.signOnMode)
}

if (is_null(ocsf.auth_protocol)) {
    ocsf.auth_protocol = "Unknown"
    ocsf.auth_protocol_id = 0
} else if ( ocsf.auth_protocol == "FTP" || ocsf.auth_protocol == "TELNET" ) {
    ocsf.auth_protocol_id = 0
    ocsf.is_cleartext = true
} else if (ocsf.auth_protocol == "SAML 2.0") {
    ocsf.auth_protocol = "SAML"
    ocsf.auth_protocol_id = 5
    ocsf.is_cleartext = false
} else if (contains(string!(ocsf.auth_protocol), "FACTOR")) {
    ocsf.auth_protocol = "Other / MFA"
    ocsf.auth_protocol_id = 99
    ocsf.is_cleartext = false
} else {
    ocsf.auth_protocol_id = 0
}

if (!is_null(.client.geographicalContext)) {
  ocsf.enrichments = [{"name": "geographicalContext",
                       "type": "location",
                       "data": encode_json(del(.client.geographicalContext)),
                       "value": del(.client.ipAddress)}]
}

ocsf.logon_type = del(.transaction.type)

if (ocsf.logon_type == "WEB") {
    ocsf.logon_type_id = 99
}
ocsf.message = del(.displayMessage)

ocsf.session = {"uid": del(.authenticationContext.externalSessionId)}

ocsf.severity = del(.severity)

if (ocsf.severity == "INFO") {
    ocsf.severity_id = 1
} else if (!is_null(ocsf.severity)) {
    ocsf.severity_id = 0
}

ocsf.src_endpoint = {"ip": del(.client.ipAddress),
                     "interface_id": del(.client.id) || del(.client.device)}

ocsf.dst_endpoint = { "hostname": del(.debugContext.debugData.issuer) || del(.debugContext.debugData.redirectUri),
                      "svc_name": del(.debugContext.debugData.url)}

ocsf.user = {"uid": del(.actor.id),
             "type": del(.actor.type),
             "name": del(.actor.displayName)}

ocsf.dst_user = del(.actor.alternateId)

if (!is_null(ocsf.dst_user) && is_string(ocsf.dst_user) && contains(string!(ocsf.dst_user), "@")) {
  ocsf.user.email_addr = ocsf.dst_user
} else {
  ocsf.user.uid_alt = ocsf.dst_user
}

ocsf.status = del(.outcome.result)
ocsf.status_code = "N/A"
ocsf.status_id = 0

if (ocsf.status == "SUCCESS") {
    ocsf.status = "Success"
    ocsf.status_detail = activity || "LOGON_USER_INITIATED"
    ocsf.status_id = 1
}

unmapped, _ = compact(., string: true, array: true, null: true, nullish: true)
if (!is_null(unmapped) && !is_empty(unmapped)) {
  ocsf.unmapped = encode_json(unmapped)
}

. = compact(ocsf, string: true, array: true, null: true, nullish: true)
