[project]
name = "simulib"
version = "0.1.0"
description = "A library that wraps metabolic simulation methods from various frameworks and provides a common framework for input and output handling"
authors = [
    { name = "Vitor Vieira", email = "vvieira@amyris.com"},
    { name = "Joao Fonseca", email = "jfonseca@amyris.com"}
]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Natural Language :: English"
]

requires-python = ">=3.8, <3.11"

dependencies = [
  "typing_extensions",
  "matplotlib",
  "sympy",
  "cobra",
  "numpy",
  "pydantic",
  "pandas",
  "PyYAML"
]

[project.optional-dependencies]
dfba = [
    "dfba==0.1.8",
]

[dependency-groups]
dev = [
    "black",
    "jupyterlab",
    "ipywidgets>=8.1.5",
    "isort>=5.13.2",
    "commitizen>=3.31.0",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-subtests",
]

[tool.uv]
default-groups = ["dev", "test"]

[tool.pytest.ini_options]
pythonpath = [".", "./src"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.idea
)/
'''

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true

[build-system]
requires = [
    "setuptools>=42",
    "wheel"
]
build-backend = "setuptools.build_meta"

[tool.coverage.run]
source = ["src"]  # List format often used here
parallel = true
branch = true
# omit = ["src/__init__.py", "src/config/*"] # Optional

[tool.coverage.report]
show_missing = true
# fail_under = 90 # Optional
# exclude_lines = [ # Optional
#     "pragma: no cover",
#     "raise NotImplementedError",
#     "if __name__ == .__main__.:",
# ]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
# output = "coverage.xml" # Optional
