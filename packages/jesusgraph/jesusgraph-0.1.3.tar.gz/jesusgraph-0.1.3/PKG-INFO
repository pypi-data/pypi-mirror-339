Metadata-Version: 2.4
Name: jesusgraph
Version: 0.1.3
Summary: Um orquestrador de fluxos inspirado pela f√©, prop√≥sito e clareza.
Author-email: Carlos Viana <suporte@carlosviana.com>
License: MIT
Project-URL: Homepage, https://github.com/ITValley-School/Jesusgraph
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.25.1

üåü Recursos Principais
üß© Modularidade: Divida fluxos complexos em componentes menores e reutiliz√°veis
üîÑ Estado Compartilhado: Transmita dados entre n√≥s de forma consistente
üß† Flexibilidade: Organize n√≥s em qualquer padr√£o direcionado
üõ°Ô∏è Tratamento de Erros: Capture e gerencie falhas em qualquer ponto do fluxo
üîÑ Encadeabilidade: Construa grafos atrav√©s de uma API fluente e elegante
üìä Conceitos B√°sicos
N√≥s (Nodes)
Os n√≥s s√£o as unidades fundamentais de processamento. Cada n√≥ √© uma fun√ß√£o que:

Recebe um estado atual (BlessingState)
Realiza algum processamento
Retorna um estado atualizado
Arestas (Edges)
As arestas definem o fluxo entre os n√≥s, indicando a ordem de execu√ß√£o.

üß† Casos de Uso
Processamento de dados sequenciais
Fluxos de trabalho de neg√≥cios
Pipelines de ETL (Extra√ß√£o, Transforma√ß√£o, Carregamento)
Orquestra√ß√£o de microservi√ßos
Fluxos de aprova√ß√£o e valida√ß√£o
Integra√ß√£o de APIs
Automa√ß√£o de processos
ü§ù Contribui√ß√£o
Contribui√ß√µes s√£o bem-vindas! Veja como contribuir:

Fa√ßa um fork do reposit√≥rio
Crie uma branch para sua feature (git checkout -b feature/nova-funcionalidade)
Fa√ßa commit das suas mudan√ßas (git commit -m 'Adiciona nova funcionalidade')
Fa√ßa push para a branch (git push origin feature/nova-funcionalidade)
Abra um Pull Request
üìÑ Licen√ßa
Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo LICENSE para detalhes.

üìö Documenta√ß√£o Adicional
Para documenta√ß√£o detalhada e mais exemplos, visite nossa wiki.

Desenvolvido com ‚ù§Ô∏è por Carlos Viana

Estado (BlessingState)
O BlessingState √© um cont√™iner para dados compartilhados entre os n√≥s, onde cada valor √© uma "b√™n√ß√£o".

üîç Exemplo B√°sico

```python
from jesusgraph import JesusGraph, BlessingState

# Definir fun√ß√µes de processamento
def cumprimentar(blessing: BlessingState) -> BlessingState:
    nome = blessing.getBlessing("nome") or "visitante"
    blessing.addBlessing("mensagem", f"Ol√°, {nome}!")
    return blessing

def despedir(blessing: BlessingState) -> BlessingState:
    nome = blessing.getBlessing("nome") or "visitante"
    blessing.addBlessing("despedida", f"At√© logo, {nome}!")
    return blessing

# Criar e configurar o grafo
grafo = JesusGraph()

# Adicionar n√≥s
grafo.add_node("cumprimentar", cumprimentar)
grafo.add_node("despedir", despedir)

# Configurar o fluxo
grafo.set_entry_node("cumprimentar")  # Define o n√≥ inicial
grafo.connecte("cumprimentar", "despedir")  # Conecta os n√≥s
grafo.set_end_node("despedir")  # Define o n√≥ final

# Executar o grafo
resultado = grafo.run({"nome": "Jo√£o"})

# Verificar resultados
print(resultado.getBlessing("mensagem"))  # Ol√°, Jo√£o!
print(resultado.getBlessing("despedida"))  # At√© logo, Jo√£o!
```
üö¢ Exemplo Completo: Sistema de Pedidos
Veja como implementar um fluxo de processamento de pedidos:

```python
from jesusgraph import JesusGraph, BlessingState

# Fun√ß√µes de processamento
def receber_pedido(blessing: BlessingState) -> BlessingState:
    cliente = blessing.getBlessing("cliente_nome") or "Cliente An√¥nimo"
    blessing.addBlessing("pedido_id", "PED-12345")
    blessing.addBlessing("status", "RECEBIDO")
    return blessing

def calcular_valor(blessing: BlessingState) -> BlessingState:
    itens = blessing.getBlessing("itens") or []
    total = sum(item.get("preco", 0) for item in itens)
    blessing.addBlessing("valor_total", total)
    blessing.addBlessing("status", "CALCULADO")
    return blessing

def preparar_pedido(blessing: BlessingState) -> BlessingState:
    blessing.addBlessing("status", "PREPARADO")
    return blessing

def entregar_pedido(blessing: BlessingState) -> BlessingState:
    blessing.addBlessing("status", "ENTREGUE")
    blessing.addBlessing("entrega_concluida", True)
    return blessing

# Criar grafo
grafo = JesusGraph()

# Adicionar n√≥s e configurar o fluxo
grafo.add_node("receber", receber_pedido)
grafo.add_node("calcular", calcular_valor)
grafo.add_node("preparar", preparar_pedido)
grafo.add_node("entregar", entregar_pedido)

# Configurar o fluxo
grafo.set_entry_node("receber")
grafo.connecte("receber", "calcular")
grafo.connecte("calcular", "preparar")
grafo.connecte("preparar", "entregar")
grafo.set_end_node("entregar")

# Executar com dados iniciais
pedido = {
    "cliente_nome": "Maria Silva",
    "itens": [
        {"nome": "Pizza", "preco": 45.90},
        {"nome": "Refrigerante", "preco": 8.50}
    ]
}

resultado = grafo.run(pedido)
print(f"Status final: {resultado.getBlessing('status')}")
print(f"Pedido entregue: {resultado.getBlessing('entrega_concluida')}")
```

üîß API Principal
JesusGraph

# Criar um novo grafo
grafo = JesusGraph()

# Adicionar um n√≥
grafo.add_node(nome, funcao)

# Criar conex√µes entre n√≥s
grafo.add_edge(origem, destino)
grafo.connecte(origem, destino)  # Alias para add_edge

# Configurar pontos de entrada/sa√≠da
grafo.set_entry_node(nome_do_no)
grafo.set_end_node(nome_do_no)

# Executar o grafo
resultado = grafo.run(estado_inicial)

# Retomar a execu√ß√£o de um grafo pausado
resultado = grafo.resume(estado_pausado)


BlessingState

# Criar um estado vazio
estado = BlessingState()

# Adicionar uma b√™n√ß√£o
estado.addBlessing("chave", valor)

# Obter o valor de uma b√™n√ß√£o
valor = estado.getBlessing("chave")

# Verificar se uma b√™n√ß√£o existe
if estado.hasBlessing("chave"):
    # fazer algo

# Atualizar uma b√™n√ß√£o existente
estado.updateBlessing("chave", novo_valor)

# Obter todas as b√™n√ß√£os como dicion√°rio
todas_bencaos = estado.allBlessings()

# Uso como dicion√°rio
estado["chave"] = valor
valor = estado["chave"]
if "chave" in estado:
    # fazer algo

