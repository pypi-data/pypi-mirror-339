#!/usr/bin/env python3
import os
import sys
import shutil
import json
import argparse
from datetime import datetime

class SiteGenerator:
    def __init__(self, project_name='my-booking-site', template_dir=None):
        """
        Инициализация генератора сайта
        
        :param project_name: Название проекта
        :param template_dir: Директория с шаблонами (если не указана, используется встроенный)
        """
        self.project_name = project_name
        self.base_dir = os.path.abspath(os.path.dirname(__file__))
        
        # Определяем директорию шаблонов
        if template_dir:
            self.template_dir = os.path.abspath(template_dir)
        else:
            # Пробуем несколько возможных путей к шаблонам
            possible_paths = [
                os.path.join(self.base_dir, 'site_templates', 'booking'),
                os.path.join(self.base_dir, '..', 'site_templates', 'booking'),
                os.path.join(os.path.dirname(self.base_dir), 'site_templates', 'booking')
            ]
            
            # Проверяем все возможные пути
            for path in possible_paths:
                if os.path.exists(path):
                    self.template_dir = path
                    print(f"Найдена директория шаблонов: {path}")
                    break
            else:
                # Если не нашли ни один путь, используем директорию из вашей загрузки
                template_dir = os.path.join(os.getcwd(), 'my-booking-site')
                if os.path.exists(template_dir):
                    self.template_dir = template_dir
                    print(f"Найдена директория шаблонов: {template_dir}")
                else:
                    # Создаем структуру директорий для шаблонов, если её нет
                    print("Шаблоны не найдены. Проверьте структуру проекта.")
                    sys.exit(1)

    def create_project_structure(self, output_path=None):
        """
        Создание структуры проекта
        
        :param output_path: Путь для создания проекта (по умолчанию - текущая директория)
        """
        try:
            if not output_path:
                output_path = os.path.join(os.getcwd(), self.project_name)
            
            # Создаем основные директории
            dirs = [
                output_path,
                os.path.join(output_path, 'js'),
                os.path.join(output_path, 'css')
            ]
            
            for dir_path in dirs:
                os.makedirs(dir_path, exist_ok=True)
                print(f"Создана директория: {dir_path}")
            
            # Копируем содержимое директории шаблонов
            for item in os.listdir(self.template_dir):
                source = os.path.join(self.template_dir, item)
                dest = os.path.join(output_path, item)
                
                if os.path.isdir(source):
                    # Копируем директорию и ее содержимое
                    shutil.copytree(source, dest, dirs_exist_ok=True)
                    print(f"Скопирована директория: {item}")
                else:
                    # Копируем файл
                    shutil.copy2(source, dest)
                    print(f"Скопирован файл: {item}")
            
            # Создаем файл конфигурации проекта
            config = {
                "name": self.project_name,
                "version": "1.0.0",
                "description": "Booking site generated by site generator",
                "created_at": str(datetime.now())
            }
            
            with open(os.path.join(output_path, 'site_config.json'), 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=4)
            
            print(f"Проект '{self.project_name}' успешно создан в {output_path}")
            
        except Exception as e:
            print(f"Ошибка при создании проекта: {e}")
            sys.exit(1)

    def customize_project(self, config_file=None):
        """
        Кастомизация проекта на основе конфигурационного файла
        
        :param config_file: Путь к файлу конфигурации
        """
        try:
            if not config_file or not os.path.exists(config_file):
                print("Файл конфигурации не указан или не существует")
                return
            
            with open(config_file, 'r', encoding='utf-8') as f:
                custom_config = json.load(f)
            
            # Здесь можно добавить логику кастомизации сайта
            # Например, замена логотипа, цветовой схемы, контактных данных и т.д.
            print("Проект успешно кастомизирован")
        except json.JSONDecodeError:
            print("Ошибка парсинга JSON-файла конфигурации")
        except Exception as e:
            print(f"Ошибка кастомизации: {e}")

def main():
    try:
        parser = argparse.ArgumentParser(description='Генератор сайта для системы бронирования')
        parser.add_argument('action', choices=['create', 'customize'], 
                            help='Действие: создание или кастомизация проекта')
        parser.add_argument('--name', default='my-booking-site', 
                            help='Название проекта (по умолчанию: my-booking-site)')
        parser.add_argument('--output', 
                            help='Путь для создания проекта')
        parser.add_argument('--config', 
                            help='Путь к файлу конфигурации для кастомизации')
        parser.add_argument('--verbose', action='store_true',
                            help='Выводить подробную информацию')
        
        args = parser.parse_args()
        
        generator = SiteGenerator(project_name=args.name)
        
        if args.action == 'create':
            generator.create_project_structure(args.output)
        elif args.action == 'customize':
            if not args.config:
                print("Для кастомизации требуется файл конфигурации (--config)")
                sys.exit(1)
            generator.customize_project(args.config)
    except KeyboardInterrupt:
        print("\nОперация прервана пользователем")
        sys.exit(1)
    except Exception as e:
        print(f"Непредвиденная ошибка: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()