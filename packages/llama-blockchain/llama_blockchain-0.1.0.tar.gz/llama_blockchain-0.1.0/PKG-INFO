Metadata-Version: 2.4
Name: llama-blockchain
Version: 0.1.0
Summary: Blockchain components for the LlamaAI Ecosystem (verification, contracts, provenance).
Project-URL: Homepage, https://github.com/yourusername/llamasearchai-git2-copy
Author-email: Your Name / Llama Team <your.email@example.com>
License: MIT
License-File: LICENSE
Keywords: blockchain,contract,llama,nft,provenance,verification
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Description-Content-Type: text/markdown

# llama-blockchain

[![PyPI version](https://img.shields.io/pypi/v/llama_blockchain.svg)](https://pypi.org/project/llama_blockchain/)
[![License](https://img.shields.io/github/license/llamasearchai/llama-blockchain)](https://github.com/llamasearchai/llama-blockchain/blob/main/LICENSE)
[![Python Version](https://img.shields.io/pypi/pyversions/llama_blockchain.svg)](https://pypi.org/project/llama_blockchain/)
[![CI Status](https://github.com/llamasearchai/llama-blockchain/actions/workflows/llamasearchai_ci.yml/badge.svg)](https://github.com/llamasearchai/llama-blockchain/actions/workflows/llamasearchai_ci.yml)

**Llama Blockchain (llama-blockchain)** is a comprehensive toolkit for interacting with blockchain technologies within the LlamaSearch AI ecosystem. It offers modules for managing various blockchain elements like smart contracts, DAOs, NFTs, tokens, cryptographic keys, transaction verification, zero-knowledge proofs, and data provenance.

## Key Features

- **Smart Contract Interaction:** Tools for validating and potentially interacting with smart contracts (`contract_validator.py`).
- **DAO Management:** Components for managing Decentralized Autonomous Organizations (`dao-manager.py`).
- **NFT Management:** Functionality for handling Non-Fungible Tokens (`nft_manager.py`).
- **Token Management:** Tools for managing fungible tokens (`token-manager.py`).
- **Key Management:** Secure handling of cryptographic keys (`key-manager.py`).
- **Blockchain Verification:** Utilities for verifying blockchain data or transactions (`blockchain-verifier.py`).
- **Provenance Tracking:** Tools to track data origin and history on the blockchain (`provenance-tracker.py`).
- **Zero-Knowledge Proofs:** Includes components related to ZK proofs (`zk_prover.py`).
- **Transaction Utilities:** Helper functions for blockchain transactions (`transaction_utils.py`).
- **Configurable:** Settings and configuration management (`config.py`, `settings.py`).
- **Core Orchestration:** A central module (`core.py`) likely integrates these components.

## Installation

```bash
pip install llama-blockchain
# Or install directly from GitHub for the latest version:
# pip install git+https://github.com/llamasearchai/llama-blockchain.git
```

## Usage

*(Usage examples for interacting with contracts, managing tokens/NFTs, verifying data, etc., will be added here.)*

```python
# Placeholder for Python client usage
# from llama_blockchain import BlockchainClient, ContractConfig

# config = ContractConfig.load("config.yaml")
# client = BlockchainClient(config)

# # Example: Validate a contract
# is_valid = client.validate_contract(address="0x...")
# print(f"Contract valid: {is_valid}")

# # Example: Get token balance
# balance = client.get_token_balance(token_address="0x...", user_address="0x...")
# print(f"Token balance: {balance}")

# # Example: Track provenance
# provenance_id = client.track_data(data="some important data")
# print(f"Provenance ID: {provenance_id}")
```

## Architecture Overview

```mermaid
graph TD
    A[User / Application] --> B{Core Orchestrator (core.py)};

    subgraph Managers
        C[DAO Manager] -- Interacts --> B;
        D[NFT Manager] -- Interacts --> B;
        E[Token Manager] -- Interacts --> B;
        F[Key Manager] -- Interacts --> B;
        R[Ranking Manager] -- Interacts --> B;
    end

    subgraph Validation & Proofs
        G[Contract Validator] -- Interacts --> B;
        H[Blockchain Verifier] -- Interacts --> B;
        I[ZK Prover] -- Interacts --> B;
    end

    subgraph Tracking & Utilities
        J[Provenance Tracker] -- Interacts --> B;
        K[Transaction Utils] -- Used by --> B;
        L[Exceptions] -- Used by --> B;
    end

    M[Configuration (config.py, settings.py)] -- Configures --> B;
    M -- Configures --> C;
    M -- Configures --> D;
    M -- Configures --> E;
    M -- Configures --> F;
    M -- Configures --> G;
    M -- Configures --> H;
    M -- Configures --> I;
    M -- Configures --> J;

    B --> N((Blockchain Network / Nodes));

    style B fill:#f9f,stroke:#333,stroke-width:2px
    style N fill:#ccf,stroke:#333,stroke-width:1px
```

1.  **Core Orchestrator:** The central point (`core.py`) managing interactions with various blockchain components.
2.  **Managers:** Dedicated modules handle specific areas like DAOs, NFTs, Tokens, Keys, and Ranking.
3.  **Validation/Proofs:** Components for contract validation, general blockchain verification, and ZK proofs.
4.  **Tracking/Utilities:** Tools for data provenance and transaction helpers.
5.  **Configuration:** Settings control the behavior of the toolkit.
6.  **Network Interaction:** The core module communicates with the underlying blockchain network.

## Configuration

*(Details on configuring blockchain node connections, contract addresses, gas settings, key storage, etc., will be added here.)*

## Development

### Setup

```bash
# Clone the repository
git clone https://github.com/llamasearchai/llama-blockchain.git
cd llama-blockchain

# Install in editable mode with development dependencies
pip install -e ".[dev]"
```

### Testing

```bash
pytest tests/
```

### Contributing

Contributions are welcome! Please refer to [CONTRIBUTING.md](CONTRIBUTING.md) and submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
