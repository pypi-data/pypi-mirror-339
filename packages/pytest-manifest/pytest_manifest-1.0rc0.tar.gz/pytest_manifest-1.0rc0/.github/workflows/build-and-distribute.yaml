name: Publish release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      target-branch:
        required: true
        type: string
    secrets:
      pypi-token:
        required: true
        description: 'PyPI token for publishing packages'

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          persist-credentials: false
          ref: ${{ inputs.version }}

      - name: Install uv & prepare python
        uses: astral-sh/setup-uv@v5

      - name: Build distribution artifacts
        run: uv build

      - name: Store distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: dist/

  publish-to-pypi:
    name: Publish distribution to PyPI
    runs-on: ubuntu-latest
    needs: 
    - build
    permissions:
      id-token: write
    
    steps:
    - name: Download distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/
    - name: Upload distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.pypi-token }}
        repository-url: https://pypi.org/legacy/

  publish-to-github:
    name: Publish distribution to GitHub
    runs-on: ubuntu-latest
    needs:
    - build
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/

    - name: Sign the artifacts with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: ./dist/*.tar.gz ./dist/*.whl

    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [[ "${{ inputs.version }}" == *rc* ]]; then
          prerelease_flag="--prerelease"
        else
          prerelease_flag=""
        fi
        gh release create ${{ inputs.version }} --verify-tag \
          --repo ${{ github.repository }} \
          --target ${{ inputs.target-branch }} \
          --generate-notes \
          $prerelease_flag
 
    - name: Upload artifact signatures to GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ inputs.version }} dist/** --repo ${{ github.repository }}
