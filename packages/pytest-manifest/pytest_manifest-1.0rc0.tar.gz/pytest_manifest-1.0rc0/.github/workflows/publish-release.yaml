name: Publish release

on:
  pull_request:
    branches:
      - master
      - release
    types:
      - closed

jobs:
  get-touched-files:
    name: Get touched files
    runs-on: ubuntu-latest
    outputs:
      touched: ${{ steps.get-touched-files.outputs.touched }}
    steps:
      - uses: actions/checkout@v4

      - name: Get touched files
        id: get-touched-files
        uses: ./.github/actions/touched-files
        with:
          pathspec: 'src/ pyproject.toml'

  tag-version:
    name: Tag version
    needs: get-touched-files
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && needs.get-touched-files.outputs.touched }}
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.create-tag.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}

      - name: Determine version segment to bump
        run: |
          echo ${{ needs.get-touched-files.outputs.touched }}
          case ${{ github.base_ref }} in
            master)
              case ${{ github.head_ref }} in
                release)
                  echo "VERSION_SEGMENT=minor" >> $GITHUB_ENV
                  ;;
                *)
                  echo "VERSION_SEGMENT=patch" >> $GITHUB_ENV
                  ;;
              esac
              ;;
            release)
              echo "VERSION_SEGMENT=patch" >> $GITHUB_ENV
              ;;
            *)
              echo "Error: Unsupported base branch ${{ github.base_ref }}" >&2
              exit 1
              ;;
          esac

      - name: Create tag
        id: create-tag
        run: |
          git fetch --unshallow
          version=$(git describe --tags --abbrev=0)
          new_version=$(scripts/bump-version.sh ${{ env.VERSION_SEGMENT }} $version)
          echo "Bumping $version to $new_version"
          git tag $new_version
          git push origin $new_version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

  publish-release:
    name: Publish release
    needs: tag-version
    uses: ./.github/workflows/build-and-distribute.yaml
    with:
      target-branch: ${{ github.base_ref }}
      version: ${{ needs.tag-version.outputs.new_version }}
    secrets:
      pypi-token: ${{ secrets.PYPI_TOKEN }}
    permissions:
      contents: write
      id-token: write

  sync-main:
    name: Sync main
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}
          
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          workflow=$(echo '${{ github.workflow }}' | tr '[:upper:]' '[:lower:]')
          body='Auto-generated by the ['$workflow'](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) workflow.'
          url=$(gh pr create -B main -H ${{ github.base_ref }} --title 'Sync main with ${{ github.base_ref }}' --body "$body")
          gh pr merge $url --auto --merge
          # gh pr review $url --approve

  sync-release:
    name: Sync release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.head_ref != 'release' && github.base_ref == 'master'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}

      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          git fetch --unshallow
          if [[ -n $(git ls-remote --heads origin release) ]]; then
            workflow=$(echo '${{ github.workflow }}' | tr '[:upper:]' '[:lower:]')
            body='Auto-generated by the ['$workflow'](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) workflow.'
            url=$(gh pr create -B release -H ${{ github.base_ref }} --title 'Sync release with ${{ github.base_ref }}' --body "$body")
            gh pr merge $url --auto --merge
            # gh pr review $url --approve
          else
            echo "Release branch not found, skipping."
          fi

  drop-release:
    name: Drop release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.head_ref == 'release' && github.base_ref == 'master'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}

      - name: Drop release branch
        run: |
          git fetch --unshallow
          if [[ -n $(git ls-remote --heads origin release) ]]; then
            git push origin --delete release
          else
            echo "Release branch not found, skipping."
          fi
