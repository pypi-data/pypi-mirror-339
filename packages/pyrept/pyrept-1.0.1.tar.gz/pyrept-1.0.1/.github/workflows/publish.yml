name: Auto Tag + Publish to PyPI for pyrept package

on:
  pull_request:
    types: [closed]
    branches:
      - master

permissions:
  contents: write
  id-token: write

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Run coverage
        run: |
          pip install -r requirements.txt
          pytest --cov --cov-branch --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Get PR title
        id: pr_title
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (!pr.data.merged) {
              core.setFailed("‚ùå PR was closed but not merged.");
              return;
            }
            const title = pr.data.title;
            console.log("üîç PR title:", title);
            core.setOutput("title", title);

      - name: Bump version based on PR title
        id: bump
        run: |
          version="${{ steps.get_latest_tag.outputs.tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"
          pr_title="${{ steps.pr_title.outputs.title }}"
          if [[ "$pr_title" == \[MAJOR\]* ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "$pr_title" == \[MINOR\]* ]]; then
            minor=$((minor + 1)); patch=0
          elif [[ "$pr_title" == \[PATCH\]* ]]; then
            patch=$((patch + 1))
          else
            echo "Missing Version Bump Type. Hence Defaulting to PATCH"
            patch=$((patch + 1))
          fi
          new_tag="v$major.$minor.$patch"
          echo "üì¶ New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "pankajnayak1994"
          git config user.email "nayakpankaj2015@gmail.com"
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      - name: Update version in setup.py (optional)
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: Upload to PyPI
        run: twine upload dist/* --verbose
