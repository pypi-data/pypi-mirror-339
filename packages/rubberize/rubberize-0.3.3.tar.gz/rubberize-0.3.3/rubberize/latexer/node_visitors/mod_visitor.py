"""Node visitor for `mod` nodes."""

import ast
from typing import Any, Optional

from rubberize import exceptions
from rubberize.latexer.stmt_latex import StmtLatex
from rubberize.latexer.node_visitors.stmt_visitor import StmtVisitor


# pylint: disable=invalid-name
class ModVistor(ast.NodeVisitor):
    """Visitor for `mod` nodes of an AST. Each node visitor returns a
    `list[StmtLatex]`.
    """

    def __init__(self, namespace: Optional[dict[str, Any]] = None) -> None:
        super().__init__()
        self.namespace = namespace

    # pylint: disable-next=useless-parent-delegation
    def visit(self, node: ast.AST) -> list[StmtLatex]:
        """Visit a node."""
        return super().visit(node)

    def generic_visit(self, node: ast.AST) -> None:
        """Called if no visitor method is defined for a node."""

        raise exceptions.RubberizeNotImplementedError(
            f"Unsupported mod node: {type(node).__name__!r}"
        )

    def visit_Module(self, node: ast.Module) -> list[StmtLatex]:
        """Visit an AST generated by `ast.parse()` in `"exec"` mode."""

        return StmtVisitor(self.namespace).loop_body(node.body)

    def visit_Expression(self, node: ast.Expression) -> list[StmtLatex]:
        """Visit an AST generated by `ast.parse()` in `"eval"` mode."""

        return StmtVisitor(self.namespace).loop_body([ast.Expr(node.body)])

    def visit_Interactive(self, node: ast.Interactive) -> list[StmtLatex]:
        """Visit an AST generated by `ast.parse()` in `"single"` mode."""

        return StmtVisitor(self.namespace).loop_body(node.body)
