.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "mkdocs-manpage API" "3" "2025-01-02" "mkdocs-manpage v2.0.1.dev12+g3204f71" "Python Library APIs"
.SH mkdocs_manpage
.PP
MkDocs Manpage package.
.PP
MkDocs plugin to generate a manpage from the documentation site.
.PP
Modules:
.IP \[bu] 2
\f[B]\f[CB]config\f[B]\f[R] \[en]
.RS 2
.PP
Configuration options for the MkDocs Manpage plugin.
.RE
.IP \[bu] 2
\f[B]\f[CB]debug\f[B]\f[R] \[en]
.RS 2
.PP
Debugging utilities.
.RE
.IP \[bu] 2
\f[B]\f[CB]logger\f[B]\f[R] \[en]
.RS 2
.PP
Logging functions.
.RE
.IP \[bu] 2
\f[B]\f[CB]plugin\f[B]\f[R] \[en]
.RS 2
.PP
MkDocs plugin that generates a manpage at the end of the build.
.RE
.IP \[bu] 2
\f[B]\f[CB]preprocess\f[B]\f[R] \[en]
.RS 2
.PP
HTML pre\-processing.
.RE
.SH config
.PP
Configuration options for the MkDocs Manpage plugin.
.PP
Classes:
.IP \[bu] 2
\f[B]\f[CB]PageConfig\f[B]\f[R] \[en]
.RS 2
.PP
Sub\-config for each manual page.
.RE
.IP \[bu] 2
\f[B]\f[CB]PluginConfig\f[B]\f[R] \[en]
.RS 2
.PP
Configuration options for the plugin.
.RE
.SS PageConfig
.PP
Bases: \f[CR]Config\f[R]
.PP
Sub\-config for each manual page.
.SS PluginConfig
.PP
Bases: \f[CR]Config\f[R]
.PP
Configuration options for the plugin.
.SH debug
.PP
Debugging utilities.
.PP
Classes:
.IP \[bu] 2
\f[B]\f[CB]Environment\f[B]\f[R] \[en]
.RS 2
.PP
Dataclass to store environment information.
.RE
.IP \[bu] 2
\f[B]\f[CB]Package\f[B]\f[R] \[en]
.RS 2
.PP
Dataclass describing a Python package.
.RE
.IP \[bu] 2
\f[B]\f[CB]Variable\f[B]\f[R] \[en]
.RS 2
.PP
Dataclass describing an environment variable.
.RE
.PP
Functions:
.IP \[bu] 2
\f[B]\f[CB]get_debug_info\f[B]\f[R] \[en]
.RS 2
.PP
Get debug/environment information.
.RE
.IP \[bu] 2
\f[B]\f[CB]get_version\f[B]\f[R] \[en]
.RS 2
.PP
Get version of the given distribution.
.RE
.IP \[bu] 2
\f[B]\f[CB]print_debug_info\f[B]\f[R] \[en]
.RS 2
.PP
Print debug/environment information.
.RE
.SS Environment  \f[CR]dataclass\f[R] 
.IP
.EX
Environment(
    interpreter_name: str,
    interpreter_version: str,
    interpreter_path: str,
    platform: str,
    packages: list[Package],
    variables: list[Variable],
)
.EE
.PP
Dataclass to store environment information.
.PP
Attributes:
.IP \[bu] 2
\f[B]\f[CB]interpreter_name\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Python interpreter name.
.RE
.IP \[bu] 2
\f[B]\f[CB]interpreter_path\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Path to Python executable.
.RE
.IP \[bu] 2
\f[B]\f[CB]interpreter_version\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Python interpreter version.
.RE
.IP \[bu] 2
\f[B]\f[CB]packages\f[B]\f[R] (\f[CR]list[Package]\f[R]) \[en]
.RS 2
.PP
Installed packages.
.RE
.IP \[bu] 2
\f[B]\f[CB]platform\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Operating System.
.RE
.IP \[bu] 2
\f[B]\f[CB]variables\f[B]\f[R] (\f[CR]list[Variable]\f[R]) \[en]
.RS 2
.PP
Environment variables.
.RE
.SS interpreter_name  \f[CR]instance\-attribute\f[R] 
.IP
.EX
interpreter_name: str
.EE
.PP
Python interpreter name.
.SS interpreter_path  \f[CR]instance\-attribute\f[R] 
.IP
.EX
interpreter_path: str
.EE
.PP
Path to Python executable.
.SS interpreter_version  \f[CR]instance\-attribute\f[R] 
.IP
.EX
interpreter_version: str
.EE
.PP
Python interpreter version.
.SS packages  \f[CR]instance\-attribute\f[R] 
.IP
.EX
packages: list[Package]
.EE
.PP
Installed packages.
.SS platform  \f[CR]instance\-attribute\f[R] 
.IP
.EX
platform: str
.EE
.PP
Operating System.
.SS variables  \f[CR]instance\-attribute\f[R] 
.IP
.EX
variables: list[Variable]
.EE
.PP
Environment variables.
.SS Package  \f[CR]dataclass\f[R] 
.IP
.EX
Package(name: str, version: str)
.EE
.PP
Dataclass describing a Python package.
.PP
Attributes:
.IP \[bu] 2
\f[B]\f[CB]name\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Package name.
.RE
.IP \[bu] 2
\f[B]\f[CB]version\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Package version.
.RE
.SS name  \f[CR]instance\-attribute\f[R] 
.IP
.EX
name: str
.EE
.PP
Package name.
.SS version  \f[CR]instance\-attribute\f[R] 
.IP
.EX
version: str
.EE
.PP
Package version.
.SS Variable  \f[CR]dataclass\f[R] 
.IP
.EX
Variable(name: str, value: str)
.EE
.PP
Dataclass describing an environment variable.
.PP
Attributes:
.IP \[bu] 2
\f[B]\f[CB]name\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Variable name.
.RE
.IP \[bu] 2
\f[B]\f[CB]value\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
Variable value.
.RE
.SS name  \f[CR]instance\-attribute\f[R] 
.IP
.EX
name: str
.EE
.PP
Variable name.
.SS value  \f[CR]instance\-attribute\f[R] 
.IP
.EX
value: str
.EE
.PP
Variable value.
.SS get_debug_info
.IP
.EX
get_debug_info() \-> Environment
.EE
.PP
Get debug/environment information.
.PP
Returns:
.IP \[bu] 2
\f[CR]Environment\f[R] \[en]
.RS 2
.PP
Environment information.
.RE
.SS get_version
.IP
.EX
get_version(dist: str = \[aq]mkdocs\-manpage\[aq]) \-> str
.EE
.PP
Get version of the given distribution.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]dist\f[B]\f[R] (\f[CR]str\f[R], default: \f[CR]\[aq]mkdocs\-manpage\[aq]\f[R] ) \[en]
.RS 2
.PP
A distribution name.
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]str\f[R] \[en]
.RS 2
.PP
A version number.
.RE
.SS print_debug_info
.IP
.EX
print_debug_info() \-> None
.EE
.PP
Print debug/environment information.
.SH logger
.PP
Logging functions.
.PP
Classes:
.IP \[bu] 2
\f[B]\f[CB]PluginLogger\f[B]\f[R] \[en]
.RS 2
.PP
A logger adapter to prefix messages with the originating package name.
.RE
.PP
Functions:
.IP \[bu] 2
\f[B]\f[CB]get_logger\f[B]\f[R] \[en]
.RS 2
.PP
Return a logger for plugins.
.RE
.SS PluginLogger
.IP
.EX
PluginLogger(prefix: str, logger: Logger)
.EE
.PP
Bases: \f[CR]LoggerAdapter\f[R]
.PP
A logger adapter to prefix messages with the originating package name.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]prefix\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The string to insert in front of every message.
.RE
.IP \[bu] 2
\f[B]\f[CB]logger\f[B]\f[R] (\f[CR]Logger\f[R]) \[en]
.RS 2
.PP
The logger instance.
.RE
.PP
Methods:
.IP \[bu] 2
\f[B]\f[CB]process\f[B]\f[R] \[en]
.RS 2
.PP
Process the message.
.RE
.SS process
.IP
.EX
process(
    msg: str, kwargs: MutableMapping[str, Any]
) \-> tuple[str, Any]
.EE
.PP
Process the message.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]msg\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The message:
.RE
.IP \[bu] 2
\f[B]\f[CB]kwargs\f[B]\f[R] (\f[CR]MutableMapping[str, Any]\f[R]) \[en]
.RS 2
.PP
Remaining arguments.
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]tuple[str, Any]\f[R] \[en]
.RS 2
.PP
The processed message.
.RE
.SS get_logger
.IP
.EX
get_logger(name: str) \-> PluginLogger
.EE
.PP
Return a logger for plugins.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]name\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The name to use with \f[CR]logging.getLogger\f[R].
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]PluginLogger\f[R] \[en]
.RS 2
.PP
A logger configured to work well in MkDocs, prefixing each message with the plugin package name.
.RE
.SH plugin
.PP
MkDocs plugin that generates a manpage at the end of the build.
.PP
Classes:
.IP \[bu] 2
\f[B]\f[CB]MkdocsManpagePlugin\f[B]\f[R] \[en]
.RS 2
.PP
The MkDocs plugin to generate manpages.
.RE
.SS MkdocsManpagePlugin
.IP
.EX
MkdocsManpagePlugin()
.EE
.PP
Bases: \f[CR]BasePlugin[PluginConfig]\f[R]
.PP
The MkDocs plugin to generate manpages.
.PP
This plugin defines the following event hooks:
.IP \[bu] 2
\f[CR]on_page_content\f[R]
.IP \[bu] 2
\f[CR]on_post_build\f[R]
.PP
Check the \c
.UR https://www.mkdocs.org/user-guide/plugins/#developing-plugins
Developing Plugins
.UE \c
\ page of \f[CR]mkdocs\f[R] for more information about its plugin system.
.PP
Methods:
.IP \[bu] 2
\f[B]\f[CB]on_config\f[B]\f[R] \[en]
.RS 2
.PP
Save the global MkDocs configuration.
.RE
.IP \[bu] 2
\f[B]\f[CB]on_files\f[B]\f[R] \[en]
.RS 2
.PP
Expand inputs for manual pages.
.RE
.IP \[bu] 2
\f[B]\f[CB]on_page_content\f[B]\f[R] \[en]
.RS 2
.PP
Record pages contents.
.RE
.IP \[bu] 2
\f[B]\f[CB]on_post_build\f[B]\f[R] \[en]
.RS 2
.PP
Combine all recorded pages contents and convert it to a manual page with Pandoc.
.RE
.SS on_config
.IP
.EX
on_config(config: MkDocsConfig) \-> MkDocsConfig | None
.EE
.PP
Save the global MkDocs configuration.
.PP
Hook for the \c
.UR https://www.mkdocs.org/user-guide/plugins/#on_config
\f[CR]on_config\f[R] event
.UE \c
\&.
In this hook, we save the global MkDocs configuration into an instance variable, to re\-use it later.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]config\f[B]\f[R] (\f[CR]MkDocsConfig\f[R]) \[en]
.RS 2
.PP
The MkDocs config object.
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]MkDocsConfig | None\f[R] \[en]
.RS 2
.PP
The same, untouched config.
.RE
.SS on_files
.IP
.EX
on_files(
    files: Files, *, config: MkDocsConfig
) \-> Files | None
.EE
.PP
Expand inputs for manual pages.
.PP
Hook for the \c
.UR https://www.mkdocs.org/user-guide/plugins/#on_files
\f[CR]on_files\f[R] event
.UE \c
\&.
In this hook we expand inputs for each manual pages (glob patterns using \f[CR]*\f[R]).
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]files\f[B]\f[R] (\f[CR]Files\f[R]) \[en]
.RS 2
.PP
The collection of MkDocs files.
.RE
.IP \[bu] 2
\f[B]\f[CB]config\f[B]\f[R] (\f[CR]MkDocsConfig\f[R]) \[en]
.RS 2
.PP
The MkDocs configuration.
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]Files | None\f[R] \[en]
.RS 2
.PP
Modified collection or none.
.RE
.SS on_page_content
.IP
.EX
on_page_content(
    html: str, *, page: Page, **kwargs: Any
) \-> str | None
.EE
.PP
Record pages contents.
.PP
Hook for the \c
.UR https://www.mkdocs.org/user-guide/plugins/#on_page_content
\f[CR]on_page_content\f[R] event
.UE \c
\&.
In this hook we simply record the HTML of the pages into a dictionary whose keys are the pages\[aq] URIs.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]html\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The page HTML.
.RE
.IP \[bu] 2
\f[B]\f[CB]page\f[B]\f[R] (\f[CR]Page\f[R]) \[en]
.RS 2
.PP
The page object.
.RE
.SS on_post_build
.IP
.EX
on_post_build(config: MkDocsConfig, **kwargs: Any) \-> None
.EE
.PP
Combine all recorded pages contents and convert it to a manual page with Pandoc.
.PP
Hook for the \c
.UR https://www.mkdocs.org/user-guide/plugins/#on_post_build
\f[CR]on_post_build\f[R] event
.UE \c
\&.
In this hook we concatenate all previously recorded HTML, and convert it to a manual page with Pandoc.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]config\f[B]\f[R] (\f[CR]MkDocsConfig\f[R]) \[en]
.RS 2
.PP
MkDocs configuration.
.RE
.SH preprocess
.PP
HTML pre\-processing.
.PP
Functions:
.IP \[bu] 2
\f[B]\f[CB]preprocess\f[B]\f[R] \[en]
.RS 2
.PP
Pre\-process HTML with user\-defined functions.
.RE
.SS preprocess
.IP
.EX
preprocess(html: str, module_path: str, output: str) \-> str
.EE
.PP
Pre\-process HTML with user\-defined functions.
.PP
Parameters:
.IP \[bu] 2
\f[B]\f[CB]html\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The HTML to process before conversion to a manpage.
.RE
.IP \[bu] 2
\f[B]\f[CB]module_path\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The path of a Python module containing a \f[CR]preprocess\f[R] function.
The function must accept one and only one argument called \f[CR]soup\f[R].
The \f[CR]soup\f[R] argument is an instance of \f[CR]bs4.BeautifulSoup\f[R].
.RE
.IP \[bu] 2
\f[B]\f[CB]output\f[B]\f[R] (\f[CR]str\f[R]) \[en]
.RS 2
.PP
The output path of the relevant manual page.
.RE
.PP
Returns:
.IP \[bu] 2
\f[CR]str\f[R] \[en]
.RS 2
.PP
The processed HTML.
.RE
