import pytest\nimport asyncio\nfrom unittest.mock import patch, MagicMock\n\nfrom pydantic import HttpUrl\n\n# Assume WebSurferAgent will be in this location\nfrom agentic_kernel.agents.web_surfer_agent import WebSurferAgent\nfrom agentic_kernel.plugins.web_surfer import WebSearchResult # Needed for mocking return type\n\n# Mock data\nMOCK_SEARCH_QUERY = \"large language models\"\nMOCK_SEARCH_RESULTS = [\n    WebSearchResult(title=\"LLM Title 1\", url=\"https://example.com/llm1\", snippet=\"Snippet 1\", source=\"TestSource\"),\n    WebSearchResult(title=\"LLM Title 2\", url=\"https://example.com/llm2\", snippet=\"Snippet 2\", source=\"TestSource\")\n]\nMOCK_URL_TO_SUMMARIZE = HttpUrl(\"https://example.com/article\")\nMOCK_SUMMARY = \"This is a summary of the article content.\"\nMOCK_INVALID_URL_STRING = \"htp:/invalid-url\"\n\n@pytest.fixture\ndef mock_plugin():\n    \"\"\"Fixture to create a mock WebSurferPlugin.\"\"\"\n    plugin = MagicMock()\n    plugin.web_search.return_value = MOCK_SEARCH_RESULTS\n    plugin.summarize_webpage.return_value = MOCK_SUMMARY\n    return plugin\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\') # Patch the plugin import within the agent file\nasync def test_web_surfer_agent_initialization(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test that the agent initializes correctly and instantiates the plugin.\"\"\"\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    assert agent.name == \"WebSurfer\"\n    assert agent.plugin is not None\n    MockWebSurferPlugin.assert_called_once() # Check plugin was instantiated\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_execute_search_task(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test executing a search task.\"\"\"\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    \n    result = await agent.execute_task(task_description=MOCK_SEARCH_QUERY)\n    \n    assert result['status'] == 'success'\n    assert 'search_results' in result['output']\n    assert len(result['output']['search_results']) == len(MOCK_SEARCH_RESULTS)\n    # Use model_dump() for comparison if Pydantic v2\n    assert result['output']['search_results'] == [r.model_dump() for r in MOCK_SEARCH_RESULTS]\n    mock_plugin.web_search.assert_called_once_with(query=MOCK_SEARCH_QUERY)\n    mock_plugin.summarize_webpage.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_execute_summarize_task_url_in_description(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test executing a summarization task with URL in description.\"\"\"\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    task_desc = f\"Please summarize the article at {MOCK_URL_TO_SUMMARIZE}\"\n    \n    result = await agent.execute_task(task_description=task_desc)\n    \n    assert result['status'] == 'success'\n    assert result['output'] == {'summary': MOCK_SUMMARY}\n    mock_plugin.summarize_webpage.assert_called_once_with(url=MOCK_URL_TO_SUMMARIZE)\n    mock_plugin.web_search.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_execute_summarize_task_url_in_context(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test executing a summarization task with URL in context.\"\"\"\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    context = {'url': str(MOCK_URL_TO_SUMMARIZE)} # Context needs string URL\n    task_desc = \"Summarize the provided URL.\"\n    \n    result = await agent.execute_task(task_description=task_desc, context=context)\n    \n    assert result['status'] == 'success'\n    assert result['output'] == {'summary': MOCK_SUMMARY}\n    mock_plugin.summarize_webpage.assert_called_once_with(url=MOCK_URL_TO_SUMMARIZE)\n    mock_plugin.web_search.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_execute_invalid_url_in_description(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test handling of an invalid URL in the description.\"\"\"\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    task_desc = f\"Summarize this: {MOCK_INVALID_URL_STRING}\"\n    \n    result = await agent.execute_task(task_description=task_desc)\n    \n    assert result['status'] == 'failure'\n    assert 'Invalid URL format' in result['error_message']\n    assert MOCK_INVALID_URL_STRING in result['error_message']\n    mock_plugin.summarize_webpage.assert_not_called()\n    mock_plugin.web_search.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_handle_search_error(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test handling exceptions during web search.\"\"\"\n    mock_plugin.web_search.side_effect = Exception(\"Search API down\")\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    \n    result = await agent.execute_task(task_description=MOCK_SEARCH_QUERY)\n    \n    assert result['status'] == 'failure'\n    assert 'An unexpected error occurred during web search' in result['error_message']\n    assert 'Search API down' in result['error_message']\n    mock_plugin.web_search.assert_called_once_with(query=MOCK_SEARCH_QUERY)\n    mock_plugin.summarize_webpage.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_handle_summarization_error(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test handling exceptions during summarization.\"\"\"\n    mock_plugin.summarize_webpage.side_effect = Exception(\"Network error\")\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    task_desc = f\"Summarize {MOCK_URL_TO_SUMMARIZE}\"\n    \n    result = await agent.execute_task(task_description=task_desc)\n    \n    assert result['status'] == 'failure'\n    assert 'An unexpected error occurred during summarization' in result['error_message']\n    assert 'Network error' in result['error_message']\n    mock_plugin.summarize_webpage.assert_called_once_with(url=MOCK_URL_TO_SUMMARIZE)\n    mock_plugin.web_search.assert_not_called()\n\n@pytest.mark.asyncio\n@patch(\'agentic_kernel.agents.web_surfer_agent.WebSurferPlugin\')\nasync def test_handle_plugin_summarization_error_string(MockWebSurferPlugin, mock_plugin):\n    \"\"\"Test handling error string returned by the plugin's summarize function.\"\"\"\n    error_string = \"Error summarizing webpage: Timeout\"\n    mock_plugin.summarize_webpage.return_value = error_string\n    MockWebSurferPlugin.return_value = mock_plugin\n    agent = WebSurferAgent()\n    task_desc = f\"Summarize {MOCK_URL_TO_SUMMARIZE}\"\n\n    result = await agent.execute_task(task_description=task_desc)\n\n    assert result['status'] == 'failure'\n    assert result['error_message'] == error_string\n    mock_plugin.summarize_webpage.assert_called_once_with(url=MOCK_URL_TO_SUMMARIZE)\n    mock_plugin.web_search.assert_not_called() 