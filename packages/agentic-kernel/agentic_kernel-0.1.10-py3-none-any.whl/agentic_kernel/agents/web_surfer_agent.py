import re\nfrom typing import Dict, Any, Optional, List\n\nfrom pydantic import HttpUrl, ValidationError\n\nfrom agentic_kernel.agents.base import BaseAgent\nfrom agentic_kernel.plugins.web_surfer import WebSurferPlugin, WebSearchResult\n\n# Simple regex to find potential URLs\nURL_PATTERN = re.compile(r\'https?://[^\s]+\')\n\nclass WebSurferAgent(Agent):\n    """An agent that utilizes the WebSurferPlugin to search the web and summarize pages."""\n\n    def __init__(self, name: str = "WebSurfer", description: Optional[str] = None, config: Optional[Dict[str, Any]] = None):\n        super().__init__(\n            name=name,\n            description=description or "Performs web searches and summarizes webpage content.",\n            config=config\n        )\n        # Pass plugin-specific config if provided under a \'plugin_config\' key\n        plugin_config = self.config.get(\'plugin_config\', {})\n        self.plugin = WebSurferPlugin(**plugin_config)\n        print(f"WebSurferAgent \'{self.name}\' initialized.")\n\n    async def execute_task(self, task_description: str, context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        """Executes a web search or webpage summarization task.\n\n        Determines the action based on the task_description or context.\n        Looks for URLs to trigger summarization, otherwise defaults to search.\n\n        Args:\n            task_description: The task to perform (e.g., "search for large language models", "summarize https://example.com").\n            context: Optional context, might contain a URL under \'url\' key.\n\n        Returns:\n            A dictionary with execution status and results.\n        """\n        url_to_summarize: Optional[HttpUrl] = None\n        search_query: Optional[str] = None\n\n        # 1. Check context for a URL first\n        if context and \'url\' in context:\n            try:\n                # Attempt to parse URL from context\n                url_to_summarize = HttpUrl(str(context[\'url\']))\n            except (ValidationError, TypeError):\n                 # Ignore invalid URL in context silently, or log a warning\n                 print(f"WebSurferAgent: Invalid URL format in context: {context.get(\'url\')}")\n                 pass\n\n        # 2. If no valid URL in context, check task_description for a URL\n        if not url_to_summarize:\n            match = URL_PATTERN.search(task_description)\n            if match:\n                try:\n                    url_to_summarize = HttpUrl(match.group(0))\n                except (ValidationError, TypeError):\n                    # Found something like a URL, but it\'s invalid\n                    return {\n                        \'status\': \'failure\',\n                        \'error_message\': f"Invalid URL format found in task description: {match.group(0)}",\n                        \'output\': None\n                    }\n\n        # 3. If a valid URL was found, perform summarization\n        if url_to_summarize:\n            try:\n                print(f"WebSurferAgent: Summarizing URL: {url_to_summarize}")\n                # NOTE: Plugin method is sync, calling directly in async context.\n                # Consider using asyncio.to_thread or similar for production.\n                summary = self.plugin.summarize_webpage(url=url_to_summarize)\n                # Check if the plugin returned an error string\n                if isinstance(summary, str) and summary.startswith("Error summarizing webpage:"):\n                     return {\n                        \'status\': \'failure\',\n                        \'error_message\': summary,\n                        \'output\': None\n                    }\n                return {\n                    \'status\': \'success\',\n                    \'output\': {\'summary\': summary}\n                }\n            except Exception as e:\n                print(f"WebSurferAgent: Error during summarization: {e}")\n                return {\n                    \'status\': \'failure\',\n                    \'error_message\': f"An unexpected error occurred during summarization: {e}",\n                    \'output\': None\n                }\n\n        # 4. If no URL found, assume it\'s a search task\n        else:\n            search_query = task_description # Use the whole description as query for now\n            print(f"WebSurferAgent: Performing search for: {search_query}")\n            try:\n                # NOTE: Plugin method is sync, calling directly in async context.\n                # Consider using asyncio.to_thread or similar for production.\n                results: List[WebSearchResult] = self.plugin.web_search(query=search_query)\n                # Convert Pydantic models to dictionaries for consistent output\n                output_results = [result.model_dump() for result in results] # Use model_dump for Pydantic v2\n                return {\n                    \'status\': \'success\',\n                    \'output\': {\'search_results\': output_results}\n                 }\n            except Exception as e:\n                print(f"WebSurferAgent: Error during web search: {e}")\n                return {\n                    \'status\': \'failure\',\n                    \'error_message\': f"An unexpected error occurred during web search: {e}",\n                    \'output\': None\n                }\n 