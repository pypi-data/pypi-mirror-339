name: CI

# This workflow runs the continuous integration checks on the project:
# - Tests with coverage and security checks
# - Linting
# - Type checking
# - Dependency review (on pull requests)
# - Documentation build check

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      use_combined_check:
        description: "Use combined check instead of separate jobs"
        type: boolean
        default: false

# Set default permissions to minimum required
permissions:
  contents: read
  checks: write # Added for codecov upload in test workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Load configuration using the reusable workflow
  config:
    name: Load Configuration
    uses: ./.github/workflows/load-config.yml

  # Combined check job (alternative to separate jobs)
  combined-check:
    name: Combined Check
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.use_combined_check == 'true'
    needs: config
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the composite action for Python setup
      - name: Set up Python
        uses: ./.github/actions/python-setup
        with:
          python-version: ${{ needs.config.outputs.python_version }}
          dependencies: "pytest pytest-cov ruff pyright safety mkdocs mkdocs-material"
          install-dev: "true"
          cache: "true"

      # Run all checks using the combined check target
      - name: Run all checks
        run: |
          echo "Running all checks (tests, linting, type checking)..."
          make check
          echo "All checks passed successfully!"

      # Run security check
      - name: Check for dependency vulnerabilities
        run: |
          echo "Running security checks..."
          make security || {
            echo "::warning::Security vulnerabilities found. Review the output above."
            # Don't fail the build, just warn
            exit 0
          }

      # Build documentation
      - name: Build documentation
        run: |
          echo "Building documentation..."
          make docs
          echo "Documentation built successfully!"

  # Run tests with coverage and security checks
  test:
    needs: config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.use_combined_check != 'true'
    uses: ./.github/workflows/test.yml
    with:
      python-versions: '["${{ needs.config.outputs.python_version }}"]'
      coverage: true
      security-check: true

  # Run linting checks
  lint:
    needs: config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.use_combined_check != 'true'
    uses: ./.github/workflows/lint.yml
    with:
      python-version: ${{ needs.config.outputs.python_version }}

  # Run type checking
  type-check:
    needs: config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.use_combined_check != 'true'
    uses: ./.github/workflows/type-check.yml
    with:
      python-version: ${{ needs.config.outputs.python_version }}

  # Build documentation
  docs:
    name: Build Documentation
    needs: config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.use_combined_check != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the composite action for Python setup
      - name: Set up Python
        uses: ./.github/actions/python-setup
        with:
          python-version: ${{ needs.config.outputs.python_version }}
          dependencies: "mkdocs mkdocs-material"
          cache: "true"

      # Build documentation
      - name: Build documentation
        run: |
          echo "Building documentation..."
          make docs
          echo "Documentation built successfully!"

  # Review dependencies for security issues (on pull requests)
  dependency-review:
    name: Review Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  # Notify about CI completion
  notify:
    name: Notify Completion
    needs:
      [config, combined-check, test, lint, type-check, docs, dependency-review]
    if: always()
    uses: ./.github/workflows/notify.yml
    with:
      message: "CI workflow completed"
      details: |
        Repository: ${{ github.repository }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Status: ${{ (github.event.inputs.use_combined_check == 'true' && needs.combined-check.result == 'success') || (github.event.inputs.use_combined_check != 'true' && needs.test.result == 'success' && needs.lint.result == 'success' && needs.type-check.result == 'success' && needs.docs.result == 'success') && 'Success ✅' || 'Failed ❌' }}
      success: ${{ (github.event.inputs.use_combined_check == 'true' && needs.combined-check.result == 'success') || (github.event.inputs.use_combined_check != 'true' && needs.test.result == 'success' && needs.lint.result == 'success' && needs.type-check.result == 'success' && needs.docs.result == 'success') }}
