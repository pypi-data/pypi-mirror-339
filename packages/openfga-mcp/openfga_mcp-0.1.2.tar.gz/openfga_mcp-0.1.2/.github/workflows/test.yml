name: Test

# This workflow runs tests on the project with configurable Python versions,
# coverage reporting, and security checks.

on:
  workflow_call:
    inputs:
      python-versions:
        description: "Python versions to test on (JSON array)"
        required: false
        type: string
        default: '["3.12"]'
      coverage:
        description: "Whether to generate coverage reports"
        required: false
        type: boolean
        default: true
      security-check:
        description: "Whether to run security checks"
        required: false
        type: boolean
        default: true

# Set default permissions to minimum required
permissions:
  contents: read
  # For codecov upload
  checks: write

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the composite action for Python setup
      - name: Set up Python ${{ matrix.python-version }}
        uses: ./.github/actions/python-setup
        with:
          python-version: ${{ matrix.python-version }}
          install-dev: "true"
          cache: "true"

      # Run tests without coverage if coverage is disabled
      - name: Run tests
        if: inputs.coverage == false
        run: |
          echo "Running tests without coverage..."
          make test
          echo "Tests completed successfully!"

      # Run tests with coverage if coverage is enabled
      - name: Run tests with coverage
        if: inputs.coverage
        run: |
          echo "Running tests with coverage..."
          make test-cov
          echo "Tests with coverage completed successfully!"

          # Print coverage summary
          echo "Coverage Summary:"
          grep -A 5 "TOTAL" coverage.xml || true

      # Upload coverage report if coverage is enabled
      - name: Upload coverage report
        if: inputs.coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      # Run security check if enabled
      - name: Check for dependency vulnerabilities
        if: inputs.security-check
        run: |
          echo "Running security checks..."
          # Create a security report file
          make security > security-report.txt || {
            if grep -q "Critical" security-report.txt; then
              echo "::error::Critical security vulnerabilities found. Build failed."
              cat security-report.txt
              exit 1
            else
              echo "::warning::Security vulnerabilities found. Review the output above."
              cat security-report.txt
              exit 0
            fi
          }
