name: Load Configuration

on:
  workflow_call:
    inputs:
      python_version_override:
        description: "Override the Python version from config.yml"
        required: false
        type: string
        default: ""
      config_path:
        description: "Path to the configuration file"
        required: false
        type: string
        default: ".github/config.yml"
    outputs:
      python_version:
        description: "Python version to use"
        value: ${{ jobs.config.outputs.python_version }}
      package_name:
        description: "Package name"
        value: ${{ jobs.config.outputs.package_name }}
      default_branch:
        description: "Default branch name"
        value: ${{ jobs.config.outputs.default_branch }}

jobs:
  config:
    name: Load Configuration
    runs-on: ubuntu-latest
    outputs:
      python_version: ${{ steps.load_config.outputs.python_version }}
      package_name: ${{ steps.load_config.outputs.package_name }}
      default_branch: ${{ steps.load_config.outputs.default_branch }}
      config_exists: ${{ steps.check_config.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check if config file exists
      - name: Check if config file exists
        id: check_config
        run: |
          if [ -f "${{ inputs.config_path }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Config file found at ${{ inputs.config_path }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Config file not found at ${{ inputs.config_path }}, using default values"
          fi

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Load configuration
        id: load_config
        run: |
          # Default values in case config file is missing or values are not found
          DEFAULT_PYTHON_VERSION="3.12"
          DEFAULT_PACKAGE_NAME=$(basename $GITHUB_REPOSITORY)
          DEFAULT_BRANCH="main"

          # Try to read from config file if it exists
          if [ "${{ steps.check_config.outputs.exists }}" == "true" ]; then
            # Use yq with error handling
            PYTHON_VERSION=$(yq -r '.python.version // "'"$DEFAULT_PYTHON_VERSION"'"' ${{ inputs.config_path }} || echo "$DEFAULT_PYTHON_VERSION")
            PACKAGE_NAME=$(yq -r '.package.name // "'"$DEFAULT_PACKAGE_NAME"'"' ${{ inputs.config_path }} || echo "$DEFAULT_PACKAGE_NAME")
            DEFAULT_BRANCH=$(yq -r '.repository.default_branch // "'"$DEFAULT_BRANCH"'"' ${{ inputs.config_path }} || echo "$DEFAULT_BRANCH")
          else
            PYTHON_VERSION="$DEFAULT_PYTHON_VERSION"
            PACKAGE_NAME="$DEFAULT_PACKAGE_NAME"
          fi

          # Override with input if provided
          if [ -n "${{ inputs.python_version_override }}" ]; then
            PYTHON_VERSION="${{ inputs.python_version_override }}"
            echo "Using overridden Python version: $PYTHON_VERSION"
          fi

          # Set outputs
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

          # Log configuration
          echo "Configuration loaded:"
          echo "- Python version: $PYTHON_VERSION"
          echo "- Package name: $PACKAGE_NAME"
          echo "- Default branch: $DEFAULT_BRANCH"
