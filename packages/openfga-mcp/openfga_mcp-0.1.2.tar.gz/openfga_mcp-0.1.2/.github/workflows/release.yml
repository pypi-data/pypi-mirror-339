name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

# Set default permissions to minimum required
permissions:
  contents: read
  checks: write

jobs:
  # Check if this is a release PR and if it was merged
  check-release-pr:
    name: Check Release PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      is_release: ${{ steps.extract_version.outputs.is_release }}
    steps:
      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if [[ $BRANCH_NAME =~ ^release/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Detected release version: $VERSION"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Not a valid release branch pattern: $BRANCH_NAME"
          fi

  # Load configuration using the reusable workflow
  config:
    name: Load Configuration
    needs: check-release-pr
    if: needs.check-release-pr.outputs.is_release == 'true'
    uses: ./.github/workflows/load-config.yml

  # Run tests, linting, and type checking by reusing existing workflows
  test:
    name: Run Tests
    needs: [check-release-pr, config]
    if: needs.check-release-pr.outputs.is_release == 'true'
    uses: ./.github/workflows/test.yml
    with:
      python-versions: '["${{ needs.config.outputs.python_version }}"]'
      coverage: true
      security-check: true

  lint:
    name: Run Linting
    needs: [check-release-pr, config]
    if: needs.check-release-pr.outputs.is_release == 'true'
    uses: ./.github/workflows/lint.yml
    with:
      python-version: ${{ needs.config.outputs.python_version }}

  type-check:
    name: Run Type Checking
    needs: [check-release-pr, config]
    if: needs.check-release-pr.outputs.is_release == 'true'
    uses: ./.github/workflows/type-check.yml
    with:
      python-version: ${{ needs.config.outputs.python_version }}

  # Create GitHub release with PR body as release notes
  create-release:
    name: Create Release
    needs: [check-release-pr, config, test, lint, type-check]
    if: needs.check-release-pr.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ needs.check-release-pr.outputs.version }}
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag
        id: set_tag
        run: |
          TAG="v${{ needs.check-release-pr.outputs.version }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release tag: $TAG"

      - name: Check if tag already exists
        run: |
          git fetch --tags
          if git rev-parse "${{ steps.set_tag.outputs.tag }}" >/dev/null 2>&1; then
            echo "::error::Tag ${{ steps.set_tag.outputs.tag }} already exists. Cannot proceed with release."
            exit 1
          fi
          echo "Tag verification successful: ${{ steps.set_tag.outputs.tag }} does not exist yet."

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Save PR description to file
        run: |
          echo "${{ github.event.pull_request.body }}" > RELEASE_NOTES.md
          echo "Release notes saved from PR description"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          name: Release ${{ steps.set_tag.outputs.tag }}
          body_path: RELEASE_NOTES.md
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
