# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wakatime_api.api_client import ApiClient


class CommitsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_commit(self, user, project, hash, **kwargs):  # noqa: E501
        """Get Single Commit  # noqa: E501

        Retrieve details for a single commit within a project, including time spent coding on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit(user, project, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str project: Project ID or name (URL encoded). (required)
        :param str hash: Commit hash. (required)
        :param str branch: Filter by branch name.
        :return: CommitDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_commit_with_http_info(user, project, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_commit_with_http_info(user, project, hash, **kwargs)  # noqa: E501
            return data

    def get_commit_with_http_info(self, user, project, hash, **kwargs):  # noqa: E501
        """Get Single Commit  # noqa: E501

        Retrieve details for a single commit within a project, including time spent coding on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_with_http_info(user, project, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str project: Project ID or name (URL encoded). (required)
        :param str hash: Commit hash. (required)
        :param str branch: Filter by branch name.
        :return: CommitDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'project', 'hash', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_commit`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `get_commit`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_commit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/projects/{project}/commits/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommitDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_user_commit(self, project, hash, **kwargs):  # noqa: E501
        """Get Current User's Single Commit  # noqa: E501

        Retrieve details for a single commit for the current user's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_commit(project, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project: Project ID or name (URL encoded). (required)
        :param str hash: Commit hash. (required)
        :param str branch: Filter by branch name.
        :return: CommitDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_user_commit_with_http_info(project, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_user_commit_with_http_info(project, hash, **kwargs)  # noqa: E501
            return data

    def get_current_user_commit_with_http_info(self, project, hash, **kwargs):  # noqa: E501
        """Get Current User's Single Commit  # noqa: E501

        Retrieve details for a single commit for the current user's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_commit_with_http_info(project, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project: Project ID or name (URL encoded). (required)
        :param str hash: Commit hash. (required)
        :param str branch: Filter by branch name.
        :return: CommitDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'hash', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user_commit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `get_current_user_commit`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_current_user_commit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/projects/{project}/commits/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommitDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_commits(self, user, project, **kwargs):  # noqa: E501
        """List Project Commits  # noqa: E501

        Retrieve a list of commits for a specific project, showing time spent coding in each.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_commits(user, project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str project: Project ID or name (URL encoded). (required)
        :param str author: Filter commits by author username.
        :param str branch: Filter by branch name.
        :param int page: Page number for paginated results.
        :return: CommitsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_commits_with_http_info(user, project, **kwargs)  # noqa: E501
        else:
            (data) = self.list_commits_with_http_info(user, project, **kwargs)  # noqa: E501
            return data

    def list_commits_with_http_info(self, user, project, **kwargs):  # noqa: E501
        """List Project Commits  # noqa: E501

        Retrieve a list of commits for a specific project, showing time spent coding in each.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_commits_with_http_info(user, project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str project: Project ID or name (URL encoded). (required)
        :param str author: Filter commits by author username.
        :param str branch: Filter by branch name.
        :param int page: Page number for paginated results.
        :return: CommitsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'project', 'author', 'branch', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_commits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `list_commits`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `list_commits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []
        if 'author' in params:
            query_params.append(('author', params['author']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/projects/{project}/commits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommitsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_current_user_commits(self, project, **kwargs):  # noqa: E501
        """List Current User's Project Commits  # noqa: E501

        Retrieve a list of commits for the current user's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_current_user_commits(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project: Project ID or name (URL encoded). (required)
        :param str author: Filter commits by author username.
        :param str branch: Filter by branch name.
        :param int page: Page number for paginated results.
        :return: CommitsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_current_user_commits_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.list_current_user_commits_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def list_current_user_commits_with_http_info(self, project, **kwargs):  # noqa: E501
        """List Current User's Project Commits  # noqa: E501

        Retrieve a list of commits for the current user's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_current_user_commits_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project: Project ID or name (URL encoded). (required)
        :param str author: Filter commits by author username.
        :param str branch: Filter by branch name.
        :param int page: Page number for paginated results.
        :return: CommitsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'author', 'branch', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_current_user_commits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `list_current_user_commits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []
        if 'author' in params:
            query_params.append(('author', params['author']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/projects/{project}/commits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommitsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
