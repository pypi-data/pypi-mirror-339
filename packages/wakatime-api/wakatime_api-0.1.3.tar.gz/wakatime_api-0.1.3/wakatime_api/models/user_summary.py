# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'username': 'str',
        'full_name': 'str',
        'display_name': 'str',
        'website': 'str',
        'human_readable_website': 'str',
        'is_hireable': 'bool',
        'city': 'City',
        'is_email_public': 'bool',
        'photo_public': 'bool',
        'photo': 'str'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'username': 'username',
        'full_name': 'full_name',
        'display_name': 'display_name',
        'website': 'website',
        'human_readable_website': 'human_readable_website',
        'is_hireable': 'is_hireable',
        'city': 'city',
        'is_email_public': 'is_email_public',
        'photo_public': 'photo_public',
        'photo': 'photo'
    }

    def __init__(self, id=None, email=None, username=None, full_name=None, display_name=None, website=None, human_readable_website=None, is_hireable=None, city=None, is_email_public=None, photo_public=None, photo=None):  # noqa: E501
        """UserSummary - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._username = None
        self._full_name = None
        self._display_name = None
        self._website = None
        self._human_readable_website = None
        self._is_hireable = None
        self._city = None
        self._is_email_public = None
        self._photo_public = None
        self._photo = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if username is not None:
            self.username = username
        if full_name is not None:
            self.full_name = full_name
        if display_name is not None:
            self.display_name = display_name
        if website is not None:
            self.website = website
        if human_readable_website is not None:
            self.human_readable_website = human_readable_website
        if is_hireable is not None:
            self.is_hireable = is_hireable
        if city is not None:
            self.city = city
        if is_email_public is not None:
            self.is_email_public = is_email_public
        if photo_public is not None:
            self.photo_public = photo_public
        if photo is not None:
            self.photo = photo

    @property
    def id(self):
        """Gets the id of this UserSummary.  # noqa: E501

        Unique ID of the user.  # noqa: E501

        :return: The id of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSummary.

        Unique ID of the user.  # noqa: E501

        :param id: The id of this UserSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this UserSummary.  # noqa: E501

        Email address (may be null if not public or permitted).  # noqa: E501

        :return: The email of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSummary.

        Email address (may be null if not public or permitted).  # noqa: E501

        :param email: The email of this UserSummary.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def username(self):
        """Gets the username of this UserSummary.  # noqa: E501

        User's public username.  # noqa: E501

        :return: The username of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserSummary.

        User's public username.  # noqa: E501

        :param username: The username of this UserSummary.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def full_name(self):
        """Gets the full_name of this UserSummary.  # noqa: E501

        Full name of the user.  # noqa: E501

        :return: The full_name of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserSummary.

        Full name of the user.  # noqa: E501

        :param full_name: The full_name of this UserSummary.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def display_name(self):
        """Gets the display_name of this UserSummary.  # noqa: E501

        Display name (from full_name or username).  # noqa: E501

        :return: The display_name of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserSummary.

        Display name (from full_name or username).  # noqa: E501

        :param display_name: The display_name of this UserSummary.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def website(self):
        """Gets the website of this UserSummary.  # noqa: E501

        User's website URL.  # noqa: E501

        :return: The website of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this UserSummary.

        User's website URL.  # noqa: E501

        :param website: The website of this UserSummary.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def human_readable_website(self):
        """Gets the human_readable_website of this UserSummary.  # noqa: E501

        Website without protocol.  # noqa: E501

        :return: The human_readable_website of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_website

    @human_readable_website.setter
    def human_readable_website(self, human_readable_website):
        """Sets the human_readable_website of this UserSummary.

        Website without protocol.  # noqa: E501

        :param human_readable_website: The human_readable_website of this UserSummary.  # noqa: E501
        :type: str
        """

        self._human_readable_website = human_readable_website

    @property
    def is_hireable(self):
        """Gets the is_hireable of this UserSummary.  # noqa: E501

        Represents the 'hireable' badge status.  # noqa: E501

        :return: The is_hireable of this UserSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_hireable

    @is_hireable.setter
    def is_hireable(self, is_hireable):
        """Sets the is_hireable of this UserSummary.

        Represents the 'hireable' badge status.  # noqa: E501

        :param is_hireable: The is_hireable of this UserSummary.  # noqa: E501
        :type: bool
        """

        self._is_hireable = is_hireable

    @property
    def city(self):
        """Gets the city of this UserSummary.  # noqa: E501


        :return: The city of this UserSummary.  # noqa: E501
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserSummary.


        :param city: The city of this UserSummary.  # noqa: E501
        :type: City
        """

        self._city = city

    @property
    def is_email_public(self):
        """Gets the is_email_public of this UserSummary.  # noqa: E501

        Whether the user's email is public on leaderboards.  # noqa: E501

        :return: The is_email_public of this UserSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_public

    @is_email_public.setter
    def is_email_public(self, is_email_public):
        """Sets the is_email_public of this UserSummary.

        Whether the user's email is public on leaderboards.  # noqa: E501

        :param is_email_public: The is_email_public of this UserSummary.  # noqa: E501
        :type: bool
        """

        self._is_email_public = is_email_public

    @property
    def photo_public(self):
        """Gets the photo_public of this UserSummary.  # noqa: E501

        Whether the user's photo is public on leaderboards.  # noqa: E501

        :return: The photo_public of this UserSummary.  # noqa: E501
        :rtype: bool
        """
        return self._photo_public

    @photo_public.setter
    def photo_public(self, photo_public):
        """Sets the photo_public of this UserSummary.

        Whether the user's photo is public on leaderboards.  # noqa: E501

        :param photo_public: The photo_public of this UserSummary.  # noqa: E501
        :type: bool
        """

        self._photo_public = photo_public

    @property
    def photo(self):
        """Gets the photo of this UserSummary.  # noqa: E501

        URL of the user's photo.  # noqa: E501

        :return: The photo of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this UserSummary.

        URL of the user's photo.  # noqa: E501

        :param photo: The photo of this UserSummary.  # noqa: E501
        :type: str
        """

        self._photo = photo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
