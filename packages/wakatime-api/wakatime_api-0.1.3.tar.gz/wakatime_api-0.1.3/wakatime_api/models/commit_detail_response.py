# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommitDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit': 'Commit',
        'branch': 'str',
        'project': 'ProjectSummary',
        'status': 'str'
    }

    attribute_map = {
        'commit': 'commit',
        'branch': 'branch',
        'project': 'project',
        'status': 'status'
    }

    def __init__(self, commit=None, branch=None, project=None, status=None):  # noqa: E501
        """CommitDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._commit = None
        self._branch = None
        self._project = None
        self._status = None
        self.discriminator = None
        if commit is not None:
            self.commit = commit
        if branch is not None:
            self.branch = branch
        if project is not None:
            self.project = project
        if status is not None:
            self.status = status

    @property
    def commit(self):
        """Gets the commit of this CommitDetailResponse.  # noqa: E501


        :return: The commit of this CommitDetailResponse.  # noqa: E501
        :rtype: Commit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this CommitDetailResponse.


        :param commit: The commit of this CommitDetailResponse.  # noqa: E501
        :type: Commit
        """

        self._commit = commit

    @property
    def branch(self):
        """Gets the branch of this CommitDetailResponse.  # noqa: E501


        :return: The branch of this CommitDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CommitDetailResponse.


        :param branch: The branch of this CommitDetailResponse.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def project(self):
        """Gets the project of this CommitDetailResponse.  # noqa: E501


        :return: The project of this CommitDetailResponse.  # noqa: E501
        :rtype: ProjectSummary
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CommitDetailResponse.


        :param project: The project of this CommitDetailResponse.  # noqa: E501
        :type: ProjectSummary
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this CommitDetailResponse.  # noqa: E501


        :return: The status of this CommitDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommitDetailResponse.


        :param status: The status of this CommitDetailResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommitDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommitDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
