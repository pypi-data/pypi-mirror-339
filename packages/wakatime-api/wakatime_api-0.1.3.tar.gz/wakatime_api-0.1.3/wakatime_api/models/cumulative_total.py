# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CumulativeTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seconds': 'float',
        'text': 'str',
        'decimal': 'str',
        'digital': 'str'
    }

    attribute_map = {
        'seconds': 'seconds',
        'text': 'text',
        'decimal': 'decimal',
        'digital': 'digital'
    }

    def __init__(self, seconds=None, text=None, decimal=None, digital=None):  # noqa: E501
        """CumulativeTotal - a model defined in Swagger"""  # noqa: E501
        self._seconds = None
        self._text = None
        self._decimal = None
        self._digital = None
        self.discriminator = None
        if seconds is not None:
            self.seconds = seconds
        if text is not None:
            self.text = text
        if decimal is not None:
            self.decimal = decimal
        if digital is not None:
            self.digital = digital

    @property
    def seconds(self):
        """Gets the seconds of this CumulativeTotal.  # noqa: E501

        Cumulative number of seconds over the date range.  # noqa: E501

        :return: The seconds of this CumulativeTotal.  # noqa: E501
        :rtype: float
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this CumulativeTotal.

        Cumulative number of seconds over the date range.  # noqa: E501

        :param seconds: The seconds of this CumulativeTotal.  # noqa: E501
        :type: float
        """

        self._seconds = seconds

    @property
    def text(self):
        """Gets the text of this CumulativeTotal.  # noqa: E501

        Cumulative total coding activity in human readable format.  # noqa: E501

        :return: The text of this CumulativeTotal.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CumulativeTotal.

        Cumulative total coding activity in human readable format.  # noqa: E501

        :param text: The text of this CumulativeTotal.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def decimal(self):
        """Gets the decimal of this CumulativeTotal.  # noqa: E501

        Cumulative total as a decimal string.  # noqa: E501

        :return: The decimal of this CumulativeTotal.  # noqa: E501
        :rtype: str
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this CumulativeTotal.

        Cumulative total as a decimal string.  # noqa: E501

        :param decimal: The decimal of this CumulativeTotal.  # noqa: E501
        :type: str
        """

        self._decimal = decimal

    @property
    def digital(self):
        """Gets the digital of this CumulativeTotal.  # noqa: E501

        Cumulative total in digital clock format (HH:MM).  # noqa: E501

        :return: The digital of this CumulativeTotal.  # noqa: E501
        :rtype: str
        """
        return self._digital

    @digital.setter
    def digital(self, digital):
        """Sets the digital of this CumulativeTotal.

        Cumulative total in digital clock format (HH:MM).  # noqa: E501

        :param digital: The digital of this CumulativeTotal.  # noqa: E501
        :type: str
        """

        self._digital = digital

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CumulativeTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CumulativeTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
