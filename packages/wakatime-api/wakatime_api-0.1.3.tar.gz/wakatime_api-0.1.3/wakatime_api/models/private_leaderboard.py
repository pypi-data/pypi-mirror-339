# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateLeaderboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_delete': 'bool',
        'can_edit': 'bool',
        'created_at': 'datetime',
        'has_available_seat': 'bool',
        'id': 'str',
        'members_count': 'int',
        'members_with_timezones_count': 'int',
        'modified_at': 'datetime',
        'name': 'str',
        'time_range': 'str'
    }

    attribute_map = {
        'can_delete': 'can_delete',
        'can_edit': 'can_edit',
        'created_at': 'created_at',
        'has_available_seat': 'has_available_seat',
        'id': 'id',
        'members_count': 'members_count',
        'members_with_timezones_count': 'members_with_timezones_count',
        'modified_at': 'modified_at',
        'name': 'name',
        'time_range': 'time_range'
    }

    def __init__(self, can_delete=None, can_edit=None, created_at=None, has_available_seat=None, id=None, members_count=None, members_with_timezones_count=None, modified_at=None, name=None, time_range=None):  # noqa: E501
        """PrivateLeaderboard - a model defined in Swagger"""  # noqa: E501
        self._can_delete = None
        self._can_edit = None
        self._created_at = None
        self._has_available_seat = None
        self._id = None
        self._members_count = None
        self._members_with_timezones_count = None
        self._modified_at = None
        self._name = None
        self._time_range = None
        self.discriminator = None
        if can_delete is not None:
            self.can_delete = can_delete
        if can_edit is not None:
            self.can_edit = can_edit
        if created_at is not None:
            self.created_at = created_at
        if has_available_seat is not None:
            self.has_available_seat = has_available_seat
        if id is not None:
            self.id = id
        if members_count is not None:
            self.members_count = members_count
        if members_with_timezones_count is not None:
            self.members_with_timezones_count = members_with_timezones_count
        if modified_at is not None:
            self.modified_at = modified_at
        if name is not None:
            self.name = name
        if time_range is not None:
            self.time_range = time_range

    @property
    def can_delete(self):
        """Gets the can_delete of this PrivateLeaderboard.  # noqa: E501


        :return: The can_delete of this PrivateLeaderboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this PrivateLeaderboard.


        :param can_delete: The can_delete of this PrivateLeaderboard.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this PrivateLeaderboard.  # noqa: E501


        :return: The can_edit of this PrivateLeaderboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this PrivateLeaderboard.


        :param can_edit: The can_edit of this PrivateLeaderboard.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def created_at(self):
        """Gets the created_at of this PrivateLeaderboard.  # noqa: E501


        :return: The created_at of this PrivateLeaderboard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PrivateLeaderboard.


        :param created_at: The created_at of this PrivateLeaderboard.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def has_available_seat(self):
        """Gets the has_available_seat of this PrivateLeaderboard.  # noqa: E501


        :return: The has_available_seat of this PrivateLeaderboard.  # noqa: E501
        :rtype: bool
        """
        return self._has_available_seat

    @has_available_seat.setter
    def has_available_seat(self, has_available_seat):
        """Sets the has_available_seat of this PrivateLeaderboard.


        :param has_available_seat: The has_available_seat of this PrivateLeaderboard.  # noqa: E501
        :type: bool
        """

        self._has_available_seat = has_available_seat

    @property
    def id(self):
        """Gets the id of this PrivateLeaderboard.  # noqa: E501


        :return: The id of this PrivateLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateLeaderboard.


        :param id: The id of this PrivateLeaderboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def members_count(self):
        """Gets the members_count of this PrivateLeaderboard.  # noqa: E501


        :return: The members_count of this PrivateLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this PrivateLeaderboard.


        :param members_count: The members_count of this PrivateLeaderboard.  # noqa: E501
        :type: int
        """

        self._members_count = members_count

    @property
    def members_with_timezones_count(self):
        """Gets the members_with_timezones_count of this PrivateLeaderboard.  # noqa: E501


        :return: The members_with_timezones_count of this PrivateLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._members_with_timezones_count

    @members_with_timezones_count.setter
    def members_with_timezones_count(self, members_with_timezones_count):
        """Sets the members_with_timezones_count of this PrivateLeaderboard.


        :param members_with_timezones_count: The members_with_timezones_count of this PrivateLeaderboard.  # noqa: E501
        :type: int
        """

        self._members_with_timezones_count = members_with_timezones_count

    @property
    def modified_at(self):
        """Gets the modified_at of this PrivateLeaderboard.  # noqa: E501


        :return: The modified_at of this PrivateLeaderboard.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this PrivateLeaderboard.


        :param modified_at: The modified_at of this PrivateLeaderboard.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this PrivateLeaderboard.  # noqa: E501


        :return: The name of this PrivateLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateLeaderboard.


        :param name: The name of this PrivateLeaderboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_range(self):
        """Gets the time_range of this PrivateLeaderboard.  # noqa: E501


        :return: The time_range of this PrivateLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this PrivateLeaderboard.


        :param time_range: The time_range of this PrivateLeaderboard.  # noqa: E501
        :type: str
        """

        self._time_range = time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateLeaderboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateLeaderboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
