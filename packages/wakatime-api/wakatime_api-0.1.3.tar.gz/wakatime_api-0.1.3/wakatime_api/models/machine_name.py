# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'value': 'str',
        'ip': 'str',
        'last_seen_at': 'datetime',
        'timezone': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'value': 'value',
        'ip': 'ip',
        'last_seen_at': 'last_seen_at',
        'timezone': 'timezone',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, name=None, value=None, ip=None, last_seen_at=None, timezone=None, created_at=None):  # noqa: E501
        """MachineName - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._value = None
        self._ip = None
        self._last_seen_at = None
        self._timezone = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if ip is not None:
            self.ip = ip
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if timezone is not None:
            self.timezone = timezone
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this MachineName.  # noqa: E501


        :return: The id of this MachineName.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachineName.


        :param id: The id of this MachineName.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MachineName.  # noqa: E501


        :return: The name of this MachineName.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachineName.


        :param name: The name of this MachineName.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this MachineName.  # noqa: E501


        :return: The value of this MachineName.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MachineName.


        :param value: The value of this MachineName.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def ip(self):
        """Gets the ip of this MachineName.  # noqa: E501


        :return: The ip of this MachineName.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this MachineName.


        :param ip: The ip of this MachineName.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this MachineName.  # noqa: E501


        :return: The last_seen_at of this MachineName.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this MachineName.


        :param last_seen_at: The last_seen_at of this MachineName.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def timezone(self):
        """Gets the timezone of this MachineName.  # noqa: E501


        :return: The timezone of this MachineName.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this MachineName.


        :param timezone: The timezone of this MachineName.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def created_at(self):
        """Gets the created_at of this MachineName.  # noqa: E501


        :return: The created_at of this MachineName.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MachineName.


        :param created_at: The created_at of this MachineName.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
