# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataDumpRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'email_when_finished': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'email_when_finished': 'email_when_finished'
    }

    def __init__(self, type=None, email_when_finished=True):  # noqa: E501
        """DataDumpRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._email_when_finished = None
        self.discriminator = None
        self.type = type
        if email_when_finished is not None:
            self.email_when_finished = email_when_finished

    @property
    def type(self):
        """Gets the type of this DataDumpRequest.  # noqa: E501

        Required export type.  # noqa: E501

        :return: The type of this DataDumpRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataDumpRequest.

        Required export type.  # noqa: E501

        :param type: The type of this DataDumpRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["daily", "heartbeats"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def email_when_finished(self):
        """Gets the email_when_finished of this DataDumpRequest.  # noqa: E501

        Optional flag to disable email notification.  # noqa: E501

        :return: The email_when_finished of this DataDumpRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_when_finished

    @email_when_finished.setter
    def email_when_finished(self, email_when_finished):
        """Sets the email_when_finished of this DataDumpRequest.

        Optional flag to disable email notification.  # noqa: E501

        :param email_when_finished: The email_when_finished of this DataDumpRequest.  # noqa: E501
        :type: bool
        """

        self._email_when_finished = email_when_finished

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataDumpRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataDumpRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
