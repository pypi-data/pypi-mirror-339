# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalSharedWith(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'email': 'str',
        'full_name': 'str',
        'id': 'str',
        'photo': 'str',
        'status': 'str',
        'user_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'email': 'email',
        'full_name': 'full_name',
        'id': 'id',
        'photo': 'photo',
        'status': 'status',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, display_name=None, email=None, full_name=None, id=None, photo=None, status=None, user_id=None, username=None):  # noqa: E501
        """GoalSharedWith - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._email = None
        self._full_name = None
        self._id = None
        self._photo = None
        self._status = None
        self._user_id = None
        self._username = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if id is not None:
            self.id = id
        if photo is not None:
            self.photo = photo
        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def display_name(self):
        """Gets the display_name of this GoalSharedWith.  # noqa: E501


        :return: The display_name of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoalSharedWith.


        :param display_name: The display_name of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this GoalSharedWith.  # noqa: E501


        :return: The email of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GoalSharedWith.


        :param email: The email of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this GoalSharedWith.  # noqa: E501


        :return: The full_name of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GoalSharedWith.


        :param full_name: The full_name of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this GoalSharedWith.  # noqa: E501


        :return: The id of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoalSharedWith.


        :param id: The id of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def photo(self):
        """Gets the photo of this GoalSharedWith.  # noqa: E501


        :return: The photo of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this GoalSharedWith.


        :param photo: The photo of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def status(self):
        """Gets the status of this GoalSharedWith.  # noqa: E501


        :return: The status of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoalSharedWith.


        :param status: The status of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this GoalSharedWith.  # noqa: E501


        :return: The user_id of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GoalSharedWith.


        :param user_id: The user_id of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this GoalSharedWith.  # noqa: E501


        :return: The username of this GoalSharedWith.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GoalSharedWith.


        :param username: The username of this GoalSharedWith.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalSharedWith, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalSharedWith):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
