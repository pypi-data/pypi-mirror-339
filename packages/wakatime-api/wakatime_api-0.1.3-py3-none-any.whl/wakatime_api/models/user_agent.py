# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'value': 'str',
        'editor': 'str',
        'version': 'str',
        'os': 'str',
        'last_seen_at': 'datetime',
        'is_browser_extension': 'bool',
        'is_desktop_app': 'bool',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'editor': 'editor',
        'version': 'version',
        'os': 'os',
        'last_seen_at': 'last_seen_at',
        'is_browser_extension': 'is_browser_extension',
        'is_desktop_app': 'is_desktop_app',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, value=None, editor=None, version=None, os=None, last_seen_at=None, is_browser_extension=None, is_desktop_app=None, created_at=None):  # noqa: E501
        """UserAgent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._editor = None
        self._version = None
        self._os = None
        self._last_seen_at = None
        self._is_browser_extension = None
        self._is_desktop_app = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if editor is not None:
            self.editor = editor
        if version is not None:
            self.version = version
        if os is not None:
            self.os = os
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if is_browser_extension is not None:
            self.is_browser_extension = is_browser_extension
        if is_desktop_app is not None:
            self.is_desktop_app = is_desktop_app
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this UserAgent.  # noqa: E501


        :return: The id of this UserAgent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAgent.


        :param id: The id of this UserAgent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this UserAgent.  # noqa: E501


        :return: The value of this UserAgent.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserAgent.


        :param value: The value of this UserAgent.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def editor(self):
        """Gets the editor of this UserAgent.  # noqa: E501


        :return: The editor of this UserAgent.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this UserAgent.


        :param editor: The editor of this UserAgent.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def version(self):
        """Gets the version of this UserAgent.  # noqa: E501


        :return: The version of this UserAgent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserAgent.


        :param version: The version of this UserAgent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def os(self):
        """Gets the os of this UserAgent.  # noqa: E501


        :return: The os of this UserAgent.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this UserAgent.


        :param os: The os of this UserAgent.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this UserAgent.  # noqa: E501


        :return: The last_seen_at of this UserAgent.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this UserAgent.


        :param last_seen_at: The last_seen_at of this UserAgent.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def is_browser_extension(self):
        """Gets the is_browser_extension of this UserAgent.  # noqa: E501


        :return: The is_browser_extension of this UserAgent.  # noqa: E501
        :rtype: bool
        """
        return self._is_browser_extension

    @is_browser_extension.setter
    def is_browser_extension(self, is_browser_extension):
        """Sets the is_browser_extension of this UserAgent.


        :param is_browser_extension: The is_browser_extension of this UserAgent.  # noqa: E501
        :type: bool
        """

        self._is_browser_extension = is_browser_extension

    @property
    def is_desktop_app(self):
        """Gets the is_desktop_app of this UserAgent.  # noqa: E501


        :return: The is_desktop_app of this UserAgent.  # noqa: E501
        :rtype: bool
        """
        return self._is_desktop_app

    @is_desktop_app.setter
    def is_desktop_app(self, is_desktop_app):
        """Sets the is_desktop_app of this UserAgent.


        :param is_desktop_app: The is_desktop_app of this UserAgent.  # noqa: E501
        :type: bool
        """

        self._is_desktop_app = is_desktop_app

    @property
    def created_at(self):
        """Gets the created_at of this UserAgent.  # noqa: E501


        :return: The created_at of this UserAgent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserAgent.


        :param created_at: The created_at of this UserAgent.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
