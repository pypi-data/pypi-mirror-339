# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatsBestDay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'text': 'str',
        'total_seconds': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'text': 'text',
        'total_seconds': 'total_seconds'
    }

    def __init__(self, _date=None, text=None, total_seconds=None):  # noqa: E501
        """StatsBestDay - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._text = None
        self._total_seconds = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if text is not None:
            self.text = text
        if total_seconds is not None:
            self.total_seconds = total_seconds

    @property
    def _date(self):
        """Gets the _date of this StatsBestDay.  # noqa: E501


        :return: The _date of this StatsBestDay.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StatsBestDay.


        :param _date: The _date of this StatsBestDay.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def text(self):
        """Gets the text of this StatsBestDay.  # noqa: E501


        :return: The text of this StatsBestDay.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this StatsBestDay.


        :param text: The text of this StatsBestDay.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def total_seconds(self):
        """Gets the total_seconds of this StatsBestDay.  # noqa: E501


        :return: The total_seconds of this StatsBestDay.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this StatsBestDay.


        :param total_seconds: The total_seconds of this StatsBestDay.  # noqa: E501
        :type: float
        """

        self._total_seconds = total_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsBestDay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsBestDay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
