# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_branch': 'str',
        'description': 'str',
        'fork_count': 'int',
        'full_name': 'str',
        'homepage': 'str',
        'html_url': 'str',
        'id': 'str',
        'is_fork': 'bool',
        'is_private': 'bool',
        'last_synced_at': 'datetime',
        'name': 'str',
        'provider': 'str',
        'star_count': 'int',
        'url': 'str',
        'watch_count': 'int'
    }

    attribute_map = {
        'default_branch': 'default_branch',
        'description': 'description',
        'fork_count': 'fork_count',
        'full_name': 'full_name',
        'homepage': 'homepage',
        'html_url': 'html_url',
        'id': 'id',
        'is_fork': 'is_fork',
        'is_private': 'is_private',
        'last_synced_at': 'last_synced_at',
        'name': 'name',
        'provider': 'provider',
        'star_count': 'star_count',
        'url': 'url',
        'watch_count': 'watch_count'
    }

    def __init__(self, default_branch=None, description=None, fork_count=None, full_name=None, homepage=None, html_url=None, id=None, is_fork=None, is_private=None, last_synced_at=None, name=None, provider=None, star_count=None, url=None, watch_count=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._default_branch = None
        self._description = None
        self._fork_count = None
        self._full_name = None
        self._homepage = None
        self._html_url = None
        self._id = None
        self._is_fork = None
        self._is_private = None
        self._last_synced_at = None
        self._name = None
        self._provider = None
        self._star_count = None
        self._url = None
        self._watch_count = None
        self.discriminator = None
        if default_branch is not None:
            self.default_branch = default_branch
        if description is not None:
            self.description = description
        if fork_count is not None:
            self.fork_count = fork_count
        if full_name is not None:
            self.full_name = full_name
        if homepage is not None:
            self.homepage = homepage
        if html_url is not None:
            self.html_url = html_url
        if id is not None:
            self.id = id
        if is_fork is not None:
            self.is_fork = is_fork
        if is_private is not None:
            self.is_private = is_private
        if last_synced_at is not None:
            self.last_synced_at = last_synced_at
        if name is not None:
            self.name = name
        if provider is not None:
            self.provider = provider
        if star_count is not None:
            self.star_count = star_count
        if url is not None:
            self.url = url
        if watch_count is not None:
            self.watch_count = watch_count

    @property
    def default_branch(self):
        """Gets the default_branch of this Repository.  # noqa: E501

        Default branch name.  # noqa: E501

        :return: The default_branch of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Repository.

        Default branch name.  # noqa: E501

        :param default_branch: The default_branch of this Repository.  # noqa: E501
        :type: str
        """

        self._default_branch = default_branch

    @property
    def description(self):
        """Gets the description of this Repository.  # noqa: E501

        Repository description.  # noqa: E501

        :return: The description of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.

        Repository description.  # noqa: E501

        :param description: The description of this Repository.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fork_count(self):
        """Gets the fork_count of this Repository.  # noqa: E501

        Number of forks.  # noqa: E501

        :return: The fork_count of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._fork_count

    @fork_count.setter
    def fork_count(self, fork_count):
        """Sets the fork_count of this Repository.

        Number of forks.  # noqa: E501

        :param fork_count: The fork_count of this Repository.  # noqa: E501
        :type: int
        """

        self._fork_count = fork_count

    @property
    def full_name(self):
        """Gets the full_name of this Repository.  # noqa: E501

        Full repository name (e.g., \"wakatime/wakatime-cli\").  # noqa: E501

        :return: The full_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repository.

        Full repository name (e.g., \"wakatime/wakatime-cli\").  # noqa: E501

        :param full_name: The full_name of this Repository.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def homepage(self):
        """Gets the homepage of this Repository.  # noqa: E501

        Repository homepage URL.  # noqa: E501

        :return: The homepage of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Repository.

        Repository homepage URL.  # noqa: E501

        :param homepage: The homepage of this Repository.  # noqa: E501
        :type: str
        """

        self._homepage = homepage

    @property
    def html_url(self):
        """Gets the html_url of this Repository.  # noqa: E501

        HTML URL for the repository.  # noqa: E501

        :return: The html_url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Repository.

        HTML URL for the repository.  # noqa: E501

        :param html_url: The html_url of this Repository.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Repository.  # noqa: E501

        Unique ID of the repository.  # noqa: E501

        :return: The id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.

        Unique ID of the repository.  # noqa: E501

        :param id: The id of this Repository.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_fork(self):
        """Gets the is_fork of this Repository.  # noqa: E501

        Whether the repository is a fork.  # noqa: E501

        :return: The is_fork of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._is_fork

    @is_fork.setter
    def is_fork(self, is_fork):
        """Sets the is_fork of this Repository.

        Whether the repository is a fork.  # noqa: E501

        :param is_fork: The is_fork of this Repository.  # noqa: E501
        :type: bool
        """

        self._is_fork = is_fork

    @property
    def is_private(self):
        """Gets the is_private of this Repository.  # noqa: E501

        Whether the repository is private.  # noqa: E501

        :return: The is_private of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Repository.

        Whether the repository is private.  # noqa: E501

        :param is_private: The is_private of this Repository.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def last_synced_at(self):
        """Gets the last_synced_at of this Repository.  # noqa: E501

        Last sync time with the provider (ISO 8601).  # noqa: E501

        :return: The last_synced_at of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._last_synced_at

    @last_synced_at.setter
    def last_synced_at(self, last_synced_at):
        """Sets the last_synced_at of this Repository.

        Last sync time with the provider (ISO 8601).  # noqa: E501

        :param last_synced_at: The last_synced_at of this Repository.  # noqa: E501
        :type: datetime
        """

        self._last_synced_at = last_synced_at

    @property
    def name(self):
        """Gets the name of this Repository.  # noqa: E501

        Repository name.  # noqa: E501

        :return: The name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        Repository name.  # noqa: E501

        :param name: The name of this Repository.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this Repository.  # noqa: E501

        Repository provider (e.g., \"github\").  # noqa: E501

        :return: The provider of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Repository.

        Repository provider (e.g., \"github\").  # noqa: E501

        :param provider: The provider of this Repository.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def star_count(self):
        """Gets the star_count of this Repository.  # noqa: E501

        Number of stars.  # noqa: E501

        :return: The star_count of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._star_count

    @star_count.setter
    def star_count(self, star_count):
        """Sets the star_count of this Repository.

        Number of stars.  # noqa: E501

        :param star_count: The star_count of this Repository.  # noqa: E501
        :type: int
        """

        self._star_count = star_count

    @property
    def url(self):
        """Gets the url of this Repository.  # noqa: E501

        API URL of the remote repository.  # noqa: E501

        :return: The url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repository.

        API URL of the remote repository.  # noqa: E501

        :param url: The url of this Repository.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def watch_count(self):
        """Gets the watch_count of this Repository.  # noqa: E501

        Number of watchers.  # noqa: E501

        :return: The watch_count of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._watch_count

    @watch_count.setter
    def watch_count(self, watch_count):
        """Sets the watch_count of this Repository.

        Number of watchers.  # noqa: E501

        :param watch_count: The watch_count of this Repository.  # noqa: E501
        :type: int
        """

        self._watch_count = watch_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
