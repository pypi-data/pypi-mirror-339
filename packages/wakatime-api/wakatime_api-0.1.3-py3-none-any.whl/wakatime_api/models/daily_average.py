# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DailyAverage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'holidays': 'int',
        'days_including_holidays': 'int',
        'days_minus_holidays': 'int',
        'seconds': 'float',
        'text': 'str',
        'seconds_including_other_language': 'float',
        'text_including_other_language': 'str'
    }

    attribute_map = {
        'holidays': 'holidays',
        'days_including_holidays': 'days_including_holidays',
        'days_minus_holidays': 'days_minus_holidays',
        'seconds': 'seconds',
        'text': 'text',
        'seconds_including_other_language': 'seconds_including_other_language',
        'text_including_other_language': 'text_including_other_language'
    }

    def __init__(self, holidays=None, days_including_holidays=None, days_minus_holidays=None, seconds=None, text=None, seconds_including_other_language=None, text_including_other_language=None):  # noqa: E501
        """DailyAverage - a model defined in Swagger"""  # noqa: E501
        self._holidays = None
        self._days_including_holidays = None
        self._days_minus_holidays = None
        self._seconds = None
        self._text = None
        self._seconds_including_other_language = None
        self._text_including_other_language = None
        self.discriminator = None
        if holidays is not None:
            self.holidays = holidays
        if days_including_holidays is not None:
            self.days_including_holidays = days_including_holidays
        if days_minus_holidays is not None:
            self.days_minus_holidays = days_minus_holidays
        if seconds is not None:
            self.seconds = seconds
        if text is not None:
            self.text = text
        if seconds_including_other_language is not None:
            self.seconds_including_other_language = seconds_including_other_language
        if text_including_other_language is not None:
            self.text_including_other_language = text_including_other_language

    @property
    def holidays(self):
        """Gets the holidays of this DailyAverage.  # noqa: E501

        Number of days in the range with no coding time logged.  # noqa: E501

        :return: The holidays of this DailyAverage.  # noqa: E501
        :rtype: int
        """
        return self._holidays

    @holidays.setter
    def holidays(self, holidays):
        """Sets the holidays of this DailyAverage.

        Number of days in the range with no coding time logged.  # noqa: E501

        :param holidays: The holidays of this DailyAverage.  # noqa: E501
        :type: int
        """

        self._holidays = holidays

    @property
    def days_including_holidays(self):
        """Gets the days_including_holidays of this DailyAverage.  # noqa: E501

        Total number of days in the range.  # noqa: E501

        :return: The days_including_holidays of this DailyAverage.  # noqa: E501
        :rtype: int
        """
        return self._days_including_holidays

    @days_including_holidays.setter
    def days_including_holidays(self, days_including_holidays):
        """Sets the days_including_holidays of this DailyAverage.

        Total number of days in the range.  # noqa: E501

        :param days_including_holidays: The days_including_holidays of this DailyAverage.  # noqa: E501
        :type: int
        """

        self._days_including_holidays = days_including_holidays

    @property
    def days_minus_holidays(self):
        """Gets the days_minus_holidays of this DailyAverage.  # noqa: E501

        Number of days in the range with coding activity.  # noqa: E501

        :return: The days_minus_holidays of this DailyAverage.  # noqa: E501
        :rtype: int
        """
        return self._days_minus_holidays

    @days_minus_holidays.setter
    def days_minus_holidays(self, days_minus_holidays):
        """Sets the days_minus_holidays of this DailyAverage.

        Number of days in the range with coding activity.  # noqa: E501

        :param days_minus_holidays: The days_minus_holidays of this DailyAverage.  # noqa: E501
        :type: int
        """

        self._days_minus_holidays = days_minus_holidays

    @property
    def seconds(self):
        """Gets the seconds of this DailyAverage.  # noqa: E501

        Average coding activity per day (seconds, excluding 'Other' language).  # noqa: E501

        :return: The seconds of this DailyAverage.  # noqa: E501
        :rtype: float
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this DailyAverage.

        Average coding activity per day (seconds, excluding 'Other' language).  # noqa: E501

        :param seconds: The seconds of this DailyAverage.  # noqa: E501
        :type: float
        """

        self._seconds = seconds

    @property
    def text(self):
        """Gets the text of this DailyAverage.  # noqa: E501

        Daily average (excluding 'Other' language) as human-readable string.  # noqa: E501

        :return: The text of this DailyAverage.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DailyAverage.

        Daily average (excluding 'Other' language) as human-readable string.  # noqa: E501

        :param text: The text of this DailyAverage.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def seconds_including_other_language(self):
        """Gets the seconds_including_other_language of this DailyAverage.  # noqa: E501

        Average coding activity per day (seconds, including 'Other' language).  # noqa: E501

        :return: The seconds_including_other_language of this DailyAverage.  # noqa: E501
        :rtype: float
        """
        return self._seconds_including_other_language

    @seconds_including_other_language.setter
    def seconds_including_other_language(self, seconds_including_other_language):
        """Sets the seconds_including_other_language of this DailyAverage.

        Average coding activity per day (seconds, including 'Other' language).  # noqa: E501

        :param seconds_including_other_language: The seconds_including_other_language of this DailyAverage.  # noqa: E501
        :type: float
        """

        self._seconds_including_other_language = seconds_including_other_language

    @property
    def text_including_other_language(self):
        """Gets the text_including_other_language of this DailyAverage.  # noqa: E501

        Daily average (including 'Other' language) as human-readable string.  # noqa: E501

        :return: The text_including_other_language of this DailyAverage.  # noqa: E501
        :rtype: str
        """
        return self._text_including_other_language

    @text_including_other_language.setter
    def text_including_other_language(self, text_including_other_language):
        """Sets the text_including_other_language of this DailyAverage.

        Daily average (including 'Other' language) as human-readable string.  # noqa: E501

        :param text_including_other_language: The text_including_other_language of this DailyAverage.  # noqa: E501
        :type: str
        """

        self._text_including_other_language = text_including_other_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyAverage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyAverage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
