# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Summary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grand_total': 'GrandTotal',
        'categories': 'list[CategoryStat]',
        'projects': 'list[ProjectStat]',
        'languages': 'list[LanguageStat]',
        'editors': 'list[EditorStat]',
        'operating_systems': 'list[OperatingSystemStat]',
        'dependencies': 'list[DependencyStat]',
        'machines': 'list[MachineStat]',
        'branches': 'list[BranchStat]',
        'entities': 'list[EntityStat]',
        'range': 'Range'
    }

    attribute_map = {
        'grand_total': 'grand_total',
        'categories': 'categories',
        'projects': 'projects',
        'languages': 'languages',
        'editors': 'editors',
        'operating_systems': 'operating_systems',
        'dependencies': 'dependencies',
        'machines': 'machines',
        'branches': 'branches',
        'entities': 'entities',
        'range': 'range'
    }

    def __init__(self, grand_total=None, categories=None, projects=None, languages=None, editors=None, operating_systems=None, dependencies=None, machines=None, branches=None, entities=None, range=None):  # noqa: E501
        """Summary - a model defined in Swagger"""  # noqa: E501
        self._grand_total = None
        self._categories = None
        self._projects = None
        self._languages = None
        self._editors = None
        self._operating_systems = None
        self._dependencies = None
        self._machines = None
        self._branches = None
        self._entities = None
        self._range = None
        self.discriminator = None
        if grand_total is not None:
            self.grand_total = grand_total
        if categories is not None:
            self.categories = categories
        if projects is not None:
            self.projects = projects
        if languages is not None:
            self.languages = languages
        if editors is not None:
            self.editors = editors
        if operating_systems is not None:
            self.operating_systems = operating_systems
        if dependencies is not None:
            self.dependencies = dependencies
        if machines is not None:
            self.machines = machines
        if branches is not None:
            self.branches = branches
        if entities is not None:
            self.entities = entities
        if range is not None:
            self.range = range

    @property
    def grand_total(self):
        """Gets the grand_total of this Summary.  # noqa: E501


        :return: The grand_total of this Summary.  # noqa: E501
        :rtype: GrandTotal
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this Summary.


        :param grand_total: The grand_total of this Summary.  # noqa: E501
        :type: GrandTotal
        """

        self._grand_total = grand_total

    @property
    def categories(self):
        """Gets the categories of this Summary.  # noqa: E501


        :return: The categories of this Summary.  # noqa: E501
        :rtype: list[CategoryStat]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Summary.


        :param categories: The categories of this Summary.  # noqa: E501
        :type: list[CategoryStat]
        """

        self._categories = categories

    @property
    def projects(self):
        """Gets the projects of this Summary.  # noqa: E501


        :return: The projects of this Summary.  # noqa: E501
        :rtype: list[ProjectStat]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Summary.


        :param projects: The projects of this Summary.  # noqa: E501
        :type: list[ProjectStat]
        """

        self._projects = projects

    @property
    def languages(self):
        """Gets the languages of this Summary.  # noqa: E501


        :return: The languages of this Summary.  # noqa: E501
        :rtype: list[LanguageStat]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Summary.


        :param languages: The languages of this Summary.  # noqa: E501
        :type: list[LanguageStat]
        """

        self._languages = languages

    @property
    def editors(self):
        """Gets the editors of this Summary.  # noqa: E501


        :return: The editors of this Summary.  # noqa: E501
        :rtype: list[EditorStat]
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this Summary.


        :param editors: The editors of this Summary.  # noqa: E501
        :type: list[EditorStat]
        """

        self._editors = editors

    @property
    def operating_systems(self):
        """Gets the operating_systems of this Summary.  # noqa: E501


        :return: The operating_systems of this Summary.  # noqa: E501
        :rtype: list[OperatingSystemStat]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this Summary.


        :param operating_systems: The operating_systems of this Summary.  # noqa: E501
        :type: list[OperatingSystemStat]
        """

        self._operating_systems = operating_systems

    @property
    def dependencies(self):
        """Gets the dependencies of this Summary.  # noqa: E501


        :return: The dependencies of this Summary.  # noqa: E501
        :rtype: list[DependencyStat]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Summary.


        :param dependencies: The dependencies of this Summary.  # noqa: E501
        :type: list[DependencyStat]
        """

        self._dependencies = dependencies

    @property
    def machines(self):
        """Gets the machines of this Summary.  # noqa: E501


        :return: The machines of this Summary.  # noqa: E501
        :rtype: list[MachineStat]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this Summary.


        :param machines: The machines of this Summary.  # noqa: E501
        :type: list[MachineStat]
        """

        self._machines = machines

    @property
    def branches(self):
        """Gets the branches of this Summary.  # noqa: E501

        Included only when 'project' URL parameter is used.  # noqa: E501

        :return: The branches of this Summary.  # noqa: E501
        :rtype: list[BranchStat]
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this Summary.

        Included only when 'project' URL parameter is used.  # noqa: E501

        :param branches: The branches of this Summary.  # noqa: E501
        :type: list[BranchStat]
        """

        self._branches = branches

    @property
    def entities(self):
        """Gets the entities of this Summary.  # noqa: E501

        Included only when 'project' URL parameter is used.  # noqa: E501

        :return: The entities of this Summary.  # noqa: E501
        :rtype: list[EntityStat]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this Summary.

        Included only when 'project' URL parameter is used.  # noqa: E501

        :param entities: The entities of this Summary.  # noqa: E501
        :type: list[EntityStat]
        """

        self._entities = entities

    @property
    def range(self):
        """Gets the range of this Summary.  # noqa: E501


        :return: The range of this Summary.  # noqa: E501
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Summary.


        :param range: The range of this Summary.  # noqa: E501
        :type: Range
        """

        self._range = range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Summary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
