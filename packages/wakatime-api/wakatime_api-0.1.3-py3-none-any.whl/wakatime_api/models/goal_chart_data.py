# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalChartData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_seconds': 'float',
        'actual_seconds_text': 'str',
        'goal_seconds': 'int',
        'goal_seconds_text': 'str',
        'range': 'Range',
        'range_status': 'str',
        'range_status_reason': 'str'
    }

    attribute_map = {
        'actual_seconds': 'actual_seconds',
        'actual_seconds_text': 'actual_seconds_text',
        'goal_seconds': 'goal_seconds',
        'goal_seconds_text': 'goal_seconds_text',
        'range': 'range',
        'range_status': 'range_status',
        'range_status_reason': 'range_status_reason'
    }

    def __init__(self, actual_seconds=None, actual_seconds_text=None, goal_seconds=None, goal_seconds_text=None, range=None, range_status=None, range_status_reason=None):  # noqa: E501
        """GoalChartData - a model defined in Swagger"""  # noqa: E501
        self._actual_seconds = None
        self._actual_seconds_text = None
        self._goal_seconds = None
        self._goal_seconds_text = None
        self._range = None
        self._range_status = None
        self._range_status_reason = None
        self.discriminator = None
        if actual_seconds is not None:
            self.actual_seconds = actual_seconds
        if actual_seconds_text is not None:
            self.actual_seconds_text = actual_seconds_text
        if goal_seconds is not None:
            self.goal_seconds = goal_seconds
        if goal_seconds_text is not None:
            self.goal_seconds_text = goal_seconds_text
        if range is not None:
            self.range = range
        if range_status is not None:
            self.range_status = range_status
        if range_status_reason is not None:
            self.range_status_reason = range_status_reason

    @property
    def actual_seconds(self):
        """Gets the actual_seconds of this GoalChartData.  # noqa: E501


        :return: The actual_seconds of this GoalChartData.  # noqa: E501
        :rtype: float
        """
        return self._actual_seconds

    @actual_seconds.setter
    def actual_seconds(self, actual_seconds):
        """Sets the actual_seconds of this GoalChartData.


        :param actual_seconds: The actual_seconds of this GoalChartData.  # noqa: E501
        :type: float
        """

        self._actual_seconds = actual_seconds

    @property
    def actual_seconds_text(self):
        """Gets the actual_seconds_text of this GoalChartData.  # noqa: E501


        :return: The actual_seconds_text of this GoalChartData.  # noqa: E501
        :rtype: str
        """
        return self._actual_seconds_text

    @actual_seconds_text.setter
    def actual_seconds_text(self, actual_seconds_text):
        """Sets the actual_seconds_text of this GoalChartData.


        :param actual_seconds_text: The actual_seconds_text of this GoalChartData.  # noqa: E501
        :type: str
        """

        self._actual_seconds_text = actual_seconds_text

    @property
    def goal_seconds(self):
        """Gets the goal_seconds of this GoalChartData.  # noqa: E501


        :return: The goal_seconds of this GoalChartData.  # noqa: E501
        :rtype: int
        """
        return self._goal_seconds

    @goal_seconds.setter
    def goal_seconds(self, goal_seconds):
        """Sets the goal_seconds of this GoalChartData.


        :param goal_seconds: The goal_seconds of this GoalChartData.  # noqa: E501
        :type: int
        """

        self._goal_seconds = goal_seconds

    @property
    def goal_seconds_text(self):
        """Gets the goal_seconds_text of this GoalChartData.  # noqa: E501


        :return: The goal_seconds_text of this GoalChartData.  # noqa: E501
        :rtype: str
        """
        return self._goal_seconds_text

    @goal_seconds_text.setter
    def goal_seconds_text(self, goal_seconds_text):
        """Sets the goal_seconds_text of this GoalChartData.


        :param goal_seconds_text: The goal_seconds_text of this GoalChartData.  # noqa: E501
        :type: str
        """

        self._goal_seconds_text = goal_seconds_text

    @property
    def range(self):
        """Gets the range of this GoalChartData.  # noqa: E501


        :return: The range of this GoalChartData.  # noqa: E501
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this GoalChartData.


        :param range: The range of this GoalChartData.  # noqa: E501
        :type: Range
        """

        self._range = range

    @property
    def range_status(self):
        """Gets the range_status of this GoalChartData.  # noqa: E501


        :return: The range_status of this GoalChartData.  # noqa: E501
        :rtype: str
        """
        return self._range_status

    @range_status.setter
    def range_status(self, range_status):
        """Sets the range_status of this GoalChartData.


        :param range_status: The range_status of this GoalChartData.  # noqa: E501
        :type: str
        """
        allowed_values = ["success", "fail", "pending", "ignored"]  # noqa: E501
        if range_status not in allowed_values:
            raise ValueError(
                "Invalid value for `range_status` ({0}), must be one of {1}"  # noqa: E501
                .format(range_status, allowed_values)
            )

        self._range_status = range_status

    @property
    def range_status_reason(self):
        """Gets the range_status_reason of this GoalChartData.  # noqa: E501


        :return: The range_status_reason of this GoalChartData.  # noqa: E501
        :rtype: str
        """
        return self._range_status_reason

    @range_status_reason.setter
    def range_status_reason(self, range_status_reason):
        """Sets the range_status_reason of this GoalChartData.


        :param range_status_reason: The range_status_reason of this GoalChartData.  # noqa: E501
        :type: str
        """

        self._range_status_reason = range_status_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalChartData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalChartData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
