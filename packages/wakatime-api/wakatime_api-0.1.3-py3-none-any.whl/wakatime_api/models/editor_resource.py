# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EditorResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'color': 'str',
        'website': 'str',
        'repository': 'str',
        'version': 'str',
        'version_url': 'str',
        'history_url': 'str',
        'released': 'bool',
        'hidden': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'color': 'color',
        'website': 'website',
        'repository': 'repository',
        'version': 'version',
        'version_url': 'version_url',
        'history_url': 'history_url',
        'released': 'released',
        'hidden': 'hidden'
    }

    def __init__(self, id=None, name=None, color=None, website=None, repository=None, version=None, version_url=None, history_url=None, released=None, hidden=None):  # noqa: E501
        """EditorResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._color = None
        self._website = None
        self._repository = None
        self._version = None
        self._version_url = None
        self._history_url = None
        self._released = None
        self._hidden = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if color is not None:
            self.color = color
        if website is not None:
            self.website = website
        if repository is not None:
            self.repository = repository
        if version is not None:
            self.version = version
        if version_url is not None:
            self.version_url = version_url
        if history_url is not None:
            self.history_url = history_url
        if released is not None:
            self.released = released
        if hidden is not None:
            self.hidden = hidden

    @property
    def id(self):
        """Gets the id of this EditorResource.  # noqa: E501


        :return: The id of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorResource.


        :param id: The id of this EditorResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EditorResource.  # noqa: E501


        :return: The name of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditorResource.


        :param name: The name of this EditorResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this EditorResource.  # noqa: E501


        :return: The color of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this EditorResource.


        :param color: The color of this EditorResource.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def website(self):
        """Gets the website of this EditorResource.  # noqa: E501


        :return: The website of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this EditorResource.


        :param website: The website of this EditorResource.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def repository(self):
        """Gets the repository of this EditorResource.  # noqa: E501


        :return: The repository of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this EditorResource.


        :param repository: The repository of this EditorResource.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def version(self):
        """Gets the version of this EditorResource.  # noqa: E501


        :return: The version of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EditorResource.


        :param version: The version of this EditorResource.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_url(self):
        """Gets the version_url of this EditorResource.  # noqa: E501


        :return: The version_url of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._version_url

    @version_url.setter
    def version_url(self, version_url):
        """Sets the version_url of this EditorResource.


        :param version_url: The version_url of this EditorResource.  # noqa: E501
        :type: str
        """

        self._version_url = version_url

    @property
    def history_url(self):
        """Gets the history_url of this EditorResource.  # noqa: E501


        :return: The history_url of this EditorResource.  # noqa: E501
        :rtype: str
        """
        return self._history_url

    @history_url.setter
    def history_url(self, history_url):
        """Sets the history_url of this EditorResource.


        :param history_url: The history_url of this EditorResource.  # noqa: E501
        :type: str
        """

        self._history_url = history_url

    @property
    def released(self):
        """Gets the released of this EditorResource.  # noqa: E501


        :return: The released of this EditorResource.  # noqa: E501
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this EditorResource.


        :param released: The released of this EditorResource.  # noqa: E501
        :type: bool
        """

        self._released = released

    @property
    def hidden(self):
        """Gets the hidden of this EditorResource.  # noqa: E501


        :return: The hidden of this EditorResource.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this EditorResource.


        :param hidden: The hidden of this EditorResource.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
