# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_descriptions': 'dict(str, str)',
        'ips': 'MetaResponseDataIps',
        'last_modified_at': 'datetime'
    }

    attribute_map = {
        'ip_descriptions': 'ip_descriptions',
        'ips': 'ips',
        'last_modified_at': 'last_modified_at'
    }

    def __init__(self, ip_descriptions=None, ips=None, last_modified_at=None):  # noqa: E501
        """MetaResponseData - a model defined in Swagger"""  # noqa: E501
        self._ip_descriptions = None
        self._ips = None
        self._last_modified_at = None
        self.discriminator = None
        if ip_descriptions is not None:
            self.ip_descriptions = ip_descriptions
        if ips is not None:
            self.ips = ips
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at

    @property
    def ip_descriptions(self):
        """Gets the ip_descriptions of this MetaResponseData.  # noqa: E501


        :return: The ip_descriptions of this MetaResponseData.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ip_descriptions

    @ip_descriptions.setter
    def ip_descriptions(self, ip_descriptions):
        """Sets the ip_descriptions of this MetaResponseData.


        :param ip_descriptions: The ip_descriptions of this MetaResponseData.  # noqa: E501
        :type: dict(str, str)
        """

        self._ip_descriptions = ip_descriptions

    @property
    def ips(self):
        """Gets the ips of this MetaResponseData.  # noqa: E501


        :return: The ips of this MetaResponseData.  # noqa: E501
        :rtype: MetaResponseDataIps
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this MetaResponseData.


        :param ips: The ips of this MetaResponseData.  # noqa: E501
        :type: MetaResponseDataIps
        """

        self._ips = ips

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this MetaResponseData.  # noqa: E501


        :return: The last_modified_at of this MetaResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this MetaResponseData.


        :param last_modified_at: The last_modified_at of this MetaResponseData.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
