# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Org(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'default_project_privacy': 'str',
        'invited_people_count': 'int',
        'invited_people_count_human_readable': 'str',
        'is_duration_visible': 'bool',
        'people_count': 'int',
        'people_count_human_readable': 'str',
        'timeout': 'int',
        'timezone': 'str',
        'writes_only': 'bool',
        'can_current_user_list_dashboards': 'bool',
        'can_current_user_create_dashboards': 'bool',
        'can_current_user_display_coding_on_dashboards': 'bool',
        'can_current_user_view_all_dashboards': 'bool',
        'can_current_user_add_people_to_dashboards': 'bool',
        'can_current_user_remove_people_from_dashboards': 'bool',
        'can_current_user_edit_and_delete_dashboards': 'bool',
        'can_current_user_add_people_to_org': 'bool',
        'can_current_user_remove_people_from_org': 'bool',
        'can_current_user_manage_groups': 'bool',
        'can_current_user_view_audit_log': 'bool',
        'can_current_user_edit_org': 'bool',
        'can_current_user_manage_billing': 'bool',
        'can_current_user_delete_org': 'bool',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'default_project_privacy': 'default_project_privacy',
        'invited_people_count': 'invited_people_count',
        'invited_people_count_human_readable': 'invited_people_count_human_readable',
        'is_duration_visible': 'is_duration_visible',
        'people_count': 'people_count',
        'people_count_human_readable': 'people_count_human_readable',
        'timeout': 'timeout',
        'timezone': 'timezone',
        'writes_only': 'writes_only',
        'can_current_user_list_dashboards': 'can_current_user_list_dashboards',
        'can_current_user_create_dashboards': 'can_current_user_create_dashboards',
        'can_current_user_display_coding_on_dashboards': 'can_current_user_display_coding_on_dashboards',
        'can_current_user_view_all_dashboards': 'can_current_user_view_all_dashboards',
        'can_current_user_add_people_to_dashboards': 'can_current_user_add_people_to_dashboards',
        'can_current_user_remove_people_from_dashboards': 'can_current_user_remove_people_from_dashboards',
        'can_current_user_edit_and_delete_dashboards': 'can_current_user_edit_and_delete_dashboards',
        'can_current_user_add_people_to_org': 'can_current_user_add_people_to_org',
        'can_current_user_remove_people_from_org': 'can_current_user_remove_people_from_org',
        'can_current_user_manage_groups': 'can_current_user_manage_groups',
        'can_current_user_view_audit_log': 'can_current_user_view_audit_log',
        'can_current_user_edit_org': 'can_current_user_edit_org',
        'can_current_user_manage_billing': 'can_current_user_manage_billing',
        'can_current_user_delete_org': 'can_current_user_delete_org',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, name=None, default_project_privacy=None, invited_people_count=None, invited_people_count_human_readable=None, is_duration_visible=None, people_count=None, people_count_human_readable=None, timeout=None, timezone=None, writes_only=None, can_current_user_list_dashboards=None, can_current_user_create_dashboards=None, can_current_user_display_coding_on_dashboards=None, can_current_user_view_all_dashboards=None, can_current_user_add_people_to_dashboards=None, can_current_user_remove_people_from_dashboards=None, can_current_user_edit_and_delete_dashboards=None, can_current_user_add_people_to_org=None, can_current_user_remove_people_from_org=None, can_current_user_manage_groups=None, can_current_user_view_audit_log=None, can_current_user_edit_org=None, can_current_user_manage_billing=None, can_current_user_delete_org=None, created_at=None, modified_at=None):  # noqa: E501
        """Org - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._default_project_privacy = None
        self._invited_people_count = None
        self._invited_people_count_human_readable = None
        self._is_duration_visible = None
        self._people_count = None
        self._people_count_human_readable = None
        self._timeout = None
        self._timezone = None
        self._writes_only = None
        self._can_current_user_list_dashboards = None
        self._can_current_user_create_dashboards = None
        self._can_current_user_display_coding_on_dashboards = None
        self._can_current_user_view_all_dashboards = None
        self._can_current_user_add_people_to_dashboards = None
        self._can_current_user_remove_people_from_dashboards = None
        self._can_current_user_edit_and_delete_dashboards = None
        self._can_current_user_add_people_to_org = None
        self._can_current_user_remove_people_from_org = None
        self._can_current_user_manage_groups = None
        self._can_current_user_view_audit_log = None
        self._can_current_user_edit_org = None
        self._can_current_user_manage_billing = None
        self._can_current_user_delete_org = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if default_project_privacy is not None:
            self.default_project_privacy = default_project_privacy
        if invited_people_count is not None:
            self.invited_people_count = invited_people_count
        if invited_people_count_human_readable is not None:
            self.invited_people_count_human_readable = invited_people_count_human_readable
        if is_duration_visible is not None:
            self.is_duration_visible = is_duration_visible
        if people_count is not None:
            self.people_count = people_count
        if people_count_human_readable is not None:
            self.people_count_human_readable = people_count_human_readable
        if timeout is not None:
            self.timeout = timeout
        if timezone is not None:
            self.timezone = timezone
        if writes_only is not None:
            self.writes_only = writes_only
        if can_current_user_list_dashboards is not None:
            self.can_current_user_list_dashboards = can_current_user_list_dashboards
        if can_current_user_create_dashboards is not None:
            self.can_current_user_create_dashboards = can_current_user_create_dashboards
        if can_current_user_display_coding_on_dashboards is not None:
            self.can_current_user_display_coding_on_dashboards = can_current_user_display_coding_on_dashboards
        if can_current_user_view_all_dashboards is not None:
            self.can_current_user_view_all_dashboards = can_current_user_view_all_dashboards
        if can_current_user_add_people_to_dashboards is not None:
            self.can_current_user_add_people_to_dashboards = can_current_user_add_people_to_dashboards
        if can_current_user_remove_people_from_dashboards is not None:
            self.can_current_user_remove_people_from_dashboards = can_current_user_remove_people_from_dashboards
        if can_current_user_edit_and_delete_dashboards is not None:
            self.can_current_user_edit_and_delete_dashboards = can_current_user_edit_and_delete_dashboards
        if can_current_user_add_people_to_org is not None:
            self.can_current_user_add_people_to_org = can_current_user_add_people_to_org
        if can_current_user_remove_people_from_org is not None:
            self.can_current_user_remove_people_from_org = can_current_user_remove_people_from_org
        if can_current_user_manage_groups is not None:
            self.can_current_user_manage_groups = can_current_user_manage_groups
        if can_current_user_view_audit_log is not None:
            self.can_current_user_view_audit_log = can_current_user_view_audit_log
        if can_current_user_edit_org is not None:
            self.can_current_user_edit_org = can_current_user_edit_org
        if can_current_user_manage_billing is not None:
            self.can_current_user_manage_billing = can_current_user_manage_billing
        if can_current_user_delete_org is not None:
            self.can_current_user_delete_org = can_current_user_delete_org
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this Org.  # noqa: E501


        :return: The id of this Org.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Org.


        :param id: The id of this Org.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Org.  # noqa: E501


        :return: The name of this Org.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Org.


        :param name: The name of this Org.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_project_privacy(self):
        """Gets the default_project_privacy of this Org.  # noqa: E501


        :return: The default_project_privacy of this Org.  # noqa: E501
        :rtype: str
        """
        return self._default_project_privacy

    @default_project_privacy.setter
    def default_project_privacy(self, default_project_privacy):
        """Sets the default_project_privacy of this Org.


        :param default_project_privacy: The default_project_privacy of this Org.  # noqa: E501
        :type: str
        """
        allowed_values = ["visible", "hidden"]  # noqa: E501
        if default_project_privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `default_project_privacy` ({0}), must be one of {1}"  # noqa: E501
                .format(default_project_privacy, allowed_values)
            )

        self._default_project_privacy = default_project_privacy

    @property
    def invited_people_count(self):
        """Gets the invited_people_count of this Org.  # noqa: E501


        :return: The invited_people_count of this Org.  # noqa: E501
        :rtype: int
        """
        return self._invited_people_count

    @invited_people_count.setter
    def invited_people_count(self, invited_people_count):
        """Sets the invited_people_count of this Org.


        :param invited_people_count: The invited_people_count of this Org.  # noqa: E501
        :type: int
        """

        self._invited_people_count = invited_people_count

    @property
    def invited_people_count_human_readable(self):
        """Gets the invited_people_count_human_readable of this Org.  # noqa: E501


        :return: The invited_people_count_human_readable of this Org.  # noqa: E501
        :rtype: str
        """
        return self._invited_people_count_human_readable

    @invited_people_count_human_readable.setter
    def invited_people_count_human_readable(self, invited_people_count_human_readable):
        """Sets the invited_people_count_human_readable of this Org.


        :param invited_people_count_human_readable: The invited_people_count_human_readable of this Org.  # noqa: E501
        :type: str
        """

        self._invited_people_count_human_readable = invited_people_count_human_readable

    @property
    def is_duration_visible(self):
        """Gets the is_duration_visible of this Org.  # noqa: E501


        :return: The is_duration_visible of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._is_duration_visible

    @is_duration_visible.setter
    def is_duration_visible(self, is_duration_visible):
        """Sets the is_duration_visible of this Org.


        :param is_duration_visible: The is_duration_visible of this Org.  # noqa: E501
        :type: bool
        """

        self._is_duration_visible = is_duration_visible

    @property
    def people_count(self):
        """Gets the people_count of this Org.  # noqa: E501


        :return: The people_count of this Org.  # noqa: E501
        :rtype: int
        """
        return self._people_count

    @people_count.setter
    def people_count(self, people_count):
        """Sets the people_count of this Org.


        :param people_count: The people_count of this Org.  # noqa: E501
        :type: int
        """

        self._people_count = people_count

    @property
    def people_count_human_readable(self):
        """Gets the people_count_human_readable of this Org.  # noqa: E501


        :return: The people_count_human_readable of this Org.  # noqa: E501
        :rtype: str
        """
        return self._people_count_human_readable

    @people_count_human_readable.setter
    def people_count_human_readable(self, people_count_human_readable):
        """Sets the people_count_human_readable of this Org.


        :param people_count_human_readable: The people_count_human_readable of this Org.  # noqa: E501
        :type: str
        """

        self._people_count_human_readable = people_count_human_readable

    @property
    def timeout(self):
        """Gets the timeout of this Org.  # noqa: E501


        :return: The timeout of this Org.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Org.


        :param timeout: The timeout of this Org.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def timezone(self):
        """Gets the timezone of this Org.  # noqa: E501


        :return: The timezone of this Org.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Org.


        :param timezone: The timezone of this Org.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def writes_only(self):
        """Gets the writes_only of this Org.  # noqa: E501


        :return: The writes_only of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._writes_only

    @writes_only.setter
    def writes_only(self, writes_only):
        """Sets the writes_only of this Org.


        :param writes_only: The writes_only of this Org.  # noqa: E501
        :type: bool
        """

        self._writes_only = writes_only

    @property
    def can_current_user_list_dashboards(self):
        """Gets the can_current_user_list_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_list_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_list_dashboards

    @can_current_user_list_dashboards.setter
    def can_current_user_list_dashboards(self, can_current_user_list_dashboards):
        """Sets the can_current_user_list_dashboards of this Org.


        :param can_current_user_list_dashboards: The can_current_user_list_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_list_dashboards = can_current_user_list_dashboards

    @property
    def can_current_user_create_dashboards(self):
        """Gets the can_current_user_create_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_create_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_create_dashboards

    @can_current_user_create_dashboards.setter
    def can_current_user_create_dashboards(self, can_current_user_create_dashboards):
        """Sets the can_current_user_create_dashboards of this Org.


        :param can_current_user_create_dashboards: The can_current_user_create_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_create_dashboards = can_current_user_create_dashboards

    @property
    def can_current_user_display_coding_on_dashboards(self):
        """Gets the can_current_user_display_coding_on_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_display_coding_on_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_display_coding_on_dashboards

    @can_current_user_display_coding_on_dashboards.setter
    def can_current_user_display_coding_on_dashboards(self, can_current_user_display_coding_on_dashboards):
        """Sets the can_current_user_display_coding_on_dashboards of this Org.


        :param can_current_user_display_coding_on_dashboards: The can_current_user_display_coding_on_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_display_coding_on_dashboards = can_current_user_display_coding_on_dashboards

    @property
    def can_current_user_view_all_dashboards(self):
        """Gets the can_current_user_view_all_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_view_all_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_view_all_dashboards

    @can_current_user_view_all_dashboards.setter
    def can_current_user_view_all_dashboards(self, can_current_user_view_all_dashboards):
        """Sets the can_current_user_view_all_dashboards of this Org.


        :param can_current_user_view_all_dashboards: The can_current_user_view_all_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_view_all_dashboards = can_current_user_view_all_dashboards

    @property
    def can_current_user_add_people_to_dashboards(self):
        """Gets the can_current_user_add_people_to_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_add_people_to_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_add_people_to_dashboards

    @can_current_user_add_people_to_dashboards.setter
    def can_current_user_add_people_to_dashboards(self, can_current_user_add_people_to_dashboards):
        """Sets the can_current_user_add_people_to_dashboards of this Org.


        :param can_current_user_add_people_to_dashboards: The can_current_user_add_people_to_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_add_people_to_dashboards = can_current_user_add_people_to_dashboards

    @property
    def can_current_user_remove_people_from_dashboards(self):
        """Gets the can_current_user_remove_people_from_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_remove_people_from_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_remove_people_from_dashboards

    @can_current_user_remove_people_from_dashboards.setter
    def can_current_user_remove_people_from_dashboards(self, can_current_user_remove_people_from_dashboards):
        """Sets the can_current_user_remove_people_from_dashboards of this Org.


        :param can_current_user_remove_people_from_dashboards: The can_current_user_remove_people_from_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_remove_people_from_dashboards = can_current_user_remove_people_from_dashboards

    @property
    def can_current_user_edit_and_delete_dashboards(self):
        """Gets the can_current_user_edit_and_delete_dashboards of this Org.  # noqa: E501


        :return: The can_current_user_edit_and_delete_dashboards of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_edit_and_delete_dashboards

    @can_current_user_edit_and_delete_dashboards.setter
    def can_current_user_edit_and_delete_dashboards(self, can_current_user_edit_and_delete_dashboards):
        """Sets the can_current_user_edit_and_delete_dashboards of this Org.


        :param can_current_user_edit_and_delete_dashboards: The can_current_user_edit_and_delete_dashboards of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_edit_and_delete_dashboards = can_current_user_edit_and_delete_dashboards

    @property
    def can_current_user_add_people_to_org(self):
        """Gets the can_current_user_add_people_to_org of this Org.  # noqa: E501


        :return: The can_current_user_add_people_to_org of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_add_people_to_org

    @can_current_user_add_people_to_org.setter
    def can_current_user_add_people_to_org(self, can_current_user_add_people_to_org):
        """Sets the can_current_user_add_people_to_org of this Org.


        :param can_current_user_add_people_to_org: The can_current_user_add_people_to_org of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_add_people_to_org = can_current_user_add_people_to_org

    @property
    def can_current_user_remove_people_from_org(self):
        """Gets the can_current_user_remove_people_from_org of this Org.  # noqa: E501


        :return: The can_current_user_remove_people_from_org of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_remove_people_from_org

    @can_current_user_remove_people_from_org.setter
    def can_current_user_remove_people_from_org(self, can_current_user_remove_people_from_org):
        """Sets the can_current_user_remove_people_from_org of this Org.


        :param can_current_user_remove_people_from_org: The can_current_user_remove_people_from_org of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_remove_people_from_org = can_current_user_remove_people_from_org

    @property
    def can_current_user_manage_groups(self):
        """Gets the can_current_user_manage_groups of this Org.  # noqa: E501


        :return: The can_current_user_manage_groups of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_manage_groups

    @can_current_user_manage_groups.setter
    def can_current_user_manage_groups(self, can_current_user_manage_groups):
        """Sets the can_current_user_manage_groups of this Org.


        :param can_current_user_manage_groups: The can_current_user_manage_groups of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_manage_groups = can_current_user_manage_groups

    @property
    def can_current_user_view_audit_log(self):
        """Gets the can_current_user_view_audit_log of this Org.  # noqa: E501


        :return: The can_current_user_view_audit_log of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_view_audit_log

    @can_current_user_view_audit_log.setter
    def can_current_user_view_audit_log(self, can_current_user_view_audit_log):
        """Sets the can_current_user_view_audit_log of this Org.


        :param can_current_user_view_audit_log: The can_current_user_view_audit_log of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_view_audit_log = can_current_user_view_audit_log

    @property
    def can_current_user_edit_org(self):
        """Gets the can_current_user_edit_org of this Org.  # noqa: E501


        :return: The can_current_user_edit_org of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_edit_org

    @can_current_user_edit_org.setter
    def can_current_user_edit_org(self, can_current_user_edit_org):
        """Sets the can_current_user_edit_org of this Org.


        :param can_current_user_edit_org: The can_current_user_edit_org of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_edit_org = can_current_user_edit_org

    @property
    def can_current_user_manage_billing(self):
        """Gets the can_current_user_manage_billing of this Org.  # noqa: E501


        :return: The can_current_user_manage_billing of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_manage_billing

    @can_current_user_manage_billing.setter
    def can_current_user_manage_billing(self, can_current_user_manage_billing):
        """Sets the can_current_user_manage_billing of this Org.


        :param can_current_user_manage_billing: The can_current_user_manage_billing of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_manage_billing = can_current_user_manage_billing

    @property
    def can_current_user_delete_org(self):
        """Gets the can_current_user_delete_org of this Org.  # noqa: E501


        :return: The can_current_user_delete_org of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_delete_org

    @can_current_user_delete_org.setter
    def can_current_user_delete_org(self, can_current_user_delete_org):
        """Sets the can_current_user_delete_org of this Org.


        :param can_current_user_delete_org: The can_current_user_delete_org of this Org.  # noqa: E501
        :type: bool
        """

        self._can_current_user_delete_org = can_current_user_delete_org

    @property
    def created_at(self):
        """Gets the created_at of this Org.  # noqa: E501


        :return: The created_at of this Org.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Org.


        :param created_at: The created_at of this Org.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Org.  # noqa: E501


        :return: The modified_at of this Org.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Org.


        :param modified_at: The modified_at of this Org.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Org, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Org):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
