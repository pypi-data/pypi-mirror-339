# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'Insight',
        'range': 'str',
        'human_readable_range': 'str',
        'status': 'str',
        'is_including_today': 'bool',
        'is_up_to_date': 'bool',
        'percent_calculated': 'int',
        'start': 'datetime',
        'end': 'datetime',
        'timezone': 'str',
        'timeout': 'int',
        'writes_only': 'bool',
        'user_id': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'additional_properties': 'additionalProperties',
        'range': 'range',
        'human_readable_range': 'human_readable_range',
        'status': 'status',
        'is_including_today': 'is_including_today',
        'is_up_to_date': 'is_up_to_date',
        'percent_calculated': 'percent_calculated',
        'start': 'start',
        'end': 'end',
        'timezone': 'timezone',
        'timeout': 'timeout',
        'writes_only': 'writes_only',
        'user_id': 'user_id',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, additional_properties=None, range=None, human_readable_range=None, status=None, is_including_today=None, is_up_to_date=None, percent_calculated=None, start=None, end=None, timezone=None, timeout=None, writes_only=None, user_id=None, created_at=None, modified_at=None):  # noqa: E501
        """InsightResponseData - a model defined in Swagger"""  # noqa: E501
        self._additional_properties = None
        self._range = None
        self._human_readable_range = None
        self._status = None
        self._is_including_today = None
        self._is_up_to_date = None
        self._percent_calculated = None
        self._start = None
        self._end = None
        self._timezone = None
        self._timeout = None
        self._writes_only = None
        self._user_id = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if range is not None:
            self.range = range
        if human_readable_range is not None:
            self.human_readable_range = human_readable_range
        if status is not None:
            self.status = status
        if is_including_today is not None:
            self.is_including_today = is_including_today
        if is_up_to_date is not None:
            self.is_up_to_date = is_up_to_date
        if percent_calculated is not None:
            self.percent_calculated = percent_calculated
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if timezone is not None:
            self.timezone = timezone
        if timeout is not None:
            self.timeout = timeout
        if writes_only is not None:
            self.writes_only = writes_only
        if user_id is not None:
            self.user_id = user_id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def additional_properties(self):
        """Gets the additional_properties of this InsightResponseData.  # noqa: E501


        :return: The additional_properties of this InsightResponseData.  # noqa: E501
        :rtype: Insight
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this InsightResponseData.


        :param additional_properties: The additional_properties of this InsightResponseData.  # noqa: E501
        :type: Insight
        """

        self._additional_properties = additional_properties

    @property
    def range(self):
        """Gets the range of this InsightResponseData.  # noqa: E501


        :return: The range of this InsightResponseData.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this InsightResponseData.


        :param range: The range of this InsightResponseData.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def human_readable_range(self):
        """Gets the human_readable_range of this InsightResponseData.  # noqa: E501


        :return: The human_readable_range of this InsightResponseData.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_range

    @human_readable_range.setter
    def human_readable_range(self, human_readable_range):
        """Sets the human_readable_range of this InsightResponseData.


        :param human_readable_range: The human_readable_range of this InsightResponseData.  # noqa: E501
        :type: str
        """

        self._human_readable_range = human_readable_range

    @property
    def status(self):
        """Gets the status of this InsightResponseData.  # noqa: E501


        :return: The status of this InsightResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InsightResponseData.


        :param status: The status of this InsightResponseData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def is_including_today(self):
        """Gets the is_including_today of this InsightResponseData.  # noqa: E501


        :return: The is_including_today of this InsightResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_including_today

    @is_including_today.setter
    def is_including_today(self, is_including_today):
        """Sets the is_including_today of this InsightResponseData.


        :param is_including_today: The is_including_today of this InsightResponseData.  # noqa: E501
        :type: bool
        """

        self._is_including_today = is_including_today

    @property
    def is_up_to_date(self):
        """Gets the is_up_to_date of this InsightResponseData.  # noqa: E501


        :return: The is_up_to_date of this InsightResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_up_to_date

    @is_up_to_date.setter
    def is_up_to_date(self, is_up_to_date):
        """Sets the is_up_to_date of this InsightResponseData.


        :param is_up_to_date: The is_up_to_date of this InsightResponseData.  # noqa: E501
        :type: bool
        """

        self._is_up_to_date = is_up_to_date

    @property
    def percent_calculated(self):
        """Gets the percent_calculated of this InsightResponseData.  # noqa: E501


        :return: The percent_calculated of this InsightResponseData.  # noqa: E501
        :rtype: int
        """
        return self._percent_calculated

    @percent_calculated.setter
    def percent_calculated(self, percent_calculated):
        """Sets the percent_calculated of this InsightResponseData.


        :param percent_calculated: The percent_calculated of this InsightResponseData.  # noqa: E501
        :type: int
        """

        self._percent_calculated = percent_calculated

    @property
    def start(self):
        """Gets the start of this InsightResponseData.  # noqa: E501


        :return: The start of this InsightResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this InsightResponseData.


        :param start: The start of this InsightResponseData.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this InsightResponseData.  # noqa: E501


        :return: The end of this InsightResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this InsightResponseData.


        :param end: The end of this InsightResponseData.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def timezone(self):
        """Gets the timezone of this InsightResponseData.  # noqa: E501


        :return: The timezone of this InsightResponseData.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InsightResponseData.


        :param timezone: The timezone of this InsightResponseData.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def timeout(self):
        """Gets the timeout of this InsightResponseData.  # noqa: E501


        :return: The timeout of this InsightResponseData.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this InsightResponseData.


        :param timeout: The timeout of this InsightResponseData.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def writes_only(self):
        """Gets the writes_only of this InsightResponseData.  # noqa: E501


        :return: The writes_only of this InsightResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._writes_only

    @writes_only.setter
    def writes_only(self, writes_only):
        """Sets the writes_only of this InsightResponseData.


        :param writes_only: The writes_only of this InsightResponseData.  # noqa: E501
        :type: bool
        """

        self._writes_only = writes_only

    @property
    def user_id(self):
        """Gets the user_id of this InsightResponseData.  # noqa: E501


        :return: The user_id of this InsightResponseData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InsightResponseData.


        :param user_id: The user_id of this InsightResponseData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this InsightResponseData.  # noqa: E501


        :return: The created_at of this InsightResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InsightResponseData.


        :param created_at: The created_at of this InsightResponseData.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InsightResponseData.  # noqa: E501


        :return: The modified_at of this InsightResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InsightResponseData.


        :param modified_at: The modified_at of this InsightResponseData.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsightResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
