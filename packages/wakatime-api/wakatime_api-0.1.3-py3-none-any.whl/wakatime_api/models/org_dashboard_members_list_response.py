# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgDashboardMembersListResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[OrgDashboardMemberListItem]',
        'next_page': 'int',
        'page': 'int',
        'prev_page': 'int',
        'total': 'int',
        'total_pages': 'int'
    }

    attribute_map = {
        'data': 'data',
        'next_page': 'next_page',
        'page': 'page',
        'prev_page': 'prev_page',
        'total': 'total',
        'total_pages': 'total_pages'
    }

    def __init__(self, data=None, next_page=None, page=None, prev_page=None, total=None, total_pages=None):  # noqa: E501
        """OrgDashboardMembersListResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._next_page = None
        self._page = None
        self._prev_page = None
        self._total = None
        self._total_pages = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if next_page is not None:
            self.next_page = next_page
        if page is not None:
            self.page = page
        if prev_page is not None:
            self.prev_page = prev_page
        if total is not None:
            self.total = total
        if total_pages is not None:
            self.total_pages = total_pages

    @property
    def data(self):
        """Gets the data of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The data of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: list[OrgDashboardMemberListItem]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OrgDashboardMembersListResponse.


        :param data: The data of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: list[OrgDashboardMemberListItem]
        """

        self._data = data

    @property
    def next_page(self):
        """Gets the next_page of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The next_page of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: int
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this OrgDashboardMembersListResponse.


        :param next_page: The next_page of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: int
        """

        self._next_page = next_page

    @property
    def page(self):
        """Gets the page of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The page of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this OrgDashboardMembersListResponse.


        :param page: The page of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def prev_page(self):
        """Gets the prev_page of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The prev_page of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: int
        """
        return self._prev_page

    @prev_page.setter
    def prev_page(self, prev_page):
        """Sets the prev_page of this OrgDashboardMembersListResponse.


        :param prev_page: The prev_page of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: int
        """

        self._prev_page = prev_page

    @property
    def total(self):
        """Gets the total of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The total of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrgDashboardMembersListResponse.


        :param total: The total of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def total_pages(self):
        """Gets the total_pages of this OrgDashboardMembersListResponse.  # noqa: E501


        :return: The total_pages of this OrgDashboardMembersListResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this OrgDashboardMembersListResponse.


        :param total_pages: The total_pages of this OrgDashboardMembersListResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgDashboardMembersListResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgDashboardMembersListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
