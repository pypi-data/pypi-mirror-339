# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateLeaderboardLeadersResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[PrivateLeaderboardMember]',
        'language': 'str',
        'country_code': 'str',
        'modified_at': 'datetime',
        'page': 'int',
        'total_pages': 'int',
        'range': 'Range',
        'timeout': 'int',
        'writes_only': 'bool'
    }

    attribute_map = {
        'data': 'data',
        'language': 'language',
        'country_code': 'country_code',
        'modified_at': 'modified_at',
        'page': 'page',
        'total_pages': 'total_pages',
        'range': 'range',
        'timeout': 'timeout',
        'writes_only': 'writes_only'
    }

    def __init__(self, data=None, language=None, country_code=None, modified_at=None, page=None, total_pages=None, range=None, timeout=None, writes_only=None):  # noqa: E501
        """PrivateLeaderboardLeadersResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._language = None
        self._country_code = None
        self._modified_at = None
        self._page = None
        self._total_pages = None
        self._range = None
        self._timeout = None
        self._writes_only = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if language is not None:
            self.language = language
        if country_code is not None:
            self.country_code = country_code
        if modified_at is not None:
            self.modified_at = modified_at
        if page is not None:
            self.page = page
        if total_pages is not None:
            self.total_pages = total_pages
        if range is not None:
            self.range = range
        if timeout is not None:
            self.timeout = timeout
        if writes_only is not None:
            self.writes_only = writes_only

    @property
    def data(self):
        """Gets the data of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The data of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: list[PrivateLeaderboardMember]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PrivateLeaderboardLeadersResponse.


        :param data: The data of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: list[PrivateLeaderboardMember]
        """

        self._data = data

    @property
    def language(self):
        """Gets the language of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The language of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PrivateLeaderboardLeadersResponse.


        :param language: The language of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def country_code(self):
        """Gets the country_code of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The country_code of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PrivateLeaderboardLeadersResponse.


        :param country_code: The country_code of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def modified_at(self):
        """Gets the modified_at of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The modified_at of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this PrivateLeaderboardLeadersResponse.


        :param modified_at: The modified_at of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def page(self):
        """Gets the page of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The page of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PrivateLeaderboardLeadersResponse.


        :param page: The page of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def total_pages(self):
        """Gets the total_pages of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The total_pages of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PrivateLeaderboardLeadersResponse.


        :param total_pages: The total_pages of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def range(self):
        """Gets the range of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The range of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this PrivateLeaderboardLeadersResponse.


        :param range: The range of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: Range
        """

        self._range = range

    @property
    def timeout(self):
        """Gets the timeout of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The timeout of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PrivateLeaderboardLeadersResponse.


        :param timeout: The timeout of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def writes_only(self):
        """Gets the writes_only of this PrivateLeaderboardLeadersResponse.  # noqa: E501


        :return: The writes_only of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :rtype: bool
        """
        return self._writes_only

    @writes_only.setter
    def writes_only(self, writes_only):
        """Sets the writes_only of this PrivateLeaderboardLeadersResponse.


        :param writes_only: The writes_only of this PrivateLeaderboardLeadersResponse.  # noqa: E501
        :type: bool
        """

        self._writes_only = writes_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateLeaderboardLeadersResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateLeaderboardLeadersResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
