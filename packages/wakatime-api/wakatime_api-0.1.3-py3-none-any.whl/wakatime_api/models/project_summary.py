# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'privacy': 'str',
        'repository': 'Repository'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'privacy': 'privacy',
        'repository': 'repository'
    }

    def __init__(self, id=None, name=None, privacy=None, repository=None):  # noqa: E501
        """ProjectSummary - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._privacy = None
        self._repository = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if privacy is not None:
            self.privacy = privacy
        if repository is not None:
            self.repository = repository

    @property
    def id(self):
        """Gets the id of this ProjectSummary.  # noqa: E501

        Unique ID of the project.  # noqa: E501

        :return: The id of this ProjectSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectSummary.

        Unique ID of the project.  # noqa: E501

        :param id: The id of this ProjectSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectSummary.  # noqa: E501

        Project name.  # noqa: E501

        :return: The name of this ProjectSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectSummary.

        Project name.  # noqa: E501

        :param name: The name of this ProjectSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def privacy(self):
        """Gets the privacy of this ProjectSummary.  # noqa: E501

        Project privacy setting.  # noqa: E501

        :return: The privacy of this ProjectSummary.  # noqa: E501
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ProjectSummary.

        Project privacy setting.  # noqa: E501

        :param privacy: The privacy of this ProjectSummary.  # noqa: E501
        :type: str
        """

        self._privacy = privacy

    @property
    def repository(self):
        """Gets the repository of this ProjectSummary.  # noqa: E501


        :return: The repository of this ProjectSummary.  # noqa: E501
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ProjectSummary.


        :param repository: The repository of this ProjectSummary.  # noqa: E501
        :type: Repository
        """

        self._repository = repository

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
