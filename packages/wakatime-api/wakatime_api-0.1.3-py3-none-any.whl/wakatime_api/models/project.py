# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'repository': 'Repository',
        'badge': 'str',
        'color': 'str',
        'clients': 'list[str]',
        'has_public_url': 'bool',
        'human_readable_last_heartbeat_at': 'str',
        'last_heartbeat_at': 'datetime',
        'human_readable_first_heartbeat_at': 'str',
        'first_heartbeat_at': 'datetime',
        'url': 'str',
        'urlencoded_name': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'repository': 'repository',
        'badge': 'badge',
        'color': 'color',
        'clients': 'clients',
        'has_public_url': 'has_public_url',
        'human_readable_last_heartbeat_at': 'human_readable_last_heartbeat_at',
        'last_heartbeat_at': 'last_heartbeat_at',
        'human_readable_first_heartbeat_at': 'human_readable_first_heartbeat_at',
        'first_heartbeat_at': 'first_heartbeat_at',
        'url': 'url',
        'urlencoded_name': 'urlencoded_name',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, name=None, repository=None, badge=None, color=None, clients=None, has_public_url=None, human_readable_last_heartbeat_at=None, last_heartbeat_at=None, human_readable_first_heartbeat_at=None, first_heartbeat_at=None, url=None, urlencoded_name=None, created_at=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._repository = None
        self._badge = None
        self._color = None
        self._clients = None
        self._has_public_url = None
        self._human_readable_last_heartbeat_at = None
        self._last_heartbeat_at = None
        self._human_readable_first_heartbeat_at = None
        self._first_heartbeat_at = None
        self._url = None
        self._urlencoded_name = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if repository is not None:
            self.repository = repository
        if badge is not None:
            self.badge = badge
        if color is not None:
            self.color = color
        if clients is not None:
            self.clients = clients
        if has_public_url is not None:
            self.has_public_url = has_public_url
        if human_readable_last_heartbeat_at is not None:
            self.human_readable_last_heartbeat_at = human_readable_last_heartbeat_at
        if last_heartbeat_at is not None:
            self.last_heartbeat_at = last_heartbeat_at
        if human_readable_first_heartbeat_at is not None:
            self.human_readable_first_heartbeat_at = human_readable_first_heartbeat_at
        if first_heartbeat_at is not None:
            self.first_heartbeat_at = first_heartbeat_at
        if url is not None:
            self.url = url
        if urlencoded_name is not None:
            self.urlencoded_name = urlencoded_name
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository(self):
        """Gets the repository of this Project.  # noqa: E501


        :return: The repository of this Project.  # noqa: E501
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Project.


        :param repository: The repository of this Project.  # noqa: E501
        :type: Repository
        """

        self._repository = repository

    @property
    def badge(self):
        """Gets the badge of this Project.  # noqa: E501


        :return: The badge of this Project.  # noqa: E501
        :rtype: str
        """
        return self._badge

    @badge.setter
    def badge(self, badge):
        """Sets the badge of this Project.


        :param badge: The badge of this Project.  # noqa: E501
        :type: str
        """

        self._badge = badge

    @property
    def color(self):
        """Gets the color of this Project.  # noqa: E501


        :return: The color of this Project.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Project.


        :param color: The color of this Project.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def clients(self):
        """Gets the clients of this Project.  # noqa: E501


        :return: The clients of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this Project.


        :param clients: The clients of this Project.  # noqa: E501
        :type: list[str]
        """

        self._clients = clients

    @property
    def has_public_url(self):
        """Gets the has_public_url of this Project.  # noqa: E501


        :return: The has_public_url of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._has_public_url

    @has_public_url.setter
    def has_public_url(self, has_public_url):
        """Sets the has_public_url of this Project.


        :param has_public_url: The has_public_url of this Project.  # noqa: E501
        :type: bool
        """

        self._has_public_url = has_public_url

    @property
    def human_readable_last_heartbeat_at(self):
        """Gets the human_readable_last_heartbeat_at of this Project.  # noqa: E501


        :return: The human_readable_last_heartbeat_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_last_heartbeat_at

    @human_readable_last_heartbeat_at.setter
    def human_readable_last_heartbeat_at(self, human_readable_last_heartbeat_at):
        """Sets the human_readable_last_heartbeat_at of this Project.


        :param human_readable_last_heartbeat_at: The human_readable_last_heartbeat_at of this Project.  # noqa: E501
        :type: str
        """

        self._human_readable_last_heartbeat_at = human_readable_last_heartbeat_at

    @property
    def last_heartbeat_at(self):
        """Gets the last_heartbeat_at of this Project.  # noqa: E501


        :return: The last_heartbeat_at of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat_at

    @last_heartbeat_at.setter
    def last_heartbeat_at(self, last_heartbeat_at):
        """Sets the last_heartbeat_at of this Project.


        :param last_heartbeat_at: The last_heartbeat_at of this Project.  # noqa: E501
        :type: datetime
        """

        self._last_heartbeat_at = last_heartbeat_at

    @property
    def human_readable_first_heartbeat_at(self):
        """Gets the human_readable_first_heartbeat_at of this Project.  # noqa: E501


        :return: The human_readable_first_heartbeat_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_first_heartbeat_at

    @human_readable_first_heartbeat_at.setter
    def human_readable_first_heartbeat_at(self, human_readable_first_heartbeat_at):
        """Sets the human_readable_first_heartbeat_at of this Project.


        :param human_readable_first_heartbeat_at: The human_readable_first_heartbeat_at of this Project.  # noqa: E501
        :type: str
        """

        self._human_readable_first_heartbeat_at = human_readable_first_heartbeat_at

    @property
    def first_heartbeat_at(self):
        """Gets the first_heartbeat_at of this Project.  # noqa: E501


        :return: The first_heartbeat_at of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._first_heartbeat_at

    @first_heartbeat_at.setter
    def first_heartbeat_at(self, first_heartbeat_at):
        """Sets the first_heartbeat_at of this Project.


        :param first_heartbeat_at: The first_heartbeat_at of this Project.  # noqa: E501
        :type: datetime
        """

        self._first_heartbeat_at = first_heartbeat_at

    @property
    def url(self):
        """Gets the url of this Project.  # noqa: E501


        :return: The url of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Project.


        :param url: The url of this Project.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def urlencoded_name(self):
        """Gets the urlencoded_name of this Project.  # noqa: E501


        :return: The urlencoded_name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._urlencoded_name

    @urlencoded_name.setter
    def urlencoded_name(self, urlencoded_name):
        """Sets the urlencoded_name of this Project.


        :param urlencoded_name: The urlencoded_name of this Project.  # noqa: E501
        :type: str
        """

        self._urlencoded_name = urlencoded_name

    @property
    def created_at(self):
        """Gets the created_at of this Project.  # noqa: E501


        :return: The created_at of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.


        :param created_at: The created_at of this Project.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
