# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wakatime_api.api_client import ApiClient


class HeartbeatsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_current_user_heartbeat(self, body, **kwargs):  # noqa: E501
        """Create Current User Heartbeat  # noqa: E501

        Create a single heartbeat event for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_current_user_heartbeat(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HeartbeatRequest body: (required)
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_current_user_heartbeat_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_current_user_heartbeat_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_current_user_heartbeat_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Current User Heartbeat  # noqa: E501

        Create a single heartbeat event for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_current_user_heartbeat_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HeartbeatRequest body: (required)
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_current_user_heartbeat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_current_user_heartbeat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/heartbeats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_current_user_heartbeats_bulk(self, body, **kwargs):  # noqa: E501
        """Create Current User Heartbeats (Bulk)  # noqa: E501

        Create multiple heartbeats for the current user (limit 25).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_current_user_heartbeats_bulk(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[HeartbeatRequest] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_current_user_heartbeats_bulk_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_current_user_heartbeats_bulk_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_current_user_heartbeats_bulk_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Current User Heartbeats (Bulk)  # noqa: E501

        Create multiple heartbeats for the current user (limit 25).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_current_user_heartbeats_bulk_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[HeartbeatRequest] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_current_user_heartbeats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_current_user_heartbeats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/heartbeats.bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_heartbeat(self, body, user, **kwargs):  # noqa: E501
        """Create Heartbeat  # noqa: E501

        Create a single heartbeat event for a user. Editor/OS detected from User-Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_heartbeat(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HeartbeatRequest body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_heartbeat_with_http_info(body, user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_heartbeat_with_http_info(body, user, **kwargs)  # noqa: E501
            return data

    def create_heartbeat_with_http_info(self, body, user, **kwargs):  # noqa: E501
        """Create Heartbeat  # noqa: E501

        Create a single heartbeat event for a user. Editor/OS detected from User-Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_heartbeat_with_http_info(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HeartbeatRequest body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_heartbeat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_heartbeat`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_heartbeat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/heartbeats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_heartbeats_bulk(self, body, user, **kwargs):  # noqa: E501
        """Create Heartbeats (Bulk)  # noqa: E501

        Create multiple heartbeats in a single request (limit 25).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_heartbeats_bulk(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[HeartbeatRequest] body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_heartbeats_bulk_with_http_info(body, user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_heartbeats_bulk_with_http_info(body, user, **kwargs)  # noqa: E501
            return data

    def create_heartbeats_bulk_with_http_info(self, body, user, **kwargs):  # noqa: E501
        """Create Heartbeats (Bulk)  # noqa: E501

        Create multiple heartbeats in a single request (limit 25).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_heartbeats_bulk_with_http_info(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[HeartbeatRequest] body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_heartbeats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_heartbeats_bulk`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_heartbeats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/heartbeats.bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_current_user_heartbeats_bulk(self, body, **kwargs):  # noqa: E501
        """Delete Current User Heartbeats (Bulk)  # noqa: E501

        Permanently delete multiple heartbeats for the current user by ID for a specific date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_current_user_heartbeats_bulk(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteRequest body: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_current_user_heartbeats_bulk_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_current_user_heartbeats_bulk_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_current_user_heartbeats_bulk_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete Current User Heartbeats (Bulk)  # noqa: E501

        Permanently delete multiple heartbeats for the current user by ID for a specific date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_current_user_heartbeats_bulk_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteRequest body: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_current_user_heartbeats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_current_user_heartbeats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/heartbeats.bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_heartbeats_bulk(self, body, user, **kwargs):  # noqa: E501
        """Delete Heartbeats (Bulk)  # noqa: E501

        Permanently delete multiple heartbeats by ID for a specific date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_heartbeats_bulk(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteRequest body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_heartbeats_bulk_with_http_info(body, user, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_heartbeats_bulk_with_http_info(body, user, **kwargs)  # noqa: E501
            return data

    def delete_heartbeats_bulk_with_http_info(self, body, user, **kwargs):  # noqa: E501
        """Delete Heartbeats (Bulk)  # noqa: E501

        Permanently delete multiple heartbeats by ID for a specific date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_heartbeats_bulk_with_http_info(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteRequest body: (required)
        :param str user: User ID or 'current' for the authenticated user. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_heartbeats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_heartbeats_bulk`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_heartbeats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/heartbeats.bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_user_heartbeats(self, _date, **kwargs):  # noqa: E501
        """Get Current User Heartbeats  # noqa: E501

        Retrieve the current user's raw heartbeat data for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_heartbeats(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: Date in YYYY-MM-DD format. (required)
        :return: HeartbeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_user_heartbeats_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_user_heartbeats_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def get_current_user_heartbeats_with_http_info(self, _date, **kwargs):  # noqa: E501
        """Get Current User Heartbeats  # noqa: E501

        Retrieve the current user's raw heartbeat data for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_heartbeats_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: Date in YYYY-MM-DD format. (required)
        :return: HeartbeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user_heartbeats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `get_current_user_heartbeats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/heartbeats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HeartbeatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_heartbeats(self, user, _date, **kwargs):  # noqa: E501
        """Get User Heartbeats  # noqa: E501

        Retrieve a user's raw heartbeat data for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_heartbeats(user, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param date _date: Date in YYYY-MM-DD format. (required)
        :return: HeartbeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_heartbeats_with_http_info(user, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_heartbeats_with_http_info(user, _date, **kwargs)  # noqa: E501
            return data

    def get_user_heartbeats_with_http_info(self, user, _date, **kwargs):  # noqa: E501
        """Get User Heartbeats  # noqa: E501

        Retrieve a user's raw heartbeat data for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_heartbeats_with_http_info(user, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param date _date: Date in YYYY-MM-DD format. (required)
        :return: HeartbeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_heartbeats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_user_heartbeats`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `get_user_heartbeats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/heartbeats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HeartbeatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
