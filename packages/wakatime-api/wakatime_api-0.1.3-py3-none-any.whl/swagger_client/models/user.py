# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'has_premium_features': 'bool',
        'display_name': 'str',
        'full_name': 'str',
        'email': 'str',
        'photo': 'str',
        'is_email_public': 'bool',
        'is_email_confirmed': 'bool',
        'public_email': 'str',
        'photo_public': 'bool',
        'timezone': 'str',
        'last_heartbeat_at': 'datetime',
        'last_plugin': 'str',
        'last_plugin_name': 'str',
        'last_project': 'str',
        'last_branch': 'str',
        'plan': 'str',
        'username': 'str',
        'website': 'str',
        'human_readable_website': 'str',
        'wonderfuldev_username': 'str',
        'github_username': 'str',
        'twitter_username': 'str',
        'linkedin_username': 'str',
        'city': 'City',
        'logged_time_public': 'bool',
        'languages_used_public': 'bool',
        'editors_used_public': 'bool',
        'categories_used_public': 'bool',
        'os_used_public': 'bool',
        'is_hireable': 'bool',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'has_premium_features': 'has_premium_features',
        'display_name': 'display_name',
        'full_name': 'full_name',
        'email': 'email',
        'photo': 'photo',
        'is_email_public': 'is_email_public',
        'is_email_confirmed': 'is_email_confirmed',
        'public_email': 'public_email',
        'photo_public': 'photo_public',
        'timezone': 'timezone',
        'last_heartbeat_at': 'last_heartbeat_at',
        'last_plugin': 'last_plugin',
        'last_plugin_name': 'last_plugin_name',
        'last_project': 'last_project',
        'last_branch': 'last_branch',
        'plan': 'plan',
        'username': 'username',
        'website': 'website',
        'human_readable_website': 'human_readable_website',
        'wonderfuldev_username': 'wonderfuldev_username',
        'github_username': 'github_username',
        'twitter_username': 'twitter_username',
        'linkedin_username': 'linkedin_username',
        'city': 'city',
        'logged_time_public': 'logged_time_public',
        'languages_used_public': 'languages_used_public',
        'editors_used_public': 'editors_used_public',
        'categories_used_public': 'categories_used_public',
        'os_used_public': 'os_used_public',
        'is_hireable': 'is_hireable',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, has_premium_features=None, display_name=None, full_name=None, email=None, photo=None, is_email_public=None, is_email_confirmed=None, public_email=None, photo_public=None, timezone=None, last_heartbeat_at=None, last_plugin=None, last_plugin_name=None, last_project=None, last_branch=None, plan=None, username=None, website=None, human_readable_website=None, wonderfuldev_username=None, github_username=None, twitter_username=None, linkedin_username=None, city=None, logged_time_public=None, languages_used_public=None, editors_used_public=None, categories_used_public=None, os_used_public=None, is_hireable=None, created_at=None, modified_at=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._has_premium_features = None
        self._display_name = None
        self._full_name = None
        self._email = None
        self._photo = None
        self._is_email_public = None
        self._is_email_confirmed = None
        self._public_email = None
        self._photo_public = None
        self._timezone = None
        self._last_heartbeat_at = None
        self._last_plugin = None
        self._last_plugin_name = None
        self._last_project = None
        self._last_branch = None
        self._plan = None
        self._username = None
        self._website = None
        self._human_readable_website = None
        self._wonderfuldev_username = None
        self._github_username = None
        self._twitter_username = None
        self._linkedin_username = None
        self._city = None
        self._logged_time_public = None
        self._languages_used_public = None
        self._editors_used_public = None
        self._categories_used_public = None
        self._os_used_public = None
        self._is_hireable = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if has_premium_features is not None:
            self.has_premium_features = has_premium_features
        if display_name is not None:
            self.display_name = display_name
        if full_name is not None:
            self.full_name = full_name
        if email is not None:
            self.email = email
        if photo is not None:
            self.photo = photo
        if is_email_public is not None:
            self.is_email_public = is_email_public
        if is_email_confirmed is not None:
            self.is_email_confirmed = is_email_confirmed
        if public_email is not None:
            self.public_email = public_email
        if photo_public is not None:
            self.photo_public = photo_public
        if timezone is not None:
            self.timezone = timezone
        if last_heartbeat_at is not None:
            self.last_heartbeat_at = last_heartbeat_at
        if last_plugin is not None:
            self.last_plugin = last_plugin
        if last_plugin_name is not None:
            self.last_plugin_name = last_plugin_name
        if last_project is not None:
            self.last_project = last_project
        if last_branch is not None:
            self.last_branch = last_branch
        if plan is not None:
            self.plan = plan
        if username is not None:
            self.username = username
        if website is not None:
            self.website = website
        if human_readable_website is not None:
            self.human_readable_website = human_readable_website
        if wonderfuldev_username is not None:
            self.wonderfuldev_username = wonderfuldev_username
        if github_username is not None:
            self.github_username = github_username
        if twitter_username is not None:
            self.twitter_username = twitter_username
        if linkedin_username is not None:
            self.linkedin_username = linkedin_username
        if city is not None:
            self.city = city
        if logged_time_public is not None:
            self.logged_time_public = logged_time_public
        if languages_used_public is not None:
            self.languages_used_public = languages_used_public
        if editors_used_public is not None:
            self.editors_used_public = editors_used_public
        if categories_used_public is not None:
            self.categories_used_public = categories_used_public
        if os_used_public is not None:
            self.os_used_public = os_used_public
        if is_hireable is not None:
            self.is_hireable = is_hireable
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def has_premium_features(self):
        """Gets the has_premium_features of this User.  # noqa: E501


        :return: The has_premium_features of this User.  # noqa: E501
        :rtype: bool
        """
        return self._has_premium_features

    @has_premium_features.setter
    def has_premium_features(self, has_premium_features):
        """Sets the has_premium_features of this User.


        :param has_premium_features: The has_premium_features of this User.  # noqa: E501
        :type: bool
        """

        self._has_premium_features = has_premium_features

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501


        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def photo(self):
        """Gets the photo of this User.  # noqa: E501


        :return: The photo of this User.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this User.


        :param photo: The photo of this User.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def is_email_public(self):
        """Gets the is_email_public of this User.  # noqa: E501


        :return: The is_email_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_public

    @is_email_public.setter
    def is_email_public(self, is_email_public):
        """Sets the is_email_public of this User.


        :param is_email_public: The is_email_public of this User.  # noqa: E501
        :type: bool
        """

        self._is_email_public = is_email_public

    @property
    def is_email_confirmed(self):
        """Gets the is_email_confirmed of this User.  # noqa: E501


        :return: The is_email_confirmed of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_confirmed

    @is_email_confirmed.setter
    def is_email_confirmed(self, is_email_confirmed):
        """Sets the is_email_confirmed of this User.


        :param is_email_confirmed: The is_email_confirmed of this User.  # noqa: E501
        :type: bool
        """

        self._is_email_confirmed = is_email_confirmed

    @property
    def public_email(self):
        """Gets the public_email of this User.  # noqa: E501


        :return: The public_email of this User.  # noqa: E501
        :rtype: str
        """
        return self._public_email

    @public_email.setter
    def public_email(self, public_email):
        """Sets the public_email of this User.


        :param public_email: The public_email of this User.  # noqa: E501
        :type: str
        """

        self._public_email = public_email

    @property
    def photo_public(self):
        """Gets the photo_public of this User.  # noqa: E501


        :return: The photo_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._photo_public

    @photo_public.setter
    def photo_public(self, photo_public):
        """Sets the photo_public of this User.


        :param photo_public: The photo_public of this User.  # noqa: E501
        :type: bool
        """

        self._photo_public = photo_public

    @property
    def timezone(self):
        """Gets the timezone of this User.  # noqa: E501


        :return: The timezone of this User.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.


        :param timezone: The timezone of this User.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def last_heartbeat_at(self):
        """Gets the last_heartbeat_at of this User.  # noqa: E501


        :return: The last_heartbeat_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat_at

    @last_heartbeat_at.setter
    def last_heartbeat_at(self, last_heartbeat_at):
        """Sets the last_heartbeat_at of this User.


        :param last_heartbeat_at: The last_heartbeat_at of this User.  # noqa: E501
        :type: datetime
        """

        self._last_heartbeat_at = last_heartbeat_at

    @property
    def last_plugin(self):
        """Gets the last_plugin of this User.  # noqa: E501


        :return: The last_plugin of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_plugin

    @last_plugin.setter
    def last_plugin(self, last_plugin):
        """Sets the last_plugin of this User.


        :param last_plugin: The last_plugin of this User.  # noqa: E501
        :type: str
        """

        self._last_plugin = last_plugin

    @property
    def last_plugin_name(self):
        """Gets the last_plugin_name of this User.  # noqa: E501


        :return: The last_plugin_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_plugin_name

    @last_plugin_name.setter
    def last_plugin_name(self, last_plugin_name):
        """Sets the last_plugin_name of this User.


        :param last_plugin_name: The last_plugin_name of this User.  # noqa: E501
        :type: str
        """

        self._last_plugin_name = last_plugin_name

    @property
    def last_project(self):
        """Gets the last_project of this User.  # noqa: E501


        :return: The last_project of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_project

    @last_project.setter
    def last_project(self, last_project):
        """Sets the last_project of this User.


        :param last_project: The last_project of this User.  # noqa: E501
        :type: str
        """

        self._last_project = last_project

    @property
    def last_branch(self):
        """Gets the last_branch of this User.  # noqa: E501


        :return: The last_branch of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_branch

    @last_branch.setter
    def last_branch(self, last_branch):
        """Sets the last_branch of this User.


        :param last_branch: The last_branch of this User.  # noqa: E501
        :type: str
        """

        self._last_branch = last_branch

    @property
    def plan(self):
        """Gets the plan of this User.  # noqa: E501


        :return: The plan of this User.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this User.


        :param plan: The plan of this User.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def website(self):
        """Gets the website of this User.  # noqa: E501


        :return: The website of this User.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this User.


        :param website: The website of this User.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def human_readable_website(self):
        """Gets the human_readable_website of this User.  # noqa: E501


        :return: The human_readable_website of this User.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_website

    @human_readable_website.setter
    def human_readable_website(self, human_readable_website):
        """Sets the human_readable_website of this User.


        :param human_readable_website: The human_readable_website of this User.  # noqa: E501
        :type: str
        """

        self._human_readable_website = human_readable_website

    @property
    def wonderfuldev_username(self):
        """Gets the wonderfuldev_username of this User.  # noqa: E501


        :return: The wonderfuldev_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._wonderfuldev_username

    @wonderfuldev_username.setter
    def wonderfuldev_username(self, wonderfuldev_username):
        """Sets the wonderfuldev_username of this User.


        :param wonderfuldev_username: The wonderfuldev_username of this User.  # noqa: E501
        :type: str
        """

        self._wonderfuldev_username = wonderfuldev_username

    @property
    def github_username(self):
        """Gets the github_username of this User.  # noqa: E501


        :return: The github_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._github_username

    @github_username.setter
    def github_username(self, github_username):
        """Sets the github_username of this User.


        :param github_username: The github_username of this User.  # noqa: E501
        :type: str
        """

        self._github_username = github_username

    @property
    def twitter_username(self):
        """Gets the twitter_username of this User.  # noqa: E501


        :return: The twitter_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this User.


        :param twitter_username: The twitter_username of this User.  # noqa: E501
        :type: str
        """

        self._twitter_username = twitter_username

    @property
    def linkedin_username(self):
        """Gets the linkedin_username of this User.  # noqa: E501


        :return: The linkedin_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._linkedin_username

    @linkedin_username.setter
    def linkedin_username(self, linkedin_username):
        """Sets the linkedin_username of this User.


        :param linkedin_username: The linkedin_username of this User.  # noqa: E501
        :type: str
        """

        self._linkedin_username = linkedin_username

    @property
    def city(self):
        """Gets the city of this User.  # noqa: E501


        :return: The city of this User.  # noqa: E501
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this User.


        :param city: The city of this User.  # noqa: E501
        :type: City
        """

        self._city = city

    @property
    def logged_time_public(self):
        """Gets the logged_time_public of this User.  # noqa: E501


        :return: The logged_time_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._logged_time_public

    @logged_time_public.setter
    def logged_time_public(self, logged_time_public):
        """Sets the logged_time_public of this User.


        :param logged_time_public: The logged_time_public of this User.  # noqa: E501
        :type: bool
        """

        self._logged_time_public = logged_time_public

    @property
    def languages_used_public(self):
        """Gets the languages_used_public of this User.  # noqa: E501


        :return: The languages_used_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._languages_used_public

    @languages_used_public.setter
    def languages_used_public(self, languages_used_public):
        """Sets the languages_used_public of this User.


        :param languages_used_public: The languages_used_public of this User.  # noqa: E501
        :type: bool
        """

        self._languages_used_public = languages_used_public

    @property
    def editors_used_public(self):
        """Gets the editors_used_public of this User.  # noqa: E501


        :return: The editors_used_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._editors_used_public

    @editors_used_public.setter
    def editors_used_public(self, editors_used_public):
        """Sets the editors_used_public of this User.


        :param editors_used_public: The editors_used_public of this User.  # noqa: E501
        :type: bool
        """

        self._editors_used_public = editors_used_public

    @property
    def categories_used_public(self):
        """Gets the categories_used_public of this User.  # noqa: E501


        :return: The categories_used_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._categories_used_public

    @categories_used_public.setter
    def categories_used_public(self, categories_used_public):
        """Sets the categories_used_public of this User.


        :param categories_used_public: The categories_used_public of this User.  # noqa: E501
        :type: bool
        """

        self._categories_used_public = categories_used_public

    @property
    def os_used_public(self):
        """Gets the os_used_public of this User.  # noqa: E501


        :return: The os_used_public of this User.  # noqa: E501
        :rtype: bool
        """
        return self._os_used_public

    @os_used_public.setter
    def os_used_public(self, os_used_public):
        """Sets the os_used_public of this User.


        :param os_used_public: The os_used_public of this User.  # noqa: E501
        :type: bool
        """

        self._os_used_public = os_used_public

    @property
    def is_hireable(self):
        """Gets the is_hireable of this User.  # noqa: E501


        :return: The is_hireable of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_hireable

    @is_hireable.setter
    def is_hireable(self, is_hireable):
        """Sets the is_hireable of this User.


        :param is_hireable: The is_hireable of this User.  # noqa: E501
        :type: bool
        """

        self._is_hireable = is_hireable

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this User.  # noqa: E501


        :return: The modified_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this User.


        :param modified_at: The modified_at of this User.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
