# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HeartbeatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[Heartbeat]',
        'start': 'datetime',
        'end': 'datetime',
        'timezone': 'str'
    }

    attribute_map = {
        'data': 'data',
        'start': 'start',
        'end': 'end',
        'timezone': 'timezone'
    }

    def __init__(self, data=None, start=None, end=None, timezone=None):  # noqa: E501
        """HeartbeatsResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._start = None
        self._end = None
        self._timezone = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if timezone is not None:
            self.timezone = timezone

    @property
    def data(self):
        """Gets the data of this HeartbeatsResponse.  # noqa: E501


        :return: The data of this HeartbeatsResponse.  # noqa: E501
        :rtype: list[Heartbeat]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HeartbeatsResponse.


        :param data: The data of this HeartbeatsResponse.  # noqa: E501
        :type: list[Heartbeat]
        """

        self._data = data

    @property
    def start(self):
        """Gets the start of this HeartbeatsResponse.  # noqa: E501


        :return: The start of this HeartbeatsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this HeartbeatsResponse.


        :param start: The start of this HeartbeatsResponse.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this HeartbeatsResponse.  # noqa: E501


        :return: The end of this HeartbeatsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this HeartbeatsResponse.


        :param end: The end of this HeartbeatsResponse.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def timezone(self):
        """Gets the timezone of this HeartbeatsResponse.  # noqa: E501


        :return: The timezone of this HeartbeatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this HeartbeatsResponse.


        :param timezone: The timezone of this HeartbeatsResponse.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HeartbeatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HeartbeatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
