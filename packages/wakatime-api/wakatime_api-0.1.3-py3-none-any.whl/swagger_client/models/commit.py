# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Commit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_avatar_url': 'str',
        'author_date': 'datetime',
        'author_email': 'str',
        'author_html_url': 'str',
        'author_name': 'str',
        'author_url': 'str',
        'author_username': 'str',
        'branch': 'str',
        'committer_avatar_url': 'str',
        'committer_date': 'datetime',
        'committer_email': 'str',
        'committer_html_url': 'str',
        'committer_name': 'str',
        'committer_url': 'str',
        'committer_username': 'str',
        'created_at': 'datetime',
        'hash': 'str',
        'html_url': 'str',
        'human_readable_total': 'str',
        'human_readable_total_with_seconds': 'str',
        'id': 'str',
        'message': 'str',
        'ref': 'str',
        'total_seconds': 'float',
        'truncated_hash': 'str',
        'url': 'str'
    }

    attribute_map = {
        'author_avatar_url': 'author_avatar_url',
        'author_date': 'author_date',
        'author_email': 'author_email',
        'author_html_url': 'author_html_url',
        'author_name': 'author_name',
        'author_url': 'author_url',
        'author_username': 'author_username',
        'branch': 'branch',
        'committer_avatar_url': 'committer_avatar_url',
        'committer_date': 'committer_date',
        'committer_email': 'committer_email',
        'committer_html_url': 'committer_html_url',
        'committer_name': 'committer_name',
        'committer_url': 'committer_url',
        'committer_username': 'committer_username',
        'created_at': 'created_at',
        'hash': 'hash',
        'html_url': 'html_url',
        'human_readable_total': 'human_readable_total',
        'human_readable_total_with_seconds': 'human_readable_total_with_seconds',
        'id': 'id',
        'message': 'message',
        'ref': 'ref',
        'total_seconds': 'total_seconds',
        'truncated_hash': 'truncated_hash',
        'url': 'url'
    }

    def __init__(self, author_avatar_url=None, author_date=None, author_email=None, author_html_url=None, author_name=None, author_url=None, author_username=None, branch=None, committer_avatar_url=None, committer_date=None, committer_email=None, committer_html_url=None, committer_name=None, committer_url=None, committer_username=None, created_at=None, hash=None, html_url=None, human_readable_total=None, human_readable_total_with_seconds=None, id=None, message=None, ref=None, total_seconds=None, truncated_hash=None, url=None):  # noqa: E501
        """Commit - a model defined in Swagger"""  # noqa: E501
        self._author_avatar_url = None
        self._author_date = None
        self._author_email = None
        self._author_html_url = None
        self._author_name = None
        self._author_url = None
        self._author_username = None
        self._branch = None
        self._committer_avatar_url = None
        self._committer_date = None
        self._committer_email = None
        self._committer_html_url = None
        self._committer_name = None
        self._committer_url = None
        self._committer_username = None
        self._created_at = None
        self._hash = None
        self._html_url = None
        self._human_readable_total = None
        self._human_readable_total_with_seconds = None
        self._id = None
        self._message = None
        self._ref = None
        self._total_seconds = None
        self._truncated_hash = None
        self._url = None
        self.discriminator = None
        if author_avatar_url is not None:
            self.author_avatar_url = author_avatar_url
        if author_date is not None:
            self.author_date = author_date
        if author_email is not None:
            self.author_email = author_email
        if author_html_url is not None:
            self.author_html_url = author_html_url
        if author_name is not None:
            self.author_name = author_name
        if author_url is not None:
            self.author_url = author_url
        if author_username is not None:
            self.author_username = author_username
        if branch is not None:
            self.branch = branch
        if committer_avatar_url is not None:
            self.committer_avatar_url = committer_avatar_url
        if committer_date is not None:
            self.committer_date = committer_date
        if committer_email is not None:
            self.committer_email = committer_email
        if committer_html_url is not None:
            self.committer_html_url = committer_html_url
        if committer_name is not None:
            self.committer_name = committer_name
        if committer_url is not None:
            self.committer_url = committer_url
        if committer_username is not None:
            self.committer_username = committer_username
        if created_at is not None:
            self.created_at = created_at
        if hash is not None:
            self.hash = hash
        if html_url is not None:
            self.html_url = html_url
        if human_readable_total is not None:
            self.human_readable_total = human_readable_total
        if human_readable_total_with_seconds is not None:
            self.human_readable_total_with_seconds = human_readable_total_with_seconds
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if ref is not None:
            self.ref = ref
        if total_seconds is not None:
            self.total_seconds = total_seconds
        if truncated_hash is not None:
            self.truncated_hash = truncated_hash
        if url is not None:
            self.url = url

    @property
    def author_avatar_url(self):
        """Gets the author_avatar_url of this Commit.  # noqa: E501


        :return: The author_avatar_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_avatar_url

    @author_avatar_url.setter
    def author_avatar_url(self, author_avatar_url):
        """Sets the author_avatar_url of this Commit.


        :param author_avatar_url: The author_avatar_url of this Commit.  # noqa: E501
        :type: str
        """

        self._author_avatar_url = author_avatar_url

    @property
    def author_date(self):
        """Gets the author_date of this Commit.  # noqa: E501


        :return: The author_date of this Commit.  # noqa: E501
        :rtype: datetime
        """
        return self._author_date

    @author_date.setter
    def author_date(self, author_date):
        """Sets the author_date of this Commit.


        :param author_date: The author_date of this Commit.  # noqa: E501
        :type: datetime
        """

        self._author_date = author_date

    @property
    def author_email(self):
        """Gets the author_email of this Commit.  # noqa: E501


        :return: The author_email of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this Commit.


        :param author_email: The author_email of this Commit.  # noqa: E501
        :type: str
        """

        self._author_email = author_email

    @property
    def author_html_url(self):
        """Gets the author_html_url of this Commit.  # noqa: E501


        :return: The author_html_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_html_url

    @author_html_url.setter
    def author_html_url(self, author_html_url):
        """Sets the author_html_url of this Commit.


        :param author_html_url: The author_html_url of this Commit.  # noqa: E501
        :type: str
        """

        self._author_html_url = author_html_url

    @property
    def author_name(self):
        """Gets the author_name of this Commit.  # noqa: E501


        :return: The author_name of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Commit.


        :param author_name: The author_name of this Commit.  # noqa: E501
        :type: str
        """

        self._author_name = author_name

    @property
    def author_url(self):
        """Gets the author_url of this Commit.  # noqa: E501


        :return: The author_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_url

    @author_url.setter
    def author_url(self, author_url):
        """Sets the author_url of this Commit.


        :param author_url: The author_url of this Commit.  # noqa: E501
        :type: str
        """

        self._author_url = author_url

    @property
    def author_username(self):
        """Gets the author_username of this Commit.  # noqa: E501


        :return: The author_username of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._author_username

    @author_username.setter
    def author_username(self, author_username):
        """Sets the author_username of this Commit.


        :param author_username: The author_username of this Commit.  # noqa: E501
        :type: str
        """

        self._author_username = author_username

    @property
    def branch(self):
        """Gets the branch of this Commit.  # noqa: E501


        :return: The branch of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Commit.


        :param branch: The branch of this Commit.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def committer_avatar_url(self):
        """Gets the committer_avatar_url of this Commit.  # noqa: E501


        :return: The committer_avatar_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_avatar_url

    @committer_avatar_url.setter
    def committer_avatar_url(self, committer_avatar_url):
        """Sets the committer_avatar_url of this Commit.


        :param committer_avatar_url: The committer_avatar_url of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_avatar_url = committer_avatar_url

    @property
    def committer_date(self):
        """Gets the committer_date of this Commit.  # noqa: E501


        :return: The committer_date of this Commit.  # noqa: E501
        :rtype: datetime
        """
        return self._committer_date

    @committer_date.setter
    def committer_date(self, committer_date):
        """Sets the committer_date of this Commit.


        :param committer_date: The committer_date of this Commit.  # noqa: E501
        :type: datetime
        """

        self._committer_date = committer_date

    @property
    def committer_email(self):
        """Gets the committer_email of this Commit.  # noqa: E501


        :return: The committer_email of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_email

    @committer_email.setter
    def committer_email(self, committer_email):
        """Sets the committer_email of this Commit.


        :param committer_email: The committer_email of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_email = committer_email

    @property
    def committer_html_url(self):
        """Gets the committer_html_url of this Commit.  # noqa: E501


        :return: The committer_html_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_html_url

    @committer_html_url.setter
    def committer_html_url(self, committer_html_url):
        """Sets the committer_html_url of this Commit.


        :param committer_html_url: The committer_html_url of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_html_url = committer_html_url

    @property
    def committer_name(self):
        """Gets the committer_name of this Commit.  # noqa: E501


        :return: The committer_name of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_name

    @committer_name.setter
    def committer_name(self, committer_name):
        """Sets the committer_name of this Commit.


        :param committer_name: The committer_name of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_name = committer_name

    @property
    def committer_url(self):
        """Gets the committer_url of this Commit.  # noqa: E501


        :return: The committer_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_url

    @committer_url.setter
    def committer_url(self, committer_url):
        """Sets the committer_url of this Commit.


        :param committer_url: The committer_url of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_url = committer_url

    @property
    def committer_username(self):
        """Gets the committer_username of this Commit.  # noqa: E501


        :return: The committer_username of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._committer_username

    @committer_username.setter
    def committer_username(self, committer_username):
        """Sets the committer_username of this Commit.


        :param committer_username: The committer_username of this Commit.  # noqa: E501
        :type: str
        """

        self._committer_username = committer_username

    @property
    def created_at(self):
        """Gets the created_at of this Commit.  # noqa: E501


        :return: The created_at of this Commit.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Commit.


        :param created_at: The created_at of this Commit.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def hash(self):
        """Gets the hash of this Commit.  # noqa: E501


        :return: The hash of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Commit.


        :param hash: The hash of this Commit.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def html_url(self):
        """Gets the html_url of this Commit.  # noqa: E501


        :return: The html_url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Commit.


        :param html_url: The html_url of this Commit.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def human_readable_total(self):
        """Gets the human_readable_total of this Commit.  # noqa: E501


        :return: The human_readable_total of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_total

    @human_readable_total.setter
    def human_readable_total(self, human_readable_total):
        """Sets the human_readable_total of this Commit.


        :param human_readable_total: The human_readable_total of this Commit.  # noqa: E501
        :type: str
        """

        self._human_readable_total = human_readable_total

    @property
    def human_readable_total_with_seconds(self):
        """Gets the human_readable_total_with_seconds of this Commit.  # noqa: E501


        :return: The human_readable_total_with_seconds of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_total_with_seconds

    @human_readable_total_with_seconds.setter
    def human_readable_total_with_seconds(self, human_readable_total_with_seconds):
        """Sets the human_readable_total_with_seconds of this Commit.


        :param human_readable_total_with_seconds: The human_readable_total_with_seconds of this Commit.  # noqa: E501
        :type: str
        """

        self._human_readable_total_with_seconds = human_readable_total_with_seconds

    @property
    def id(self):
        """Gets the id of this Commit.  # noqa: E501


        :return: The id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Commit.


        :param id: The id of this Commit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this Commit.  # noqa: E501


        :return: The message of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Commit.


        :param message: The message of this Commit.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def ref(self):
        """Gets the ref of this Commit.  # noqa: E501


        :return: The ref of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Commit.


        :param ref: The ref of this Commit.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def total_seconds(self):
        """Gets the total_seconds of this Commit.  # noqa: E501


        :return: The total_seconds of this Commit.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this Commit.


        :param total_seconds: The total_seconds of this Commit.  # noqa: E501
        :type: float
        """

        self._total_seconds = total_seconds

    @property
    def truncated_hash(self):
        """Gets the truncated_hash of this Commit.  # noqa: E501


        :return: The truncated_hash of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._truncated_hash

    @truncated_hash.setter
    def truncated_hash(self, truncated_hash):
        """Sets the truncated_hash of this Commit.


        :param truncated_hash: The truncated_hash of this Commit.  # noqa: E501
        :type: str
        """

        self._truncated_hash = truncated_hash

    @property
    def url(self):
        """Gets the url of this Commit.  # noqa: E501


        :return: The url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Commit.


        :param url: The url of this Commit.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Commit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Commit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
