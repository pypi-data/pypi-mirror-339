# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataDump(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'percent_complete': 'float',
        'download_url': 'str',
        'type': 'str',
        'is_processing': 'bool',
        'is_stuck': 'bool',
        'has_failed': 'bool',
        'expires': 'datetime',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'percent_complete': 'percent_complete',
        'download_url': 'download_url',
        'type': 'type',
        'is_processing': 'is_processing',
        'is_stuck': 'is_stuck',
        'has_failed': 'has_failed',
        'expires': 'expires',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, status=None, percent_complete=None, download_url=None, type=None, is_processing=None, is_stuck=None, has_failed=None, expires=None, created_at=None):  # noqa: E501
        """DataDump - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._percent_complete = None
        self._download_url = None
        self._type = None
        self._is_processing = None
        self._is_stuck = None
        self._has_failed = None
        self._expires = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if download_url is not None:
            self.download_url = download_url
        if type is not None:
            self.type = type
        if is_processing is not None:
            self.is_processing = is_processing
        if is_stuck is not None:
            self.is_stuck = is_stuck
        if has_failed is not None:
            self.has_failed = has_failed
        if expires is not None:
            self.expires = expires
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this DataDump.  # noqa: E501


        :return: The id of this DataDump.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataDump.


        :param id: The id of this DataDump.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this DataDump.  # noqa: E501


        :return: The status of this DataDump.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataDump.


        :param status: The status of this DataDump.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending…", "Processing coding activity…", "Uploading…", "Completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def percent_complete(self):
        """Gets the percent_complete of this DataDump.  # noqa: E501


        :return: The percent_complete of this DataDump.  # noqa: E501
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this DataDump.


        :param percent_complete: The percent_complete of this DataDump.  # noqa: E501
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def download_url(self):
        """Gets the download_url of this DataDump.  # noqa: E501


        :return: The download_url of this DataDump.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this DataDump.


        :param download_url: The download_url of this DataDump.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def type(self):
        """Gets the type of this DataDump.  # noqa: E501


        :return: The type of this DataDump.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataDump.


        :param type: The type of this DataDump.  # noqa: E501
        :type: str
        """
        allowed_values = ["daily", "heartbeats"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_processing(self):
        """Gets the is_processing of this DataDump.  # noqa: E501


        :return: The is_processing of this DataDump.  # noqa: E501
        :rtype: bool
        """
        return self._is_processing

    @is_processing.setter
    def is_processing(self, is_processing):
        """Sets the is_processing of this DataDump.


        :param is_processing: The is_processing of this DataDump.  # noqa: E501
        :type: bool
        """

        self._is_processing = is_processing

    @property
    def is_stuck(self):
        """Gets the is_stuck of this DataDump.  # noqa: E501


        :return: The is_stuck of this DataDump.  # noqa: E501
        :rtype: bool
        """
        return self._is_stuck

    @is_stuck.setter
    def is_stuck(self, is_stuck):
        """Sets the is_stuck of this DataDump.


        :param is_stuck: The is_stuck of this DataDump.  # noqa: E501
        :type: bool
        """

        self._is_stuck = is_stuck

    @property
    def has_failed(self):
        """Gets the has_failed of this DataDump.  # noqa: E501


        :return: The has_failed of this DataDump.  # noqa: E501
        :rtype: bool
        """
        return self._has_failed

    @has_failed.setter
    def has_failed(self, has_failed):
        """Sets the has_failed of this DataDump.


        :param has_failed: The has_failed of this DataDump.  # noqa: E501
        :type: bool
        """

        self._has_failed = has_failed

    @property
    def expires(self):
        """Gets the expires of this DataDump.  # noqa: E501


        :return: The expires of this DataDump.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this DataDump.


        :param expires: The expires of this DataDump.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def created_at(self):
        """Gets the created_at of this DataDump.  # noqa: E501


        :return: The created_at of this DataDump.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataDump.


        :param created_at: The created_at of this DataDump.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataDump, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataDump):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
