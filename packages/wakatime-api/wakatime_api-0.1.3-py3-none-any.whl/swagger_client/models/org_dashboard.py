# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'full_name': 'str',
        'created_by': 'str',
        'timezone': 'str',
        'has_changed_timezone': 'bool',
        'members_count': 'int',
        'members_count_human_readable': 'str',
        'is_current_user_member': 'bool',
        'is_viewing_restricted': 'bool',
        'is_manual_time_hidden': 'bool',
        'can_current_user_view': 'bool',
        'can_current_user_request_to_view': 'bool',
        'can_current_user_request_to_join': 'bool',
        'can_current_user_add_members': 'bool',
        'can_current_user_remove_members': 'bool',
        'can_current_user_delete': 'bool',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'full_name': 'full_name',
        'created_by': 'created_by',
        'timezone': 'timezone',
        'has_changed_timezone': 'has_changed_timezone',
        'members_count': 'members_count',
        'members_count_human_readable': 'members_count_human_readable',
        'is_current_user_member': 'is_current_user_member',
        'is_viewing_restricted': 'is_viewing_restricted',
        'is_manual_time_hidden': 'is_manual_time_hidden',
        'can_current_user_view': 'can_current_user_view',
        'can_current_user_request_to_view': 'can_current_user_request_to_view',
        'can_current_user_request_to_join': 'can_current_user_request_to_join',
        'can_current_user_add_members': 'can_current_user_add_members',
        'can_current_user_remove_members': 'can_current_user_remove_members',
        'can_current_user_delete': 'can_current_user_delete',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, full_name=None, created_by=None, timezone=None, has_changed_timezone=None, members_count=None, members_count_human_readable=None, is_current_user_member=None, is_viewing_restricted=None, is_manual_time_hidden=None, can_current_user_view=None, can_current_user_request_to_view=None, can_current_user_request_to_join=None, can_current_user_add_members=None, can_current_user_remove_members=None, can_current_user_delete=None, created_at=None, modified_at=None):  # noqa: E501
        """OrgDashboard - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._full_name = None
        self._created_by = None
        self._timezone = None
        self._has_changed_timezone = None
        self._members_count = None
        self._members_count_human_readable = None
        self._is_current_user_member = None
        self._is_viewing_restricted = None
        self._is_manual_time_hidden = None
        self._can_current_user_view = None
        self._can_current_user_request_to_view = None
        self._can_current_user_request_to_join = None
        self._can_current_user_add_members = None
        self._can_current_user_remove_members = None
        self._can_current_user_delete = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if full_name is not None:
            self.full_name = full_name
        if created_by is not None:
            self.created_by = created_by
        if timezone is not None:
            self.timezone = timezone
        if has_changed_timezone is not None:
            self.has_changed_timezone = has_changed_timezone
        if members_count is not None:
            self.members_count = members_count
        if members_count_human_readable is not None:
            self.members_count_human_readable = members_count_human_readable
        if is_current_user_member is not None:
            self.is_current_user_member = is_current_user_member
        if is_viewing_restricted is not None:
            self.is_viewing_restricted = is_viewing_restricted
        if is_manual_time_hidden is not None:
            self.is_manual_time_hidden = is_manual_time_hidden
        if can_current_user_view is not None:
            self.can_current_user_view = can_current_user_view
        if can_current_user_request_to_view is not None:
            self.can_current_user_request_to_view = can_current_user_request_to_view
        if can_current_user_request_to_join is not None:
            self.can_current_user_request_to_join = can_current_user_request_to_join
        if can_current_user_add_members is not None:
            self.can_current_user_add_members = can_current_user_add_members
        if can_current_user_remove_members is not None:
            self.can_current_user_remove_members = can_current_user_remove_members
        if can_current_user_delete is not None:
            self.can_current_user_delete = can_current_user_delete
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this OrgDashboard.  # noqa: E501


        :return: The id of this OrgDashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgDashboard.


        :param id: The id of this OrgDashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def full_name(self):
        """Gets the full_name of this OrgDashboard.  # noqa: E501


        :return: The full_name of this OrgDashboard.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this OrgDashboard.


        :param full_name: The full_name of this OrgDashboard.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def created_by(self):
        """Gets the created_by of this OrgDashboard.  # noqa: E501


        :return: The created_by of this OrgDashboard.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrgDashboard.


        :param created_by: The created_by of this OrgDashboard.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def timezone(self):
        """Gets the timezone of this OrgDashboard.  # noqa: E501


        :return: The timezone of this OrgDashboard.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this OrgDashboard.


        :param timezone: The timezone of this OrgDashboard.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def has_changed_timezone(self):
        """Gets the has_changed_timezone of this OrgDashboard.  # noqa: E501


        :return: The has_changed_timezone of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._has_changed_timezone

    @has_changed_timezone.setter
    def has_changed_timezone(self, has_changed_timezone):
        """Sets the has_changed_timezone of this OrgDashboard.


        :param has_changed_timezone: The has_changed_timezone of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._has_changed_timezone = has_changed_timezone

    @property
    def members_count(self):
        """Gets the members_count of this OrgDashboard.  # noqa: E501


        :return: The members_count of this OrgDashboard.  # noqa: E501
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this OrgDashboard.


        :param members_count: The members_count of this OrgDashboard.  # noqa: E501
        :type: int
        """

        self._members_count = members_count

    @property
    def members_count_human_readable(self):
        """Gets the members_count_human_readable of this OrgDashboard.  # noqa: E501


        :return: The members_count_human_readable of this OrgDashboard.  # noqa: E501
        :rtype: str
        """
        return self._members_count_human_readable

    @members_count_human_readable.setter
    def members_count_human_readable(self, members_count_human_readable):
        """Sets the members_count_human_readable of this OrgDashboard.


        :param members_count_human_readable: The members_count_human_readable of this OrgDashboard.  # noqa: E501
        :type: str
        """

        self._members_count_human_readable = members_count_human_readable

    @property
    def is_current_user_member(self):
        """Gets the is_current_user_member of this OrgDashboard.  # noqa: E501


        :return: The is_current_user_member of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_current_user_member

    @is_current_user_member.setter
    def is_current_user_member(self, is_current_user_member):
        """Sets the is_current_user_member of this OrgDashboard.


        :param is_current_user_member: The is_current_user_member of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._is_current_user_member = is_current_user_member

    @property
    def is_viewing_restricted(self):
        """Gets the is_viewing_restricted of this OrgDashboard.  # noqa: E501


        :return: The is_viewing_restricted of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_viewing_restricted

    @is_viewing_restricted.setter
    def is_viewing_restricted(self, is_viewing_restricted):
        """Sets the is_viewing_restricted of this OrgDashboard.


        :param is_viewing_restricted: The is_viewing_restricted of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._is_viewing_restricted = is_viewing_restricted

    @property
    def is_manual_time_hidden(self):
        """Gets the is_manual_time_hidden of this OrgDashboard.  # noqa: E501


        :return: The is_manual_time_hidden of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual_time_hidden

    @is_manual_time_hidden.setter
    def is_manual_time_hidden(self, is_manual_time_hidden):
        """Sets the is_manual_time_hidden of this OrgDashboard.


        :param is_manual_time_hidden: The is_manual_time_hidden of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._is_manual_time_hidden = is_manual_time_hidden

    @property
    def can_current_user_view(self):
        """Gets the can_current_user_view of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_view of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_view

    @can_current_user_view.setter
    def can_current_user_view(self, can_current_user_view):
        """Sets the can_current_user_view of this OrgDashboard.


        :param can_current_user_view: The can_current_user_view of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_view = can_current_user_view

    @property
    def can_current_user_request_to_view(self):
        """Gets the can_current_user_request_to_view of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_request_to_view of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_request_to_view

    @can_current_user_request_to_view.setter
    def can_current_user_request_to_view(self, can_current_user_request_to_view):
        """Sets the can_current_user_request_to_view of this OrgDashboard.


        :param can_current_user_request_to_view: The can_current_user_request_to_view of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_request_to_view = can_current_user_request_to_view

    @property
    def can_current_user_request_to_join(self):
        """Gets the can_current_user_request_to_join of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_request_to_join of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_request_to_join

    @can_current_user_request_to_join.setter
    def can_current_user_request_to_join(self, can_current_user_request_to_join):
        """Sets the can_current_user_request_to_join of this OrgDashboard.


        :param can_current_user_request_to_join: The can_current_user_request_to_join of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_request_to_join = can_current_user_request_to_join

    @property
    def can_current_user_add_members(self):
        """Gets the can_current_user_add_members of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_add_members of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_add_members

    @can_current_user_add_members.setter
    def can_current_user_add_members(self, can_current_user_add_members):
        """Sets the can_current_user_add_members of this OrgDashboard.


        :param can_current_user_add_members: The can_current_user_add_members of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_add_members = can_current_user_add_members

    @property
    def can_current_user_remove_members(self):
        """Gets the can_current_user_remove_members of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_remove_members of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_remove_members

    @can_current_user_remove_members.setter
    def can_current_user_remove_members(self, can_current_user_remove_members):
        """Sets the can_current_user_remove_members of this OrgDashboard.


        :param can_current_user_remove_members: The can_current_user_remove_members of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_remove_members = can_current_user_remove_members

    @property
    def can_current_user_delete(self):
        """Gets the can_current_user_delete of this OrgDashboard.  # noqa: E501


        :return: The can_current_user_delete of this OrgDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._can_current_user_delete

    @can_current_user_delete.setter
    def can_current_user_delete(self, can_current_user_delete):
        """Sets the can_current_user_delete of this OrgDashboard.


        :param can_current_user_delete: The can_current_user_delete of this OrgDashboard.  # noqa: E501
        :type: bool
        """

        self._can_current_user_delete = can_current_user_delete

    @property
    def created_at(self):
        """Gets the created_at of this OrgDashboard.  # noqa: E501


        :return: The created_at of this OrgDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrgDashboard.


        :param created_at: The created_at of this OrgDashboard.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this OrgDashboard.  # noqa: E501


        :return: The modified_at of this OrgDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this OrgDashboard.


        :param modified_at: The modified_at of this OrgDashboard.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
