# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeaderRunningTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_seconds': 'float',
        'human_readable_total': 'str',
        'daily_average': 'float',
        'human_readable_daily_average': 'str',
        'languages': 'list[LeaderRunningTotalLanguages]'
    }

    attribute_map = {
        'total_seconds': 'total_seconds',
        'human_readable_total': 'human_readable_total',
        'daily_average': 'daily_average',
        'human_readable_daily_average': 'human_readable_daily_average',
        'languages': 'languages'
    }

    def __init__(self, total_seconds=None, human_readable_total=None, daily_average=None, human_readable_daily_average=None, languages=None):  # noqa: E501
        """LeaderRunningTotal - a model defined in Swagger"""  # noqa: E501
        self._total_seconds = None
        self._human_readable_total = None
        self._daily_average = None
        self._human_readable_daily_average = None
        self._languages = None
        self.discriminator = None
        if total_seconds is not None:
            self.total_seconds = total_seconds
        if human_readable_total is not None:
            self.human_readable_total = human_readable_total
        if daily_average is not None:
            self.daily_average = daily_average
        if human_readable_daily_average is not None:
            self.human_readable_daily_average = human_readable_daily_average
        if languages is not None:
            self.languages = languages

    @property
    def total_seconds(self):
        """Gets the total_seconds of this LeaderRunningTotal.  # noqa: E501


        :return: The total_seconds of this LeaderRunningTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this LeaderRunningTotal.


        :param total_seconds: The total_seconds of this LeaderRunningTotal.  # noqa: E501
        :type: float
        """

        self._total_seconds = total_seconds

    @property
    def human_readable_total(self):
        """Gets the human_readable_total of this LeaderRunningTotal.  # noqa: E501


        :return: The human_readable_total of this LeaderRunningTotal.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_total

    @human_readable_total.setter
    def human_readable_total(self, human_readable_total):
        """Sets the human_readable_total of this LeaderRunningTotal.


        :param human_readable_total: The human_readable_total of this LeaderRunningTotal.  # noqa: E501
        :type: str
        """

        self._human_readable_total = human_readable_total

    @property
    def daily_average(self):
        """Gets the daily_average of this LeaderRunningTotal.  # noqa: E501


        :return: The daily_average of this LeaderRunningTotal.  # noqa: E501
        :rtype: float
        """
        return self._daily_average

    @daily_average.setter
    def daily_average(self, daily_average):
        """Sets the daily_average of this LeaderRunningTotal.


        :param daily_average: The daily_average of this LeaderRunningTotal.  # noqa: E501
        :type: float
        """

        self._daily_average = daily_average

    @property
    def human_readable_daily_average(self):
        """Gets the human_readable_daily_average of this LeaderRunningTotal.  # noqa: E501


        :return: The human_readable_daily_average of this LeaderRunningTotal.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_daily_average

    @human_readable_daily_average.setter
    def human_readable_daily_average(self, human_readable_daily_average):
        """Sets the human_readable_daily_average of this LeaderRunningTotal.


        :param human_readable_daily_average: The human_readable_daily_average of this LeaderRunningTotal.  # noqa: E501
        :type: str
        """

        self._human_readable_daily_average = human_readable_daily_average

    @property
    def languages(self):
        """Gets the languages of this LeaderRunningTotal.  # noqa: E501


        :return: The languages of this LeaderRunningTotal.  # noqa: E501
        :rtype: list[LeaderRunningTotalLanguages]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this LeaderRunningTotal.


        :param languages: The languages of this LeaderRunningTotal.  # noqa: E501
        :type: list[LeaderRunningTotalLanguages]
        """

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeaderRunningTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaderRunningTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
