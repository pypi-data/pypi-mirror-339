# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GrandTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decimal': 'str',
        'digital': 'str',
        'hours': 'int',
        'minutes': 'int',
        'text': 'str',
        'total_seconds': 'float'
    }

    attribute_map = {
        'decimal': 'decimal',
        'digital': 'digital',
        'hours': 'hours',
        'minutes': 'minutes',
        'text': 'text',
        'total_seconds': 'total_seconds'
    }

    def __init__(self, decimal=None, digital=None, hours=None, minutes=None, text=None, total_seconds=None):  # noqa: E501
        """GrandTotal - a model defined in Swagger"""  # noqa: E501
        self._decimal = None
        self._digital = None
        self._hours = None
        self._minutes = None
        self._text = None
        self._total_seconds = None
        self.discriminator = None
        if decimal is not None:
            self.decimal = decimal
        if digital is not None:
            self.digital = digital
        if hours is not None:
            self.hours = hours
        if minutes is not None:
            self.minutes = minutes
        if text is not None:
            self.text = text
        if total_seconds is not None:
            self.total_seconds = total_seconds

    @property
    def decimal(self):
        """Gets the decimal of this GrandTotal.  # noqa: E501

        Total coding activity in decimal format.  # noqa: E501

        :return: The decimal of this GrandTotal.  # noqa: E501
        :rtype: str
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this GrandTotal.

        Total coding activity in decimal format.  # noqa: E501

        :param decimal: The decimal of this GrandTotal.  # noqa: E501
        :type: str
        """

        self._decimal = decimal

    @property
    def digital(self):
        """Gets the digital of this GrandTotal.  # noqa: E501

        Total coding activity in digital clock format (HH:MM).  # noqa: E501

        :return: The digital of this GrandTotal.  # noqa: E501
        :rtype: str
        """
        return self._digital

    @digital.setter
    def digital(self, digital):
        """Sets the digital of this GrandTotal.

        Total coding activity in digital clock format (HH:MM).  # noqa: E501

        :param digital: The digital of this GrandTotal.  # noqa: E501
        :type: str
        """

        self._digital = digital

    @property
    def hours(self):
        """Gets the hours of this GrandTotal.  # noqa: E501

        Hours portion of coding activity.  # noqa: E501

        :return: The hours of this GrandTotal.  # noqa: E501
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this GrandTotal.

        Hours portion of coding activity.  # noqa: E501

        :param hours: The hours of this GrandTotal.  # noqa: E501
        :type: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this GrandTotal.  # noqa: E501

        Minutes portion of coding activity.  # noqa: E501

        :return: The minutes of this GrandTotal.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this GrandTotal.

        Minutes portion of coding activity.  # noqa: E501

        :param minutes: The minutes of this GrandTotal.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def text(self):
        """Gets the text of this GrandTotal.  # noqa: E501

        Total coding activity in human readable format (e.g., \"3 hrs 45 mins\").  # noqa: E501

        :return: The text of this GrandTotal.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GrandTotal.

        Total coding activity in human readable format (e.g., \"3 hrs 45 mins\").  # noqa: E501

        :param text: The text of this GrandTotal.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def total_seconds(self):
        """Gets the total_seconds of this GrandTotal.  # noqa: E501

        Total coding activity as seconds.  # noqa: E501

        :return: The total_seconds of this GrandTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this GrandTotal.

        Total coding activity as seconds.  # noqa: E501

        :param total_seconds: The total_seconds of this GrandTotal.  # noqa: E501
        :type: float
        """

        self._total_seconds = total_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrandTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrandTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
