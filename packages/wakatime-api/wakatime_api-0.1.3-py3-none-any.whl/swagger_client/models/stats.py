# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_seconds': 'float',
        'total_seconds_including_other_language': 'float',
        'human_readable_total': 'str',
        'human_readable_total_including_other_language': 'str',
        'daily_average': 'float',
        'daily_average_including_other_language': 'float',
        'human_readable_daily_average': 'str',
        'human_readable_daily_average_including_other_language': 'str',
        'categories': 'list[CategoryStat]',
        'projects': 'list[ProjectStat]',
        'languages': 'list[LanguageStat]',
        'editors': 'list[EditorStat]',
        'operating_systems': 'list[OperatingSystemStat]',
        'dependencies': 'list[DependencyStat]',
        'machines': 'list[MachineStat]',
        'best_day': 'StatsBestDay',
        'range': 'str',
        'human_readable_range': 'str',
        'holidays': 'int',
        'days_including_holidays': 'int',
        'days_minus_holidays': 'int',
        'status': 'str',
        'percent_calculated': 'int',
        'is_already_updating': 'bool',
        'is_coding_activity_visible': 'bool',
        'is_language_usage_visible': 'bool',
        'is_editor_usage_visible': 'bool',
        'is_category_usage_visible': 'bool',
        'is_os_usage_visible': 'bool',
        'is_stuck': 'bool',
        'is_including_today': 'bool',
        'is_up_to_date': 'bool',
        'start': 'datetime',
        'end': 'datetime',
        'timezone': 'str',
        'timeout': 'int',
        'writes_only': 'bool',
        'user_id': 'str',
        'username': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'total_seconds': 'total_seconds',
        'total_seconds_including_other_language': 'total_seconds_including_other_language',
        'human_readable_total': 'human_readable_total',
        'human_readable_total_including_other_language': 'human_readable_total_including_other_language',
        'daily_average': 'daily_average',
        'daily_average_including_other_language': 'daily_average_including_other_language',
        'human_readable_daily_average': 'human_readable_daily_average',
        'human_readable_daily_average_including_other_language': 'human_readable_daily_average_including_other_language',
        'categories': 'categories',
        'projects': 'projects',
        'languages': 'languages',
        'editors': 'editors',
        'operating_systems': 'operating_systems',
        'dependencies': 'dependencies',
        'machines': 'machines',
        'best_day': 'best_day',
        'range': 'range',
        'human_readable_range': 'human_readable_range',
        'holidays': 'holidays',
        'days_including_holidays': 'days_including_holidays',
        'days_minus_holidays': 'days_minus_holidays',
        'status': 'status',
        'percent_calculated': 'percent_calculated',
        'is_already_updating': 'is_already_updating',
        'is_coding_activity_visible': 'is_coding_activity_visible',
        'is_language_usage_visible': 'is_language_usage_visible',
        'is_editor_usage_visible': 'is_editor_usage_visible',
        'is_category_usage_visible': 'is_category_usage_visible',
        'is_os_usage_visible': 'is_os_usage_visible',
        'is_stuck': 'is_stuck',
        'is_including_today': 'is_including_today',
        'is_up_to_date': 'is_up_to_date',
        'start': 'start',
        'end': 'end',
        'timezone': 'timezone',
        'timeout': 'timeout',
        'writes_only': 'writes_only',
        'user_id': 'user_id',
        'username': 'username',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, total_seconds=None, total_seconds_including_other_language=None, human_readable_total=None, human_readable_total_including_other_language=None, daily_average=None, daily_average_including_other_language=None, human_readable_daily_average=None, human_readable_daily_average_including_other_language=None, categories=None, projects=None, languages=None, editors=None, operating_systems=None, dependencies=None, machines=None, best_day=None, range=None, human_readable_range=None, holidays=None, days_including_holidays=None, days_minus_holidays=None, status=None, percent_calculated=None, is_already_updating=None, is_coding_activity_visible=None, is_language_usage_visible=None, is_editor_usage_visible=None, is_category_usage_visible=None, is_os_usage_visible=None, is_stuck=None, is_including_today=None, is_up_to_date=None, start=None, end=None, timezone=None, timeout=None, writes_only=None, user_id=None, username=None, created_at=None, modified_at=None):  # noqa: E501
        """Stats - a model defined in Swagger"""  # noqa: E501
        self._total_seconds = None
        self._total_seconds_including_other_language = None
        self._human_readable_total = None
        self._human_readable_total_including_other_language = None
        self._daily_average = None
        self._daily_average_including_other_language = None
        self._human_readable_daily_average = None
        self._human_readable_daily_average_including_other_language = None
        self._categories = None
        self._projects = None
        self._languages = None
        self._editors = None
        self._operating_systems = None
        self._dependencies = None
        self._machines = None
        self._best_day = None
        self._range = None
        self._human_readable_range = None
        self._holidays = None
        self._days_including_holidays = None
        self._days_minus_holidays = None
        self._status = None
        self._percent_calculated = None
        self._is_already_updating = None
        self._is_coding_activity_visible = None
        self._is_language_usage_visible = None
        self._is_editor_usage_visible = None
        self._is_category_usage_visible = None
        self._is_os_usage_visible = None
        self._is_stuck = None
        self._is_including_today = None
        self._is_up_to_date = None
        self._start = None
        self._end = None
        self._timezone = None
        self._timeout = None
        self._writes_only = None
        self._user_id = None
        self._username = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if total_seconds is not None:
            self.total_seconds = total_seconds
        if total_seconds_including_other_language is not None:
            self.total_seconds_including_other_language = total_seconds_including_other_language
        if human_readable_total is not None:
            self.human_readable_total = human_readable_total
        if human_readable_total_including_other_language is not None:
            self.human_readable_total_including_other_language = human_readable_total_including_other_language
        if daily_average is not None:
            self.daily_average = daily_average
        if daily_average_including_other_language is not None:
            self.daily_average_including_other_language = daily_average_including_other_language
        if human_readable_daily_average is not None:
            self.human_readable_daily_average = human_readable_daily_average
        if human_readable_daily_average_including_other_language is not None:
            self.human_readable_daily_average_including_other_language = human_readable_daily_average_including_other_language
        if categories is not None:
            self.categories = categories
        if projects is not None:
            self.projects = projects
        if languages is not None:
            self.languages = languages
        if editors is not None:
            self.editors = editors
        if operating_systems is not None:
            self.operating_systems = operating_systems
        if dependencies is not None:
            self.dependencies = dependencies
        if machines is not None:
            self.machines = machines
        if best_day is not None:
            self.best_day = best_day
        if range is not None:
            self.range = range
        if human_readable_range is not None:
            self.human_readable_range = human_readable_range
        if holidays is not None:
            self.holidays = holidays
        if days_including_holidays is not None:
            self.days_including_holidays = days_including_holidays
        if days_minus_holidays is not None:
            self.days_minus_holidays = days_minus_holidays
        if status is not None:
            self.status = status
        if percent_calculated is not None:
            self.percent_calculated = percent_calculated
        if is_already_updating is not None:
            self.is_already_updating = is_already_updating
        if is_coding_activity_visible is not None:
            self.is_coding_activity_visible = is_coding_activity_visible
        if is_language_usage_visible is not None:
            self.is_language_usage_visible = is_language_usage_visible
        if is_editor_usage_visible is not None:
            self.is_editor_usage_visible = is_editor_usage_visible
        if is_category_usage_visible is not None:
            self.is_category_usage_visible = is_category_usage_visible
        if is_os_usage_visible is not None:
            self.is_os_usage_visible = is_os_usage_visible
        if is_stuck is not None:
            self.is_stuck = is_stuck
        if is_including_today is not None:
            self.is_including_today = is_including_today
        if is_up_to_date is not None:
            self.is_up_to_date = is_up_to_date
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if timezone is not None:
            self.timezone = timezone
        if timeout is not None:
            self.timeout = timeout
        if writes_only is not None:
            self.writes_only = writes_only
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def total_seconds(self):
        """Gets the total_seconds of this Stats.  # noqa: E501


        :return: The total_seconds of this Stats.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this Stats.


        :param total_seconds: The total_seconds of this Stats.  # noqa: E501
        :type: float
        """

        self._total_seconds = total_seconds

    @property
    def total_seconds_including_other_language(self):
        """Gets the total_seconds_including_other_language of this Stats.  # noqa: E501


        :return: The total_seconds_including_other_language of this Stats.  # noqa: E501
        :rtype: float
        """
        return self._total_seconds_including_other_language

    @total_seconds_including_other_language.setter
    def total_seconds_including_other_language(self, total_seconds_including_other_language):
        """Sets the total_seconds_including_other_language of this Stats.


        :param total_seconds_including_other_language: The total_seconds_including_other_language of this Stats.  # noqa: E501
        :type: float
        """

        self._total_seconds_including_other_language = total_seconds_including_other_language

    @property
    def human_readable_total(self):
        """Gets the human_readable_total of this Stats.  # noqa: E501


        :return: The human_readable_total of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_total

    @human_readable_total.setter
    def human_readable_total(self, human_readable_total):
        """Sets the human_readable_total of this Stats.


        :param human_readable_total: The human_readable_total of this Stats.  # noqa: E501
        :type: str
        """

        self._human_readable_total = human_readable_total

    @property
    def human_readable_total_including_other_language(self):
        """Gets the human_readable_total_including_other_language of this Stats.  # noqa: E501


        :return: The human_readable_total_including_other_language of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_total_including_other_language

    @human_readable_total_including_other_language.setter
    def human_readable_total_including_other_language(self, human_readable_total_including_other_language):
        """Sets the human_readable_total_including_other_language of this Stats.


        :param human_readable_total_including_other_language: The human_readable_total_including_other_language of this Stats.  # noqa: E501
        :type: str
        """

        self._human_readable_total_including_other_language = human_readable_total_including_other_language

    @property
    def daily_average(self):
        """Gets the daily_average of this Stats.  # noqa: E501


        :return: The daily_average of this Stats.  # noqa: E501
        :rtype: float
        """
        return self._daily_average

    @daily_average.setter
    def daily_average(self, daily_average):
        """Sets the daily_average of this Stats.


        :param daily_average: The daily_average of this Stats.  # noqa: E501
        :type: float
        """

        self._daily_average = daily_average

    @property
    def daily_average_including_other_language(self):
        """Gets the daily_average_including_other_language of this Stats.  # noqa: E501


        :return: The daily_average_including_other_language of this Stats.  # noqa: E501
        :rtype: float
        """
        return self._daily_average_including_other_language

    @daily_average_including_other_language.setter
    def daily_average_including_other_language(self, daily_average_including_other_language):
        """Sets the daily_average_including_other_language of this Stats.


        :param daily_average_including_other_language: The daily_average_including_other_language of this Stats.  # noqa: E501
        :type: float
        """

        self._daily_average_including_other_language = daily_average_including_other_language

    @property
    def human_readable_daily_average(self):
        """Gets the human_readable_daily_average of this Stats.  # noqa: E501


        :return: The human_readable_daily_average of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_daily_average

    @human_readable_daily_average.setter
    def human_readable_daily_average(self, human_readable_daily_average):
        """Sets the human_readable_daily_average of this Stats.


        :param human_readable_daily_average: The human_readable_daily_average of this Stats.  # noqa: E501
        :type: str
        """

        self._human_readable_daily_average = human_readable_daily_average

    @property
    def human_readable_daily_average_including_other_language(self):
        """Gets the human_readable_daily_average_including_other_language of this Stats.  # noqa: E501


        :return: The human_readable_daily_average_including_other_language of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_daily_average_including_other_language

    @human_readable_daily_average_including_other_language.setter
    def human_readable_daily_average_including_other_language(self, human_readable_daily_average_including_other_language):
        """Sets the human_readable_daily_average_including_other_language of this Stats.


        :param human_readable_daily_average_including_other_language: The human_readable_daily_average_including_other_language of this Stats.  # noqa: E501
        :type: str
        """

        self._human_readable_daily_average_including_other_language = human_readable_daily_average_including_other_language

    @property
    def categories(self):
        """Gets the categories of this Stats.  # noqa: E501


        :return: The categories of this Stats.  # noqa: E501
        :rtype: list[CategoryStat]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Stats.


        :param categories: The categories of this Stats.  # noqa: E501
        :type: list[CategoryStat]
        """

        self._categories = categories

    @property
    def projects(self):
        """Gets the projects of this Stats.  # noqa: E501


        :return: The projects of this Stats.  # noqa: E501
        :rtype: list[ProjectStat]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Stats.


        :param projects: The projects of this Stats.  # noqa: E501
        :type: list[ProjectStat]
        """

        self._projects = projects

    @property
    def languages(self):
        """Gets the languages of this Stats.  # noqa: E501


        :return: The languages of this Stats.  # noqa: E501
        :rtype: list[LanguageStat]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Stats.


        :param languages: The languages of this Stats.  # noqa: E501
        :type: list[LanguageStat]
        """

        self._languages = languages

    @property
    def editors(self):
        """Gets the editors of this Stats.  # noqa: E501


        :return: The editors of this Stats.  # noqa: E501
        :rtype: list[EditorStat]
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this Stats.


        :param editors: The editors of this Stats.  # noqa: E501
        :type: list[EditorStat]
        """

        self._editors = editors

    @property
    def operating_systems(self):
        """Gets the operating_systems of this Stats.  # noqa: E501


        :return: The operating_systems of this Stats.  # noqa: E501
        :rtype: list[OperatingSystemStat]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this Stats.


        :param operating_systems: The operating_systems of this Stats.  # noqa: E501
        :type: list[OperatingSystemStat]
        """

        self._operating_systems = operating_systems

    @property
    def dependencies(self):
        """Gets the dependencies of this Stats.  # noqa: E501


        :return: The dependencies of this Stats.  # noqa: E501
        :rtype: list[DependencyStat]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Stats.


        :param dependencies: The dependencies of this Stats.  # noqa: E501
        :type: list[DependencyStat]
        """

        self._dependencies = dependencies

    @property
    def machines(self):
        """Gets the machines of this Stats.  # noqa: E501


        :return: The machines of this Stats.  # noqa: E501
        :rtype: list[MachineStat]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this Stats.


        :param machines: The machines of this Stats.  # noqa: E501
        :type: list[MachineStat]
        """

        self._machines = machines

    @property
    def best_day(self):
        """Gets the best_day of this Stats.  # noqa: E501


        :return: The best_day of this Stats.  # noqa: E501
        :rtype: StatsBestDay
        """
        return self._best_day

    @best_day.setter
    def best_day(self, best_day):
        """Sets the best_day of this Stats.


        :param best_day: The best_day of this Stats.  # noqa: E501
        :type: StatsBestDay
        """

        self._best_day = best_day

    @property
    def range(self):
        """Gets the range of this Stats.  # noqa: E501


        :return: The range of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Stats.


        :param range: The range of this Stats.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def human_readable_range(self):
        """Gets the human_readable_range of this Stats.  # noqa: E501


        :return: The human_readable_range of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_range

    @human_readable_range.setter
    def human_readable_range(self, human_readable_range):
        """Sets the human_readable_range of this Stats.


        :param human_readable_range: The human_readable_range of this Stats.  # noqa: E501
        :type: str
        """

        self._human_readable_range = human_readable_range

    @property
    def holidays(self):
        """Gets the holidays of this Stats.  # noqa: E501


        :return: The holidays of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._holidays

    @holidays.setter
    def holidays(self, holidays):
        """Sets the holidays of this Stats.


        :param holidays: The holidays of this Stats.  # noqa: E501
        :type: int
        """

        self._holidays = holidays

    @property
    def days_including_holidays(self):
        """Gets the days_including_holidays of this Stats.  # noqa: E501


        :return: The days_including_holidays of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._days_including_holidays

    @days_including_holidays.setter
    def days_including_holidays(self, days_including_holidays):
        """Sets the days_including_holidays of this Stats.


        :param days_including_holidays: The days_including_holidays of this Stats.  # noqa: E501
        :type: int
        """

        self._days_including_holidays = days_including_holidays

    @property
    def days_minus_holidays(self):
        """Gets the days_minus_holidays of this Stats.  # noqa: E501


        :return: The days_minus_holidays of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._days_minus_holidays

    @days_minus_holidays.setter
    def days_minus_holidays(self, days_minus_holidays):
        """Sets the days_minus_holidays of this Stats.


        :param days_minus_holidays: The days_minus_holidays of this Stats.  # noqa: E501
        :type: int
        """

        self._days_minus_holidays = days_minus_holidays

    @property
    def status(self):
        """Gets the status of this Stats.  # noqa: E501


        :return: The status of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Stats.


        :param status: The status of this Stats.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def percent_calculated(self):
        """Gets the percent_calculated of this Stats.  # noqa: E501


        :return: The percent_calculated of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._percent_calculated

    @percent_calculated.setter
    def percent_calculated(self, percent_calculated):
        """Sets the percent_calculated of this Stats.


        :param percent_calculated: The percent_calculated of this Stats.  # noqa: E501
        :type: int
        """

        self._percent_calculated = percent_calculated

    @property
    def is_already_updating(self):
        """Gets the is_already_updating of this Stats.  # noqa: E501


        :return: The is_already_updating of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_already_updating

    @is_already_updating.setter
    def is_already_updating(self, is_already_updating):
        """Sets the is_already_updating of this Stats.


        :param is_already_updating: The is_already_updating of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_already_updating = is_already_updating

    @property
    def is_coding_activity_visible(self):
        """Gets the is_coding_activity_visible of this Stats.  # noqa: E501


        :return: The is_coding_activity_visible of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_coding_activity_visible

    @is_coding_activity_visible.setter
    def is_coding_activity_visible(self, is_coding_activity_visible):
        """Sets the is_coding_activity_visible of this Stats.


        :param is_coding_activity_visible: The is_coding_activity_visible of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_coding_activity_visible = is_coding_activity_visible

    @property
    def is_language_usage_visible(self):
        """Gets the is_language_usage_visible of this Stats.  # noqa: E501


        :return: The is_language_usage_visible of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_language_usage_visible

    @is_language_usage_visible.setter
    def is_language_usage_visible(self, is_language_usage_visible):
        """Sets the is_language_usage_visible of this Stats.


        :param is_language_usage_visible: The is_language_usage_visible of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_language_usage_visible = is_language_usage_visible

    @property
    def is_editor_usage_visible(self):
        """Gets the is_editor_usage_visible of this Stats.  # noqa: E501


        :return: The is_editor_usage_visible of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_editor_usage_visible

    @is_editor_usage_visible.setter
    def is_editor_usage_visible(self, is_editor_usage_visible):
        """Sets the is_editor_usage_visible of this Stats.


        :param is_editor_usage_visible: The is_editor_usage_visible of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_editor_usage_visible = is_editor_usage_visible

    @property
    def is_category_usage_visible(self):
        """Gets the is_category_usage_visible of this Stats.  # noqa: E501


        :return: The is_category_usage_visible of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_category_usage_visible

    @is_category_usage_visible.setter
    def is_category_usage_visible(self, is_category_usage_visible):
        """Sets the is_category_usage_visible of this Stats.


        :param is_category_usage_visible: The is_category_usage_visible of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_category_usage_visible = is_category_usage_visible

    @property
    def is_os_usage_visible(self):
        """Gets the is_os_usage_visible of this Stats.  # noqa: E501


        :return: The is_os_usage_visible of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_os_usage_visible

    @is_os_usage_visible.setter
    def is_os_usage_visible(self, is_os_usage_visible):
        """Sets the is_os_usage_visible of this Stats.


        :param is_os_usage_visible: The is_os_usage_visible of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_os_usage_visible = is_os_usage_visible

    @property
    def is_stuck(self):
        """Gets the is_stuck of this Stats.  # noqa: E501


        :return: The is_stuck of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_stuck

    @is_stuck.setter
    def is_stuck(self, is_stuck):
        """Sets the is_stuck of this Stats.


        :param is_stuck: The is_stuck of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_stuck = is_stuck

    @property
    def is_including_today(self):
        """Gets the is_including_today of this Stats.  # noqa: E501


        :return: The is_including_today of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_including_today

    @is_including_today.setter
    def is_including_today(self, is_including_today):
        """Sets the is_including_today of this Stats.


        :param is_including_today: The is_including_today of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_including_today = is_including_today

    @property
    def is_up_to_date(self):
        """Gets the is_up_to_date of this Stats.  # noqa: E501


        :return: The is_up_to_date of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._is_up_to_date

    @is_up_to_date.setter
    def is_up_to_date(self, is_up_to_date):
        """Sets the is_up_to_date of this Stats.


        :param is_up_to_date: The is_up_to_date of this Stats.  # noqa: E501
        :type: bool
        """

        self._is_up_to_date = is_up_to_date

    @property
    def start(self):
        """Gets the start of this Stats.  # noqa: E501


        :return: The start of this Stats.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Stats.


        :param start: The start of this Stats.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Stats.  # noqa: E501


        :return: The end of this Stats.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Stats.


        :param end: The end of this Stats.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def timezone(self):
        """Gets the timezone of this Stats.  # noqa: E501


        :return: The timezone of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Stats.


        :param timezone: The timezone of this Stats.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def timeout(self):
        """Gets the timeout of this Stats.  # noqa: E501


        :return: The timeout of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Stats.


        :param timeout: The timeout of this Stats.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def writes_only(self):
        """Gets the writes_only of this Stats.  # noqa: E501


        :return: The writes_only of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._writes_only

    @writes_only.setter
    def writes_only(self, writes_only):
        """Sets the writes_only of this Stats.


        :param writes_only: The writes_only of this Stats.  # noqa: E501
        :type: bool
        """

        self._writes_only = writes_only

    @property
    def user_id(self):
        """Gets the user_id of this Stats.  # noqa: E501


        :return: The user_id of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Stats.


        :param user_id: The user_id of this Stats.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this Stats.  # noqa: E501


        :return: The username of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Stats.


        :param username: The username of this Stats.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def created_at(self):
        """Gets the created_at of this Stats.  # noqa: E501


        :return: The created_at of this Stats.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Stats.


        :param created_at: The created_at of this Stats.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Stats.  # noqa: E501


        :return: The modified_at of this Stats.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Stats.


        :param modified_at: The modified_at of this Stats.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
