# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class City(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'name': 'str',
        'state': 'str',
        'title': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'name': 'name',
        'state': 'state',
        'title': 'title'
    }

    def __init__(self, country_code=None, name=None, state=None, title=None):  # noqa: E501
        """City - a model defined in Swagger"""  # noqa: E501
        self._country_code = None
        self._name = None
        self._state = None
        self._title = None
        self.discriminator = None
        if country_code is not None:
            self.country_code = country_code
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title

    @property
    def country_code(self):
        """Gets the country_code of this City.  # noqa: E501

        Two letter country code (e.g., US, UK).  # noqa: E501

        :return: The country_code of this City.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this City.

        Two letter country code (e.g., US, UK).  # noqa: E501

        :param country_code: The country_code of this City.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def name(self):
        """Gets the name of this City.  # noqa: E501

        City name (e.g., San Francisco).  # noqa: E501

        :return: The name of this City.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this City.

        City name (e.g., San Francisco).  # noqa: E501

        :param name: The name of this City.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this City.  # noqa: E501

        State name (e.g., California).  # noqa: E501

        :return: The state of this City.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this City.

        State name (e.g., California).  # noqa: E501

        :param state: The state of this City.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this City.  # noqa: E501

        Combined location string (e.g., \"San Francisco, CA\").  # noqa: E501

        :return: The title of this City.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this City.

        Combined location string (e.g., \"San Francisco, CA\").  # noqa: E501

        :param title: The title of this City.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(City, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, City):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
