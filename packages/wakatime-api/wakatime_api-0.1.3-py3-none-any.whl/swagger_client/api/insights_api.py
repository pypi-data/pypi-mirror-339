# coding: utf-8

"""
    WakaTime API

    REST API for accessing your WakaTime coding activity stats. - Uses GET for retrieval, POST/PUT/PATCH for modification. - All requests must use HTTPS. - Responses are JSON objects. Data is in the `data` key, errors in `error` or `errors`. - Refer to WakaTime usage guidelines when using the trademark or logo.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InsightsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_current_user_insight(self, insight_type, range, **kwargs):  # noqa: E501
        """Get Current User Insight  # noqa: E501

        Retrieve a specific insight for the currently authenticated user. Check `is_up_to_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_insight(insight_type, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str insight_type: Type of insight to retrieve. (required)
        :param str range: Time range for stats or insights (e.g., 'last_7_days', 'last_30_days', 'last_6_months', 'last_year', 'all_time', 'YYYY', 'YYYY-MM'). For aggregate stats, 'last_7_days' or 'YYYY'. (required)
        :param int timeout: Override the user's keystroke timeout setting (in minutes).
        :param bool writes_only: Override the user's writes_only setting.
        :param Weekday weekday: Filter 'days' insight by weekday (0-6 or monday-sunday).
        :return: InsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_user_insight_with_http_info(insight_type, range, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_user_insight_with_http_info(insight_type, range, **kwargs)  # noqa: E501
            return data

    def get_current_user_insight_with_http_info(self, insight_type, range, **kwargs):  # noqa: E501
        """Get Current User Insight  # noqa: E501

        Retrieve a specific insight for the currently authenticated user. Check `is_up_to_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_insight_with_http_info(insight_type, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str insight_type: Type of insight to retrieve. (required)
        :param str range: Time range for stats or insights (e.g., 'last_7_days', 'last_30_days', 'last_6_months', 'last_year', 'all_time', 'YYYY', 'YYYY-MM'). For aggregate stats, 'last_7_days' or 'YYYY'. (required)
        :param int timeout: Override the user's keystroke timeout setting (in minutes).
        :param bool writes_only: Override the user's writes_only setting.
        :param Weekday weekday: Filter 'days' insight by weekday (0-6 or monday-sunday).
        :return: InsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['insight_type', 'range', 'timeout', 'writes_only', 'weekday']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'insight_type' is set
        if ('insight_type' not in params or
                params['insight_type'] is None):
            raise ValueError("Missing the required parameter `insight_type` when calling `get_current_user_insight`")  # noqa: E501
        # verify the required parameter 'range' is set
        if ('range' not in params or
                params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `get_current_user_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'insight_type' in params:
            path_params['insight_type'] = params['insight_type']  # noqa: E501
        if 'range' in params:
            path_params['range'] = params['range']  # noqa: E501

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501
        if 'writes_only' in params:
            query_params.append(('writes_only', params['writes_only']))  # noqa: E501
        if 'weekday' in params:
            query_params.append(('weekday', params['weekday']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/current/insights/{insight_type}/{range}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_insight(self, user, insight_type, range, **kwargs):  # noqa: E501
        """Get User Insight  # noqa: E501

        Retrieve a specific insight about the user's coding activity for a given type and time range. Check `is_up_to_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_insight(user, insight_type, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str insight_type: Type of insight to retrieve. (required)
        :param str range: Time range for stats or insights (e.g., 'last_7_days', 'last_30_days', 'last_6_months', 'last_year', 'all_time', 'YYYY', 'YYYY-MM'). For aggregate stats, 'last_7_days' or 'YYYY'. (required)
        :param int timeout: Override the user's keystroke timeout setting (in minutes).
        :param bool writes_only: Override the user's writes_only setting.
        :param Weekday weekday: Filter 'days' insight by weekday (0-6 or monday-sunday).
        :return: InsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_insight_with_http_info(user, insight_type, range, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_insight_with_http_info(user, insight_type, range, **kwargs)  # noqa: E501
            return data

    def get_user_insight_with_http_info(self, user, insight_type, range, **kwargs):  # noqa: E501
        """Get User Insight  # noqa: E501

        Retrieve a specific insight about the user's coding activity for a given type and time range. Check `is_up_to_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_insight_with_http_info(user, insight_type, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: User ID or 'current' for the authenticated user. (required)
        :param str insight_type: Type of insight to retrieve. (required)
        :param str range: Time range for stats or insights (e.g., 'last_7_days', 'last_30_days', 'last_6_months', 'last_year', 'all_time', 'YYYY', 'YYYY-MM'). For aggregate stats, 'last_7_days' or 'YYYY'. (required)
        :param int timeout: Override the user's keystroke timeout setting (in minutes).
        :param bool writes_only: Override the user's writes_only setting.
        :param Weekday weekday: Filter 'days' insight by weekday (0-6 or monday-sunday).
        :return: InsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'insight_type', 'range', 'timeout', 'writes_only', 'weekday']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_user_insight`")  # noqa: E501
        # verify the required parameter 'insight_type' is set
        if ('insight_type' not in params or
                params['insight_type'] is None):
            raise ValueError("Missing the required parameter `insight_type` when calling `get_user_insight`")  # noqa: E501
        # verify the required parameter 'range' is set
        if ('range' not in params or
                params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `get_user_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'insight_type' in params:
            path_params['insight_type'] = params['insight_type']  # noqa: E501
        if 'range' in params:
            path_params['range'] = params['range']  # noqa: E501

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501
        if 'writes_only' in params:
            query_params.append(('writes_only', params['writes_only']))  # noqa: E501
        if 'weekday' in params:
            query_params.append(('weekday', params['weekday']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyQuery', 'basicAuth', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/insights/{insight_type}/{range}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
