# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import timestamppb as _timestamppb
from . import types as _types

__all__ = [
    'ProjectConfig',
    'ServiceInfo',
]

@pulumi.output_type
class ProjectConfig(dict):
    def __init__(__self__, *,
                 services: Mapping[str, '_types.outputs.ServiceConfig'],
                 configs: Optional[Mapping[str, '_types.outputs.ConfigObjConfig']] = None,
                 name: Optional[builtins.str] = None,
                 networks: Optional[Mapping[str, '_types.outputs.NetworkConfig']] = None,
                 secrets: Optional[Mapping[str, '_types.outputs.SecretConfig']] = None,
                 volumes: Optional[Mapping[str, '_types.outputs.VolumeConfig']] = None):
        pulumi.set(__self__, "services", services)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def services(self) -> Mapping[str, '_types.outputs.ServiceConfig']:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Mapping[str, '_types.outputs.ConfigObjConfig']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Mapping[str, '_types.outputs.NetworkConfig']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Mapping[str, '_types.outputs.SecretConfig']]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Mapping[str, '_types.outputs.VolumeConfig']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ServiceInfo(dict):
    def __init__(__self__, *,
                 created_at: '_timestamppb.outputs.Timestamp',
                 domanname: builtins.str,
                 endpoints: Sequence[builtins.str],
                 etag: builtins.str,
                 lb_dns_name: builtins.str,
                 lb_ips: Sequence[builtins.str],
                 nat_ips: Sequence[builtins.str],
                 private_fqdn: builtins.str,
                 project: builtins.str,
                 public_fqdn: builtins.str,
                 status: builtins.str,
                 updated_at: '_timestamppb.outputs.Timestamp',
                 use_acme_cert: builtins.bool,
                 zone_id: builtins.str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domanname", domanname)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "lb_dns_name", lb_dns_name)
        pulumi.set(__self__, "lb_ips", lb_ips)
        pulumi.set(__self__, "nat_ips", nat_ips)
        pulumi.set(__self__, "private_fqdn", private_fqdn)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "public_fqdn", public_fqdn)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "use_acme_cert", use_acme_cert)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def created_at(self) -> '_timestamppb.outputs.Timestamp':
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domanname(self) -> builtins.str:
        return pulumi.get(self, "domanname")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def etag(self) -> builtins.str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def lb_dns_name(self) -> builtins.str:
        return pulumi.get(self, "lb_dns_name")

    @property
    @pulumi.getter
    def lb_ips(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "lb_ips")

    @property
    @pulumi.getter
    def nat_ips(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "nat_ips")

    @property
    @pulumi.getter
    def private_fqdn(self) -> builtins.str:
        return pulumi.get(self, "private_fqdn")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def public_fqdn(self) -> builtins.str:
        return pulumi.get(self, "public_fqdn")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def updated_at(self) -> '_timestamppb.outputs.Timestamp':
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def use_acme_cert(self) -> builtins.bool:
        return pulumi.get(self, "use_acme_cert")

    @property
    @pulumi.getter
    def zone_id(self) -> builtins.str:
        return pulumi.get(self, "zone_id")


