{"version":3,"sources":["AntMenu.tsx","index.tsx"],"names":["Icons","parseMenuItems","data","iconSize","iconMinWidth","map","item","menuItem","key","label","icon","undefined","children","type","disabled","startsWith","React","createElement","style","minWidth","display","alignItems","className","fontSize","iconName","substring","Icon","error","console","warn","match","dangerouslySetInnerHTML","__html","Object","keys","AllIcons","forEach","withStreamlitConnection","props","menu_data","defaultSelectedKeys","defaultOpenKeys","additionalHeight","close_auto","multiple","css_styling","theme","menu_click","modus","generall_css_styling","inlineIndent","custom_font_awesome_url","args","openKeys","setOpenKeys","useState","selectedKeys","setSelectedKeys","clickOccurred","setClickOccurred","rootSubmenuKeys","useEffect","menuElement","document","querySelector","resizeObserver","ResizeObserver","entries","entry","height","target","clientHeight","Streamlit","setFrameHeight","observe","unobserve","setComponentValue","Fragment","Helmet","src","crossOrigin","id","rel","href","Menu","mode","onOpenChange","latestOpenKey","find","indexOf","width","borderRight","overflow","borderRadius","items","onClick","_ref","includes","filter","k","ReactDOM","render","StrictMode","MenuComponent","getElementById"],"mappings":"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","file":"static/js/main.5b5aca42.chunk.js","sourcesContent":["import { Menu } from \"antd\";\nimport { MenuProps } from \"antd/lib/menu\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport * as AllIcons from \"@ant-design/icons\";\nimport { ComponentType } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\n// Create a mapping of all available Ant Design icons\nconst Icons: Record<string, ComponentType<any>> = {};\nObject.keys(AllIcons).forEach((key) => {\n  Icons[key as keyof typeof AllIcons] = AllIcons[\n    key as keyof typeof AllIcons\n  ] as ComponentType<any>;\n});\n\ninterface MenuItem {\n  key: string;\n  label: string | null;\n  icon?: React.ReactNode;\n  children?: MenuItem[];\n  type?: \"group\" | \"divider\" | \"text\" | null; // added \"text\" type\n  disabled?: boolean;\n}\n\nfunction parseMenuItems(\n  data: any[],\n  iconSize: string,\n  iconMinWidth: string\n): MenuItem[] {\n  return data.map((item: any) => {\n    const menuItem: MenuItem = {\n      key: item.key,\n      label: item.label === null ? null : \"\",\n      icon: undefined,\n      children: item.children\n        ? parseMenuItems(item.children, iconSize, iconMinWidth)\n        : undefined,\n      type: item.type || undefined,\n      disabled: item.disabled ? true : false,\n    };\n\n    if (item.icon) {\n      try {\n        if (item.icon.startsWith(\"fa-\")) {\n          // FontAwesome icon\n          menuItem.icon = (\n            <div\n              style={{\n                minWidth: iconMinWidth,\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <i className={`fa ${item.icon}`} style={{ fontSize: iconSize }} />\n            </div>\n          );\n        } else if (item.icon.startsWith(\"ad-\")) {\n          // Ant Design icon\n          const iconName = item.icon.substring(3); // Remove the \"ad-\" prefix\n          const Icon = Icons[iconName];\n          if (Icon) {\n            menuItem.icon = (\n              <div\n                style={{\n                  minWidth: iconMinWidth,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                {React.createElement(Icon, {\n                  style: { fontSize: iconSize },\n                })}\n              </div>\n            );\n          }\n        } else {\n          // Bootstrap icon (no prefix)\n          menuItem.icon = (\n            <div\n              style={{\n                minWidth: iconMinWidth,\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <i\n                className={`bi bi-${item.icon}`}\n                style={{ fontSize: iconSize }}\n              />\n            </div>\n          );\n        }\n      } catch (error) {\n        console.warn(`Failed to create icon for \"${item.icon}\":`, error);\n      }\n    }\n\n    if (item.label && item.label !== null) {\n      if (item.label.match(/<(.*?)>/)) {\n        menuItem.label = (\n          <span dangerouslySetInnerHTML={{ __html: item.label }}></span>\n        ) as unknown as string;\n      } else {\n        menuItem.label = item.label as string;\n      }\n    }\n\n    return menuItem;\n  });\n}\n\n/**\n * A React component that renders an Ant Design menu based on the provided menu data.\n */\nconst MenuComponent = (props: ComponentProps) => {\n  const {\n    menu_data,\n    key,\n    defaultSelectedKeys,\n    defaultOpenKeys,\n    additionalHeight,\n    close_auto,\n    multiple,\n    css_styling,\n    theme,\n    menu_click,\n    iconSize,\n    modus,\n    generall_css_styling,\n    inlineIndent,\n    custom_font_awesome_url,\n    iconMinWidth,\n  } = props.args;\n  const [openKeys, setOpenKeys] = useState<string[]>(defaultOpenKeys || []);\n  const [selectedKeys, setSelectedKeys] = useState<string[]>(\n    defaultSelectedKeys || []\n  );\n  const [clickOccurred, setClickOccurred] = useState<boolean>(false); // Track if a click occurred\n  const rootSubmenuKeys = menu_data.map((item: any) => item.key);\n\n  useEffect(() => {\n    // Select the menu element\n    const menuElement = document.querySelector(\".ant-menu\");\n\n    // If the menu exists, observe changes in its size\n    if (menuElement) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        for (let entry of entries) {\n          // Set the height when the size of the menu changes\n          const height = entry.target.clientHeight;\n          Streamlit.setFrameHeight(height + additionalHeight);\n        }\n      });\n\n      // Start observing\n      resizeObserver.observe(menuElement);\n\n      // Cleanup\n      return () => {\n        resizeObserver.unobserve(menuElement);\n      };\n    }\n  }, []);\n\n  const onOpenChange: MenuProps[\"onOpenChange\"] = (keys) => {\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\n    if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\n      setOpenKeys(keys);\n    } else {\n      if (menu_click == true && clickOccurred) {\n        Streamlit.setComponentValue(keys);\n      }\n\n      if (close_auto == true) {\n        setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n      } else {\n        setOpenKeys(keys); // Keep all keys\n      }\n    }\n  };\n\n  const onClick = ({ key }: { key: string }) => {\n    setClickOccurred(true); // Update the state to indicate a click occurred\n    if (multiple) {\n      if (selectedKeys.includes(key)) {\n        setSelectedKeys(selectedKeys.filter((k) => k !== key));\n      } else {\n        setSelectedKeys([...selectedKeys, key]);\n      }\n    } else {\n      setSelectedKeys([key]);\n    }\n  };\n\n  useEffect(() => {\n    if (clickOccurred) {\n      // console.log(\"Sending selected keys to Streamlit:\", selectedKeys);\n      Streamlit.setComponentValue(selectedKeys);\n    }\n  }, [selectedKeys]);\n\n  return (\n    <>\n      <Helmet>\n        <script\n          src={custom_font_awesome_url}\n          crossOrigin=\"anonymous\"\n          id=\"font-awesome-icons\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\"\n        />\n      </Helmet>\n\n      <style dangerouslySetInnerHTML={{ __html: generall_css_styling }} />\n      <Menu\n        id={key}\n        mode={modus}\n        openKeys={openKeys}\n        onOpenChange={onOpenChange}\n        inlineIndent={inlineIndent}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          borderRight: 0,\n          overflow: \"auto\",\n          borderRadius: \"10px\",\n          ...css_styling,\n        }}\n        theme={theme}\n        items={parseMenuItems(menu_data, iconSize, iconMinWidth)}\n        multiple={multiple}\n        defaultSelectedKeys={defaultSelectedKeys}\n        defaultOpenKeys={defaultOpenKeys}\n        onClick={onClick}\n      />\n    </>\n  );\n};\n\nexport default withStreamlitConnection(MenuComponent);\n","\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MenuComponent from \"./AntMenu\"\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\n\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <MenuComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}