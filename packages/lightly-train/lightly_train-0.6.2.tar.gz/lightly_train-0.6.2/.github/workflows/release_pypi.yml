name: Release PyPI

on:
  workflow_dispatch:
# TODO(Philipp, 03/23): Enable me after proper testing.
#  release:
#    types: [published]

env:
  # Virtual environment path used by uv and other tools.
  # We create a new environment for each job to avoid conflicts.
  # For more information, see: https://github.com/lightly-ai/lightly-train/.github/workflows/README.md
  VIRTUAL_ENV: ${{ github.workspace }}/.venv

jobs:
  release-pypi:
    name: Release PyPI
    runs-on: docker-cpu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout latest release tag
        id: checkout_latest_release_tag
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $LATEST_TAG
          echo "tag_name=$LATEST_TAG" >> $GITHUB_OUTPUT;
      - name: Assert Version in Code Matches Latest Release Tag
        id: assert_version
        run: |
          LATEST_TAG=${{steps.checkout_latest_release_tag.outputs.tag_name}}
          VERSION_FROM_INIT=$(grep -oP '(?<=__version__ = ")[^"]*' src/lightly_train/__init__.py)
          VERSION_FROM_INIT="v$VERSION_FROM_INIT"
          if [ "$VERSION_FROM_INIT" != "$LATEST_TAG" ]; then
            echo "Version mismatch: Tag is $LATEST_TAG, but __version__ in __init__.py is $VERSION_FROM_INIT"
            exit 1
          fi
          echo "__version__ from __init__.py $VERSION_FROM_INIT matches latest tag $LATEST_TAG"
      - name: Set Up uv
        uses: astral-sh/setup-uv@v3
        id: setup-uv
        with:
          # For more information about the settings, see: 
          # https://github.com/lightly-ai/lightly-train/.github/workflows/README.md
          version: 0.5.4
          cache-local-path: /tmp/setup-uv-cache
          prune-cache: false
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Set Up Environment
        # For more information about the environment setup, see:
        # https://github.com/lightly-ai/lightly-train/.github/workflows/README.md
        run: |
          rm -rf ${VIRTUAL_ENV}                       # Make sure the venv is clean
          uv venv ${VIRTUAL_ENV} --python 3.10        # Create the venv
          echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH   # Add the venv to the PATH
          make install-dist
      - name: Build And Release
        id: build_and_release
        run: |
          # NOTE: This uses the files checked out from the latest tag.
          make dist
          twine upload -u ${{ secrets.PYPI_USER_NAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*
  slack-notification:
    name: Send Slack Notification
    needs:
      - release-pypi
    if: always()
    # runs-on: docker-cpu is not supported by the docker-in-docker/DinD architecture of the docker-runners due to how volumes within a container are mounted to the host instead of the container.
    # for more information, see here; https://linear.app/lightly/issue/LIG-5676/docker-in-docker-does-not-work-when-volumes-are-used-or-when-github
    runs-on: cpu
    timeout-minutes: 5
    steps:
    - name: Slack Notification - Success
      if: ${{ needs.release-pypi.result == 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
        SLACK_ICON_EMOJI: ":python:"
        SLACK_USERNAME: Release of LightlyTrain Package
        SLACK_COLOR: "good"
        SLACK_FOOTER: ""
        SLACK_MESSAGE: |
          Release status: :github-check-mark:
          https://pypi.org/project/lightly-train
    - name: Slack Notification - Failure
      if: ${{ needs.release-pypi.result != 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
        SLACK_ICON_EMOJI: ":x:"
        SLACK_USERNAME: Release of LightlyTrain Package 
        SLACK_COLOR: "danger"
        SLACK_FOOTER: ""
        SLACK_MESSAGE: |
          Release status: :x:
          Please check the logs and take necessary action.
