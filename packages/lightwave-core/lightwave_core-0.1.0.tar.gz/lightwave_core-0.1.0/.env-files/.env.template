# -----------------------------------------------------------------------------
# Environment Variables Template (.env.example)
#
# Project: [Your Service Name - e.g., CreateOS IO API]
#
# Instructions:
# 1. Copy this file to a new file named '.env' in the same directory.
# 2. DO NOT commit the '.env' file to version control (ensure it's in .gitignore).
# 3. Fill in the actual values for your specific deployment environment (development, staging, production).
# 4. Variables are typically loaded by your application framework (e.g., Django using python-dotenv or Pydantic settings).
#
# Syntax:
# - KEY=VALUE
# - No spaces around the '=' sign.
# - Comments start with '#'.
# - Empty lines are ignored.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# uv (Python Package Installer/Resolver) Environment Variables
#
# These variables configure the behavior of the 'uv' command-line tool.
# Many of these settings can also be configured via command-line flags or
# a 'uv.toml' file, which might be preferable for project-specific settings.
# Hierarchy: Command-line flags > Environment Variables > uv.toml > Defaults
#
# Documentation: https://docs.astral.sh/uv/configuration/#environment-variables
# -----------------------------------------------------------------------------

# --- Private Index Configuration ---

# If you primarily use a private index instead of PyPI.
# Uncomment and set the URL to your private index's simple API endpoint.
# Example: https://my-private-pypi.example.com/simple
# UV_DEFAULT_INDEX=

# If you use PyPI *plus* one or more private indexes. List additional index URLs, space-separated.
# Ignored if UV_DEFAULT_INDEX is set (as that replaces PyPI entirely).
# Example: https://private1.example.com/simple https://private2.example.com/simple
# UV_INDEX=

# --- Index Authentication (Use with Caution) ---
# Provide credentials for private indexes defined with a specific name (e.g., in uv.toml or --index mycorp=...).
# WARNING: Avoid storing passwords directly in .env for local development if possible.
# Consider using keyring integration (--keyring-provider) or CI/CD secrets management.
# Set these variables *only* in secure execution environments (like CI secrets) or for specific script runs.
# Replace 'mycorp' with the actual name of your configured index.
# UV_INDEX_MYCORP_USERNAME=your-username
# UV_INDEX_MYCORP_PASSWORD=your-password-or-token

# --- Network Configuration ---

# Set to 'true' if you are behind a corporate firewall that intercepts SSL/TLS traffic
# using custom Certificate Authorities (CAs). Forces uv to use the OS trust store.
# Recommended: Set globally on affected systems or in CI base images.
UV_NATIVE_TLS=true

# Standard proxy variables (uv respects these). Uncomment and set if required by your network.
# HTTP_PROXY=http://your-proxy.example.com:8080
# HTTPS_PROXY=http://your-proxy.example.com:8080
# NO_PROXY=localhost,127.0.0.1,.your-internal-domain.com

# --- CI/CD & Scripting Recommendations ---

# Set to 'true' to disable spinners and progress bars for cleaner logs.
# Recommended: Set in CI/CD environments or non-interactive scripts.
UV_NO_PROGRESS=true

# Specify a custom directory for uv's cache. Useful for persistent caching in CI.
# Example: /path/to/persistent/uv-cache (ensure the directory exists and is writable)
# UV_CACHE_DIR=

# --- Security ---

# Set to 'true' to enforce that all packages listed in requirements files have hashes.
# Recommended: Set in CI/CD environments that install from locked requirements files.
UV_REQUIRE_HASHES=true

# --- Debugging ---

# Enable verbose logging for uv. Set the level as needed (e.g., uv=debug, uv=trace).
# Useful for troubleshooting complex dependency resolution or installation issues.
# Example: uv=debug
# RUST_LOG=

# --- Variables Generally NOT Recommended for .env ---
# The following variables often change core behavior and are usually better set via
# command-line flags (--flag) or project-specific uv.toml files:
# UV_BREAK_SYSTEM_PACKAGES, UV_SYSTEM_PYTHON (Use with extreme caution, mainly for containers)
# UV_PYTHON (Usually let uv discover or use --python flag)
# UV_PRERELEASE, UV_RESOLUTION, UV_OFFLINE, UV_NO_BUILD, UV_NO_BINARY, UV_NO_CACHE
# UV_CONCURRENT_* (Defaults are usually fine)
# UV_PUBLISH_* (Handle secrets carefully, often via CLI flags or CI secrets)

# --- Core Application Settings ---

# DEBUG MODE: Set to 'True' for development ONLY. Should be 'False' in production.
# Enables detailed error pages and other development aids.
DEBUG=True

# SECRET KEY: A long, random, unpredictable string. CRITICAL for security.
# Used for session signing, cryptographic functions, etc.
# Generate one using Django's `get_random_secret_key()` or a password generator.
# MUST be different for each environment (dev, staging, prod).
# Example (DO NOT USE THIS): 'django-insecure-your-very-long-and-random-secret-key-here'
SECRET_KEY='!!! REPLACE WITH YOUR ACTUAL SECRET KEY !!!'

# ALLOWED HOSTS: A comma-separated list of hostnames/domains this service is allowed to serve.
# Use '*' for development ONLY if necessary and you understand the risks.
# Production example: 'service.example.com,api.example.com'
# Development example: 'localhost,127.0.0.1,.ngrok-free.app'
DJANGO_ALLOWED_HOSTS='localhost,127.0.0.1'

# SITE_ID: Django sites framework setting (if used). Often '1'.
# SITE_ID=1

# --- Database Settings ---
# See https://github.com/jazzband/dj-database-url for URL format documentation.

# DATABASE_URL: Connection string for the primary database.
# Format: driver://USER:PASSWORD@HOST:PORT/DB_NAME
# Examples:
# PostgreSQL: postgresql://user:password@localhost:5432/mydatabase
# MySQL:      mysql://user:password@localhost:3306/mydatabase
# SQLite:     sqlite:////path/to/your/database.db (note the four slashes for absolute path)
# SQLite (relative path): sqlite:///./database.db (relative to project root usually)
DATABASE_URL='sqlite:///./db.sqlite3'

# Optional: Read replica URL if you have read replicas configured
# READ_REPLICA_URL=postgresql://user:password@read-replica-host:5432/mydatabase

# --- Cache Settings ---

# CACHE_URL: Connection string for the cache backend (e.g., Redis, Memcached).
# Often used for Django's cache framework, rate limiting, etc.
# See https://github.com/jazzband/django-redis#settings for Redis URL formats.
# Examples:
# Redis: redis://localhost:6379/0  (0 is the database number)
# Redis with password: redis://:password@localhost:6379/0
# Redis Sentinel: redis+sentinel://localhost:26379/mymaster/0
# Memcached: memcached://localhost:11211
# LocMem (Development only): locmem://
CACHE_URL='locmem://'

# Optional: Separate cache for specific purposes if needed
# SESSION_CACHE_URL=redis://localhost:6379/1

# --- Celery Settings (Asynchronous Tasks) ---

# CELERY_BROKER_URL: Connection string for the message broker (e.g., Redis, RabbitMQ).
# Used by Celery workers to receive tasks.
# Examples:
# Redis: redis://localhost:6379/1 (Use a different DB number than cache if using Redis)
# RabbitMQ: amqp://user:password@localhost:5672/vhost
CELERY_BROKER_URL='redis://localhost:6379/1'

# CELERY_RESULT_BACKEND: Connection string for storing task results (optional, depends on use case).
# Often the same as the broker or a database.
# Examples:
# Redis: redis://localhost:6379/2
# Database (requires django-celery-results): db+postgresql://user:password@host:port/db_name
# RPC (results sent back directly, good for simple cases): rpc://
# Set to empty if you don't need to store results: ""
CELERY_RESULT_BACKEND='redis://localhost:6379/2'

# --- Email Settings ---

# EMAIL_BACKEND: Django setting for email backend.
# Development: 'django.core.mail.backends.console.EmailBackend' (prints to console)
# SMTP: 'django.core.mail.backends.smtp.EmailBackend'
# API-based (e.g., Anymail): 'anymail.backends.sendgrid.EmailBackend'
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'

# SMTP Settings (only needed if EMAIL_BACKEND is smtp)
EMAIL_HOST=
EMAIL_PORT=587
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=
EMAIL_USE_TLS=True
# EMAIL_USE_SSL=False # Typically only one of TLS/SSL is True

# Default sender address for emails sent by the application
DEFAULT_FROM_EMAIL='webmaster@localhost'

# --- Cloud Storage Settings (e.g., AWS S3, Google Cloud Storage) ---
# Used for storing user uploads, static files (in production).

# AWS S3 Settings (if using S3 for static/media files via django-storages)
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_STORAGE_BUCKET_NAME=your-s3-bucket-name
# AWS_S3_REGION_NAME=us-east-1 # e.g., us-east-1, eu-west-2
# AWS_S3_ENDPOINT_URL= # Optional: For S3-compatible storage like MinIO (e.g., http://minio:9000)
# AWS_S3_CUSTOM_DOMAIN= # Optional: If using CloudFront or custom domain for bucket (e.g., cdn.example.com)
# AWS_LOCATION= # Optional: Subdirectory within the bucket (e.g., 'static', 'media')
# AWS_DEFAULT_ACL=public-read # Or 'private', depending on your needs

# --- External API Keys & Secrets ---
# Add sections for any third-party services your application integrates with.

# Example: Stripe Payments
# STRIPE_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxx
# STRIPE_SECRET_KEY=sk_test_xxxxxxxxxxxxxx
# STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxx # For verifying webhook events

# Example: Twilio SMS/Voice
# TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxx
# TWILIO_AUTH_TOKEN=your_auth_token
# TWILIO_FROM_NUMBER=+15551234567

# Example: ClickUp (if automation-service uses it)
# CLICKUP_API_TOKEN=pk_xxxxxxxxxxxxxx
# CLICKUP_TEAM_ID=1234567

# Example: Sentry Error Tracking
# SENTRY_DSN=https://xxxxxxxxxxxxxx@xxxxxx.ingest.sentry.io/xxxxxxx
# SENTRY_ENVIRONMENT=development # Or 'staging', 'production'

# --- Security Settings ---

# CORS (Cross-Origin Resource Sharing) Settings (if serving a frontend from a different domain/port)
# Used by django-cors-headers
# Comma-separated list of origins allowed to make requests.
# Production example: 'https://app.example.com,https://www.example.com'
# Development example: 'http://localhost:3000,http://127.0.0.1:3000'
CORS_ALLOWED_ORIGINS='http://localhost:3000,http://127.0.0.1:3000'
# Alternatively, allow all origins (USE WITH CAUTION, generally not recommended for production APIs)
# CORS_ALLOW_ALL_ORIGINS=True

# CSRF_TRUSTED_ORIGINS: For Django, origins allowed for secure POST requests (often same as CORS)
# Example: 'https://app.example.com,https://www.example.com'
CSRF_TRUSTED_ORIGINS='http://localhost:3000,http://127.0.0.1:3000'

# JWT Settings (if using JWT for authentication)
# JWT_AUTH_SECRET_KEY='!!! ANOTHER STRONG SECRET KEY FOR JWT SIGNING !!!' # Use a different key than SECRET_KEY
# JWT_AUTH_ALGORITHM='HS256' # Or 'RS256' etc. if using public/private keys
# JWT_AUTH_ACCESS_TOKEN_LIFETIME_MINUTES=5
# JWT_AUTH_REFRESH_TOKEN_LIFETIME_DAYS=7

# --- Internal Service URLs ---
# URLs for other services within your LightWave ecosystem if direct communication is needed.

# Example: Authentication Service URL (if separate)
# AUTH_SERVICE_URL=http://lightwave-auth:8000/api/

# Example: Automation Service URL
# AUTOMATION_SERVICE_URL=http://localhost:8002/api/ # Development
# AUTOMATION_SERVICE_INTERNAL_URL=http://lightwave-automation:8000/ # Internal Docker network name

# --- Logging ---

# LOG_LEVEL: Controls the verbosity of application logs (e.g., DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# --- Miscellaneous ---

# Any other service-specific configuration variables go here.
# MY_CUSTOM_SETTING=some_value

# -----------------------------------------------------------------------------
# End of .env.example
# Remember to create a .env file and fill in your actual values.
# Keep your .env file secure and out of version control!
# -----------------------------------------------------------------------------