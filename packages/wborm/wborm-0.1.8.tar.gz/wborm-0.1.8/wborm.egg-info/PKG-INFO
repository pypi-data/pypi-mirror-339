Metadata-Version: 2.4
Name: wborm
Version: 0.1.8
Summary: ORM leve com introspec√ß√£o autom√°tica para bancos JDBC como Informix, usando integra√ß√£o com wbjdbc.
Author-email: Wanderson Batista <wanderfreitasb@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/wanderbatistaf/wborm
Project-URL: Documentation, https://wanderbatistaf.github.io/wborm
Project-URL: Repository, https://github.com/wanderbatistaf/wborm
Keywords: ORM,JDBC,Informix,DB2,Firebird,introspec√ß√£o,wbjdbc
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: wbjdbc>=1.1.3
Requires-Dist: tabulate
Requires-Dist: termcolor
Requires-Dist: pandas; extra == "pandas"
Requires-Dist: pyspark; extra == "spark"
Dynamic: license-file

[![PyPI](https://img.shields.io/pypi/v/wborm)](https://pypi.org/project/wborm/) [![PyPI - Downloads](https://img.shields.io/pypi/dm/wborm)](https://pypi.org/project/wborm/) [![Build Status](https://github.com/wanderbatistaf/wborm/actions/workflows/publish-package.yml/badge.svg)](https://github.com/wanderbatistaf/wborm/actions) ![License: MIT](https://img.shields.io/github/license/wanderbatistaf/wborm) [![√öltimo Commit](https://img.shields.io/github/last-commit/wanderbatistaf/wborm)](https://github.com/wanderbatistaf/wborm) [![GitHub issues](https://img.shields.io/github/issues/wanderbatistaf/wborm)](https://github.com/wanderbatistaf/wborm/issues) [![GitHub forks](https://img.shields.io/github/forks/wanderbatistaf/wborm?style=social)](https://github.com/wanderbatistaf/wborm) [![GitHub stars](https://img.shields.io/github/stars/wanderbatistaf/wborm?style=social)](https://github.com/wanderbatistaf/wborm) 
# WBORM

**WBORM** √© uma biblioteca ORM leve para Python, projetada para funcionar diretamente com bancos de dados legados via JDBC, como Informix, DB2, Oracle e outros. Com foco em transpar√™ncia, seguran√ßa e introspec√ß√£o autom√°tica, ela √© a parceira ideal da `wbjdbc`, entregando produtividade sem esconder o SQL.

---

## ‚ú® Destaques

- Suporte completo a conex√µes JDBC via `wbjdbc`
- Gera√ß√£o autom√°tica de modelos com introspec√ß√£o
- API fluente com `.select()`, `.filter()`, `.join()` e mais
- Confirma√ß√£o obrigat√≥ria em opera√ß√µes destrutivas
- Bloqueio de UPDATE/DELETE sem WHERE
- Transa√ß√µes autom√°ticas com rollback
- Integra√ß√£o com Pandas e Spark
- Eager/lazy loading, cache, hooks e muito mais

---

## üìÅ Instala√ß√£o

```bash
pip install wborm wbjdbc
```

---

## üöÄ Come√ßando R√°pido

### 1. Conectando via `wbjdbc`

```python
from wbjdbc import connect_to_db

conn = connect_to_db(
    db_type="informix-sqli",
    host="localhost",
    port=1526,
    database="meubanco",
    user="usuario",
    password="senha",
    server="ol_informix"
)
```

### 2. Gerando modelo com introspec√ß√£o

```python
from wborm.utils import generate_model

Cliente = generate_model("clientes", conn)
```

> Isso detecta automaticamente os campos, tipos, PKs e campos nulos da tabela!

### 3. Consultando dados

```python
clientes = Cliente.filter(idade=30).order_by("nome").all()
for c in clientes:
    print(c.nome)
```

---

## üõ†Ô∏è Definindo modelos manualmente (opcional)

```python
from wborm.core import Model
from wborm.fields import Field

class Cliente(Model):
    __tablename__ = "clientes"
    id = Field(int, primary_key=True)
    nome = Field(str)
    idade = Field(int)

Cliente._connection = conn
```

> Ideal para quem quer customizar comportamento, usar `create_table()` ou definir campos antes de existir no banco.

---

## üîí Seguran√ßa embutida

- `.add()`, `.update()` e `.delete()` exigem `confirm=True`
- UPDATE/DELETE sem WHERE s√£o bloqueados
- Transa√ß√µes com `BEGIN WORK / COMMIT / ROLLBACK`

---

## üìä Integra√ß√£o com Pandas e Spark

```python
import pandas as pd

clientes = Cliente.all()
df = pd.DataFrame([c.to_dict() for c in clientes])
```

```python
spark.createDataFrame([c.to_dict() for c in Cliente.all()])
```

---

## üìñ Documenta√ß√£o completa

Acesse:
[https://wanderbatistaf.github.io/wborm](https://wanderbatistaf.github.io/wborm)

Inclui:
- Guia de In√≠cio R√°pido
- Modelos com introspec√ß√£o
- Operadores, joins, filtros, agrupamentos
- Lazy loading, hooks, cache, valida√ß√µes
- Integra√ß√£o wbjdbc-wborm

---

## üìú Licen√ßa

Este projeto √© licenciado sob a Licen√ßa MIT. Consulte o arquivo LICENSE para mais informa√ß√µes.

---

## ü§ù Contribuindo

Pull requests s√£o bem-vindos! Envie sugest√µes ou melhorias diretamente no [reposit√≥rio do GitHub](https://github.com/wanderbatistaf/wborm).

