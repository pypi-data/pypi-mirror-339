# Generated by Django 4.2.19 on 2025-02-07 17:25

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.core.models.ordering
import nautobot.extras.models.mixins
import nautobot.extras.models.models
import nautobot.extras.models.statuses
import nautobot.extras.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('extras', '0114_computedfield_grouping'),
        ('dcim', '0062_module_data_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HyperCacheMemoryProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('frontEndCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ramOnlyCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hotCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('diskIndexMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cacheMemoryProfileId', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'unique_together': {('name', 'description', 'frontEndCacheMemoryPercent', 'ramOnlyCacheMemoryPercent', 'hotCacheMemoryPercent', 'diskIndexMemoryPercent', 'cacheMemoryProfileId')},
            },
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CdnSite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('local_context_data', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('local_context_data_owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=255)),
                ('_name', nautobot.core.models.fields.NaturalOrderingField('name', blank=True, db_index=True, max_length=100, naturalize_function=nautobot.core.models.ordering.naturalize)),
                ('abbreviatedName', models.CharField(blank=True, max_length=255)),
                ('bandwidthLimitMbps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(10000000)])),
                ('enableDisklessMode', models.BooleanField(default=False)),
                ('neighbor1_preference', models.IntegerField(blank=True, default=1000, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('neighbor2_preference', models.IntegerField(blank=True, default=750, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('siteId', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('cacheMemoryProfileId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cdn_sites', to='nautobot_cdn_models.hypercachememoryprofile')),
                ('cdn_site_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdnsites', to='nautobot_cdn_models.siterole')),
                ('failover_site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sister_site', to='nautobot_cdn_models.cdnsite')),
                ('local_context_data_owner_content_type', models.ForeignKey(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('local_context_schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='extras.configcontextschema')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cdnsites', to='dcim.location')),
                ('neighbor1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_neighbor', to='nautobot_cdn_models.cdnsite')),
                ('neighbor2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_neighbor', to='nautobot_cdn_models.cdnsite')),
                ('status', nautobot.extras.models.statuses.StatusField(on_delete=django.db.models.deletion.PROTECT, to='extras.status')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['cdn_site_role', '_name'],
                'unique_together': {('cdn_site_role', 'location', 'name')},
            },
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model, nautobot.extras.models.models.ConfigContextSchemaValidationMixin),
        ),
        migrations.CreateModel(
            name='CdnConfigContextSchema',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('data_schema', models.JSONField()),
                ('owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('owner_content_type', models.ForeignKey(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CdnConfigContext',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('weight', models.PositiveSmallIntegerField(default=1000)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('data', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('cdn_site_roles', models.ManyToManyField(blank=True, related_name='+', to='nautobot_cdn_models.siterole')),
                ('cdnsites', models.ManyToManyField(blank=True, related_name='+', to='nautobot_cdn_models.cdnsite')),
                ('failover_site', models.ManyToManyField(blank=True, related_name='+', to='nautobot_cdn_models.cdnsite')),
                ('locations', models.ManyToManyField(blank=True, related_name='+', to='dcim.location')),
                ('owner_content_type', models.ForeignKey(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='extras.configcontextschema')),
                ('tags', models.ManyToManyField(blank=True, related_name='+', to='extras.tag')),
            ],
            options={
                'ordering': ['weight', 'name'],
            },
            bases=(models.Model, nautobot.extras.models.models.ConfigContextSchemaValidationMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.AddConstraint(
            model_name='cdnconfigcontextschema',
            constraint=models.UniqueConstraint(fields=('name', 'owner_content_type', 'owner_object_id'), name='cdn_unique_name_owner'),
        ),
        migrations.AlterUniqueTogether(
            name='cdnconfigcontext',
            unique_together={('name', 'owner_content_type', 'owner_object_id')},
        ),
    ]
