# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _oboe
else:
    import _oboe

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def oboe_debug_log_add(newLogger, context):
    return _oboe.oboe_debug_log_add(newLogger, context)
class Metadata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, md):
        _oboe.Metadata_swiginit(self, _oboe.new_Metadata(md))
    __swig_destroy__ = _oboe.delete_Metadata

    def createEvent(self):
        return _oboe.Metadata_createEvent(self)

    def copy(self):
        return _oboe.Metadata_copy(self)

    def isValid(self):
        return _oboe.Metadata_isValid(self)

    def isSampled(self):
        return _oboe.Metadata_isSampled(self)

    @staticmethod
    def makeRandom(sampled=True):
        return _oboe.Metadata_makeRandom(sampled)

    @staticmethod
    def fromString(s):
        return _oboe.Metadata_fromString(s)

    def metadata(self):
        return _oboe.Metadata_metadata(self)

    def toString(self):
        return _oboe.Metadata_toString(self)

# Register Metadata in _oboe:
_oboe.Metadata_swigregister(Metadata)
class Context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def setTracingMode(newMode):
        return _oboe.Context_setTracingMode(newMode)

    @staticmethod
    def setTriggerMode(newMode):
        return _oboe.Context_setTriggerMode(newMode)

    @staticmethod
    def setDefaultSampleRate(newRate):
        return _oboe.Context_setDefaultSampleRate(newRate)

    @staticmethod
    def getDecisions(*args):
        return _oboe.Context_getDecisions(*args)

    @staticmethod
    def get():
        return _oboe.Context_get()

    @staticmethod
    def toString():
        return _oboe.Context_toString()

    @staticmethod
    def set(md):
        return _oboe.Context_set(md)

    @staticmethod
    def fromString(s):
        return _oboe.Context_fromString(s)

    @staticmethod
    def copy():
        return _oboe.Context_copy()

    @staticmethod
    def setSampledFlag():
        return _oboe.Context_setSampledFlag()

    @staticmethod
    def clear():
        return _oboe.Context_clear()

    @staticmethod
    def isValid():
        return _oboe.Context_isValid()

    @staticmethod
    def isSampled():
        return _oboe.Context_isSampled()

    @staticmethod
    def validateTransformServiceName(service_key):
        return _oboe.Context_validateTransformServiceName(service_key)

    @staticmethod
    def shutdown():
        return _oboe.Context_shutdown()

    @staticmethod
    def isReady(timeout):
        return _oboe.Context_isReady(timeout)

    @staticmethod
    def isLambda():
        return _oboe.Context_isLambda()

    @staticmethod
    def startTrace():
        return _oboe.Context_startTrace()

    @staticmethod
    def createEntry(md, timestamp, parent_md=None):
        return _oboe.Context_createEntry(md, timestamp, parent_md)

    @staticmethod
    def createEvent(*args):
        return _oboe.Context_createEvent(*args)

    @staticmethod
    def createExit(timestamp):
        return _oboe.Context_createExit(timestamp)

    def __init__(self):
        _oboe.Context_swiginit(self, _oboe.new_Context())
    __swig_destroy__ = _oboe.delete_Context

# Register Context in _oboe:
_oboe.Context_swigregister(Context)
class Event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _oboe.delete_Event

    def addInfo(self, *args):
        return _oboe.Event_addInfo(self, *args)

    def addEdge(self, md):
        return _oboe.Event_addEdge(self, md)

    def addContextOpId(self, md):
        return _oboe.Event_addContextOpId(self, md)

    def addHostname(self):
        return _oboe.Event_addHostname(self)

    def getMetadata(self):
        return _oboe.Event_getMetadata(self)

    def metadataString(self):
        return _oboe.Event_metadataString(self)

    def opIdString(self):
        return _oboe.Event_opIdString(self)

    def send(self, with_system_timestamp=True):
        return _oboe.Event_send(self, with_system_timestamp)

    def sendProfiling(self):
        return _oboe.Event_sendProfiling(self)

    def addSpanRef(self, md):
        return _oboe.Event_addSpanRef(self, md)

    def addProfileEdge(self, id):
        return _oboe.Event_addProfileEdge(self, id)

    @staticmethod
    def startTrace(md):
        return _oboe.Event_startTrace(md)

# Register Event in _oboe:
_oboe.Event_swigregister(Event)
class Span(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createSpan(transaction, domain, duration, has_error, service_name=None):
        return _oboe.Span_createSpan(transaction, domain, duration, has_error, service_name)

    @staticmethod
    def createHttpSpan(transaction, url, domain, duration, status, method, has_error, service_name=None):
        return _oboe.Span_createHttpSpan(transaction, url, domain, duration, status, method, has_error, service_name)

    def __init__(self):
        _oboe.Span_swiginit(self, _oboe.new_Span())
    __swig_destroy__ = _oboe.delete_Span

# Register Span in _oboe:
_oboe.Span_swigregister(Span)
class MetricTags(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, count):
        _oboe.MetricTags_swiginit(self, _oboe.new_MetricTags(count))
    __swig_destroy__ = _oboe.delete_MetricTags

    def add(self, index, k, v):
        return _oboe.MetricTags_add(self, index, k, v)

    def get(self):
        return _oboe.MetricTags_get(self)

# Register MetricTags in _oboe:
_oboe.MetricTags_swigregister(MetricTags)
class CustomMetrics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def summary(name, value, count, host_tag, service_name, tags, tags_count):
        return _oboe.CustomMetrics_summary(name, value, count, host_tag, service_name, tags, tags_count)

    @staticmethod
    def increment(name, count, host_tag, service_name, tags, tags_count):
        return _oboe.CustomMetrics_increment(name, count, host_tag, service_name, tags, tags_count)

    def __init__(self):
        _oboe.CustomMetrics_swiginit(self, _oboe.new_CustomMetrics())
    __swig_destroy__ = _oboe.delete_CustomMetrics

# Register CustomMetrics in _oboe:
_oboe.CustomMetrics_swigregister(CustomMetrics)
class Reporter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    init_status = property(_oboe.Reporter_init_status_get, _oboe.Reporter_init_status_set)

    def __init__(self, hostname_alias, log_level, log_file_path, max_transactions, max_flush_wait_time, events_flush_interval, max_request_size_bytes, reporter, host, service_key, certificates, buffer_size, trace_metrics, histogram_precision, token_bucket_capacity, token_bucket_rate, file_single, ec2_metadata_timeout, grpc_proxy, stdout_clear_nonblocking, metric_format, log_type):
        _oboe.Reporter_swiginit(self, _oboe.new_Reporter(hostname_alias, log_level, log_file_path, max_transactions, max_flush_wait_time, events_flush_interval, max_request_size_bytes, reporter, host, service_key, certificates, buffer_size, trace_metrics, histogram_precision, token_bucket_capacity, token_bucket_rate, file_single, ec2_metadata_timeout, grpc_proxy, stdout_clear_nonblocking, metric_format, log_type))
    __swig_destroy__ = _oboe.delete_Reporter

    def sendReport(self, *args):
        return _oboe.Reporter_sendReport(self, *args)

    def sendStatus(self, *args):
        return _oboe.Reporter_sendStatus(self, *args)

    def flush(self):
        return _oboe.Reporter_flush(self)

    def getType(self):
        return _oboe.Reporter_getType(self)

# Register Reporter in _oboe:
_oboe.Reporter_swigregister(Reporter)
class Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def checkVersion(version, revision):
        return _oboe.Config_checkVersion(version, revision)

    @staticmethod
    def getVersionString():
        return _oboe.Config_getVersionString()

    def __init__(self):
        _oboe.Config_swiginit(self, _oboe.new_Config())
    __swig_destroy__ = _oboe.delete_Config

# Register Config in _oboe:
_oboe.Config_swigregister(Config)
class LoggingOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _oboe.LoggingOptions_swiginit(self, _oboe.new_LoggingOptions())
    level = property(_oboe.LoggingOptions_level_get, _oboe.LoggingOptions_level_set)
    type = property(_oboe.LoggingOptions_type_get, _oboe.LoggingOptions_type_set)
    __swig_destroy__ = _oboe.delete_LoggingOptions

# Register LoggingOptions in _oboe:
_oboe.LoggingOptions_swigregister(LoggingOptions)
class OboeAPIOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    logging_options = property(_oboe.OboeAPIOptions_logging_options_get, _oboe.OboeAPIOptions_logging_options_set)

    def __init__(self):
        _oboe.OboeAPIOptions_swiginit(self, _oboe.new_OboeAPIOptions())
    __swig_destroy__ = _oboe.delete_OboeAPIOptions

# Register OboeAPIOptions in _oboe:
_oboe.OboeAPIOptions_swigregister(OboeAPIOptions)
class OboeAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _oboe.OboeAPI_swiginit(self, _oboe.new_OboeAPI(*args))
    __swig_destroy__ = _oboe.delete_OboeAPI

    def getTracingDecision(self, *args):
        return _oboe.OboeAPI_getTracingDecision(self, *args)

    def consumeRequestCount(self):
        return _oboe.OboeAPI_consumeRequestCount(self)

    def consumeTokenBucketExhaustionCount(self):
        return _oboe.OboeAPI_consumeTokenBucketExhaustionCount(self)

    def consumeTraceCount(self):
        return _oboe.OboeAPI_consumeTraceCount(self)

    def consumeSampleCount(self):
        return _oboe.OboeAPI_consumeSampleCount(self)

    def consumeThroughTraceCount(self):
        return _oboe.OboeAPI_consumeThroughTraceCount(self)

    def consumeTriggeredTraceCount(self):
        return _oboe.OboeAPI_consumeTriggeredTraceCount(self)

    def getLastUsedSampleRate(self):
        return _oboe.OboeAPI_getLastUsedSampleRate(self)

    def getLastUsedSampleSource(self):
        return _oboe.OboeAPI_getLastUsedSampleSource(self)

# Register OboeAPI in _oboe:
_oboe.OboeAPI_swigregister(OboeAPI)

