# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogVappTemplateResult',
    'AwaitableGetCatalogVappTemplateResult',
    'get_catalog_vapp_template',
    'get_catalog_vapp_template_output',
]

@pulumi.output_type
class GetCatalogVappTemplateResult:
    """
    A collection of values returned by getCatalogVappTemplate.
    """
    def __init__(__self__, catalog_id=None, catalog_item_id=None, created=None, description=None, filter=None, id=None, inherited_metadata=None, leases=None, metadata=None, metadata_entries=None, name=None, org=None, vdc_id=None, vm_names=None):
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_item_id and not isinstance(catalog_item_id, str):
            raise TypeError("Expected argument 'catalog_item_id' to be a str")
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inherited_metadata and not isinstance(inherited_metadata, dict):
            raise TypeError("Expected argument 'inherited_metadata' to be a dict")
        pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if leases and not isinstance(leases, list):
            raise TypeError("Expected argument 'leases' to be a list")
        pulumi.set(__self__, "leases", leases)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)
        if vm_names and not isinstance(vm_names, list):
            raise TypeError("Expected argument 'vm_names' to be a list")
        pulumi.set(__self__, "vm_names", vm_names)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> str:
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        vApp Template description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetCatalogVappTemplateFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter
    def leases(self) -> Sequence['outputs.GetCatalogVappTemplateLeaseResult']:
        """
        (*v3.11+*) - The information about the vApp Template lease. It includes the following field:
        """
        return pulumi.get(self, "leases")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        """
        (Deprecated) Use `metadata_entry` instead. Key/value map of metadata for the associated vApp template.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetCatalogVappTemplateMetadataEntryResult']:
        """
        A set of metadata entries assigned to this vApp Template. See [Metadata](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_vapp_template#metadata) section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> Sequence[str]:
        """
        Set of VM names within the vApp template
        """
        return pulumi.get(self, "vm_names")


class AwaitableGetCatalogVappTemplateResult(GetCatalogVappTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogVappTemplateResult(
            catalog_id=self.catalog_id,
            catalog_item_id=self.catalog_item_id,
            created=self.created,
            description=self.description,
            filter=self.filter,
            id=self.id,
            inherited_metadata=self.inherited_metadata,
            leases=self.leases,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            vdc_id=self.vdc_id,
            vm_names=self.vm_names)


def get_catalog_vapp_template(catalog_id: Optional[str] = None,
                              filter: Optional[Union['GetCatalogVappTemplateFilterArgs', 'GetCatalogVappTemplateFilterArgsDict']] = None,
                              name: Optional[str] = None,
                              org: Optional[str] = None,
                              vdc_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogVappTemplateResult:
    """
    Provides a VMware Cloud Director vApp Template data source. A vApp Template can be used to reference an already existing
    vApp Template in VCD and use its data within other resources or data sources.

    Supported in provider *v3.8+*

    ## Example: Fetching a vApp Template from a Catalog

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_catalog = vcd.get_catalog(org="my-org",
        name="my-catalog")
    my_first_vapp_template = vcd.get_catalog_vapp_template(org="my-org",
        catalog_id=my_catalog.id,
        name="my-first-vapp-template")
    my_second_vapp_template = vcd.CatalogVappTemplate("my-second-vapp_template",
        metadata_entries=[{
            "key": entry["value"]["key"],
            "value": entry["value"]["value"],
            "type": entry["value"]["type"],
            "is_system": entry["value"]["is_system"],
            "user_access": entry["value"]["user_access"],
        } for entry in [{"key": k, "value": v} for k, v in photon["metadataEntry"]]],
        org=my_first_vapp_template.org,
        catalog_id=my_first_vapp_template.catalog_id,
        name="my-second-item",
        description=f"Belongs to {my_catalog.name}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5)
    ```

    ## Example: Fetching a vApp Template from a VDC

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="my-org",
        name="my-vdc")
    my_first_vapp_template = vcd.get_catalog_vapp_template(org="my-org",
        vdc_id=my_vdc.id,
        name="my-first-vapp-template")
    my_second_vapp_template = vcd.CatalogVappTemplate("my-second-vapp_template",
        metadata_entries=[{
            "key": entry["value"]["key"],
            "value": entry["value"]["value"],
            "type": entry["value"]["type"],
            "is_system": entry["value"]["is_system"],
            "user_access": entry["value"]["user_access"],
        } for entry in [{"key": k, "value": v} for k, v in photon["metadataEntry"]]],
        org=my_first_vapp_template.org,
        catalog_id=my_first_vapp_template.catalog_id,
        name="my-second-item",
        description=f"Belongs to {my_vdc.name}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5)
    ```

    ## Filter arguments

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog_id: ID of the catalog containing the vApp Template. Can't be used if a specific VDC identifier is set (`vdc_id`).
    :param Union['GetCatalogVappTemplateFilterArgs', 'GetCatalogVappTemplateFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: vApp Template name (optional when `filter` is used)
    :param str org: Org name
    :param str vdc_id: ID of the VDC to which the vApp Template belongs. Can't be used if a specific Catalog is set (`catalog_id`).
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalogVappTemplate:getCatalogVappTemplate', __args__, opts=opts, typ=GetCatalogVappTemplateResult).value

    return AwaitableGetCatalogVappTemplateResult(
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_item_id=pulumi.get(__ret__, 'catalog_item_id'),
        created=pulumi.get(__ret__, 'created'),
        description=pulumi.get(__ret__, 'description'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        inherited_metadata=pulumi.get(__ret__, 'inherited_metadata'),
        leases=pulumi.get(__ret__, 'leases'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'),
        vm_names=pulumi.get(__ret__, 'vm_names'))
def get_catalog_vapp_template_output(catalog_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     filter: Optional[pulumi.Input[Optional[Union['GetCatalogVappTemplateFilterArgs', 'GetCatalogVappTemplateFilterArgsDict']]]] = None,
                                     name: Optional[pulumi.Input[Optional[str]]] = None,
                                     org: Optional[pulumi.Input[Optional[str]]] = None,
                                     vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCatalogVappTemplateResult]:
    """
    Provides a VMware Cloud Director vApp Template data source. A vApp Template can be used to reference an already existing
    vApp Template in VCD and use its data within other resources or data sources.

    Supported in provider *v3.8+*

    ## Example: Fetching a vApp Template from a Catalog

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_catalog = vcd.get_catalog(org="my-org",
        name="my-catalog")
    my_first_vapp_template = vcd.get_catalog_vapp_template(org="my-org",
        catalog_id=my_catalog.id,
        name="my-first-vapp-template")
    my_second_vapp_template = vcd.CatalogVappTemplate("my-second-vapp_template",
        metadata_entries=[{
            "key": entry["value"]["key"],
            "value": entry["value"]["value"],
            "type": entry["value"]["type"],
            "is_system": entry["value"]["is_system"],
            "user_access": entry["value"]["user_access"],
        } for entry in [{"key": k, "value": v} for k, v in photon["metadataEntry"]]],
        org=my_first_vapp_template.org,
        catalog_id=my_first_vapp_template.catalog_id,
        name="my-second-item",
        description=f"Belongs to {my_catalog.name}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5)
    ```

    ## Example: Fetching a vApp Template from a VDC

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="my-org",
        name="my-vdc")
    my_first_vapp_template = vcd.get_catalog_vapp_template(org="my-org",
        vdc_id=my_vdc.id,
        name="my-first-vapp-template")
    my_second_vapp_template = vcd.CatalogVappTemplate("my-second-vapp_template",
        metadata_entries=[{
            "key": entry["value"]["key"],
            "value": entry["value"]["value"],
            "type": entry["value"]["type"],
            "is_system": entry["value"]["is_system"],
            "user_access": entry["value"]["user_access"],
        } for entry in [{"key": k, "value": v} for k, v in photon["metadataEntry"]]],
        org=my_first_vapp_template.org,
        catalog_id=my_first_vapp_template.catalog_id,
        name="my-second-item",
        description=f"Belongs to {my_vdc.name}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5)
    ```

    ## Filter arguments

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog_id: ID of the catalog containing the vApp Template. Can't be used if a specific VDC identifier is set (`vdc_id`).
    :param Union['GetCatalogVappTemplateFilterArgs', 'GetCatalogVappTemplateFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: vApp Template name (optional when `filter` is used)
    :param str org: Org name
    :param str vdc_id: ID of the VDC to which the vApp Template belongs. Can't be used if a specific Catalog is set (`catalog_id`).
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getCatalogVappTemplate:getCatalogVappTemplate', __args__, opts=opts, typ=GetCatalogVappTemplateResult)
    return __ret__.apply(lambda __response__: GetCatalogVappTemplateResult(
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        catalog_item_id=pulumi.get(__response__, 'catalog_item_id'),
        created=pulumi.get(__response__, 'created'),
        description=pulumi.get(__response__, 'description'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        inherited_metadata=pulumi.get(__response__, 'inherited_metadata'),
        leases=pulumi.get(__response__, 'leases'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        vdc_id=pulumi.get(__response__, 'vdc_id'),
        vm_names=pulumi.get(__response__, 'vm_names')))
