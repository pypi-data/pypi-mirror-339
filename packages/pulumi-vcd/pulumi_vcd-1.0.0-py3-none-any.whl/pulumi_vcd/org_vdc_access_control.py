# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgVdcAccessControlArgs', 'OrgVdcAccessControl']

@pulumi.input_type
class OrgVdcAccessControlArgs:
    def __init__(__self__, *,
                 shared_with_everyone: pulumi.Input[bool],
                 everyone_access_level: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared_withs: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgVdcAccessControl resource.
        :param pulumi.Input[bool] shared_with_everyone: Whether the VDC is shared with everyone.
        :param pulumi.Input[str] everyone_access_level: Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]] shared_withs: one or more blocks defining a subject to which we are sharing.
               See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
               
               > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
               
               <a id="shared_with"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        pulumi.set(__self__, "shared_with_everyone", shared_with_everyone)
        if everyone_access_level is not None:
            pulumi.set(__self__, "everyone_access_level", everyone_access_level)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if shared_withs is not None:
            pulumi.set(__self__, "shared_withs", shared_withs)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="sharedWithEveryone")
    def shared_with_everyone(self) -> pulumi.Input[bool]:
        """
        Whether the VDC is shared with everyone.
        """
        return pulumi.get(self, "shared_with_everyone")

    @shared_with_everyone.setter
    def shared_with_everyone(self, value: pulumi.Input[bool]):
        pulumi.set(self, "shared_with_everyone", value)

    @property
    @pulumi.getter(name="everyoneAccessLevel")
    def everyone_access_level(self) -> Optional[pulumi.Input[str]]:
        """
        Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        """
        return pulumi.get(self, "everyone_access_level")

    @everyone_access_level.setter
    def everyone_access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "everyone_access_level", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="sharedWiths")
    def shared_withs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]]:
        """
        one or more blocks defining a subject to which we are sharing.
        See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.

        > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.

        <a id="shared_with"></a>
        """
        return pulumi.get(self, "shared_withs")

    @shared_withs.setter
    def shared_withs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]]):
        pulumi.set(self, "shared_withs", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _OrgVdcAccessControlState:
    def __init__(__self__, *,
                 everyone_access_level: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared_with_everyone: Optional[pulumi.Input[bool]] = None,
                 shared_withs: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgVdcAccessControl resources.
        :param pulumi.Input[str] everyone_access_level: Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        :param pulumi.Input[bool] shared_with_everyone: Whether the VDC is shared with everyone.
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]] shared_withs: one or more blocks defining a subject to which we are sharing.
               See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
               
               > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
               
               <a id="shared_with"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        if everyone_access_level is not None:
            pulumi.set(__self__, "everyone_access_level", everyone_access_level)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if shared_with_everyone is not None:
            pulumi.set(__self__, "shared_with_everyone", shared_with_everyone)
        if shared_withs is not None:
            pulumi.set(__self__, "shared_withs", shared_withs)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="everyoneAccessLevel")
    def everyone_access_level(self) -> Optional[pulumi.Input[str]]:
        """
        Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        """
        return pulumi.get(self, "everyone_access_level")

    @everyone_access_level.setter
    def everyone_access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "everyone_access_level", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="sharedWithEveryone")
    def shared_with_everyone(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the VDC is shared with everyone.
        """
        return pulumi.get(self, "shared_with_everyone")

    @shared_with_everyone.setter
    def shared_with_everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared_with_everyone", value)

    @property
    @pulumi.getter(name="sharedWiths")
    def shared_withs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]]:
        """
        one or more blocks defining a subject to which we are sharing.
        See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.

        > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.

        <a id="shared_with"></a>
        """
        return pulumi.get(self, "shared_withs")

    @shared_withs.setter
    def shared_withs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcAccessControlSharedWithArgs']]]]):
        pulumi.set(self, "shared_withs", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class OrgVdcAccessControl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 everyone_access_level: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared_with_everyone: Optional[pulumi.Input[bool]] = None,
                 shared_withs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgVdcAccessControlSharedWithArgs', 'OrgVdcAccessControlSharedWithArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a VMware Cloud Director Org VDC access control resource. This can be
        used to share VDC across users and/or groups.

        Supported in provider *v3.7+*

        > **Note:** This resource requires either system or org administrator privileges.

        ## Example Usage

        ### Example Usage 1 (Giving VDC read only access to a couple of users)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_user = vcd.get_org_user(org="my-org",
            name="my-user")
        my_user2 = vcd.get_org_user(org="my-org",
            name="my-user2")
        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=False,
            shared_withs=[
                {
                    "user_id": my_user.id,
                    "access_level": "ReadOnly",
                },
                {
                    "user_id": my_user2.id,
                    "access_level": "ReadOnly",
                },
            ])
        ```

        ### Example Usage 2 (Giving VDC read only access to everybody)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=True,
            everyone_access_level="ReadOnly")
        ```

        ### Example Usage 3 (Creating a VDC and setting VDC read only access to everybody)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_vdc = vcd.OrgVdc("my_vdc",
            name="my-vdc",
            org="my-org",
            allocation_model="Flex",
            network_pool_name="my-network-pool",
            provider_vdc_name="my-provider-vdc",
            compute_capacity={
                "cpu": {
                    "allocated": 1024,
                    "limit": 1024,
                },
                "memory": {
                    "allocated": 1024,
                    "limit": 1024,
                },
            },
            storage_profiles=[{
                "name": "my-storage-profile",
                "enabled": True,
                "limit": 10240,
                "default": True,
            }],
            enabled=True,
            enable_thin_provisioning=True,
            enable_fast_provisioning=True,
            delete_force=True,
            delete_recursive=True,
            elasticity=False,
            include_vm_memory_overhead=False)
        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=True,
            everyone_access_level="ReadOnly")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] everyone_access_level: Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        :param pulumi.Input[bool] shared_with_everyone: Whether the VDC is shared with everyone.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgVdcAccessControlSharedWithArgs', 'OrgVdcAccessControlSharedWithArgsDict']]]] shared_withs: one or more blocks defining a subject to which we are sharing.
               See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
               
               > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
               
               <a id="shared_with"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgVdcAccessControlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a VMware Cloud Director Org VDC access control resource. This can be
        used to share VDC across users and/or groups.

        Supported in provider *v3.7+*

        > **Note:** This resource requires either system or org administrator privileges.

        ## Example Usage

        ### Example Usage 1 (Giving VDC read only access to a couple of users)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_user = vcd.get_org_user(org="my-org",
            name="my-user")
        my_user2 = vcd.get_org_user(org="my-org",
            name="my-user2")
        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=False,
            shared_withs=[
                {
                    "user_id": my_user.id,
                    "access_level": "ReadOnly",
                },
                {
                    "user_id": my_user2.id,
                    "access_level": "ReadOnly",
                },
            ])
        ```

        ### Example Usage 2 (Giving VDC read only access to everybody)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=True,
            everyone_access_level="ReadOnly")
        ```

        ### Example Usage 3 (Creating a VDC and setting VDC read only access to everybody)
        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_vdc = vcd.OrgVdc("my_vdc",
            name="my-vdc",
            org="my-org",
            allocation_model="Flex",
            network_pool_name="my-network-pool",
            provider_vdc_name="my-provider-vdc",
            compute_capacity={
                "cpu": {
                    "allocated": 1024,
                    "limit": 1024,
                },
                "memory": {
                    "allocated": 1024,
                    "limit": 1024,
                },
            },
            storage_profiles=[{
                "name": "my-storage-profile",
                "enabled": True,
                "limit": 10240,
                "default": True,
            }],
            enabled=True,
            enable_thin_provisioning=True,
            enable_fast_provisioning=True,
            delete_force=True,
            delete_recursive=True,
            elasticity=False,
            include_vm_memory_overhead=False)
        my_access_control = vcd.OrgVdcAccessControl("my_access_control",
            org="my-org",
            vdc="my-vdc",
            shared_with_everyone=True,
            everyone_access_level="ReadOnly")
        ```

        :param str resource_name: The name of the resource.
        :param OrgVdcAccessControlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgVdcAccessControlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 everyone_access_level: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared_with_everyone: Optional[pulumi.Input[bool]] = None,
                 shared_withs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgVdcAccessControlSharedWithArgs', 'OrgVdcAccessControlSharedWithArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgVdcAccessControlArgs.__new__(OrgVdcAccessControlArgs)

            __props__.__dict__["everyone_access_level"] = everyone_access_level
            __props__.__dict__["org"] = org
            if shared_with_everyone is None and not opts.urn:
                raise TypeError("Missing required property 'shared_with_everyone'")
            __props__.__dict__["shared_with_everyone"] = shared_with_everyone
            __props__.__dict__["shared_withs"] = shared_withs
            __props__.__dict__["vdc"] = vdc
        super(OrgVdcAccessControl, __self__).__init__(
            'vcd:index/orgVdcAccessControl:OrgVdcAccessControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            everyone_access_level: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            shared_with_everyone: Optional[pulumi.Input[bool]] = None,
            shared_withs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgVdcAccessControlSharedWithArgs', 'OrgVdcAccessControlSharedWithArgsDict']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'OrgVdcAccessControl':
        """
        Get an existing OrgVdcAccessControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] everyone_access_level: Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        :param pulumi.Input[bool] shared_with_everyone: Whether the VDC is shared with everyone.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgVdcAccessControlSharedWithArgs', 'OrgVdcAccessControlSharedWithArgsDict']]]] shared_withs: one or more blocks defining a subject to which we are sharing.
               See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
               
               > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
               
               <a id="shared_with"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgVdcAccessControlState.__new__(_OrgVdcAccessControlState)

        __props__.__dict__["everyone_access_level"] = everyone_access_level
        __props__.__dict__["org"] = org
        __props__.__dict__["shared_with_everyone"] = shared_with_everyone
        __props__.__dict__["shared_withs"] = shared_withs
        __props__.__dict__["vdc"] = vdc
        return OrgVdcAccessControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="everyoneAccessLevel")
    def everyone_access_level(self) -> pulumi.Output[Optional[str]]:
        """
        Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        """
        return pulumi.get(self, "everyone_access_level")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="sharedWithEveryone")
    def shared_with_everyone(self) -> pulumi.Output[bool]:
        """
        Whether the VDC is shared with everyone.
        """
        return pulumi.get(self, "shared_with_everyone")

    @property
    @pulumi.getter(name="sharedWiths")
    def shared_withs(self) -> pulumi.Output[Optional[Sequence['outputs.OrgVdcAccessControlSharedWith']]]:
        """
        one or more blocks defining a subject to which we are sharing.
        See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.

        > **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.

        <a id="shared_with"></a>
        """
        return pulumi.get(self, "shared_withs")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

