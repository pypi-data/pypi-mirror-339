# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VappOrgNetworkArgs', 'VappOrgNetwork']

@pulumi.input_type
class VappOrgNetworkArgs:
    def __init__(__self__, *,
                 org_network_name: pulumi.Input[str],
                 vapp_name: pulumi.Input[str],
                 is_fenced: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VappOrgNetwork resource.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[bool] is_fenced: Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        pulumi.set(__self__, "org_network_name", org_network_name)
        pulumi.set(__self__, "vapp_name", vapp_name)
        if is_fenced is not None:
            pulumi.set(__self__, "is_fenced", is_fenced)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if reboot_vapp_on_removal is not None:
            pulumi.set(__self__, "reboot_vapp_on_removal", reboot_vapp_on_removal)
        if retain_ip_mac_enabled is not None:
            pulumi.set(__self__, "retain_ip_mac_enabled", retain_ip_mac_enabled)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> pulumi.Input[str]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @org_network_name.setter
    def org_network_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_network_name", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Input[str]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="isFenced")
    def is_fenced(self) -> Optional[pulumi.Input[bool]]:
        """
        Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        """
        return pulumi.get(self, "is_fenced")

    @is_fenced.setter
    def is_fenced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_fenced", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @reboot_vapp_on_removal.setter
    def reboot_vapp_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reboot_vapp_on_removal", value)

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @retain_ip_mac_enabled.setter
    def retain_ip_mac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_ip_mac_enabled", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _VappOrgNetworkState:
    def __init__(__self__, *,
                 is_fenced: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VappOrgNetwork resources.
        :param pulumi.Input[bool] is_fenced: Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        if is_fenced is not None:
            pulumi.set(__self__, "is_fenced", is_fenced)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_network_name is not None:
            pulumi.set(__self__, "org_network_name", org_network_name)
        if reboot_vapp_on_removal is not None:
            pulumi.set(__self__, "reboot_vapp_on_removal", reboot_vapp_on_removal)
        if retain_ip_mac_enabled is not None:
            pulumi.set(__self__, "retain_ip_mac_enabled", retain_ip_mac_enabled)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="isFenced")
    def is_fenced(self) -> Optional[pulumi.Input[bool]]:
        """
        Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        """
        return pulumi.get(self, "is_fenced")

    @is_fenced.setter
    def is_fenced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_fenced", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @org_network_name.setter
    def org_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_network_name", value)

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @reboot_vapp_on_removal.setter
    def reboot_vapp_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reboot_vapp_on_removal", value)

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @retain_ip_mac_enabled.setter
    def retain_ip_mac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_ip_mac_enabled", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class VappOrgNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_fenced: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VappOrgNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_fenced: Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VappOrgNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VappOrgNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VappOrgNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VappOrgNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_fenced: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VappOrgNetworkArgs.__new__(VappOrgNetworkArgs)

            __props__.__dict__["is_fenced"] = is_fenced
            __props__.__dict__["org"] = org
            if org_network_name is None and not opts.urn:
                raise TypeError("Missing required property 'org_network_name'")
            __props__.__dict__["org_network_name"] = org_network_name
            __props__.__dict__["reboot_vapp_on_removal"] = reboot_vapp_on_removal
            __props__.__dict__["retain_ip_mac_enabled"] = retain_ip_mac_enabled
            if vapp_name is None and not opts.urn:
                raise TypeError("Missing required property 'vapp_name'")
            __props__.__dict__["vapp_name"] = vapp_name
            __props__.__dict__["vdc"] = vdc
        super(VappOrgNetwork, __self__).__init__(
            'vcd:index/vappOrgNetwork:VappOrgNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_fenced: Optional[pulumi.Input[bool]] = None,
            org: Optional[pulumi.Input[str]] = None,
            org_network_name: Optional[pulumi.Input[str]] = None,
            reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
            retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
            vapp_name: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'VappOrgNetwork':
        """
        Get an existing VappOrgNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_fenced: Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VappOrgNetworkState.__new__(_VappOrgNetworkState)

        __props__.__dict__["is_fenced"] = is_fenced
        __props__.__dict__["org"] = org
        __props__.__dict__["org_network_name"] = org_network_name
        __props__.__dict__["reboot_vapp_on_removal"] = reboot_vapp_on_removal
        __props__.__dict__["retain_ip_mac_enabled"] = retain_ip_mac_enabled
        __props__.__dict__["vapp_name"] = vapp_name
        __props__.__dict__["vdc"] = vdc
        return VappOrgNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isFenced")
    def is_fenced(self) -> pulumi.Output[Optional[bool]]:
        """
        Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
        """
        return pulumi.get(self, "is_fenced")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> pulumi.Output[str]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> pulumi.Output[Optional[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when `is_fenced` is true.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Output[str]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

