# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CseKubernetesClusterArgs', 'CseKubernetesCluster']

@pulumi.input_type
class CseKubernetesClusterArgs:
    def __init__(__self__, *,
                 control_plane: pulumi.Input['CseKubernetesClusterControlPlaneArgs'],
                 cse_version: pulumi.Input[str],
                 kubernetes_template_id: pulumi.Input[str],
                 network_id: pulumi.Input[str],
                 vdc_id: pulumi.Input[str],
                 worker_pools: pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]],
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auto_repair_on_errors: Optional[pulumi.Input[bool]] = None,
                 default_storage_class: Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_health_check: Optional[pulumi.Input[bool]] = None,
                 operations_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pods_cidr: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 services_cidr: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 virtual_ip_subnet: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CseKubernetesCluster resource.
        :param pulumi.Input['CseKubernetesClusterControlPlaneArgs'] control_plane: See **Control Plane**
        :param pulumi.Input[str] cse_version: Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
               `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        :param pulumi.Input[str] kubernetes_template_id: The ID of the vApp Template that corresponds to a Kubernetes template OVA
        :param pulumi.Input[str] network_id: The ID of the network that the Kubernetes cluster will use
        :param pulumi.Input[str] vdc_id: The ID of the VDC that hosts the Kubernetes cluster
        :param pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]] worker_pools: See **Worker Pools**
        :param pulumi.Input[str] api_token_file: Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
               or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
               owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        :param pulumi.Input[bool] auto_repair_on_errors: If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
               CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
               Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        :param pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs'] default_storage_class: See **Default Storage Class**
        :param pulumi.Input[str] name: The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
               start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        :param pulumi.Input[bool] node_health_check: After the Kubernetes cluster becomes available, nodes that become unhealthy will be
               remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        :param pulumi.Input[int] operations_timeout_minutes: The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
               creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
               error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
               this argument to `0` means to wait indefinitely
        :param pulumi.Input[str] org: The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        :param pulumi.Input[str] owner: The user that creates the cluster and owns the API token specified in `api_token`.
               It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
               If not specified, it assumes it's the user from the provider configuration
               
               > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
               [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
               there is an existing issue that prevents the cluster to be created.
        :param pulumi.Input[str] pods_cidr: A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        :param pulumi.Input[str] runtime: Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        :param pulumi.Input[str] services_cidr: A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        :param pulumi.Input[str] ssh_public_key: The SSH public key used to log in into the cluster nodes
        :param pulumi.Input[str] virtual_ip_subnet: A virtual IP subnet for the cluster
        """
        pulumi.set(__self__, "control_plane", control_plane)
        pulumi.set(__self__, "cse_version", cse_version)
        pulumi.set(__self__, "kubernetes_template_id", kubernetes_template_id)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "vdc_id", vdc_id)
        pulumi.set(__self__, "worker_pools", worker_pools)
        if api_token_file is not None:
            pulumi.set(__self__, "api_token_file", api_token_file)
        if auto_repair_on_errors is not None:
            pulumi.set(__self__, "auto_repair_on_errors", auto_repair_on_errors)
        if default_storage_class is not None:
            pulumi.set(__self__, "default_storage_class", default_storage_class)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_health_check is not None:
            pulumi.set(__self__, "node_health_check", node_health_check)
        if operations_timeout_minutes is not None:
            pulumi.set(__self__, "operations_timeout_minutes", operations_timeout_minutes)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if pods_cidr is not None:
            pulumi.set(__self__, "pods_cidr", pods_cidr)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if services_cidr is not None:
            pulumi.set(__self__, "services_cidr", services_cidr)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if virtual_ip_subnet is not None:
            pulumi.set(__self__, "virtual_ip_subnet", virtual_ip_subnet)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> pulumi.Input['CseKubernetesClusterControlPlaneArgs']:
        """
        See **Control Plane**
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: pulumi.Input['CseKubernetesClusterControlPlaneArgs']):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="cseVersion")
    def cse_version(self) -> pulumi.Input[str]:
        """
        Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
        `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        """
        return pulumi.get(self, "cse_version")

    @cse_version.setter
    def cse_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cse_version", value)

    @property
    @pulumi.getter(name="kubernetesTemplateId")
    def kubernetes_template_id(self) -> pulumi.Input[str]:
        """
        The ID of the vApp Template that corresponds to a Kubernetes template OVA
        """
        return pulumi.get(self, "kubernetes_template_id")

    @kubernetes_template_id.setter
    def kubernetes_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubernetes_template_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        The ID of the network that the Kubernetes cluster will use
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Input[str]:
        """
        The ID of the VDC that hosts the Kubernetes cluster
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]]:
        """
        See **Worker Pools**
        """
        return pulumi.get(self, "worker_pools")

    @worker_pools.setter
    def worker_pools(self, value: pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]]):
        pulumi.set(self, "worker_pools", value)

    @property
    @pulumi.getter(name="apiTokenFile")
    def api_token_file(self) -> Optional[pulumi.Input[str]]:
        """
        Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
        or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
        owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        """
        return pulumi.get(self, "api_token_file")

    @api_token_file.setter
    def api_token_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_file", value)

    @property
    @pulumi.getter(name="autoRepairOnErrors")
    def auto_repair_on_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
        CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
        Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        """
        return pulumi.get(self, "auto_repair_on_errors")

    @auto_repair_on_errors.setter
    def auto_repair_on_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_repair_on_errors", value)

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']]:
        """
        See **Default Storage Class**
        """
        return pulumi.get(self, "default_storage_class")

    @default_storage_class.setter
    def default_storage_class(self, value: Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']]):
        pulumi.set(self, "default_storage_class", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
        start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeHealthCheck")
    def node_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        After the Kubernetes cluster becomes available, nodes that become unhealthy will be
        remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        """
        return pulumi.get(self, "node_health_check")

    @node_health_check.setter
    def node_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_health_check", value)

    @property
    @pulumi.getter(name="operationsTimeoutMinutes")
    def operations_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
        creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
        error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
        this argument to `0` means to wait indefinitely
        """
        return pulumi.get(self, "operations_timeout_minutes")

    @operations_timeout_minutes.setter
    def operations_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operations_timeout_minutes", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The user that creates the cluster and owns the API token specified in `api_token`.
        It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
        If not specified, it assumes it's the user from the provider configuration

        > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
        [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
        there is an existing issue that prevents the cluster to be created.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="podsCidr")
    def pods_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        """
        return pulumi.get(self, "pods_cidr")

    @pods_cidr.setter
    def pods_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pods_cidr", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="servicesCidr")
    def services_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        """
        return pulumi.get(self, "services_cidr")

    @services_cidr.setter
    def services_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_cidr", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSH public key used to log in into the cluster nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter(name="virtualIpSubnet")
    def virtual_ip_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        A virtual IP subnet for the cluster
        """
        return pulumi.get(self, "virtual_ip_subnet")

    @virtual_ip_subnet.setter
    def virtual_ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_ip_subnet", value)


@pulumi.input_type
class _CseKubernetesClusterState:
    def __init__(__self__, *,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auto_repair_on_errors: Optional[pulumi.Input[bool]] = None,
                 capvcd_version: Optional[pulumi.Input[str]] = None,
                 cluster_resource_set_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 control_plane: Optional[pulumi.Input['CseKubernetesClusterControlPlaneArgs']] = None,
                 cpi_version: Optional[pulumi.Input[str]] = None,
                 cse_version: Optional[pulumi.Input[str]] = None,
                 csi_version: Optional[pulumi.Input[str]] = None,
                 default_storage_class: Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterEventArgs']]]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 kubernetes_template_id: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 node_health_check: Optional[pulumi.Input[bool]] = None,
                 operations_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pods_cidr: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 services_cidr: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 supported_upgrades: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tkg_product_version: Optional[pulumi.Input[str]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 virtual_ip_subnet: Optional[pulumi.Input[str]] = None,
                 worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]]] = None):
        """
        Input properties used for looking up and filtering CseKubernetesCluster resources.
        :param pulumi.Input[str] api_token_file: Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
               or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
               owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        :param pulumi.Input[bool] auto_repair_on_errors: If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
               CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
               Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        :param pulumi.Input[str] capvcd_version: The version of CAPVCD used by this cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_resource_set_bindings: The cluster resource set bindings of this cluster
        :param pulumi.Input['CseKubernetesClusterControlPlaneArgs'] control_plane: See **Control Plane**
        :param pulumi.Input[str] cpi_version: The version of the Cloud Provider Interface used by this cluster
        :param pulumi.Input[str] cse_version: Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
               `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        :param pulumi.Input[str] csi_version: The version of the Container Storage Interface used by this cluster
        :param pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs'] default_storage_class: See **Default Storage Class**
        :param pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterEventArgs']]] events: A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
        :param pulumi.Input[str] kubeconfig: The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
        :param pulumi.Input[str] kubernetes_template_id: The ID of the vApp Template that corresponds to a Kubernetes template OVA
        :param pulumi.Input[str] kubernetes_version: The version of Kubernetes installed in this cluster
        :param pulumi.Input[str] name: The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
               start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        :param pulumi.Input[str] network_id: The ID of the network that the Kubernetes cluster will use
        :param pulumi.Input[bool] node_health_check: After the Kubernetes cluster becomes available, nodes that become unhealthy will be
               remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        :param pulumi.Input[int] operations_timeout_minutes: The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
               creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
               error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
               this argument to `0` means to wait indefinitely
        :param pulumi.Input[str] org: The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        :param pulumi.Input[str] owner: The user that creates the cluster and owns the API token specified in `api_token`.
               It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
               If not specified, it assumes it's the user from the provider configuration
               
               > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
               [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
               there is an existing issue that prevents the cluster to be created.
        :param pulumi.Input[str] pods_cidr: A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        :param pulumi.Input[str] runtime: Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        :param pulumi.Input[str] services_cidr: A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        :param pulumi.Input[str] ssh_public_key: The SSH public key used to log in into the cluster nodes
        :param pulumi.Input[str] state: The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
               created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
               cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_upgrades: A set of vApp Template names that can be fetched with a
               [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
        :param pulumi.Input[str] tkg_product_version: The version of TKG installed in this cluster
        :param pulumi.Input[str] vdc_id: The ID of the VDC that hosts the Kubernetes cluster
        :param pulumi.Input[str] virtual_ip_subnet: A virtual IP subnet for the cluster
        :param pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]] worker_pools: See **Worker Pools**
        """
        if api_token_file is not None:
            pulumi.set(__self__, "api_token_file", api_token_file)
        if auto_repair_on_errors is not None:
            pulumi.set(__self__, "auto_repair_on_errors", auto_repair_on_errors)
        if capvcd_version is not None:
            pulumi.set(__self__, "capvcd_version", capvcd_version)
        if cluster_resource_set_bindings is not None:
            pulumi.set(__self__, "cluster_resource_set_bindings", cluster_resource_set_bindings)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if cpi_version is not None:
            pulumi.set(__self__, "cpi_version", cpi_version)
        if cse_version is not None:
            pulumi.set(__self__, "cse_version", cse_version)
        if csi_version is not None:
            pulumi.set(__self__, "csi_version", csi_version)
        if default_storage_class is not None:
            pulumi.set(__self__, "default_storage_class", default_storage_class)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if kubeconfig is not None:
            pulumi.set(__self__, "kubeconfig", kubeconfig)
        if kubernetes_template_id is not None:
            pulumi.set(__self__, "kubernetes_template_id", kubernetes_template_id)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if node_health_check is not None:
            pulumi.set(__self__, "node_health_check", node_health_check)
        if operations_timeout_minutes is not None:
            pulumi.set(__self__, "operations_timeout_minutes", operations_timeout_minutes)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if pods_cidr is not None:
            pulumi.set(__self__, "pods_cidr", pods_cidr)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if services_cidr is not None:
            pulumi.set(__self__, "services_cidr", services_cidr)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_upgrades is not None:
            pulumi.set(__self__, "supported_upgrades", supported_upgrades)
        if tkg_product_version is not None:
            pulumi.set(__self__, "tkg_product_version", tkg_product_version)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)
        if virtual_ip_subnet is not None:
            pulumi.set(__self__, "virtual_ip_subnet", virtual_ip_subnet)
        if worker_pools is not None:
            pulumi.set(__self__, "worker_pools", worker_pools)

    @property
    @pulumi.getter(name="apiTokenFile")
    def api_token_file(self) -> Optional[pulumi.Input[str]]:
        """
        Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
        or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
        owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        """
        return pulumi.get(self, "api_token_file")

    @api_token_file.setter
    def api_token_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_file", value)

    @property
    @pulumi.getter(name="autoRepairOnErrors")
    def auto_repair_on_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
        CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
        Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        """
        return pulumi.get(self, "auto_repair_on_errors")

    @auto_repair_on_errors.setter
    def auto_repair_on_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_repair_on_errors", value)

    @property
    @pulumi.getter(name="capvcdVersion")
    def capvcd_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of CAPVCD used by this cluster
        """
        return pulumi.get(self, "capvcd_version")

    @capvcd_version.setter
    def capvcd_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capvcd_version", value)

    @property
    @pulumi.getter(name="clusterResourceSetBindings")
    def cluster_resource_set_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The cluster resource set bindings of this cluster
        """
        return pulumi.get(self, "cluster_resource_set_bindings")

    @cluster_resource_set_bindings.setter
    def cluster_resource_set_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_resource_set_bindings", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['CseKubernetesClusterControlPlaneArgs']]:
        """
        See **Control Plane**
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['CseKubernetesClusterControlPlaneArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="cpiVersion")
    def cpi_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the Cloud Provider Interface used by this cluster
        """
        return pulumi.get(self, "cpi_version")

    @cpi_version.setter
    def cpi_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpi_version", value)

    @property
    @pulumi.getter(name="cseVersion")
    def cse_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
        `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        """
        return pulumi.get(self, "cse_version")

    @cse_version.setter
    def cse_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cse_version", value)

    @property
    @pulumi.getter(name="csiVersion")
    def csi_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the Container Storage Interface used by this cluster
        """
        return pulumi.get(self, "csi_version")

    @csi_version.setter
    def csi_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csi_version", value)

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']]:
        """
        See **Default Storage Class**
        """
        return pulumi.get(self, "default_storage_class")

    @default_storage_class.setter
    def default_storage_class(self, value: Optional[pulumi.Input['CseKubernetesClusterDefaultStorageClassArgs']]):
        pulumi.set(self, "default_storage_class", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterEventArgs']]]]:
        """
        A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def kubeconfig(self) -> Optional[pulumi.Input[str]]:
        """
        The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
        """
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig", value)

    @property
    @pulumi.getter(name="kubernetesTemplateId")
    def kubernetes_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the vApp Template that corresponds to a Kubernetes template OVA
        """
        return pulumi.get(self, "kubernetes_template_id")

    @kubernetes_template_id.setter
    def kubernetes_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_template_id", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Kubernetes installed in this cluster
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
        start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the network that the Kubernetes cluster will use
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="nodeHealthCheck")
    def node_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        After the Kubernetes cluster becomes available, nodes that become unhealthy will be
        remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        """
        return pulumi.get(self, "node_health_check")

    @node_health_check.setter
    def node_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_health_check", value)

    @property
    @pulumi.getter(name="operationsTimeoutMinutes")
    def operations_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
        creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
        error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
        this argument to `0` means to wait indefinitely
        """
        return pulumi.get(self, "operations_timeout_minutes")

    @operations_timeout_minutes.setter
    def operations_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operations_timeout_minutes", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The user that creates the cluster and owns the API token specified in `api_token`.
        It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
        If not specified, it assumes it's the user from the provider configuration

        > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
        [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
        there is an existing issue that prevents the cluster to be created.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="podsCidr")
    def pods_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        """
        return pulumi.get(self, "pods_cidr")

    @pods_cidr.setter
    def pods_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pods_cidr", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="servicesCidr")
    def services_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        """
        return pulumi.get(self, "services_cidr")

    @services_cidr.setter
    def services_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_cidr", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSH public key used to log in into the cluster nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
        created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
        cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="supportedUpgrades")
    def supported_upgrades(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of vApp Template names that can be fetched with a
        [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
        """
        return pulumi.get(self, "supported_upgrades")

    @supported_upgrades.setter
    def supported_upgrades(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_upgrades", value)

    @property
    @pulumi.getter(name="tkgProductVersion")
    def tkg_product_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of TKG installed in this cluster
        """
        return pulumi.get(self, "tkg_product_version")

    @tkg_product_version.setter
    def tkg_product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tkg_product_version", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VDC that hosts the Kubernetes cluster
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter(name="virtualIpSubnet")
    def virtual_ip_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        A virtual IP subnet for the cluster
        """
        return pulumi.get(self, "virtual_ip_subnet")

    @virtual_ip_subnet.setter
    def virtual_ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_ip_subnet", value)

    @property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]]]:
        """
        See **Worker Pools**
        """
        return pulumi.get(self, "worker_pools")

    @worker_pools.setter
    def worker_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CseKubernetesClusterWorkerPoolArgs']]]]):
        pulumi.set(self, "worker_pools", value)


class CseKubernetesCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auto_repair_on_errors: Optional[pulumi.Input[bool]] = None,
                 control_plane: Optional[pulumi.Input[Union['CseKubernetesClusterControlPlaneArgs', 'CseKubernetesClusterControlPlaneArgsDict']]] = None,
                 cse_version: Optional[pulumi.Input[str]] = None,
                 default_storage_class: Optional[pulumi.Input[Union['CseKubernetesClusterDefaultStorageClassArgs', 'CseKubernetesClusterDefaultStorageClassArgsDict']]] = None,
                 kubernetes_template_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 node_health_check: Optional[pulumi.Input[bool]] = None,
                 operations_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pods_cidr: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 services_cidr: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 virtual_ip_subnet: Optional[pulumi.Input[str]] = None,
                 worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterWorkerPoolArgs', 'CseKubernetesClusterWorkerPoolArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a CseKubernetesCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token_file: Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
               or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
               owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        :param pulumi.Input[bool] auto_repair_on_errors: If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
               CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
               Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        :param pulumi.Input[Union['CseKubernetesClusterControlPlaneArgs', 'CseKubernetesClusterControlPlaneArgsDict']] control_plane: See **Control Plane**
        :param pulumi.Input[str] cse_version: Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
               `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        :param pulumi.Input[Union['CseKubernetesClusterDefaultStorageClassArgs', 'CseKubernetesClusterDefaultStorageClassArgsDict']] default_storage_class: See **Default Storage Class**
        :param pulumi.Input[str] kubernetes_template_id: The ID of the vApp Template that corresponds to a Kubernetes template OVA
        :param pulumi.Input[str] name: The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
               start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        :param pulumi.Input[str] network_id: The ID of the network that the Kubernetes cluster will use
        :param pulumi.Input[bool] node_health_check: After the Kubernetes cluster becomes available, nodes that become unhealthy will be
               remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        :param pulumi.Input[int] operations_timeout_minutes: The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
               creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
               error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
               this argument to `0` means to wait indefinitely
        :param pulumi.Input[str] org: The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        :param pulumi.Input[str] owner: The user that creates the cluster and owns the API token specified in `api_token`.
               It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
               If not specified, it assumes it's the user from the provider configuration
               
               > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
               [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
               there is an existing issue that prevents the cluster to be created.
        :param pulumi.Input[str] pods_cidr: A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        :param pulumi.Input[str] runtime: Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        :param pulumi.Input[str] services_cidr: A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        :param pulumi.Input[str] ssh_public_key: The SSH public key used to log in into the cluster nodes
        :param pulumi.Input[str] vdc_id: The ID of the VDC that hosts the Kubernetes cluster
        :param pulumi.Input[str] virtual_ip_subnet: A virtual IP subnet for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterWorkerPoolArgs', 'CseKubernetesClusterWorkerPoolArgsDict']]]] worker_pools: See **Worker Pools**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CseKubernetesClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CseKubernetesCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CseKubernetesClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CseKubernetesClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auto_repair_on_errors: Optional[pulumi.Input[bool]] = None,
                 control_plane: Optional[pulumi.Input[Union['CseKubernetesClusterControlPlaneArgs', 'CseKubernetesClusterControlPlaneArgsDict']]] = None,
                 cse_version: Optional[pulumi.Input[str]] = None,
                 default_storage_class: Optional[pulumi.Input[Union['CseKubernetesClusterDefaultStorageClassArgs', 'CseKubernetesClusterDefaultStorageClassArgsDict']]] = None,
                 kubernetes_template_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 node_health_check: Optional[pulumi.Input[bool]] = None,
                 operations_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pods_cidr: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 services_cidr: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 virtual_ip_subnet: Optional[pulumi.Input[str]] = None,
                 worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterWorkerPoolArgs', 'CseKubernetesClusterWorkerPoolArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CseKubernetesClusterArgs.__new__(CseKubernetesClusterArgs)

            __props__.__dict__["api_token_file"] = api_token_file
            __props__.__dict__["auto_repair_on_errors"] = auto_repair_on_errors
            if control_plane is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane'")
            __props__.__dict__["control_plane"] = control_plane
            if cse_version is None and not opts.urn:
                raise TypeError("Missing required property 'cse_version'")
            __props__.__dict__["cse_version"] = cse_version
            __props__.__dict__["default_storage_class"] = default_storage_class
            if kubernetes_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'kubernetes_template_id'")
            __props__.__dict__["kubernetes_template_id"] = kubernetes_template_id
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["node_health_check"] = node_health_check
            __props__.__dict__["operations_timeout_minutes"] = operations_timeout_minutes
            __props__.__dict__["org"] = org
            __props__.__dict__["owner"] = owner
            __props__.__dict__["pods_cidr"] = pods_cidr
            __props__.__dict__["runtime"] = runtime
            __props__.__dict__["services_cidr"] = services_cidr
            __props__.__dict__["ssh_public_key"] = ssh_public_key
            if vdc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vdc_id'")
            __props__.__dict__["vdc_id"] = vdc_id
            __props__.__dict__["virtual_ip_subnet"] = virtual_ip_subnet
            if worker_pools is None and not opts.urn:
                raise TypeError("Missing required property 'worker_pools'")
            __props__.__dict__["worker_pools"] = worker_pools
            __props__.__dict__["capvcd_version"] = None
            __props__.__dict__["cluster_resource_set_bindings"] = None
            __props__.__dict__["cpi_version"] = None
            __props__.__dict__["csi_version"] = None
            __props__.__dict__["events"] = None
            __props__.__dict__["kubeconfig"] = None
            __props__.__dict__["kubernetes_version"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["supported_upgrades"] = None
            __props__.__dict__["tkg_product_version"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["kubeconfig"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CseKubernetesCluster, __self__).__init__(
            'vcd:index/cseKubernetesCluster:CseKubernetesCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_token_file: Optional[pulumi.Input[str]] = None,
            auto_repair_on_errors: Optional[pulumi.Input[bool]] = None,
            capvcd_version: Optional[pulumi.Input[str]] = None,
            cluster_resource_set_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            control_plane: Optional[pulumi.Input[Union['CseKubernetesClusterControlPlaneArgs', 'CseKubernetesClusterControlPlaneArgsDict']]] = None,
            cpi_version: Optional[pulumi.Input[str]] = None,
            cse_version: Optional[pulumi.Input[str]] = None,
            csi_version: Optional[pulumi.Input[str]] = None,
            default_storage_class: Optional[pulumi.Input[Union['CseKubernetesClusterDefaultStorageClassArgs', 'CseKubernetesClusterDefaultStorageClassArgsDict']]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterEventArgs', 'CseKubernetesClusterEventArgsDict']]]]] = None,
            kubeconfig: Optional[pulumi.Input[str]] = None,
            kubernetes_template_id: Optional[pulumi.Input[str]] = None,
            kubernetes_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            node_health_check: Optional[pulumi.Input[bool]] = None,
            operations_timeout_minutes: Optional[pulumi.Input[int]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            pods_cidr: Optional[pulumi.Input[str]] = None,
            runtime: Optional[pulumi.Input[str]] = None,
            services_cidr: Optional[pulumi.Input[str]] = None,
            ssh_public_key: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            supported_upgrades: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tkg_product_version: Optional[pulumi.Input[str]] = None,
            vdc_id: Optional[pulumi.Input[str]] = None,
            virtual_ip_subnet: Optional[pulumi.Input[str]] = None,
            worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterWorkerPoolArgs', 'CseKubernetesClusterWorkerPoolArgsDict']]]]] = None) -> 'CseKubernetesCluster':
        """
        Get an existing CseKubernetesCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token_file: Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
               or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
               owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        :param pulumi.Input[bool] auto_repair_on_errors: If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
               CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
               Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        :param pulumi.Input[str] capvcd_version: The version of CAPVCD used by this cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_resource_set_bindings: The cluster resource set bindings of this cluster
        :param pulumi.Input[Union['CseKubernetesClusterControlPlaneArgs', 'CseKubernetesClusterControlPlaneArgsDict']] control_plane: See **Control Plane**
        :param pulumi.Input[str] cpi_version: The version of the Cloud Provider Interface used by this cluster
        :param pulumi.Input[str] cse_version: Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
               `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        :param pulumi.Input[str] csi_version: The version of the Container Storage Interface used by this cluster
        :param pulumi.Input[Union['CseKubernetesClusterDefaultStorageClassArgs', 'CseKubernetesClusterDefaultStorageClassArgsDict']] default_storage_class: See **Default Storage Class**
        :param pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterEventArgs', 'CseKubernetesClusterEventArgsDict']]]] events: A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
        :param pulumi.Input[str] kubeconfig: The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
        :param pulumi.Input[str] kubernetes_template_id: The ID of the vApp Template that corresponds to a Kubernetes template OVA
        :param pulumi.Input[str] kubernetes_version: The version of Kubernetes installed in this cluster
        :param pulumi.Input[str] name: The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
               start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        :param pulumi.Input[str] network_id: The ID of the network that the Kubernetes cluster will use
        :param pulumi.Input[bool] node_health_check: After the Kubernetes cluster becomes available, nodes that become unhealthy will be
               remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        :param pulumi.Input[int] operations_timeout_minutes: The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
               creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
               error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
               this argument to `0` means to wait indefinitely
        :param pulumi.Input[str] org: The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        :param pulumi.Input[str] owner: The user that creates the cluster and owns the API token specified in `api_token`.
               It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
               If not specified, it assumes it's the user from the provider configuration
               
               > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
               [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
               there is an existing issue that prevents the cluster to be created.
        :param pulumi.Input[str] pods_cidr: A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        :param pulumi.Input[str] runtime: Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        :param pulumi.Input[str] services_cidr: A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        :param pulumi.Input[str] ssh_public_key: The SSH public key used to log in into the cluster nodes
        :param pulumi.Input[str] state: The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
               created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
               cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_upgrades: A set of vApp Template names that can be fetched with a
               [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
        :param pulumi.Input[str] tkg_product_version: The version of TKG installed in this cluster
        :param pulumi.Input[str] vdc_id: The ID of the VDC that hosts the Kubernetes cluster
        :param pulumi.Input[str] virtual_ip_subnet: A virtual IP subnet for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[Union['CseKubernetesClusterWorkerPoolArgs', 'CseKubernetesClusterWorkerPoolArgsDict']]]] worker_pools: See **Worker Pools**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CseKubernetesClusterState.__new__(_CseKubernetesClusterState)

        __props__.__dict__["api_token_file"] = api_token_file
        __props__.__dict__["auto_repair_on_errors"] = auto_repair_on_errors
        __props__.__dict__["capvcd_version"] = capvcd_version
        __props__.__dict__["cluster_resource_set_bindings"] = cluster_resource_set_bindings
        __props__.__dict__["control_plane"] = control_plane
        __props__.__dict__["cpi_version"] = cpi_version
        __props__.__dict__["cse_version"] = cse_version
        __props__.__dict__["csi_version"] = csi_version
        __props__.__dict__["default_storage_class"] = default_storage_class
        __props__.__dict__["events"] = events
        __props__.__dict__["kubeconfig"] = kubeconfig
        __props__.__dict__["kubernetes_template_id"] = kubernetes_template_id
        __props__.__dict__["kubernetes_version"] = kubernetes_version
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["node_health_check"] = node_health_check
        __props__.__dict__["operations_timeout_minutes"] = operations_timeout_minutes
        __props__.__dict__["org"] = org
        __props__.__dict__["owner"] = owner
        __props__.__dict__["pods_cidr"] = pods_cidr
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["services_cidr"] = services_cidr
        __props__.__dict__["ssh_public_key"] = ssh_public_key
        __props__.__dict__["state"] = state
        __props__.__dict__["supported_upgrades"] = supported_upgrades
        __props__.__dict__["tkg_product_version"] = tkg_product_version
        __props__.__dict__["vdc_id"] = vdc_id
        __props__.__dict__["virtual_ip_subnet"] = virtual_ip_subnet
        __props__.__dict__["worker_pools"] = worker_pools
        return CseKubernetesCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiTokenFile")
    def api_token_file(self) -> pulumi.Output[Optional[str]]:
        """
        Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
        or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
        owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
        """
        return pulumi.get(self, "api_token_file")

    @property
    @pulumi.getter(name="autoRepairOnErrors")
    def auto_repair_on_errors(self) -> pulumi.Output[bool]:
        """
        If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
        CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
        Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
        """
        return pulumi.get(self, "auto_repair_on_errors")

    @property
    @pulumi.getter(name="capvcdVersion")
    def capvcd_version(self) -> pulumi.Output[str]:
        """
        The version of CAPVCD used by this cluster
        """
        return pulumi.get(self, "capvcd_version")

    @property
    @pulumi.getter(name="clusterResourceSetBindings")
    def cluster_resource_set_bindings(self) -> pulumi.Output[Sequence[str]]:
        """
        The cluster resource set bindings of this cluster
        """
        return pulumi.get(self, "cluster_resource_set_bindings")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> pulumi.Output['outputs.CseKubernetesClusterControlPlane']:
        """
        See **Control Plane**
        """
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="cpiVersion")
    def cpi_version(self) -> pulumi.Output[str]:
        """
        The version of the Cloud Provider Interface used by this cluster
        """
        return pulumi.get(self, "cpi_version")

    @property
    @pulumi.getter(name="cseVersion")
    def cse_version(self) -> pulumi.Output[str]:
        """
        Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
        `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
        """
        return pulumi.get(self, "cse_version")

    @property
    @pulumi.getter(name="csiVersion")
    def csi_version(self) -> pulumi.Output[str]:
        """
        The version of the Container Storage Interface used by this cluster
        """
        return pulumi.get(self, "csi_version")

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> pulumi.Output[Optional['outputs.CseKubernetesClusterDefaultStorageClass']]:
        """
        See **Default Storage Class**
        """
        return pulumi.get(self, "default_storage_class")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Sequence['outputs.CseKubernetesClusterEvent']]:
        """
        A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        """
        The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
        """
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter(name="kubernetesTemplateId")
    def kubernetes_template_id(self) -> pulumi.Output[str]:
        """
        The ID of the vApp Template that corresponds to a Kubernetes template OVA
        """
        return pulumi.get(self, "kubernetes_template_id")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[str]:
        """
        The version of Kubernetes installed in this cluster
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
        start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        The ID of the network that the Kubernetes cluster will use
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="nodeHealthCheck")
    def node_health_check(self) -> pulumi.Output[Optional[bool]]:
        """
        After the Kubernetes cluster becomes available, nodes that become unhealthy will be
        remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
        """
        return pulumi.get(self, "node_health_check")

    @property
    @pulumi.getter(name="operationsTimeoutMinutes")
    def operations_timeout_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
        creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
        error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
        this argument to `0` means to wait indefinitely
        """
        return pulumi.get(self, "operations_timeout_minutes")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[Optional[str]]:
        """
        The user that creates the cluster and owns the API token specified in `api_token`.
        It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
        If not specified, it assumes it's the user from the provider configuration

        > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `api_token_file`, as stated in their
        [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
        there is an existing issue that prevents the cluster to be created.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="podsCidr")
    def pods_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
        """
        return pulumi.get(self, "pods_cidr")

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter(name="servicesCidr")
    def services_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        A CIDR block for the services to use. Defaults to `100.64.0.0/13`
        """
        return pulumi.get(self, "services_cidr")

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Output[Optional[str]]:
        """
        The SSH public key used to log in into the cluster nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
        created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
        cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedUpgrades")
    def supported_upgrades(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of vApp Template names that can be fetched with a
        [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
        """
        return pulumi.get(self, "supported_upgrades")

    @property
    @pulumi.getter(name="tkgProductVersion")
    def tkg_product_version(self) -> pulumi.Output[str]:
        """
        The version of TKG installed in this cluster
        """
        return pulumi.get(self, "tkg_product_version")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Output[str]:
        """
        The ID of the VDC that hosts the Kubernetes cluster
        """
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="virtualIpSubnet")
    def virtual_ip_subnet(self) -> pulumi.Output[Optional[str]]:
        """
        A virtual IP subnet for the cluster
        """
        return pulumi.get(self, "virtual_ip_subnet")

    @property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> pulumi.Output[Sequence['outputs.CseKubernetesClusterWorkerPool']]:
        """
        See **Worker Pools**
        """
        return pulumi.get(self, "worker_pools")

