# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtEdgegatewayL2VpnTunnelResult',
    'AwaitableGetNsxtEdgegatewayL2VpnTunnelResult',
    'get_nsxt_edgegateway_l2_vpn_tunnel',
    'get_nsxt_edgegateway_l2_vpn_tunnel_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayL2VpnTunnelResult:
    """
    A collection of values returned by getNsxtEdgegatewayL2VpnTunnel.
    """
    def __init__(__self__, connector_initiation_mode=None, description=None, edge_gateway_id=None, enabled=None, id=None, local_endpoint_ip=None, name=None, org=None, peer_code=None, pre_shared_key=None, remote_endpoint_ip=None, session_mode=None, stretched_networks=None, tunnel_interface=None):
        if connector_initiation_mode and not isinstance(connector_initiation_mode, str):
            raise TypeError("Expected argument 'connector_initiation_mode' to be a str")
        pulumi.set(__self__, "connector_initiation_mode", connector_initiation_mode)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_endpoint_ip and not isinstance(local_endpoint_ip, str):
            raise TypeError("Expected argument 'local_endpoint_ip' to be a str")
        pulumi.set(__self__, "local_endpoint_ip", local_endpoint_ip)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if peer_code and not isinstance(peer_code, str):
            raise TypeError("Expected argument 'peer_code' to be a str")
        pulumi.set(__self__, "peer_code", peer_code)
        if pre_shared_key and not isinstance(pre_shared_key, str):
            raise TypeError("Expected argument 'pre_shared_key' to be a str")
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if remote_endpoint_ip and not isinstance(remote_endpoint_ip, str):
            raise TypeError("Expected argument 'remote_endpoint_ip' to be a str")
        pulumi.set(__self__, "remote_endpoint_ip", remote_endpoint_ip)
        if session_mode and not isinstance(session_mode, str):
            raise TypeError("Expected argument 'session_mode' to be a str")
        pulumi.set(__self__, "session_mode", session_mode)
        if stretched_networks and not isinstance(stretched_networks, list):
            raise TypeError("Expected argument 'stretched_networks' to be a list")
        pulumi.set(__self__, "stretched_networks", stretched_networks)
        if tunnel_interface and not isinstance(tunnel_interface, str):
            raise TypeError("Expected argument 'tunnel_interface' to be a str")
        pulumi.set(__self__, "tunnel_interface", tunnel_interface)

    @property
    @pulumi.getter(name="connectorInitiationMode")
    def connector_initiation_mode(self) -> str:
        return pulumi.get(self, "connector_initiation_mode")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localEndpointIp")
    def local_endpoint_ip(self) -> str:
        return pulumi.get(self, "local_endpoint_ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="peerCode")
    def peer_code(self) -> str:
        return pulumi.get(self, "peer_code")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> str:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="remoteEndpointIp")
    def remote_endpoint_ip(self) -> str:
        return pulumi.get(self, "remote_endpoint_ip")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> str:
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="stretchedNetworks")
    def stretched_networks(self) -> Sequence['outputs.GetNsxtEdgegatewayL2VpnTunnelStretchedNetworkResult']:
        return pulumi.get(self, "stretched_networks")

    @property
    @pulumi.getter(name="tunnelInterface")
    def tunnel_interface(self) -> str:
        return pulumi.get(self, "tunnel_interface")


class AwaitableGetNsxtEdgegatewayL2VpnTunnelResult(GetNsxtEdgegatewayL2VpnTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayL2VpnTunnelResult(
            connector_initiation_mode=self.connector_initiation_mode,
            description=self.description,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            local_endpoint_ip=self.local_endpoint_ip,
            name=self.name,
            org=self.org,
            peer_code=self.peer_code,
            pre_shared_key=self.pre_shared_key,
            remote_endpoint_ip=self.remote_endpoint_ip,
            session_mode=self.session_mode,
            stretched_networks=self.stretched_networks,
            tunnel_interface=self.tunnel_interface)


def get_nsxt_edgegateway_l2_vpn_tunnel(edge_gateway_id: Optional[str] = None,
                                       name: Optional[str] = None,
                                       org: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayL2VpnTunnelResult:
    """
    Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.

    Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.

    ## Example Usage

    ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(name="existing-vdc")
    server_testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="server-testing")
    client_testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="client-testing")
    server_session = vcd.get_nsxt_edgegateway_l2_vpn_tunnel(org="datacloud",
        edge_gateway_id=server_testing.id,
        name="server-session")
    client_session = vcd.NsxtEdgegatewayL2VpnTunnel("client-session",
        org="datacloud",
        edge_gateway_id=client_testing.id,
        session_mode="CLIENT",
        enabled=True,
        local_endpoint_ip="101.22.30.3",
        remote_endpoint_ip="1.2.2.3",
        peer_code=server_session.peer_code)
    ```


    :param str edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
           Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str name: The name of the tunnel.
    :param str org: The name of organization to use, optional if defined at 
           provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel', __args__, opts=opts, typ=GetNsxtEdgegatewayL2VpnTunnelResult).value

    return AwaitableGetNsxtEdgegatewayL2VpnTunnelResult(
        connector_initiation_mode=pulumi.get(__ret__, 'connector_initiation_mode'),
        description=pulumi.get(__ret__, 'description'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        local_endpoint_ip=pulumi.get(__ret__, 'local_endpoint_ip'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        peer_code=pulumi.get(__ret__, 'peer_code'),
        pre_shared_key=pulumi.get(__ret__, 'pre_shared_key'),
        remote_endpoint_ip=pulumi.get(__ret__, 'remote_endpoint_ip'),
        session_mode=pulumi.get(__ret__, 'session_mode'),
        stretched_networks=pulumi.get(__ret__, 'stretched_networks'),
        tunnel_interface=pulumi.get(__ret__, 'tunnel_interface'))
def get_nsxt_edgegateway_l2_vpn_tunnel_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                              name: Optional[pulumi.Input[str]] = None,
                                              org: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayL2VpnTunnelResult]:
    """
    Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.

    Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.

    ## Example Usage

    ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(name="existing-vdc")
    server_testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="server-testing")
    client_testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="client-testing")
    server_session = vcd.get_nsxt_edgegateway_l2_vpn_tunnel(org="datacloud",
        edge_gateway_id=server_testing.id,
        name="server-session")
    client_session = vcd.NsxtEdgegatewayL2VpnTunnel("client-session",
        org="datacloud",
        edge_gateway_id=client_testing.id,
        session_mode="CLIENT",
        enabled=True,
        local_endpoint_ip="101.22.30.3",
        remote_endpoint_ip="1.2.2.3",
        peer_code=server_session.peer_code)
    ```


    :param str edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
           Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str name: The name of the tunnel.
    :param str org: The name of organization to use, optional if defined at 
           provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel', __args__, opts=opts, typ=GetNsxtEdgegatewayL2VpnTunnelResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayL2VpnTunnelResult(
        connector_initiation_mode=pulumi.get(__response__, 'connector_initiation_mode'),
        description=pulumi.get(__response__, 'description'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        local_endpoint_ip=pulumi.get(__response__, 'local_endpoint_ip'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        peer_code=pulumi.get(__response__, 'peer_code'),
        pre_shared_key=pulumi.get(__response__, 'pre_shared_key'),
        remote_endpoint_ip=pulumi.get(__response__, 'remote_endpoint_ip'),
        session_mode=pulumi.get(__response__, 'session_mode'),
        stretched_networks=pulumi.get(__response__, 'stretched_networks'),
        tunnel_interface=pulumi.get(__response__, 'tunnel_interface')))
