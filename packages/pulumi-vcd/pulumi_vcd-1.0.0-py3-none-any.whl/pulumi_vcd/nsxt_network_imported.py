# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtNetworkImportedArgs', 'NsxtNetworkImported']

@pulumi.input_type
class NsxtNetworkImportedArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 dvpg_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_logical_switch_name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtNetworkImported resource.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] dvpg_name: Unique name of an existing Distributed Virtual Port Group (DVPG). 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `dvpg_id` attribute.
               
               > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nsxt_logical_switch_name: Unique name of an existing NSX-T segment. 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.
               
               This resource **will fail** if multiple segments with the same name are available. One can rename
               them in NSX-T manager to make them unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dual_stack_enabled is not None:
            pulumi.set(__self__, "dual_stack_enabled", dual_stack_enabled)
        if dvpg_name is not None:
            pulumi.set(__self__, "dvpg_name", dvpg_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsxt_logical_switch_name is not None:
            pulumi.set(__self__, "nsxt_logical_switch_name", nsxt_logical_switch_name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if secondary_gateway is not None:
            pulumi.set(__self__, "secondary_gateway", secondary_gateway)
        if secondary_prefix_length is not None:
            pulumi.set(__self__, "secondary_prefix_length", secondary_prefix_length)
        if secondary_static_ip_pools is not None:
            pulumi.set(__self__, "secondary_static_ip_pools", secondary_static_ip_pools)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @dual_stack_enabled.setter
    def dual_stack_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dual_stack_enabled", value)

    @property
    @pulumi.getter(name="dvpgName")
    def dvpg_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of an existing Distributed Virtual Port Group (DVPG). 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `dvpg_id` attribute.

        > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        """
        return pulumi.get(self, "dvpg_name")

    @dvpg_name.setter
    def dvpg_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dvpg_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nsxtLogicalSwitchName")
    def nsxt_logical_switch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of an existing NSX-T segment. 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.

        This resource **will fail** if multiple segments with the same name are available. One can rename
        them in NSX-T manager to make them unique.
        """
        return pulumi.get(self, "nsxt_logical_switch_name")

    @nsxt_logical_switch_name.setter
    def nsxt_logical_switch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_logical_switch_name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @secondary_gateway.setter
    def secondary_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_gateway", value)

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @secondary_prefix_length.setter
    def secondary_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_prefix_length", value)

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @secondary_static_ip_pools.setter
    def secondary_static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]]):
        pulumi.set(self, "secondary_static_ip_pools", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtNetworkImportedState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 dvpg_id: Optional[pulumi.Input[str]] = None,
                 dvpg_name: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_logical_switch_id: Optional[pulumi.Input[str]] = None,
                 nsxt_logical_switch_name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtNetworkImported resources.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] dvpg_id: ID of Distributed Virtual Port Group used by this network
        :param pulumi.Input[str] dvpg_name: Unique name of an existing Distributed Virtual Port Group (DVPG). 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `dvpg_id` attribute.
               
               > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nsxt_logical_switch_id: ID of NSX-T logical switch used by this network
        :param pulumi.Input[str] nsxt_logical_switch_name: Unique name of an existing NSX-T segment. 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.
               
               This resource **will fail** if multiple segments with the same name are available. One can rename
               them in NSX-T manager to make them unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dual_stack_enabled is not None:
            pulumi.set(__self__, "dual_stack_enabled", dual_stack_enabled)
        if dvpg_id is not None:
            pulumi.set(__self__, "dvpg_id", dvpg_id)
        if dvpg_name is not None:
            pulumi.set(__self__, "dvpg_name", dvpg_name)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsxt_logical_switch_id is not None:
            pulumi.set(__self__, "nsxt_logical_switch_id", nsxt_logical_switch_id)
        if nsxt_logical_switch_name is not None:
            pulumi.set(__self__, "nsxt_logical_switch_name", nsxt_logical_switch_name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if secondary_gateway is not None:
            pulumi.set(__self__, "secondary_gateway", secondary_gateway)
        if secondary_prefix_length is not None:
            pulumi.set(__self__, "secondary_prefix_length", secondary_prefix_length)
        if secondary_static_ip_pools is not None:
            pulumi.set(__self__, "secondary_static_ip_pools", secondary_static_ip_pools)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @dual_stack_enabled.setter
    def dual_stack_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dual_stack_enabled", value)

    @property
    @pulumi.getter(name="dvpgId")
    def dvpg_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of Distributed Virtual Port Group used by this network
        """
        return pulumi.get(self, "dvpg_id")

    @dvpg_id.setter
    def dvpg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dvpg_id", value)

    @property
    @pulumi.getter(name="dvpgName")
    def dvpg_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of an existing Distributed Virtual Port Group (DVPG). 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `dvpg_id` attribute.

        > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        """
        return pulumi.get(self, "dvpg_name")

    @dvpg_name.setter
    def dvpg_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dvpg_name", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nsxtLogicalSwitchId")
    def nsxt_logical_switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of NSX-T logical switch used by this network
        """
        return pulumi.get(self, "nsxt_logical_switch_id")

    @nsxt_logical_switch_id.setter
    def nsxt_logical_switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_logical_switch_id", value)

    @property
    @pulumi.getter(name="nsxtLogicalSwitchName")
    def nsxt_logical_switch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of an existing NSX-T segment. 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.

        This resource **will fail** if multiple segments with the same name are available. One can rename
        them in NSX-T manager to make them unique.
        """
        return pulumi.get(self, "nsxt_logical_switch_name")

    @nsxt_logical_switch_name.setter
    def nsxt_logical_switch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_logical_switch_name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @secondary_gateway.setter
    def secondary_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_gateway", value)

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @secondary_prefix_length.setter
    def secondary_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_prefix_length", value)

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @secondary_static_ip_pools.setter
    def secondary_static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedSecondaryStaticIpPoolArgs']]]]):
        pulumi.set(self, "secondary_static_ip_pools", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkImportedStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtNetworkImported(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 dvpg_name: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_logical_switch_name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedSecondaryStaticIpPoolArgs', 'NsxtNetworkImportedSecondaryStaticIpPoolArgsDict']]]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedStaticIpPoolArgs', 'NsxtNetworkImportedStaticIpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtNetworkImported resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] dvpg_name: Unique name of an existing Distributed Virtual Port Group (DVPG). 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `dvpg_id` attribute.
               
               > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nsxt_logical_switch_name: Unique name of an existing NSX-T segment. 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.
               
               This resource **will fail** if multiple segments with the same name are available. One can rename
               them in NSX-T manager to make them unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedSecondaryStaticIpPoolArgs', 'NsxtNetworkImportedSecondaryStaticIpPoolArgsDict']]]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedStaticIpPoolArgs', 'NsxtNetworkImportedStaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtNetworkImportedArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtNetworkImported resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtNetworkImportedArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtNetworkImportedArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 dvpg_name: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_logical_switch_name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedSecondaryStaticIpPoolArgs', 'NsxtNetworkImportedSecondaryStaticIpPoolArgsDict']]]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedStaticIpPoolArgs', 'NsxtNetworkImportedStaticIpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtNetworkImportedArgs.__new__(NsxtNetworkImportedArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dns1"] = dns1
            __props__.__dict__["dns2"] = dns2
            __props__.__dict__["dns_suffix"] = dns_suffix
            __props__.__dict__["dual_stack_enabled"] = dual_stack_enabled
            __props__.__dict__["dvpg_name"] = dvpg_name
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["name"] = name
            __props__.__dict__["nsxt_logical_switch_name"] = nsxt_logical_switch_name
            __props__.__dict__["org"] = org
            __props__.__dict__["owner_id"] = owner_id
            if prefix_length is None and not opts.urn:
                raise TypeError("Missing required property 'prefix_length'")
            __props__.__dict__["prefix_length"] = prefix_length
            __props__.__dict__["secondary_gateway"] = secondary_gateway
            __props__.__dict__["secondary_prefix_length"] = secondary_prefix_length
            __props__.__dict__["secondary_static_ip_pools"] = secondary_static_ip_pools
            __props__.__dict__["static_ip_pools"] = static_ip_pools
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["dvpg_id"] = None
            __props__.__dict__["nsxt_logical_switch_id"] = None
        super(NsxtNetworkImported, __self__).__init__(
            'vcd:index/nsxtNetworkImported:NsxtNetworkImported',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns1: Optional[pulumi.Input[str]] = None,
            dns2: Optional[pulumi.Input[str]] = None,
            dns_suffix: Optional[pulumi.Input[str]] = None,
            dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
            dvpg_id: Optional[pulumi.Input[str]] = None,
            dvpg_name: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nsxt_logical_switch_id: Optional[pulumi.Input[str]] = None,
            nsxt_logical_switch_name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            prefix_length: Optional[pulumi.Input[int]] = None,
            secondary_gateway: Optional[pulumi.Input[str]] = None,
            secondary_prefix_length: Optional[pulumi.Input[str]] = None,
            secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedSecondaryStaticIpPoolArgs', 'NsxtNetworkImportedSecondaryStaticIpPoolArgsDict']]]]] = None,
            static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedStaticIpPoolArgs', 'NsxtNetworkImportedStaticIpPoolArgsDict']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtNetworkImported':
        """
        Get an existing NsxtNetworkImported resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] dvpg_id: ID of Distributed Virtual Port Group used by this network
        :param pulumi.Input[str] dvpg_name: Unique name of an existing Distributed Virtual Port Group (DVPG). 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `dvpg_id` attribute.
               
               > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nsxt_logical_switch_id: ID of NSX-T logical switch used by this network
        :param pulumi.Input[str] nsxt_logical_switch_name: Unique name of an existing NSX-T segment. 
               **Note** it will never be refreshed because API does not allow reading this name after it is
               consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.
               
               This resource **will fail** if multiple segments with the same name are available. One can rename
               them in NSX-T manager to make them unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedSecondaryStaticIpPoolArgs', 'NsxtNetworkImportedSecondaryStaticIpPoolArgsDict']]]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkImportedStaticIpPoolArgs', 'NsxtNetworkImportedStaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtNetworkImportedState.__new__(_NsxtNetworkImportedState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dns1"] = dns1
        __props__.__dict__["dns2"] = dns2
        __props__.__dict__["dns_suffix"] = dns_suffix
        __props__.__dict__["dual_stack_enabled"] = dual_stack_enabled
        __props__.__dict__["dvpg_id"] = dvpg_id
        __props__.__dict__["dvpg_name"] = dvpg_name
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["name"] = name
        __props__.__dict__["nsxt_logical_switch_id"] = nsxt_logical_switch_id
        __props__.__dict__["nsxt_logical_switch_name"] = nsxt_logical_switch_name
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["prefix_length"] = prefix_length
        __props__.__dict__["secondary_gateway"] = secondary_gateway
        __props__.__dict__["secondary_prefix_length"] = secondary_prefix_length
        __props__.__dict__["secondary_static_ip_pools"] = secondary_static_ip_pools
        __props__.__dict__["static_ip_pools"] = static_ip_pools
        __props__.__dict__["vdc"] = vdc
        return NsxtNetworkImported(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dns1(self) -> pulumi.Output[Optional[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> pulumi.Output[Optional[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> pulumi.Output[Optional[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @property
    @pulumi.getter(name="dvpgId")
    def dvpg_id(self) -> pulumi.Output[str]:
        """
        ID of Distributed Virtual Port Group used by this network
        """
        return pulumi.get(self, "dvpg_id")

    @property
    @pulumi.getter(name="dvpgName")
    def dvpg_name(self) -> pulumi.Output[Optional[str]]:
        """
        Unique name of an existing Distributed Virtual Port Group (DVPG). 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `dvpg_id` attribute.

        > One of `nsxt_logical_switch_name` or `dvpg_name` must be provided.
        """
        return pulumi.get(self, "dvpg_name")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtLogicalSwitchId")
    def nsxt_logical_switch_id(self) -> pulumi.Output[str]:
        """
        ID of NSX-T logical switch used by this network
        """
        return pulumi.get(self, "nsxt_logical_switch_id")

    @property
    @pulumi.getter(name="nsxtLogicalSwitchName")
    def nsxt_logical_switch_name(self) -> pulumi.Output[Optional[str]]:
        """
        Unique name of an existing NSX-T segment. 
        **Note** it will never be refreshed because API does not allow reading this name after it is
        consumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute.

        This resource **will fail** if multiple segments with the same name are available. One can rename
        them in NSX-T manager to make them unique.
        """
        return pulumi.get(self, "nsxt_logical_switch_name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Output[int]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtNetworkImportedSecondaryStaticIpPool']]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtNetworkImportedStaticIpPool']]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

