# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetLbAppRuleResult',
    'AwaitableGetLbAppRuleResult',
    'get_lb_app_rule',
    'get_lb_app_rule_output',
]

@pulumi.output_type
class GetLbAppRuleResult:
    """
    A collection of values returned by getLbAppRule.
    """
    def __init__(__self__, edge_gateway=None, id=None, name=None, org=None, script=None, vdc=None):
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        pulumi.set(__self__, "script", script)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def script(self) -> str:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetLbAppRuleResult(GetLbAppRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbAppRuleResult(
            edge_gateway=self.edge_gateway,
            id=self.id,
            name=self.name,
            org=self.org,
            script=self.script,
            vdc=self.vdc)


def get_lb_app_rule(edge_gateway: Optional[str] = None,
                    name: Optional[str] = None,
                    org: Optional[str] = None,
                    vdc: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbAppRuleResult:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Application Rule data source. An application
    rule allows to directly manipulate and manage IP application traffic with load balancer.

    > **Note:** See additional support notes in [application rule resource page]
    (/providers/vmware/vcd/latest/docs/resources/lb_app_rule).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rule = vcd.get_lb_app_rule(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the service monitor is defined
    :param str name: Application rule name for identifying the exact application rule
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getLbAppRule:getLbAppRule', __args__, opts=opts, typ=GetLbAppRuleResult).value

    return AwaitableGetLbAppRuleResult(
        edge_gateway=pulumi.get(__ret__, 'edge_gateway'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        script=pulumi.get(__ret__, 'script'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_lb_app_rule_output(edge_gateway: Optional[pulumi.Input[str]] = None,
                           name: Optional[pulumi.Input[str]] = None,
                           org: Optional[pulumi.Input[Optional[str]]] = None,
                           vdc: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLbAppRuleResult]:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Application Rule data source. An application
    rule allows to directly manipulate and manage IP application traffic with load balancer.

    > **Note:** See additional support notes in [application rule resource page]
    (/providers/vmware/vcd/latest/docs/resources/lb_app_rule).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rule = vcd.get_lb_app_rule(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the service monitor is defined
    :param str name: Application rule name for identifying the exact application rule
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getLbAppRule:getLbAppRule', __args__, opts=opts, typ=GetLbAppRuleResult)
    return __ret__.apply(lambda __response__: GetLbAppRuleResult(
        edge_gateway=pulumi.get(__response__, 'edge_gateway'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        script=pulumi.get(__response__, 'script'),
        vdc=pulumi.get(__response__, 'vdc')))
