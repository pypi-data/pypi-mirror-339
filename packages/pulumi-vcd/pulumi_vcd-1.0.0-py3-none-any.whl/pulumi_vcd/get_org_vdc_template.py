# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetOrgVdcTemplateResult',
    'AwaitableGetOrgVdcTemplateResult',
    'get_org_vdc_template',
    'get_org_vdc_template_output',
]

@pulumi.output_type
class GetOrgVdcTemplateResult:
    """
    A collection of values returned by getOrgVdcTemplate.
    """
    def __init__(__self__, allocation_model=None, compute_configurations=None, description=None, edge_gateways=None, enable_fast_provisioning=None, enable_thin_provisioning=None, id=None, name=None, network_pool_id=None, nic_quota=None, provider_vdcs=None, provisioned_network_quota=None, readable_by_org_ids=None, storage_profiles=None, tenant_description=None, tenant_name=None, vm_quota=None):
        if allocation_model and not isinstance(allocation_model, str):
            raise TypeError("Expected argument 'allocation_model' to be a str")
        pulumi.set(__self__, "allocation_model", allocation_model)
        if compute_configurations and not isinstance(compute_configurations, list):
            raise TypeError("Expected argument 'compute_configurations' to be a list")
        pulumi.set(__self__, "compute_configurations", compute_configurations)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateways and not isinstance(edge_gateways, list):
            raise TypeError("Expected argument 'edge_gateways' to be a list")
        pulumi.set(__self__, "edge_gateways", edge_gateways)
        if enable_fast_provisioning and not isinstance(enable_fast_provisioning, bool):
            raise TypeError("Expected argument 'enable_fast_provisioning' to be a bool")
        pulumi.set(__self__, "enable_fast_provisioning", enable_fast_provisioning)
        if enable_thin_provisioning and not isinstance(enable_thin_provisioning, bool):
            raise TypeError("Expected argument 'enable_thin_provisioning' to be a bool")
        pulumi.set(__self__, "enable_thin_provisioning", enable_thin_provisioning)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_pool_id and not isinstance(network_pool_id, str):
            raise TypeError("Expected argument 'network_pool_id' to be a str")
        pulumi.set(__self__, "network_pool_id", network_pool_id)
        if nic_quota and not isinstance(nic_quota, int):
            raise TypeError("Expected argument 'nic_quota' to be a int")
        pulumi.set(__self__, "nic_quota", nic_quota)
        if provider_vdcs and not isinstance(provider_vdcs, list):
            raise TypeError("Expected argument 'provider_vdcs' to be a list")
        pulumi.set(__self__, "provider_vdcs", provider_vdcs)
        if provisioned_network_quota and not isinstance(provisioned_network_quota, int):
            raise TypeError("Expected argument 'provisioned_network_quota' to be a int")
        pulumi.set(__self__, "provisioned_network_quota", provisioned_network_quota)
        if readable_by_org_ids and not isinstance(readable_by_org_ids, list):
            raise TypeError("Expected argument 'readable_by_org_ids' to be a list")
        pulumi.set(__self__, "readable_by_org_ids", readable_by_org_ids)
        if storage_profiles and not isinstance(storage_profiles, list):
            raise TypeError("Expected argument 'storage_profiles' to be a list")
        pulumi.set(__self__, "storage_profiles", storage_profiles)
        if tenant_description and not isinstance(tenant_description, str):
            raise TypeError("Expected argument 'tenant_description' to be a str")
        pulumi.set(__self__, "tenant_description", tenant_description)
        if tenant_name and not isinstance(tenant_name, str):
            raise TypeError("Expected argument 'tenant_name' to be a str")
        pulumi.set(__self__, "tenant_name", tenant_name)
        if vm_quota and not isinstance(vm_quota, int):
            raise TypeError("Expected argument 'vm_quota' to be a int")
        pulumi.set(__self__, "vm_quota", vm_quota)

    @property
    @pulumi.getter(name="allocationModel")
    def allocation_model(self) -> str:
        return pulumi.get(self, "allocation_model")

    @property
    @pulumi.getter(name="computeConfigurations")
    def compute_configurations(self) -> Sequence['outputs.GetOrgVdcTemplateComputeConfigurationResult']:
        return pulumi.get(self, "compute_configurations")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateways")
    def edge_gateways(self) -> Sequence['outputs.GetOrgVdcTemplateEdgeGatewayResult']:
        return pulumi.get(self, "edge_gateways")

    @property
    @pulumi.getter(name="enableFastProvisioning")
    def enable_fast_provisioning(self) -> bool:
        return pulumi.get(self, "enable_fast_provisioning")

    @property
    @pulumi.getter(name="enableThinProvisioning")
    def enable_thin_provisioning(self) -> bool:
        return pulumi.get(self, "enable_thin_provisioning")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> str:
        return pulumi.get(self, "network_pool_id")

    @property
    @pulumi.getter(name="nicQuota")
    def nic_quota(self) -> int:
        return pulumi.get(self, "nic_quota")

    @property
    @pulumi.getter(name="providerVdcs")
    def provider_vdcs(self) -> Sequence['outputs.GetOrgVdcTemplateProviderVdcResult']:
        return pulumi.get(self, "provider_vdcs")

    @property
    @pulumi.getter(name="provisionedNetworkQuota")
    def provisioned_network_quota(self) -> int:
        return pulumi.get(self, "provisioned_network_quota")

    @property
    @pulumi.getter(name="readableByOrgIds")
    def readable_by_org_ids(self) -> Sequence[str]:
        return pulumi.get(self, "readable_by_org_ids")

    @property
    @pulumi.getter(name="storageProfiles")
    def storage_profiles(self) -> Sequence['outputs.GetOrgVdcTemplateStorageProfileResult']:
        return pulumi.get(self, "storage_profiles")

    @property
    @pulumi.getter(name="tenantDescription")
    def tenant_description(self) -> str:
        return pulumi.get(self, "tenant_description")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> str:
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter(name="vmQuota")
    def vm_quota(self) -> int:
        return pulumi.get(self, "vm_quota")


class AwaitableGetOrgVdcTemplateResult(GetOrgVdcTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgVdcTemplateResult(
            allocation_model=self.allocation_model,
            compute_configurations=self.compute_configurations,
            description=self.description,
            edge_gateways=self.edge_gateways,
            enable_fast_provisioning=self.enable_fast_provisioning,
            enable_thin_provisioning=self.enable_thin_provisioning,
            id=self.id,
            name=self.name,
            network_pool_id=self.network_pool_id,
            nic_quota=self.nic_quota,
            provider_vdcs=self.provider_vdcs,
            provisioned_network_quota=self.provisioned_network_quota,
            readable_by_org_ids=self.readable_by_org_ids,
            storage_profiles=self.storage_profiles,
            tenant_description=self.tenant_description,
            tenant_name=self.tenant_name,
            vm_quota=self.vm_quota)


def get_org_vdc_template(name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgVdcTemplateResult:
    """
    Provides a data source to read Organization VDC Templates from VMware Cloud Director.
    Can be used by System Administrators or tenants, only if the template is published in that tenant.

    Supported in provider *v3.13+*

    > VDC Templates that do not use NSX-T can be read, but may be missing some details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    template = vcd.get_org_vdc_template(name="myTemplate")
    ```

    > Note that when using the data source as a tenant, `name` is the VDC Template name as seen by tenants


    :param str name: Name of the existing Organization VDC Template to read
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgVdcTemplate:getOrgVdcTemplate', __args__, opts=opts, typ=GetOrgVdcTemplateResult).value

    return AwaitableGetOrgVdcTemplateResult(
        allocation_model=pulumi.get(__ret__, 'allocation_model'),
        compute_configurations=pulumi.get(__ret__, 'compute_configurations'),
        description=pulumi.get(__ret__, 'description'),
        edge_gateways=pulumi.get(__ret__, 'edge_gateways'),
        enable_fast_provisioning=pulumi.get(__ret__, 'enable_fast_provisioning'),
        enable_thin_provisioning=pulumi.get(__ret__, 'enable_thin_provisioning'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_pool_id=pulumi.get(__ret__, 'network_pool_id'),
        nic_quota=pulumi.get(__ret__, 'nic_quota'),
        provider_vdcs=pulumi.get(__ret__, 'provider_vdcs'),
        provisioned_network_quota=pulumi.get(__ret__, 'provisioned_network_quota'),
        readable_by_org_ids=pulumi.get(__ret__, 'readable_by_org_ids'),
        storage_profiles=pulumi.get(__ret__, 'storage_profiles'),
        tenant_description=pulumi.get(__ret__, 'tenant_description'),
        tenant_name=pulumi.get(__ret__, 'tenant_name'),
        vm_quota=pulumi.get(__ret__, 'vm_quota'))
def get_org_vdc_template_output(name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgVdcTemplateResult]:
    """
    Provides a data source to read Organization VDC Templates from VMware Cloud Director.
    Can be used by System Administrators or tenants, only if the template is published in that tenant.

    Supported in provider *v3.13+*

    > VDC Templates that do not use NSX-T can be read, but may be missing some details.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    template = vcd.get_org_vdc_template(name="myTemplate")
    ```

    > Note that when using the data source as a tenant, `name` is the VDC Template name as seen by tenants


    :param str name: Name of the existing Organization VDC Template to read
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getOrgVdcTemplate:getOrgVdcTemplate', __args__, opts=opts, typ=GetOrgVdcTemplateResult)
    return __ret__.apply(lambda __response__: GetOrgVdcTemplateResult(
        allocation_model=pulumi.get(__response__, 'allocation_model'),
        compute_configurations=pulumi.get(__response__, 'compute_configurations'),
        description=pulumi.get(__response__, 'description'),
        edge_gateways=pulumi.get(__response__, 'edge_gateways'),
        enable_fast_provisioning=pulumi.get(__response__, 'enable_fast_provisioning'),
        enable_thin_provisioning=pulumi.get(__response__, 'enable_thin_provisioning'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_pool_id=pulumi.get(__response__, 'network_pool_id'),
        nic_quota=pulumi.get(__response__, 'nic_quota'),
        provider_vdcs=pulumi.get(__response__, 'provider_vdcs'),
        provisioned_network_quota=pulumi.get(__response__, 'provisioned_network_quota'),
        readable_by_org_ids=pulumi.get(__response__, 'readable_by_org_ids'),
        storage_profiles=pulumi.get(__response__, 'storage_profiles'),
        tenant_description=pulumi.get(__response__, 'tenant_description'),
        tenant_name=pulumi.get(__response__, 'tenant_name'),
        vm_quota=pulumi.get(__response__, 'vm_quota')))
