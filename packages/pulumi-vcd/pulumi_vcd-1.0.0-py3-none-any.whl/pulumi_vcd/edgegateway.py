# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EdgegatewayArgs', 'Edgegateway']

@pulumi.input_type
class EdgegatewayArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input[str],
                 external_networks: pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_routing: Optional[pulumi.Input[bool]] = None,
                 fips_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 ha_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 use_default_route_for_dns_relay: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Edgegateway resource.
        :param pulumi.Input[str] configuration: Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]] external_networks: One or more blocks defining external networks, their
               subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
               in external network block below.
        :param pulumi.Input[bool] distributed_routing: If advanced networking enabled, also enable distributed
               routing. Default is `false`.
        :param pulumi.Input[bool] fips_mode_enabled: When FIPS mode is enabled, any secure communication to or from
               the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
               Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
               FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        :param pulumi.Input[str] fw_default_rule_action: Default firewall rule (last in the processing order) action.
               One of `accept` or `deny`. Default `deny`.
               
               <a id="external-network"></a>
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable default firewall rule (last in the processing 
               order) logging. Default `false`.
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default `true`. **Note:** Disabling Firewall will also
               disable NAT and other NAT dependent features like Load Balancer.
        :param pulumi.Input[bool] ha_enabled: Enable high availability on this edge gateway. Default is `false`.
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable to configure the load balancer to use the faster L4
               engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
               `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
               processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
               rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
               selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
               that the firewall is enabled on the edge gateway.
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. Default is `false`.
        :param pulumi.Input[bool] lb_logging_enabled: Enables the edge gateway load balancer to collect traffic logs.
               Default is `false`.
        :param pulumi.Input[str] lb_loglevel: Choose the severity of events to be logged. One of `emergency`,
               `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[bool] use_default_route_for_dns_relay: When default route is set, it will be used for
               gateways' default routing and DNS forwarding. Default is `false`.
        :param pulumi.Input[str] vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "external_networks", external_networks)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distributed_routing is not None:
            pulumi.set(__self__, "distributed_routing", distributed_routing)
        if fips_mode_enabled is not None:
            pulumi.set(__self__, "fips_mode_enabled", fips_mode_enabled)
        if fw_default_rule_action is not None:
            pulumi.set(__self__, "fw_default_rule_action", fw_default_rule_action)
        if fw_default_rule_logging_enabled is not None:
            pulumi.set(__self__, "fw_default_rule_logging_enabled", fw_default_rule_logging_enabled)
        if fw_enabled is not None:
            pulumi.set(__self__, "fw_enabled", fw_enabled)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if lb_acceleration_enabled is not None:
            pulumi.set(__self__, "lb_acceleration_enabled", lb_acceleration_enabled)
        if lb_enabled is not None:
            pulumi.set(__self__, "lb_enabled", lb_enabled)
        if lb_logging_enabled is not None:
            pulumi.set(__self__, "lb_logging_enabled", lb_logging_enabled)
        if lb_loglevel is not None:
            pulumi.set(__self__, "lb_loglevel", lb_loglevel)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if use_default_route_for_dns_relay is not None:
            pulumi.set(__self__, "use_default_route_for_dns_relay", use_default_route_for_dns_relay)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input[str]:
        """
        Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]]:
        """
        One or more blocks defining external networks, their
        subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
        in external network block below.
        """
        return pulumi.get(self, "external_networks")

    @external_networks.setter
    def external_networks(self, value: pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]]):
        pulumi.set(self, "external_networks", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributedRouting")
    def distributed_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        If advanced networking enabled, also enable distributed
        routing. Default is `false`.
        """
        return pulumi.get(self, "distributed_routing")

    @distributed_routing.setter
    def distributed_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distributed_routing", value)

    @property
    @pulumi.getter(name="fipsModeEnabled")
    def fips_mode_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When FIPS mode is enabled, any secure communication to or from
        the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
        Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
        FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        """
        return pulumi.get(self, "fips_mode_enabled")

    @fips_mode_enabled.setter
    def fips_mode_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fips_mode_enabled", value)

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        Default firewall rule (last in the processing order) action.
        One of `accept` or `deny`. Default `deny`.

        <a id="external-network"></a>
        """
        return pulumi.get(self, "fw_default_rule_action")

    @fw_default_rule_action.setter
    def fw_default_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_default_rule_action", value)

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable default firewall rule (last in the processing 
        order) logging. Default `false`.
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @fw_default_rule_logging_enabled.setter
    def fw_default_rule_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_default_rule_logging_enabled", value)

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable firewall. Default `true`. **Note:** Disabling Firewall will also
        disable NAT and other NAT dependent features like Load Balancer.
        """
        return pulumi.get(self, "fw_enabled")

    @fw_enabled.setter
    def fw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_enabled", value)

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable high availability on this edge gateway. Default is `false`.
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_enabled", value)

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to configure the load balancer to use the faster L4
        engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
        `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
        processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
        rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
        selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
        that the firewall is enabled on the edge gateway.
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @lb_acceleration_enabled.setter
    def lb_acceleration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_acceleration_enabled", value)

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancing. Default is `false`.
        """
        return pulumi.get(self, "lb_enabled")

    @lb_enabled.setter
    def lb_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_enabled", value)

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the edge gateway load balancer to collect traffic logs.
        Default is `false`.
        """
        return pulumi.get(self, "lb_logging_enabled")

    @lb_logging_enabled.setter
    def lb_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_logging_enabled", value)

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the severity of events to be logged. One of `emergency`,
        `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        """
        return pulumi.get(self, "lb_loglevel")

    @lb_loglevel.setter
    def lb_loglevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_loglevel", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="useDefaultRouteForDnsRelay")
    def use_default_route_for_dns_relay(self) -> Optional[pulumi.Input[bool]]:
        """
        When default route is set, it will be used for
        gateways' default routing and DNS forwarding. Default is `false`.
        """
        return pulumi.get(self, "use_default_route_for_dns_relay")

    @use_default_route_for_dns_relay.setter
    def use_default_route_for_dns_relay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_route_for_dns_relay", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _EdgegatewayState:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[str]] = None,
                 default_external_network_ip: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_routing: Optional[pulumi.Input[bool]] = None,
                 external_network_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]]] = None,
                 fips_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 ha_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 use_default_route_for_dns_relay: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Edgegateway resources.
        :param pulumi.Input[str] configuration: Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        :param pulumi.Input[str] default_external_network_ip: (*v2.6+*) - IP address of edge gateway used for default network
        :param pulumi.Input[bool] distributed_routing: If advanced networking enabled, also enable distributed
               routing. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_network_ips: (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
               connected to external networks.
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]] external_networks: One or more blocks defining external networks, their
               subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
               in external network block below.
        :param pulumi.Input[bool] fips_mode_enabled: When FIPS mode is enabled, any secure communication to or from
               the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
               Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
               FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        :param pulumi.Input[str] fw_default_rule_action: Default firewall rule (last in the processing order) action.
               One of `accept` or `deny`. Default `deny`.
               
               <a id="external-network"></a>
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable default firewall rule (last in the processing 
               order) logging. Default `false`.
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default `true`. **Note:** Disabling Firewall will also
               disable NAT and other NAT dependent features like Load Balancer.
        :param pulumi.Input[bool] ha_enabled: Enable high availability on this edge gateway. Default is `false`.
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable to configure the load balancer to use the faster L4
               engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
               `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
               processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
               rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
               selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
               that the firewall is enabled on the edge gateway.
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. Default is `false`.
        :param pulumi.Input[bool] lb_logging_enabled: Enables the edge gateway load balancer to collect traffic logs.
               Default is `false`.
        :param pulumi.Input[str] lb_loglevel: Choose the severity of events to be logged. One of `emergency`,
               `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[bool] use_default_route_for_dns_relay: When default route is set, it will be used for
               gateways' default routing and DNS forwarding. Default is `false`.
        :param pulumi.Input[str] vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if default_external_network_ip is not None:
            pulumi.set(__self__, "default_external_network_ip", default_external_network_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distributed_routing is not None:
            pulumi.set(__self__, "distributed_routing", distributed_routing)
        if external_network_ips is not None:
            pulumi.set(__self__, "external_network_ips", external_network_ips)
        if external_networks is not None:
            pulumi.set(__self__, "external_networks", external_networks)
        if fips_mode_enabled is not None:
            pulumi.set(__self__, "fips_mode_enabled", fips_mode_enabled)
        if fw_default_rule_action is not None:
            pulumi.set(__self__, "fw_default_rule_action", fw_default_rule_action)
        if fw_default_rule_logging_enabled is not None:
            pulumi.set(__self__, "fw_default_rule_logging_enabled", fw_default_rule_logging_enabled)
        if fw_enabled is not None:
            pulumi.set(__self__, "fw_enabled", fw_enabled)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if lb_acceleration_enabled is not None:
            pulumi.set(__self__, "lb_acceleration_enabled", lb_acceleration_enabled)
        if lb_enabled is not None:
            pulumi.set(__self__, "lb_enabled", lb_enabled)
        if lb_logging_enabled is not None:
            pulumi.set(__self__, "lb_logging_enabled", lb_logging_enabled)
        if lb_loglevel is not None:
            pulumi.set(__self__, "lb_loglevel", lb_loglevel)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if use_default_route_for_dns_relay is not None:
            pulumi.set(__self__, "use_default_route_for_dns_relay", use_default_route_for_dns_relay)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="defaultExternalNetworkIp")
    def default_external_network_ip(self) -> Optional[pulumi.Input[str]]:
        """
        (*v2.6+*) - IP address of edge gateway used for default network
        """
        return pulumi.get(self, "default_external_network_ip")

    @default_external_network_ip.setter
    def default_external_network_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_external_network_ip", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributedRouting")
    def distributed_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        If advanced networking enabled, also enable distributed
        routing. Default is `false`.
        """
        return pulumi.get(self, "distributed_routing")

    @distributed_routing.setter
    def distributed_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distributed_routing", value)

    @property
    @pulumi.getter(name="externalNetworkIps")
    def external_network_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
        connected to external networks.
        """
        return pulumi.get(self, "external_network_ips")

    @external_network_ips.setter
    def external_network_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_network_ips", value)

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]]]:
        """
        One or more blocks defining external networks, their
        subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
        in external network block below.
        """
        return pulumi.get(self, "external_networks")

    @external_networks.setter
    def external_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayExternalNetworkArgs']]]]):
        pulumi.set(self, "external_networks", value)

    @property
    @pulumi.getter(name="fipsModeEnabled")
    def fips_mode_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When FIPS mode is enabled, any secure communication to or from
        the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
        Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
        FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        """
        return pulumi.get(self, "fips_mode_enabled")

    @fips_mode_enabled.setter
    def fips_mode_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fips_mode_enabled", value)

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        Default firewall rule (last in the processing order) action.
        One of `accept` or `deny`. Default `deny`.

        <a id="external-network"></a>
        """
        return pulumi.get(self, "fw_default_rule_action")

    @fw_default_rule_action.setter
    def fw_default_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_default_rule_action", value)

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable default firewall rule (last in the processing 
        order) logging. Default `false`.
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @fw_default_rule_logging_enabled.setter
    def fw_default_rule_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_default_rule_logging_enabled", value)

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable firewall. Default `true`. **Note:** Disabling Firewall will also
        disable NAT and other NAT dependent features like Load Balancer.
        """
        return pulumi.get(self, "fw_enabled")

    @fw_enabled.setter
    def fw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_enabled", value)

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable high availability on this edge gateway. Default is `false`.
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_enabled", value)

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to configure the load balancer to use the faster L4
        engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
        `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
        processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
        rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
        selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
        that the firewall is enabled on the edge gateway.
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @lb_acceleration_enabled.setter
    def lb_acceleration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_acceleration_enabled", value)

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancing. Default is `false`.
        """
        return pulumi.get(self, "lb_enabled")

    @lb_enabled.setter
    def lb_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_enabled", value)

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the edge gateway load balancer to collect traffic logs.
        Default is `false`.
        """
        return pulumi.get(self, "lb_logging_enabled")

    @lb_logging_enabled.setter
    def lb_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_logging_enabled", value)

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the severity of events to be logged. One of `emergency`,
        `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        """
        return pulumi.get(self, "lb_loglevel")

    @lb_loglevel.setter
    def lb_loglevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_loglevel", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="useDefaultRouteForDnsRelay")
    def use_default_route_for_dns_relay(self) -> Optional[pulumi.Input[bool]]:
        """
        When default route is set, it will be used for
        gateways' default routing and DNS forwarding. Default is `false`.
        """
        return pulumi.get(self, "use_default_route_for_dns_relay")

    @use_default_route_for_dns_relay.setter
    def use_default_route_for_dns_relay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_route_for_dns_relay", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class Edgegateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_routing: Optional[pulumi.Input[bool]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayExternalNetworkArgs', 'EdgegatewayExternalNetworkArgsDict']]]]] = None,
                 fips_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 ha_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 use_default_route_for_dns_relay: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Edgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configuration: Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        :param pulumi.Input[bool] distributed_routing: If advanced networking enabled, also enable distributed
               routing. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayExternalNetworkArgs', 'EdgegatewayExternalNetworkArgsDict']]]] external_networks: One or more blocks defining external networks, their
               subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
               in external network block below.
        :param pulumi.Input[bool] fips_mode_enabled: When FIPS mode is enabled, any secure communication to or from
               the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
               Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
               FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        :param pulumi.Input[str] fw_default_rule_action: Default firewall rule (last in the processing order) action.
               One of `accept` or `deny`. Default `deny`.
               
               <a id="external-network"></a>
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable default firewall rule (last in the processing 
               order) logging. Default `false`.
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default `true`. **Note:** Disabling Firewall will also
               disable NAT and other NAT dependent features like Load Balancer.
        :param pulumi.Input[bool] ha_enabled: Enable high availability on this edge gateway. Default is `false`.
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable to configure the load balancer to use the faster L4
               engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
               `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
               processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
               rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
               selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
               that the firewall is enabled on the edge gateway.
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. Default is `false`.
        :param pulumi.Input[bool] lb_logging_enabled: Enables the edge gateway load balancer to collect traffic logs.
               Default is `false`.
        :param pulumi.Input[str] lb_loglevel: Choose the severity of events to be logged. One of `emergency`,
               `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[bool] use_default_route_for_dns_relay: When default route is set, it will be used for
               gateways' default routing and DNS forwarding. Default is `false`.
        :param pulumi.Input[str] vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgegatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Edgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EdgegatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgegatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_routing: Optional[pulumi.Input[bool]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayExternalNetworkArgs', 'EdgegatewayExternalNetworkArgsDict']]]]] = None,
                 fips_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 ha_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 use_default_route_for_dns_relay: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgegatewayArgs.__new__(EdgegatewayArgs)

            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["description"] = description
            __props__.__dict__["distributed_routing"] = distributed_routing
            if external_networks is None and not opts.urn:
                raise TypeError("Missing required property 'external_networks'")
            __props__.__dict__["external_networks"] = external_networks
            __props__.__dict__["fips_mode_enabled"] = fips_mode_enabled
            __props__.__dict__["fw_default_rule_action"] = fw_default_rule_action
            __props__.__dict__["fw_default_rule_logging_enabled"] = fw_default_rule_logging_enabled
            __props__.__dict__["fw_enabled"] = fw_enabled
            __props__.__dict__["ha_enabled"] = ha_enabled
            __props__.__dict__["lb_acceleration_enabled"] = lb_acceleration_enabled
            __props__.__dict__["lb_enabled"] = lb_enabled
            __props__.__dict__["lb_logging_enabled"] = lb_logging_enabled
            __props__.__dict__["lb_loglevel"] = lb_loglevel
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["use_default_route_for_dns_relay"] = use_default_route_for_dns_relay
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["default_external_network_ip"] = None
            __props__.__dict__["external_network_ips"] = None
        super(Edgegateway, __self__).__init__(
            'vcd:index/edgegateway:Edgegateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration: Optional[pulumi.Input[str]] = None,
            default_external_network_ip: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            distributed_routing: Optional[pulumi.Input[bool]] = None,
            external_network_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayExternalNetworkArgs', 'EdgegatewayExternalNetworkArgsDict']]]]] = None,
            fips_mode_enabled: Optional[pulumi.Input[bool]] = None,
            fw_default_rule_action: Optional[pulumi.Input[str]] = None,
            fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
            fw_enabled: Optional[pulumi.Input[bool]] = None,
            ha_enabled: Optional[pulumi.Input[bool]] = None,
            lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
            lb_enabled: Optional[pulumi.Input[bool]] = None,
            lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
            lb_loglevel: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            use_default_route_for_dns_relay: Optional[pulumi.Input[bool]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'Edgegateway':
        """
        Get an existing Edgegateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configuration: Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        :param pulumi.Input[str] default_external_network_ip: (*v2.6+*) - IP address of edge gateway used for default network
        :param pulumi.Input[bool] distributed_routing: If advanced networking enabled, also enable distributed
               routing. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_network_ips: (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
               connected to external networks.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayExternalNetworkArgs', 'EdgegatewayExternalNetworkArgsDict']]]] external_networks: One or more blocks defining external networks, their
               subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
               in external network block below.
        :param pulumi.Input[bool] fips_mode_enabled: When FIPS mode is enabled, any secure communication to or from
               the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
               Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
               FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        :param pulumi.Input[str] fw_default_rule_action: Default firewall rule (last in the processing order) action.
               One of `accept` or `deny`. Default `deny`.
               
               <a id="external-network"></a>
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable default firewall rule (last in the processing 
               order) logging. Default `false`.
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default `true`. **Note:** Disabling Firewall will also
               disable NAT and other NAT dependent features like Load Balancer.
        :param pulumi.Input[bool] ha_enabled: Enable high availability on this edge gateway. Default is `false`.
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable to configure the load balancer to use the faster L4
               engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
               `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
               processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
               rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
               selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
               that the firewall is enabled on the edge gateway.
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. Default is `false`.
        :param pulumi.Input[bool] lb_logging_enabled: Enables the edge gateway load balancer to collect traffic logs.
               Default is `false`.
        :param pulumi.Input[str] lb_loglevel: Choose the severity of events to be logged. One of `emergency`,
               `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[bool] use_default_route_for_dns_relay: When default route is set, it will be used for
               gateways' default routing and DNS forwarding. Default is `false`.
        :param pulumi.Input[str] vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgegatewayState.__new__(_EdgegatewayState)

        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["default_external_network_ip"] = default_external_network_ip
        __props__.__dict__["description"] = description
        __props__.__dict__["distributed_routing"] = distributed_routing
        __props__.__dict__["external_network_ips"] = external_network_ips
        __props__.__dict__["external_networks"] = external_networks
        __props__.__dict__["fips_mode_enabled"] = fips_mode_enabled
        __props__.__dict__["fw_default_rule_action"] = fw_default_rule_action
        __props__.__dict__["fw_default_rule_logging_enabled"] = fw_default_rule_logging_enabled
        __props__.__dict__["fw_enabled"] = fw_enabled
        __props__.__dict__["ha_enabled"] = ha_enabled
        __props__.__dict__["lb_acceleration_enabled"] = lb_acceleration_enabled
        __props__.__dict__["lb_enabled"] = lb_enabled
        __props__.__dict__["lb_logging_enabled"] = lb_logging_enabled
        __props__.__dict__["lb_loglevel"] = lb_loglevel
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["use_default_route_for_dns_relay"] = use_default_route_for_dns_relay
        __props__.__dict__["vdc"] = vdc
        return Edgegateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[str]:
        """
        Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="defaultExternalNetworkIp")
    def default_external_network_ip(self) -> pulumi.Output[str]:
        """
        (*v2.6+*) - IP address of edge gateway used for default network
        """
        return pulumi.get(self, "default_external_network_ip")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributedRouting")
    def distributed_routing(self) -> pulumi.Output[Optional[bool]]:
        """
        If advanced networking enabled, also enable distributed
        routing. Default is `false`.
        """
        return pulumi.get(self, "distributed_routing")

    @property
    @pulumi.getter(name="externalNetworkIps")
    def external_network_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
        connected to external networks.
        """
        return pulumi.get(self, "external_network_ips")

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> pulumi.Output[Sequence['outputs.EdgegatewayExternalNetwork']]:
        """
        One or more blocks defining external networks, their
        subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
        in external network block below.
        """
        return pulumi.get(self, "external_networks")

    @property
    @pulumi.getter(name="fipsModeEnabled")
    def fips_mode_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        When FIPS mode is enabled, any secure communication to or from
        the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
        Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
        FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
        """
        return pulumi.get(self, "fips_mode_enabled")

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> pulumi.Output[Optional[str]]:
        """
        Default firewall rule (last in the processing order) action.
        One of `accept` or `deny`. Default `deny`.

        <a id="external-network"></a>
        """
        return pulumi.get(self, "fw_default_rule_action")

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable default firewall rule (last in the processing 
        order) logging. Default `false`.
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable firewall. Default `true`. **Note:** Disabling Firewall will also
        disable NAT and other NAT dependent features like Load Balancer.
        """
        return pulumi.get(self, "fw_enabled")

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable high availability on this edge gateway. Default is `false`.
        """
        return pulumi.get(self, "ha_enabled")

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable to configure the load balancer to use the faster L4
        engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
        `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
        processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
        rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
        selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
        that the firewall is enabled on the edge gateway.
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable load balancing. Default is `false`.
        """
        return pulumi.get(self, "lb_enabled")

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables the edge gateway load balancer to collect traffic logs.
        Default is `false`.
        """
        return pulumi.get(self, "lb_logging_enabled")

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> pulumi.Output[Optional[str]]:
        """
        Choose the severity of events to be logged. One of `emergency`,
        `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
        """
        return pulumi.get(self, "lb_loglevel")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="useDefaultRouteForDnsRelay")
    def use_default_route_for_dns_relay(self) -> pulumi.Output[bool]:
        """
        When default route is set, it will be used for
        gateways' default routing and DNS forwarding. Default is `false`.
        """
        return pulumi.get(self, "use_default_route_for_dns_relay")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC that owns the edge gateway. Optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

