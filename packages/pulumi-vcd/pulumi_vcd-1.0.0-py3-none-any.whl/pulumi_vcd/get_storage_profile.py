# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetStorageProfileResult',
    'AwaitableGetStorageProfileResult',
    'get_storage_profile',
    'get_storage_profile_output',
]

@pulumi.output_type
class GetStorageProfileResult:
    """
    A collection of values returned by getStorageProfile.
    """
    def __init__(__self__, default=None, enabled=None, id=None, iops_allocated=None, iops_settings=None, limit=None, metadata=None, metadata_entries=None, name=None, org=None, units=None, used_storage=None, vdc=None):
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iops_allocated and not isinstance(iops_allocated, int):
            raise TypeError("Expected argument 'iops_allocated' to be a int")
        pulumi.set(__self__, "iops_allocated", iops_allocated)
        if iops_settings and not isinstance(iops_settings, list):
            raise TypeError("Expected argument 'iops_settings' to be a list")
        pulumi.set(__self__, "iops_settings", iops_settings)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if units and not isinstance(units, str):
            raise TypeError("Expected argument 'units' to be a str")
        pulumi.set(__self__, "units", units)
        if used_storage and not isinstance(used_storage, int):
            raise TypeError("Expected argument 'used_storage' to be a int")
        pulumi.set(__self__, "used_storage", used_storage)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if this storage profile is enabled for use in the VDC
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iopsAllocated")
    def iops_allocated(self) -> int:
        """
        Total IOPS currently allocated to this storage profile
        """
        return pulumi.get(self, "iops_allocated")

    @property
    @pulumi.getter(name="iopsSettings")
    def iops_settings(self) -> Sequence['outputs.GetStorageProfileIopsSettingResult']:
        """
        A block providing IOPS settings. See IOPS settings below for details.
        """
        return pulumi.get(self, "iops_settings")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of storage bytes (scaled by 'units' field) allocated for this profile. `0` means `maximum possible`
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetStorageProfileMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def units(self) -> str:
        """
        Scale used to define Limit
        """
        return pulumi.get(self, "units")

    @property
    @pulumi.getter(name="usedStorage")
    def used_storage(self) -> int:
        """
        Storage used, by the storage profile (in Megabytes)
        """
        return pulumi.get(self, "used_storage")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetStorageProfileResult(GetStorageProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStorageProfileResult(
            default=self.default,
            enabled=self.enabled,
            id=self.id,
            iops_allocated=self.iops_allocated,
            iops_settings=self.iops_settings,
            limit=self.limit,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            units=self.units,
            used_storage=self.used_storage,
            vdc=self.vdc)


def get_storage_profile(name: Optional[str] = None,
                        org: Optional[str] = None,
                        vdc: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStorageProfileResult:
    """
    Provides a data source for VDC storage profile.

    Supported in provider *v3.1+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    sp = vcd.get_storage_profile(org="my-org",
        vdc="my-vdc",
        name="ssd-storage-profile")
    ```

    ## IOPS settings

    (Supported from VCD *v10.2*)

    * `iops_limiting_enabled` - True if this storage profile is IOPS-based placement enabled
    * `maximum_disk_iops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
    * `default_disk_iops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
    * `disk_iops_per_gb_max` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
    * `iops_limit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`


    :param str name: Storage profile name.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getStorageProfile:getStorageProfile', __args__, opts=opts, typ=GetStorageProfileResult).value

    return AwaitableGetStorageProfileResult(
        default=pulumi.get(__ret__, 'default'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        iops_allocated=pulumi.get(__ret__, 'iops_allocated'),
        iops_settings=pulumi.get(__ret__, 'iops_settings'),
        limit=pulumi.get(__ret__, 'limit'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        units=pulumi.get(__ret__, 'units'),
        used_storage=pulumi.get(__ret__, 'used_storage'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_storage_profile_output(name: Optional[pulumi.Input[str]] = None,
                               org: Optional[pulumi.Input[Optional[str]]] = None,
                               vdc: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStorageProfileResult]:
    """
    Provides a data source for VDC storage profile.

    Supported in provider *v3.1+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    sp = vcd.get_storage_profile(org="my-org",
        vdc="my-vdc",
        name="ssd-storage-profile")
    ```

    ## IOPS settings

    (Supported from VCD *v10.2*)

    * `iops_limiting_enabled` - True if this storage profile is IOPS-based placement enabled
    * `maximum_disk_iops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
    * `default_disk_iops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
    * `disk_iops_per_gb_max` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
    * `iops_limit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`


    :param str name: Storage profile name.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getStorageProfile:getStorageProfile', __args__, opts=opts, typ=GetStorageProfileResult)
    return __ret__.apply(lambda __response__: GetStorageProfileResult(
        default=pulumi.get(__response__, 'default'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        iops_allocated=pulumi.get(__response__, 'iops_allocated'),
        iops_settings=pulumi.get(__response__, 'iops_settings'),
        limit=pulumi.get(__response__, 'limit'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        units=pulumi.get(__response__, 'units'),
        used_storage=pulumi.get(__response__, 'used_storage'),
        vdc=pulumi.get(__response__, 'vdc')))
