# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtSegmentSpoofGuardProfileResult',
    'AwaitableGetNsxtSegmentSpoofGuardProfileResult',
    'get_nsxt_segment_spoof_guard_profile',
    'get_nsxt_segment_spoof_guard_profile_output',
]

@pulumi.output_type
class GetNsxtSegmentSpoofGuardProfileResult:
    """
    A collection of values returned by getNsxtSegmentSpoofGuardProfile.
    """
    def __init__(__self__, description=None, id=None, is_address_binding_whitelist_enabled=None, name=None, nsxt_manager_id=None, vdc_group_id=None, vdc_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_address_binding_whitelist_enabled and not isinstance(is_address_binding_whitelist_enabled, bool):
            raise TypeError("Expected argument 'is_address_binding_whitelist_enabled' to be a bool")
        pulumi.set(__self__, "is_address_binding_whitelist_enabled", is_address_binding_whitelist_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of Spoof Guard profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAddressBindingWhitelistEnabled")
    def is_address_binding_whitelist_enabled(self) -> bool:
        """
        Whether Spoof Guard is enabled. If true, it only allows
        VM sending traffic with the IPs in the whitelist
        """
        return pulumi.get(self, "is_address_binding_whitelist_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtSegmentSpoofGuardProfileResult(GetNsxtSegmentSpoofGuardProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtSegmentSpoofGuardProfileResult(
            description=self.description,
            id=self.id,
            is_address_binding_whitelist_enabled=self.is_address_binding_whitelist_enabled,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_segment_spoof_guard_profile(name: Optional[str] = None,
                                         nsxt_manager_id: Optional[str] = None,
                                         vdc_group_id: Optional[str] = None,
                                         vdc_id: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtSegmentSpoofGuardProfileResult:
    """
    Provides a VMware Cloud Director Spoof Guard Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### IP Discovery Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_spoof_guard_profile(name="spoof-guard-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtSegmentSpoofGuardProfile:getNsxtSegmentSpoofGuardProfile', __args__, opts=opts, typ=GetNsxtSegmentSpoofGuardProfileResult).value

    return AwaitableGetNsxtSegmentSpoofGuardProfileResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_address_binding_whitelist_enabled=pulumi.get(__ret__, 'is_address_binding_whitelist_enabled'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxt_segment_spoof_guard_profile_output(name: Optional[pulumi.Input[str]] = None,
                                                nsxt_manager_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtSegmentSpoofGuardProfileResult]:
    """
    Provides a VMware Cloud Director Spoof Guard Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### IP Discovery Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_spoof_guard_profile(name="spoof-guard-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtSegmentSpoofGuardProfile:getNsxtSegmentSpoofGuardProfile', __args__, opts=opts, typ=GetNsxtSegmentSpoofGuardProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtSegmentSpoofGuardProfileResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        is_address_binding_whitelist_enabled=pulumi.get(__response__, 'is_address_binding_whitelist_enabled'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
