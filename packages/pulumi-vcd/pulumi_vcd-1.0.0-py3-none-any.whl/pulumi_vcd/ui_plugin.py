# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['UiPluginArgs', 'UiPlugin']

@pulumi.input_type
class UiPluginArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 plugin_path: Optional[pulumi.Input[str]] = None,
                 provider_scoped: Optional[pulumi.Input[bool]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_scoped: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a UiPlugin resource.
        :param pulumi.Input[bool] enabled: Whether the UI Plugin will be enabled (`true`) or not (`false`)
        :param pulumi.Input[str] plugin_path: Path to a .zip file that contains the bundled UI Plugin
        :param pulumi.Input[bool] provider_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
               that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        :param pulumi.Input[bool] tenant_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
               unwanted updates-in-place.
        """
        pulumi.set(__self__, "enabled", enabled)
        if plugin_path is not None:
            pulumi.set(__self__, "plugin_path", plugin_path)
        if provider_scoped is not None:
            pulumi.set(__self__, "provider_scoped", provider_scoped)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)
        if tenant_scoped is not None:
            pulumi.set(__self__, "tenant_scoped", tenant_scoped)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the UI Plugin will be enabled (`true`) or not (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="pluginPath")
    def plugin_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to a .zip file that contains the bundled UI Plugin
        """
        return pulumi.get(self, "plugin_path")

    @plugin_path.setter
    def plugin_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_path", value)

    @property
    @pulumi.getter(name="providerScoped")
    def provider_scoped(self) -> Optional[pulumi.Input[bool]]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "provider_scoped")

    @provider_scoped.setter
    def provider_scoped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provider_scoped", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
        that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        """
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)

    @property
    @pulumi.getter(name="tenantScoped")
    def tenant_scoped(self) -> Optional[pulumi.Input[bool]]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "tenant_scoped")

    @tenant_scoped.setter
    def tenant_scoped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tenant_scoped", value)


@pulumi.input_type
class _UiPluginState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugin_path: Optional[pulumi.Input[str]] = None,
                 provider_scoped: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_scoped: Optional[pulumi.Input[bool]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UiPlugin resources.
        :param pulumi.Input[str] description: The description of the UI Plugin
        :param pulumi.Input[bool] enabled: Whether the UI Plugin will be enabled (`true`) or not (`false`)
        :param pulumi.Input[str] license: The license of the UI Plugin
        :param pulumi.Input[str] link: The website or custom URL of the UI Plugin
        :param pulumi.Input[str] name: The name of the UI Plugin
        :param pulumi.Input[str] plugin_path: Path to a .zip file that contains the bundled UI Plugin
        :param pulumi.Input[bool] provider_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[str] status: The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
               that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        :param pulumi.Input[bool] tenant_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[str] vendor: The vendor of the UI Plugin
        :param pulumi.Input[str] version: The version of the UI Plugin
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_path is not None:
            pulumi.set(__self__, "plugin_path", plugin_path)
        if provider_scoped is not None:
            pulumi.set(__self__, "provider_scoped", provider_scoped)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)
        if tenant_scoped is not None:
            pulumi.set(__self__, "tenant_scoped", tenant_scoped)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the UI Plugin
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the UI Plugin will be enabled (`true`) or not (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        The license of the UI Plugin
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The website or custom URL of the UI Plugin
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the UI Plugin
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pluginPath")
    def plugin_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to a .zip file that contains the bundled UI Plugin
        """
        return pulumi.get(self, "plugin_path")

    @plugin_path.setter
    def plugin_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_path", value)

    @property
    @pulumi.getter(name="providerScoped")
    def provider_scoped(self) -> Optional[pulumi.Input[bool]]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "provider_scoped")

    @provider_scoped.setter
    def provider_scoped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provider_scoped", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
        that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        """
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)

    @property
    @pulumi.getter(name="tenantScoped")
    def tenant_scoped(self) -> Optional[pulumi.Input[bool]]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "tenant_scoped")

    @tenant_scoped.setter
    def tenant_scoped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tenant_scoped", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        The vendor of the UI Plugin
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the UI Plugin
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class UiPlugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 plugin_path: Optional[pulumi.Input[str]] = None,
                 provider_scoped: Optional[pulumi.Input[bool]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_scoped: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a UiPlugin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Whether the UI Plugin will be enabled (`true`) or not (`false`)
        :param pulumi.Input[str] plugin_path: Path to a .zip file that contains the bundled UI Plugin
        :param pulumi.Input[bool] provider_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
               that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        :param pulumi.Input[bool] tenant_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
               unwanted updates-in-place.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UiPluginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UiPlugin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UiPluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UiPluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 plugin_path: Optional[pulumi.Input[str]] = None,
                 provider_scoped: Optional[pulumi.Input[bool]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_scoped: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UiPluginArgs.__new__(UiPluginArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["plugin_path"] = plugin_path
            __props__.__dict__["provider_scoped"] = provider_scoped
            __props__.__dict__["tenant_ids"] = tenant_ids
            __props__.__dict__["tenant_scoped"] = tenant_scoped
            __props__.__dict__["description"] = None
            __props__.__dict__["license"] = None
            __props__.__dict__["link"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vendor"] = None
            __props__.__dict__["version"] = None
        super(UiPlugin, __self__).__init__(
            'vcd:index/uiPlugin:UiPlugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            license: Optional[pulumi.Input[str]] = None,
            link: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            plugin_path: Optional[pulumi.Input[str]] = None,
            provider_scoped: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_scoped: Optional[pulumi.Input[bool]] = None,
            vendor: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'UiPlugin':
        """
        Get an existing UiPlugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the UI Plugin
        :param pulumi.Input[bool] enabled: Whether the UI Plugin will be enabled (`true`) or not (`false`)
        :param pulumi.Input[str] license: The license of the UI Plugin
        :param pulumi.Input[str] link: The website or custom URL of the UI Plugin
        :param pulumi.Input[str] name: The name of the UI Plugin
        :param pulumi.Input[str] plugin_path: Path to a .zip file that contains the bundled UI Plugin
        :param pulumi.Input[bool] provider_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[str] status: The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
               that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        :param pulumi.Input[bool] tenant_scoped: **Can only be set on updates**, the initial value is taken from the JSON manifest.
               Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
               unwanted updates-in-place.
        :param pulumi.Input[str] vendor: The vendor of the UI Plugin
        :param pulumi.Input[str] version: The version of the UI Plugin
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UiPluginState.__new__(_UiPluginState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["license"] = license
        __props__.__dict__["link"] = link
        __props__.__dict__["name"] = name
        __props__.__dict__["plugin_path"] = plugin_path
        __props__.__dict__["provider_scoped"] = provider_scoped
        __props__.__dict__["status"] = status
        __props__.__dict__["tenant_ids"] = tenant_ids
        __props__.__dict__["tenant_scoped"] = tenant_scoped
        __props__.__dict__["vendor"] = vendor
        __props__.__dict__["version"] = version
        return UiPlugin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the UI Plugin
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the UI Plugin will be enabled (`true`) or not (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[str]:
        """
        The license of the UI Plugin
        """
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def link(self) -> pulumi.Output[str]:
        """
        The website or custom URL of the UI Plugin
        """
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the UI Plugin
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginPath")
    def plugin_path(self) -> pulumi.Output[Optional[str]]:
        """
        Path to a .zip file that contains the bundled UI Plugin
        """
        return pulumi.get(self, "plugin_path")

    @property
    @pulumi.getter(name="providerScoped")
    def provider_scoped(self) -> pulumi.Output[bool]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "provider_scoped")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
        that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
        """
        return pulumi.get(self, "tenant_ids")

    @property
    @pulumi.getter(name="tenantScoped")
    def tenant_scoped(self) -> pulumi.Output[bool]:
        """
        **Can only be set on updates**, the initial value is taken from the JSON manifest.
        Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
        unwanted updates-in-place.
        """
        return pulumi.get(self, "tenant_scoped")

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Output[str]:
        """
        The vendor of the UI Plugin
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the UI Plugin
        """
        return pulumi.get(self, "version")

