# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CatalogArgs', 'Catalog']

@pulumi.input_type
class CatalogArgs:
    def __init__(__self__, *,
                 cache_enabled: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preserve_identity_information: Optional[pulumi.Input[bool]] = None,
                 publish_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Catalog resource.
        :param pulumi.Input[bool] cache_enabled: Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        :param pulumi.Input[str] description: Description of catalog
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign.
        :param pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
               When using a catalog shared from another organization, this field must have the name of that one, not the current one.
               If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        :param pulumi.Input[str] password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        :param pulumi.Input[bool] preserve_identity_information: Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        :param pulumi.Input[bool] publish_enabled: Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog. **Note.** Data
               source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        """
        if cache_enabled is not None:
            pulumi.set(__self__, "cache_enabled", cache_enabled)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preserve_identity_information is not None:
            pulumi.set(__self__, "preserve_identity_information", preserve_identity_information)
        if publish_enabled is not None:
            pulumi.set(__self__, "publish_enabled", publish_enabled)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)

    @property
    @pulumi.getter(name="cacheEnabled")
    def cache_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        """
        return pulumi.get(self, "cache_enabled")

    @cache_enabled.setter
    def cache_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_enabled", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of catalog
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="preserveIdentityInformation")
    def preserve_identity_information(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        """
        return pulumi.get(self, "preserve_identity_information")

    @preserve_identity_information.setter
    def preserve_identity_information(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_identity_information", value)

    @property
    @pulumi.getter(name="publishEnabled")
    def publish_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        """
        return pulumi.get(self, "publish_enabled")

    @publish_enabled.setter
    def publish_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_enabled", value)

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to set specific storage profile to be used for catalog. **Note.** Data
        source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        """
        return pulumi.get(self, "storage_profile_id")

    @storage_profile_id.setter
    def storage_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_id", value)


@pulumi.input_type
class _CatalogState:
    def __init__(__self__, *,
                 cache_enabled: Optional[pulumi.Input[bool]] = None,
                 catalog_version: Optional[pulumi.Input[int]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 is_local: Optional[pulumi.Input[bool]] = None,
                 is_published: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 media_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_media: Optional[pulumi.Input[int]] = None,
                 number_of_vapp_templates: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preserve_identity_information: Optional[pulumi.Input[bool]] = None,
                 publish_enabled: Optional[pulumi.Input[bool]] = None,
                 publish_subscription_type: Optional[pulumi.Input[str]] = None,
                 publish_subscription_url: Optional[pulumi.Input[str]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 vapp_template_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Catalog resources.
        :param pulumi.Input[bool] cache_enabled: Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        :param pulumi.Input[int] catalog_version: (*v3.6+*) Version number from this catalog.
        :param pulumi.Input[str] created: (*v3.6+*) Date and time of catalog creation
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        :param pulumi.Input[str] description: Description of catalog
        :param pulumi.Input[str] href: Catalog HREF
        :param pulumi.Input[bool] is_local: (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        :param pulumi.Input[bool] is_published: (*v3.6+*) Indicates if this catalog is shared to all organizations.
        :param pulumi.Input[bool] is_shared: (*v3.6+*) Indicates if the catalog is shared.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] media_item_lists: (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign.
        :param pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[int] number_of_media: (*v3.6+*) Number of media items available in this catalog.
        :param pulumi.Input[int] number_of_vapp_templates: (*v3.6+*) Number of vApp templates available in this catalog.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
               When using a catalog shared from another organization, this field must have the name of that one, not the current one.
               If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        :param pulumi.Input[str] owner_name: (*v3.6+*) Owner of the catalog.
        :param pulumi.Input[str] password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        :param pulumi.Input[bool] preserve_identity_information: Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        :param pulumi.Input[bool] publish_enabled: Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        :param pulumi.Input[str] publish_subscription_type: (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        :param pulumi.Input[str] publish_subscription_url: (*v3.8+*) URL to which other catalogs can subscribe.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog. **Note.** Data
               source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_template_lists: (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        """
        if cache_enabled is not None:
            pulumi.set(__self__, "cache_enabled", cache_enabled)
        if catalog_version is not None:
            pulumi.set(__self__, "catalog_version", catalog_version)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_local is not None:
            pulumi.set(__self__, "is_local", is_local)
        if is_published is not None:
            pulumi.set(__self__, "is_published", is_published)
        if is_shared is not None:
            pulumi.set(__self__, "is_shared", is_shared)
        if media_item_lists is not None:
            pulumi.set(__self__, "media_item_lists", media_item_lists)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_media is not None:
            pulumi.set(__self__, "number_of_media", number_of_media)
        if number_of_vapp_templates is not None:
            pulumi.set(__self__, "number_of_vapp_templates", number_of_vapp_templates)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_name is not None:
            pulumi.set(__self__, "owner_name", owner_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preserve_identity_information is not None:
            pulumi.set(__self__, "preserve_identity_information", preserve_identity_information)
        if publish_enabled is not None:
            pulumi.set(__self__, "publish_enabled", publish_enabled)
        if publish_subscription_type is not None:
            pulumi.set(__self__, "publish_subscription_type", publish_subscription_type)
        if publish_subscription_url is not None:
            pulumi.set(__self__, "publish_subscription_url", publish_subscription_url)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if vapp_template_lists is not None:
            pulumi.set(__self__, "vapp_template_lists", vapp_template_lists)

    @property
    @pulumi.getter(name="cacheEnabled")
    def cache_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        """
        return pulumi.get(self, "cache_enabled")

    @cache_enabled.setter
    def cache_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_enabled", value)

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> Optional[pulumi.Input[int]]:
        """
        (*v3.6+*) Version number from this catalog.
        """
        return pulumi.get(self, "catalog_version")

    @catalog_version.setter
    def catalog_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "catalog_version", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        (*v3.6+*) Date and time of catalog creation
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of catalog
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog HREF
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> Optional[pulumi.Input[bool]]:
        """
        (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        """
        return pulumi.get(self, "is_local")

    @is_local.setter
    def is_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_local", value)

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> Optional[pulumi.Input[bool]]:
        """
        (*v3.6+*) Indicates if this catalog is shared to all organizations.
        """
        return pulumi.get(self, "is_published")

    @is_published.setter
    def is_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_published", value)

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> Optional[pulumi.Input[bool]]:
        """
        (*v3.6+*) Indicates if the catalog is shared.
        """
        return pulumi.get(self, "is_shared")

    @is_shared.setter
    def is_shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_shared", value)

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "media_item_lists")

    @media_item_lists.setter
    def media_item_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "media_item_lists", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> Optional[pulumi.Input[int]]:
        """
        (*v3.6+*) Number of media items available in this catalog.
        """
        return pulumi.get(self, "number_of_media")

    @number_of_media.setter
    def number_of_media(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_media", value)

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> Optional[pulumi.Input[int]]:
        """
        (*v3.6+*) Number of vApp templates available in this catalog.
        """
        return pulumi.get(self, "number_of_vapp_templates")

    @number_of_vapp_templates.setter
    def number_of_vapp_templates(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_vapp_templates", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> Optional[pulumi.Input[str]]:
        """
        (*v3.6+*) Owner of the catalog.
        """
        return pulumi.get(self, "owner_name")

    @owner_name.setter
    def owner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="preserveIdentityInformation")
    def preserve_identity_information(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        """
        return pulumi.get(self, "preserve_identity_information")

    @preserve_identity_information.setter
    def preserve_identity_information(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_identity_information", value)

    @property
    @pulumi.getter(name="publishEnabled")
    def publish_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        """
        return pulumi.get(self, "publish_enabled")

    @publish_enabled.setter
    def publish_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_enabled", value)

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> Optional[pulumi.Input[str]]:
        """
        (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        """
        return pulumi.get(self, "publish_subscription_type")

    @publish_subscription_type.setter
    def publish_subscription_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_subscription_type", value)

    @property
    @pulumi.getter(name="publishSubscriptionUrl")
    def publish_subscription_url(self) -> Optional[pulumi.Input[str]]:
        """
        (*v3.8+*) URL to which other catalogs can subscribe.
        """
        return pulumi.get(self, "publish_subscription_url")

    @publish_subscription_url.setter
    def publish_subscription_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_subscription_url", value)

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to set specific storage profile to be used for catalog. **Note.** Data
        source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        """
        return pulumi.get(self, "storage_profile_id")

    @storage_profile_id.setter
    def storage_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_id", value)

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "vapp_template_lists")

    @vapp_template_lists.setter
    def vapp_template_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_template_lists", value)


class Catalog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_enabled: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMetadataEntryArgs', 'CatalogMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preserve_identity_information: Optional[pulumi.Input[bool]] = None,
                 publish_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Catalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cache_enabled: Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        :param pulumi.Input[str] description: Description of catalog
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogMetadataEntryArgs', 'CatalogMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
               When using a catalog shared from another organization, this field must have the name of that one, not the current one.
               If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        :param pulumi.Input[str] password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        :param pulumi.Input[bool] preserve_identity_information: Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        :param pulumi.Input[bool] publish_enabled: Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog. **Note.** Data
               source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CatalogArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Catalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CatalogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatalogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_enabled: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMetadataEntryArgs', 'CatalogMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preserve_identity_information: Optional[pulumi.Input[bool]] = None,
                 publish_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatalogArgs.__new__(CatalogArgs)

            __props__.__dict__["cache_enabled"] = cache_enabled
            __props__.__dict__["delete_force"] = delete_force
            __props__.__dict__["delete_recursive"] = delete_recursive
            __props__.__dict__["description"] = description
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["preserve_identity_information"] = preserve_identity_information
            __props__.__dict__["publish_enabled"] = publish_enabled
            __props__.__dict__["storage_profile_id"] = storage_profile_id
            __props__.__dict__["catalog_version"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_local"] = None
            __props__.__dict__["is_published"] = None
            __props__.__dict__["is_shared"] = None
            __props__.__dict__["media_item_lists"] = None
            __props__.__dict__["number_of_media"] = None
            __props__.__dict__["number_of_vapp_templates"] = None
            __props__.__dict__["owner_name"] = None
            __props__.__dict__["publish_subscription_type"] = None
            __props__.__dict__["publish_subscription_url"] = None
            __props__.__dict__["vapp_template_lists"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Catalog, __self__).__init__(
            'vcd:index/catalog:Catalog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_enabled: Optional[pulumi.Input[bool]] = None,
            catalog_version: Optional[pulumi.Input[int]] = None,
            created: Optional[pulumi.Input[str]] = None,
            delete_force: Optional[pulumi.Input[bool]] = None,
            delete_recursive: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            is_local: Optional[pulumi.Input[bool]] = None,
            is_published: Optional[pulumi.Input[bool]] = None,
            is_shared: Optional[pulumi.Input[bool]] = None,
            media_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMetadataEntryArgs', 'CatalogMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            number_of_media: Optional[pulumi.Input[int]] = None,
            number_of_vapp_templates: Optional[pulumi.Input[int]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            preserve_identity_information: Optional[pulumi.Input[bool]] = None,
            publish_enabled: Optional[pulumi.Input[bool]] = None,
            publish_subscription_type: Optional[pulumi.Input[str]] = None,
            publish_subscription_url: Optional[pulumi.Input[str]] = None,
            storage_profile_id: Optional[pulumi.Input[str]] = None,
            vapp_template_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Catalog':
        """
        Get an existing Catalog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cache_enabled: Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        :param pulumi.Input[int] catalog_version: (*v3.6+*) Version number from this catalog.
        :param pulumi.Input[str] created: (*v3.6+*) Date and time of catalog creation
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        :param pulumi.Input[str] description: Description of catalog
        :param pulumi.Input[str] href: Catalog HREF
        :param pulumi.Input[bool] is_local: (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        :param pulumi.Input[bool] is_published: (*v3.6+*) Indicates if this catalog is shared to all organizations.
        :param pulumi.Input[bool] is_shared: (*v3.6+*) Indicates if the catalog is shared.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] media_item_lists: (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogMetadataEntryArgs', 'CatalogMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[int] number_of_media: (*v3.6+*) Number of media items available in this catalog.
        :param pulumi.Input[int] number_of_vapp_templates: (*v3.6+*) Number of vApp templates available in this catalog.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
               When using a catalog shared from another organization, this field must have the name of that one, not the current one.
               If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        :param pulumi.Input[str] owner_name: (*v3.6+*) Owner of the catalog.
        :param pulumi.Input[str] password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        :param pulumi.Input[bool] preserve_identity_information: Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        :param pulumi.Input[bool] publish_enabled: Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        :param pulumi.Input[str] publish_subscription_type: (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        :param pulumi.Input[str] publish_subscription_url: (*v3.8+*) URL to which other catalogs can subscribe.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog. **Note.** Data
               source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_template_lists: (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CatalogState.__new__(_CatalogState)

        __props__.__dict__["cache_enabled"] = cache_enabled
        __props__.__dict__["catalog_version"] = catalog_version
        __props__.__dict__["created"] = created
        __props__.__dict__["delete_force"] = delete_force
        __props__.__dict__["delete_recursive"] = delete_recursive
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["is_local"] = is_local
        __props__.__dict__["is_published"] = is_published
        __props__.__dict__["is_shared"] = is_shared
        __props__.__dict__["media_item_lists"] = media_item_lists
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["number_of_media"] = number_of_media
        __props__.__dict__["number_of_vapp_templates"] = number_of_vapp_templates
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_name"] = owner_name
        __props__.__dict__["password"] = password
        __props__.__dict__["preserve_identity_information"] = preserve_identity_information
        __props__.__dict__["publish_enabled"] = publish_enabled
        __props__.__dict__["publish_subscription_type"] = publish_subscription_type
        __props__.__dict__["publish_subscription_url"] = publish_subscription_url
        __props__.__dict__["storage_profile_id"] = storage_profile_id
        __props__.__dict__["vapp_template_lists"] = vapp_template_lists
        return Catalog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheEnabled")
    def cache_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        """
        return pulumi.get(self, "cache_enabled")

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> pulumi.Output[int]:
        """
        (*v3.6+*) Version number from this catalog.
        """
        return pulumi.get(self, "catalog_version")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        (*v3.6+*) Date and time of catalog creation
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Output[Optional[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        """
        return pulumi.get(self, "delete_force")

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Output[Optional[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        """
        return pulumi.get(self, "delete_recursive")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of catalog
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Catalog HREF
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> pulumi.Output[bool]:
        """
        (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        """
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> pulumi.Output[bool]:
        """
        (*v3.6+*) Indicates if this catalog is shared to all organizations.
        """
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> pulumi.Output[bool]:
        """
        (*v3.6+*) Indicates if the catalog is shared.
        """
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "media_item_lists")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.CatalogMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> pulumi.Output[int]:
        """
        (*v3.6+*) Number of media items available in this catalog.
        """
        return pulumi.get(self, "number_of_media")

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> pulumi.Output[int]:
        """
        (*v3.6+*) Number of vApp templates available in this catalog.
        """
        return pulumi.get(self, "number_of_vapp_templates")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> pulumi.Output[str]:
        """
        (*v3.6+*) Owner of the catalog.
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="preserveIdentityInformation")
    def preserve_identity_information(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        """
        return pulumi.get(self, "preserve_identity_information")

    @property
    @pulumi.getter(name="publishEnabled")
    def publish_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        """
        return pulumi.get(self, "publish_enabled")

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> pulumi.Output[str]:
        """
        (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        """
        return pulumi.get(self, "publish_subscription_type")

    @property
    @pulumi.getter(name="publishSubscriptionUrl")
    def publish_subscription_url(self) -> pulumi.Output[str]:
        """
        (*v3.8+*) URL to which other catalogs can subscribe.
        """
        return pulumi.get(self, "publish_subscription_url")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> pulumi.Output[Optional[str]]:
        """
        Allows to set specific storage profile to be used for catalog. **Note.** Data
        source [get_storage_profile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        """
        return pulumi.get(self, "storage_profile_id")

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "vapp_template_lists")

