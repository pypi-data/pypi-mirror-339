# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SolutionAddOnInstanceArgs', 'SolutionAddOnInstance']

@pulumi.input_type
class SolutionAddOnInstanceArgs:
    def __init__(__self__, *,
                 accept_eula: pulumi.Input[bool],
                 add_on_id: pulumi.Input[str],
                 delete_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 validate_only_required_inputs: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SolutionAddOnInstance resource.
        :param pulumi.Input[bool] accept_eula: Solution Add-On Instance cannot be create if EULA is not accepted.
               Supplying a `false` value will print EULA.
        :param pulumi.Input[str] add_on_id: Existing Solution Add-On ID
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] delete_input: Just like `input` field for creation, it is a map of keys and values
               as required for removal of a particular Solution Add-On. It will require all values that are
               specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
               a value will print an error message with all field descriptions and missing value. Update is a no-op
               operation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] input: A map of keys and values as required for a particular Solution Add-On
               Instance. It will require all values that are specified in a particular Add-On schema unless
               `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
               field descriptions and missing value.
        :param pulumi.Input[str] name: Name of Solution Add-On Instance
        :param pulumi.Input[bool] validate_only_required_inputs: By default (`false`) will check that all fields are
               defined in `input` and `delete_input` fields. It will only validate fields that are marked as
               required when set to `true`. Update is a noop that will affect further operation.
        """
        pulumi.set(__self__, "accept_eula", accept_eula)
        pulumi.set(__self__, "add_on_id", add_on_id)
        if delete_input is not None:
            pulumi.set(__self__, "delete_input", delete_input)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if validate_only_required_inputs is not None:
            pulumi.set(__self__, "validate_only_required_inputs", validate_only_required_inputs)

    @property
    @pulumi.getter(name="acceptEula")
    def accept_eula(self) -> pulumi.Input[bool]:
        """
        Solution Add-On Instance cannot be create if EULA is not accepted.
        Supplying a `false` value will print EULA.
        """
        return pulumi.get(self, "accept_eula")

    @accept_eula.setter
    def accept_eula(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_eula", value)

    @property
    @pulumi.getter(name="addOnId")
    def add_on_id(self) -> pulumi.Input[str]:
        """
        Existing Solution Add-On ID
        [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        """
        return pulumi.get(self, "add_on_id")

    @add_on_id.setter
    def add_on_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "add_on_id", value)

    @property
    @pulumi.getter(name="deleteInput")
    def delete_input(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Just like `input` field for creation, it is a map of keys and values
        as required for removal of a particular Solution Add-On. It will require all values that are
        specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
        a value will print an error message with all field descriptions and missing value. Update is a no-op
        operation
        """
        return pulumi.get(self, "delete_input")

    @delete_input.setter
    def delete_input(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "delete_input", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of keys and values as required for a particular Solution Add-On
        Instance. It will require all values that are specified in a particular Add-On schema unless
        `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
        field descriptions and missing value.
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Solution Add-On Instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="validateOnlyRequiredInputs")
    def validate_only_required_inputs(self) -> Optional[pulumi.Input[bool]]:
        """
        By default (`false`) will check that all fields are
        defined in `input` and `delete_input` fields. It will only validate fields that are marked as
        required when set to `true`. Update is a noop that will affect further operation.
        """
        return pulumi.get(self, "validate_only_required_inputs")

    @validate_only_required_inputs.setter
    def validate_only_required_inputs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_only_required_inputs", value)


@pulumi.input_type
class _SolutionAddOnInstanceState:
    def __init__(__self__, *,
                 accept_eula: Optional[pulumi.Input[bool]] = None,
                 add_on_id: Optional[pulumi.Input[str]] = None,
                 delete_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rde_state: Optional[pulumi.Input[str]] = None,
                 validate_only_required_inputs: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering SolutionAddOnInstance resources.
        :param pulumi.Input[bool] accept_eula: Solution Add-On Instance cannot be create if EULA is not accepted.
               Supplying a `false` value will print EULA.
        :param pulumi.Input[str] add_on_id: Existing Solution Add-On ID
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] delete_input: Just like `input` field for creation, it is a map of keys and values
               as required for removal of a particular Solution Add-On. It will require all values that are
               specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
               a value will print an error message with all field descriptions and missing value. Update is a no-op
               operation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] input: A map of keys and values as required for a particular Solution Add-On
               Instance. It will require all values that are specified in a particular Add-On schema unless
               `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
               field descriptions and missing value.
        :param pulumi.Input[str] name: Name of Solution Add-On Instance
        :param pulumi.Input[str] rde_state: reports the state of parent [Runtime Defined
               Entity](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde)
        :param pulumi.Input[bool] validate_only_required_inputs: By default (`false`) will check that all fields are
               defined in `input` and `delete_input` fields. It will only validate fields that are marked as
               required when set to `true`. Update is a noop that will affect further operation.
        """
        if accept_eula is not None:
            pulumi.set(__self__, "accept_eula", accept_eula)
        if add_on_id is not None:
            pulumi.set(__self__, "add_on_id", add_on_id)
        if delete_input is not None:
            pulumi.set(__self__, "delete_input", delete_input)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rde_state is not None:
            pulumi.set(__self__, "rde_state", rde_state)
        if validate_only_required_inputs is not None:
            pulumi.set(__self__, "validate_only_required_inputs", validate_only_required_inputs)

    @property
    @pulumi.getter(name="acceptEula")
    def accept_eula(self) -> Optional[pulumi.Input[bool]]:
        """
        Solution Add-On Instance cannot be create if EULA is not accepted.
        Supplying a `false` value will print EULA.
        """
        return pulumi.get(self, "accept_eula")

    @accept_eula.setter
    def accept_eula(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_eula", value)

    @property
    @pulumi.getter(name="addOnId")
    def add_on_id(self) -> Optional[pulumi.Input[str]]:
        """
        Existing Solution Add-On ID
        [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        """
        return pulumi.get(self, "add_on_id")

    @add_on_id.setter
    def add_on_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_on_id", value)

    @property
    @pulumi.getter(name="deleteInput")
    def delete_input(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Just like `input` field for creation, it is a map of keys and values
        as required for removal of a particular Solution Add-On. It will require all values that are
        specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
        a value will print an error message with all field descriptions and missing value. Update is a no-op
        operation
        """
        return pulumi.get(self, "delete_input")

    @delete_input.setter
    def delete_input(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "delete_input", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of keys and values as required for a particular Solution Add-On
        Instance. It will require all values that are specified in a particular Add-On schema unless
        `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
        field descriptions and missing value.
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Solution Add-On Instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> Optional[pulumi.Input[str]]:
        """
        reports the state of parent [Runtime Defined
        Entity](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde)
        """
        return pulumi.get(self, "rde_state")

    @rde_state.setter
    def rde_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_state", value)

    @property
    @pulumi.getter(name="validateOnlyRequiredInputs")
    def validate_only_required_inputs(self) -> Optional[pulumi.Input[bool]]:
        """
        By default (`false`) will check that all fields are
        defined in `input` and `delete_input` fields. It will only validate fields that are marked as
        required when set to `true`. Update is a noop that will affect further operation.
        """
        return pulumi.get(self, "validate_only_required_inputs")

    @validate_only_required_inputs.setter
    def validate_only_required_inputs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_only_required_inputs", value)


class SolutionAddOnInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_eula: Optional[pulumi.Input[bool]] = None,
                 add_on_id: Optional[pulumi.Input[str]] = None,
                 delete_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 validate_only_required_inputs: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a SolutionAddOnInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_eula: Solution Add-On Instance cannot be create if EULA is not accepted.
               Supplying a `false` value will print EULA.
        :param pulumi.Input[str] add_on_id: Existing Solution Add-On ID
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] delete_input: Just like `input` field for creation, it is a map of keys and values
               as required for removal of a particular Solution Add-On. It will require all values that are
               specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
               a value will print an error message with all field descriptions and missing value. Update is a no-op
               operation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] input: A map of keys and values as required for a particular Solution Add-On
               Instance. It will require all values that are specified in a particular Add-On schema unless
               `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
               field descriptions and missing value.
        :param pulumi.Input[str] name: Name of Solution Add-On Instance
        :param pulumi.Input[bool] validate_only_required_inputs: By default (`false`) will check that all fields are
               defined in `input` and `delete_input` fields. It will only validate fields that are marked as
               required when set to `true`. Update is a noop that will affect further operation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SolutionAddOnInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SolutionAddOnInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SolutionAddOnInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SolutionAddOnInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_eula: Optional[pulumi.Input[bool]] = None,
                 add_on_id: Optional[pulumi.Input[str]] = None,
                 delete_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 validate_only_required_inputs: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SolutionAddOnInstanceArgs.__new__(SolutionAddOnInstanceArgs)

            if accept_eula is None and not opts.urn:
                raise TypeError("Missing required property 'accept_eula'")
            __props__.__dict__["accept_eula"] = accept_eula
            if add_on_id is None and not opts.urn:
                raise TypeError("Missing required property 'add_on_id'")
            __props__.__dict__["add_on_id"] = add_on_id
            __props__.__dict__["delete_input"] = delete_input
            __props__.__dict__["input"] = input
            __props__.__dict__["name"] = name
            __props__.__dict__["validate_only_required_inputs"] = validate_only_required_inputs
            __props__.__dict__["rde_state"] = None
        super(SolutionAddOnInstance, __self__).__init__(
            'vcd:index/solutionAddOnInstance:SolutionAddOnInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_eula: Optional[pulumi.Input[bool]] = None,
            add_on_id: Optional[pulumi.Input[str]] = None,
            delete_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rde_state: Optional[pulumi.Input[str]] = None,
            validate_only_required_inputs: Optional[pulumi.Input[bool]] = None) -> 'SolutionAddOnInstance':
        """
        Get an existing SolutionAddOnInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_eula: Solution Add-On Instance cannot be create if EULA is not accepted.
               Supplying a `false` value will print EULA.
        :param pulumi.Input[str] add_on_id: Existing Solution Add-On ID
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] delete_input: Just like `input` field for creation, it is a map of keys and values
               as required for removal of a particular Solution Add-On. It will require all values that are
               specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
               a value will print an error message with all field descriptions and missing value. Update is a no-op
               operation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] input: A map of keys and values as required for a particular Solution Add-On
               Instance. It will require all values that are specified in a particular Add-On schema unless
               `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
               field descriptions and missing value.
        :param pulumi.Input[str] name: Name of Solution Add-On Instance
        :param pulumi.Input[str] rde_state: reports the state of parent [Runtime Defined
               Entity](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde)
        :param pulumi.Input[bool] validate_only_required_inputs: By default (`false`) will check that all fields are
               defined in `input` and `delete_input` fields. It will only validate fields that are marked as
               required when set to `true`. Update is a noop that will affect further operation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SolutionAddOnInstanceState.__new__(_SolutionAddOnInstanceState)

        __props__.__dict__["accept_eula"] = accept_eula
        __props__.__dict__["add_on_id"] = add_on_id
        __props__.__dict__["delete_input"] = delete_input
        __props__.__dict__["input"] = input
        __props__.__dict__["name"] = name
        __props__.__dict__["rde_state"] = rde_state
        __props__.__dict__["validate_only_required_inputs"] = validate_only_required_inputs
        return SolutionAddOnInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptEula")
    def accept_eula(self) -> pulumi.Output[bool]:
        """
        Solution Add-On Instance cannot be create if EULA is not accepted.
        Supplying a `false` value will print EULA.
        """
        return pulumi.get(self, "accept_eula")

    @property
    @pulumi.getter(name="addOnId")
    def add_on_id(self) -> pulumi.Output[str]:
        """
        Existing Solution Add-On ID
        [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
        """
        return pulumi.get(self, "add_on_id")

    @property
    @pulumi.getter(name="deleteInput")
    def delete_input(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Just like `input` field for creation, it is a map of keys and values
        as required for removal of a particular Solution Add-On. It will require all values that are
        specified in a particular Add-On schema unless `validate_only_required_inputs=true` is set. Missing
        a value will print an error message with all field descriptions and missing value. Update is a no-op
        operation
        """
        return pulumi.get(self, "delete_input")

    @property
    @pulumi.getter
    def input(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of keys and values as required for a particular Solution Add-On
        Instance. It will require all values that are specified in a particular Add-On schema unless
        `validate_only_required_inputs=true` is set. Missing a value will print an error message with all
        field descriptions and missing value.
        """
        return pulumi.get(self, "input")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of Solution Add-On Instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> pulumi.Output[str]:
        """
        reports the state of parent [Runtime Defined
        Entity](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde)
        """
        return pulumi.get(self, "rde_state")

    @property
    @pulumi.getter(name="validateOnlyRequiredInputs")
    def validate_only_required_inputs(self) -> pulumi.Output[Optional[bool]]:
        """
        By default (`false`) will check that all fields are
        defined in `input` and `delete_input` fields. It will only validate fields that are marked as
        required when set to `true`. Update is a noop that will affect further operation.
        """
        return pulumi.get(self, "validate_only_required_inputs")

