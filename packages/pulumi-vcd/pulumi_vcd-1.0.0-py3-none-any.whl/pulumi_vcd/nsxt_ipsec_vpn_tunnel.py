# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtIpsecVpnTunnelArgs', 'NsxtIpsecVpnTunnel']

@pulumi.input_type
class NsxtIpsecVpnTunnelArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 local_ip_address: pulumi.Input[str],
                 local_networks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 pre_shared_key: pulumi.Input[str],
                 remote_ip_address: pulumi.Input[str],
                 authentication_mode: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_profile_customization: Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtIpsecVpnTunnel resource.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` data source
        :param pulumi.Input[str] local_ip_address: IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_networks: A set of local networks in CIDR format. At least one value required
        :param pulumi.Input[str] pre_shared_key: Pre-shared key for negotiation. **Note** the pre-shared key must be
               the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        :param pulumi.Input[str] remote_ip_address: Public IPv4 Address of the remote device terminating the VPN connection
        :param pulumi.Input[str] authentication_mode: `PSK` (pre-shared key) or `CERTIFICATE` (default -
               `PSK`)
        :param pulumi.Input[str] ca_certificate_id: CA Certificate ID (can be handled by
               `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
               `CERTIFICATE`
        :param pulumi.Input[str] certificate_id: Certificate ID (can be handled by `LibraryCertificate`
               resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        :param pulumi.Input[str] description: An optional description of the NSX-T IPsec VPN Tunnel
        :param pulumi.Input[bool] enabled: Enables or disables IPsec VPN Tunnel (default `true`)
        :param pulumi.Input[bool] logging: Sets whether logging for the tunnel is enabled or not. (default - `false`)
        :param pulumi.Input[str] name: A name for NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] remote_id: Remote ID uniquely identifies the peer site. If the remote ID is
               not set, it will default to the remote IP address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_networks: Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        :param pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs'] security_profile_customization: a block allowing to
               customize default security profile parameters
               
               <a id="security-profile"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "local_ip_address", local_ip_address)
        pulumi.set(__self__, "local_networks", local_networks)
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        pulumi.set(__self__, "remote_ip_address", remote_ip_address)
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if ca_certificate_id is not None:
            pulumi.set(__self__, "ca_certificate_id", ca_certificate_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_networks is not None:
            pulumi.set(__self__, "remote_networks", remote_networks)
        if security_profile_customization is not None:
            pulumi.set(__self__, "security_profile_customization", security_profile_customization)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> pulumi.Input[str]:
        """
        IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_ip_address", value)

    @property
    @pulumi.getter(name="localNetworks")
    def local_networks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of local networks in CIDR format. At least one value required
        """
        return pulumi.get(self, "local_networks")

    @local_networks.setter
    def local_networks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "local_networks", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> pulumi.Input[str]:
        """
        Pre-shared key for negotiation. **Note** the pre-shared key must be
        the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> pulumi.Input[str]:
        """
        Public IPv4 Address of the remote device terminating the VPN connection
        """
        return pulumi.get(self, "remote_ip_address")

    @remote_ip_address.setter
    def remote_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_ip_address", value)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[str]]:
        """
        `PSK` (pre-shared key) or `CERTIFICATE` (default -
        `PSK`)
        """
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        CA Certificate ID (can be handled by
        `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
        `CERTIFICATE`
        """
        return pulumi.get(self, "ca_certificate_id")

    @ca_certificate_id.setter
    def ca_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID (can be handled by `LibraryCertificate`
        resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables IPsec VPN Tunnel (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets whether logging for the tunnel is enabled or not. (default - `false`)
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote ID uniquely identifies the peer site. If the remote ID is
        not set, it will default to the remote IP address
        """
        return pulumi.get(self, "remote_id")

    @remote_id.setter
    def remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id", value)

    @property
    @pulumi.getter(name="remoteNetworks")
    def remote_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        """
        return pulumi.get(self, "remote_networks")

    @remote_networks.setter
    def remote_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_networks", value)

    @property
    @pulumi.getter(name="securityProfileCustomization")
    def security_profile_customization(self) -> Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']]:
        """
        a block allowing to
        customize default security profile parameters

        <a id="security-profile"></a>
        """
        return pulumi.get(self, "security_profile_customization")

    @security_profile_customization.setter
    def security_profile_customization(self, value: Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']]):
        pulumi.set(self, "security_profile_customization", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtIpsecVpnTunnelState:
    def __init__(__self__, *,
                 authentication_mode: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ike_fail_reason: Optional[pulumi.Input[str]] = None,
                 ike_service_status: Optional[pulumi.Input[str]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_ip_address: Optional[pulumi.Input[str]] = None,
                 remote_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_profile: Optional[pulumi.Input[str]] = None,
                 security_profile_customization: Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtIpsecVpnTunnel resources.
        :param pulumi.Input[str] authentication_mode: `PSK` (pre-shared key) or `CERTIFICATE` (default -
               `PSK`)
        :param pulumi.Input[str] ca_certificate_id: CA Certificate ID (can be handled by
               `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
               `CERTIFICATE`
        :param pulumi.Input[str] certificate_id: Certificate ID (can be handled by `LibraryCertificate`
               resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        :param pulumi.Input[str] description: An optional description of the NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` data source
        :param pulumi.Input[bool] enabled: Enables or disables IPsec VPN Tunnel (default `true`)
        :param pulumi.Input[str] ike_fail_reason: Provides more details of failure if the IKE service is not UP
        :param pulumi.Input[str] ike_service_status: Status for the actual IKE Session for the given tunnel
        :param pulumi.Input[str] local_ip_address: IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_networks: A set of local networks in CIDR format. At least one value required
        :param pulumi.Input[bool] logging: Sets whether logging for the tunnel is enabled or not. (default - `false`)
        :param pulumi.Input[str] name: A name for NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pre_shared_key: Pre-shared key for negotiation. **Note** the pre-shared key must be
               the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        :param pulumi.Input[str] remote_id: Remote ID uniquely identifies the peer site. If the remote ID is
               not set, it will default to the remote IP address
        :param pulumi.Input[str] remote_ip_address: Public IPv4 Address of the remote device terminating the VPN connection
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_networks: Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        :param pulumi.Input[str] security_profile: `DEFAULT` for system provided configuration or `CUSTOM` if `security_profile_customization` is set
        :param pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs'] security_profile_customization: a block allowing to
               customize default security profile parameters
               
               <a id="security-profile"></a>
        :param pulumi.Input[str] status: Overall IPsec VPN Tunnel Status
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if ca_certificate_id is not None:
            pulumi.set(__self__, "ca_certificate_id", ca_certificate_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ike_fail_reason is not None:
            pulumi.set(__self__, "ike_fail_reason", ike_fail_reason)
        if ike_service_status is not None:
            pulumi.set(__self__, "ike_service_status", ike_service_status)
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if local_networks is not None:
            pulumi.set(__self__, "local_networks", local_networks)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_ip_address is not None:
            pulumi.set(__self__, "remote_ip_address", remote_ip_address)
        if remote_networks is not None:
            pulumi.set(__self__, "remote_networks", remote_networks)
        if security_profile is not None:
            pulumi.set(__self__, "security_profile", security_profile)
        if security_profile_customization is not None:
            pulumi.set(__self__, "security_profile_customization", security_profile_customization)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[str]]:
        """
        `PSK` (pre-shared key) or `CERTIFICATE` (default -
        `PSK`)
        """
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        CA Certificate ID (can be handled by
        `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
        `CERTIFICATE`
        """
        return pulumi.get(self, "ca_certificate_id")

    @ca_certificate_id.setter
    def ca_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID (can be handled by `LibraryCertificate`
        resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables IPsec VPN Tunnel (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ikeFailReason")
    def ike_fail_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Provides more details of failure if the IKE service is not UP
        """
        return pulumi.get(self, "ike_fail_reason")

    @ike_fail_reason.setter
    def ike_fail_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_fail_reason", value)

    @property
    @pulumi.getter(name="ikeServiceStatus")
    def ike_service_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status for the actual IKE Session for the given tunnel
        """
        return pulumi.get(self, "ike_service_status")

    @ike_service_status.setter
    def ike_service_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_service_status", value)

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ip_address", value)

    @property
    @pulumi.getter(name="localNetworks")
    def local_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of local networks in CIDR format. At least one value required
        """
        return pulumi.get(self, "local_networks")

    @local_networks.setter
    def local_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "local_networks", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets whether logging for the tunnel is enabled or not. (default - `false`)
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key for negotiation. **Note** the pre-shared key must be
        the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote ID uniquely identifies the peer site. If the remote ID is
        not set, it will default to the remote IP address
        """
        return pulumi.get(self, "remote_id")

    @remote_id.setter
    def remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id", value)

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Public IPv4 Address of the remote device terminating the VPN connection
        """
        return pulumi.get(self, "remote_ip_address")

    @remote_ip_address.setter
    def remote_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ip_address", value)

    @property
    @pulumi.getter(name="remoteNetworks")
    def remote_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        """
        return pulumi.get(self, "remote_networks")

    @remote_networks.setter
    def remote_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_networks", value)

    @property
    @pulumi.getter(name="securityProfile")
    def security_profile(self) -> Optional[pulumi.Input[str]]:
        """
        `DEFAULT` for system provided configuration or `CUSTOM` if `security_profile_customization` is set
        """
        return pulumi.get(self, "security_profile")

    @security_profile.setter
    def security_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_profile", value)

    @property
    @pulumi.getter(name="securityProfileCustomization")
    def security_profile_customization(self) -> Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']]:
        """
        a block allowing to
        customize default security profile parameters

        <a id="security-profile"></a>
        """
        return pulumi.get(self, "security_profile_customization")

    @security_profile_customization.setter
    def security_profile_customization(self, value: Optional[pulumi.Input['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs']]):
        pulumi.set(self, "security_profile_customization", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Overall IPsec VPN Tunnel Status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtIpsecVpnTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_mode: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_ip_address: Optional[pulumi.Input[str]] = None,
                 remote_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_profile_customization: Optional[pulumi.Input[Union['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs', 'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgsDict']]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtIpsecVpnTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication_mode: `PSK` (pre-shared key) or `CERTIFICATE` (default -
               `PSK`)
        :param pulumi.Input[str] ca_certificate_id: CA Certificate ID (can be handled by
               `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
               `CERTIFICATE`
        :param pulumi.Input[str] certificate_id: Certificate ID (can be handled by `LibraryCertificate`
               resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        :param pulumi.Input[str] description: An optional description of the NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` data source
        :param pulumi.Input[bool] enabled: Enables or disables IPsec VPN Tunnel (default `true`)
        :param pulumi.Input[str] local_ip_address: IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_networks: A set of local networks in CIDR format. At least one value required
        :param pulumi.Input[bool] logging: Sets whether logging for the tunnel is enabled or not. (default - `false`)
        :param pulumi.Input[str] name: A name for NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pre_shared_key: Pre-shared key for negotiation. **Note** the pre-shared key must be
               the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        :param pulumi.Input[str] remote_id: Remote ID uniquely identifies the peer site. If the remote ID is
               not set, it will default to the remote IP address
        :param pulumi.Input[str] remote_ip_address: Public IPv4 Address of the remote device terminating the VPN connection
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_networks: Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        :param pulumi.Input[Union['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs', 'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgsDict']] security_profile_customization: a block allowing to
               customize default security profile parameters
               
               <a id="security-profile"></a>
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtIpsecVpnTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtIpsecVpnTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtIpsecVpnTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtIpsecVpnTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_mode: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_ip_address: Optional[pulumi.Input[str]] = None,
                 remote_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_profile_customization: Optional[pulumi.Input[Union['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs', 'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgsDict']]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtIpsecVpnTunnelArgs.__new__(NsxtIpsecVpnTunnelArgs)

            __props__.__dict__["authentication_mode"] = authentication_mode
            __props__.__dict__["ca_certificate_id"] = ca_certificate_id
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["description"] = description
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["enabled"] = enabled
            if local_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'local_ip_address'")
            __props__.__dict__["local_ip_address"] = local_ip_address
            if local_networks is None and not opts.urn:
                raise TypeError("Missing required property 'local_networks'")
            __props__.__dict__["local_networks"] = local_networks
            __props__.__dict__["logging"] = logging
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if pre_shared_key is None and not opts.urn:
                raise TypeError("Missing required property 'pre_shared_key'")
            __props__.__dict__["pre_shared_key"] = None if pre_shared_key is None else pulumi.Output.secret(pre_shared_key)
            __props__.__dict__["remote_id"] = remote_id
            if remote_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'remote_ip_address'")
            __props__.__dict__["remote_ip_address"] = remote_ip_address
            __props__.__dict__["remote_networks"] = remote_networks
            __props__.__dict__["security_profile_customization"] = security_profile_customization
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["ike_fail_reason"] = None
            __props__.__dict__["ike_service_status"] = None
            __props__.__dict__["security_profile"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["preSharedKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NsxtIpsecVpnTunnel, __self__).__init__(
            'vcd:index/nsxtIpsecVpnTunnel:NsxtIpsecVpnTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_mode: Optional[pulumi.Input[str]] = None,
            ca_certificate_id: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ike_fail_reason: Optional[pulumi.Input[str]] = None,
            ike_service_status: Optional[pulumi.Input[str]] = None,
            local_ip_address: Optional[pulumi.Input[str]] = None,
            local_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            logging: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            pre_shared_key: Optional[pulumi.Input[str]] = None,
            remote_id: Optional[pulumi.Input[str]] = None,
            remote_ip_address: Optional[pulumi.Input[str]] = None,
            remote_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_profile: Optional[pulumi.Input[str]] = None,
            security_profile_customization: Optional[pulumi.Input[Union['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs', 'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgsDict']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtIpsecVpnTunnel':
        """
        Get an existing NsxtIpsecVpnTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication_mode: `PSK` (pre-shared key) or `CERTIFICATE` (default -
               `PSK`)
        :param pulumi.Input[str] ca_certificate_id: CA Certificate ID (can be handled by
               `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
               `CERTIFICATE`
        :param pulumi.Input[str] certificate_id: Certificate ID (can be handled by `LibraryCertificate`
               resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        :param pulumi.Input[str] description: An optional description of the NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` data source
        :param pulumi.Input[bool] enabled: Enables or disables IPsec VPN Tunnel (default `true`)
        :param pulumi.Input[str] ike_fail_reason: Provides more details of failure if the IKE service is not UP
        :param pulumi.Input[str] ike_service_status: Status for the actual IKE Session for the given tunnel
        :param pulumi.Input[str] local_ip_address: IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_networks: A set of local networks in CIDR format. At least one value required
        :param pulumi.Input[bool] logging: Sets whether logging for the tunnel is enabled or not. (default - `false`)
        :param pulumi.Input[str] name: A name for NSX-T IPsec VPN Tunnel
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pre_shared_key: Pre-shared key for negotiation. **Note** the pre-shared key must be
               the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        :param pulumi.Input[str] remote_id: Remote ID uniquely identifies the peer site. If the remote ID is
               not set, it will default to the remote IP address
        :param pulumi.Input[str] remote_ip_address: Public IPv4 Address of the remote device terminating the VPN connection
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_networks: Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        :param pulumi.Input[str] security_profile: `DEFAULT` for system provided configuration or `CUSTOM` if `security_profile_customization` is set
        :param pulumi.Input[Union['NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs', 'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgsDict']] security_profile_customization: a block allowing to
               customize default security profile parameters
               
               <a id="security-profile"></a>
        :param pulumi.Input[str] status: Overall IPsec VPN Tunnel Status
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtIpsecVpnTunnelState.__new__(_NsxtIpsecVpnTunnelState)

        __props__.__dict__["authentication_mode"] = authentication_mode
        __props__.__dict__["ca_certificate_id"] = ca_certificate_id
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ike_fail_reason"] = ike_fail_reason
        __props__.__dict__["ike_service_status"] = ike_service_status
        __props__.__dict__["local_ip_address"] = local_ip_address
        __props__.__dict__["local_networks"] = local_networks
        __props__.__dict__["logging"] = logging
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["pre_shared_key"] = pre_shared_key
        __props__.__dict__["remote_id"] = remote_id
        __props__.__dict__["remote_ip_address"] = remote_ip_address
        __props__.__dict__["remote_networks"] = remote_networks
        __props__.__dict__["security_profile"] = security_profile
        __props__.__dict__["security_profile_customization"] = security_profile_customization
        __props__.__dict__["status"] = status
        __props__.__dict__["vdc"] = vdc
        return NsxtIpsecVpnTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> pulumi.Output[Optional[str]]:
        """
        `PSK` (pre-shared key) or `CERTIFICATE` (default -
        `PSK`)
        """
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        CA Certificate ID (can be handled by
        `LibraryCertificate` resource or datasource) *Note* `authentication_mode` must be set to
        `CERTIFICATE`
        """
        return pulumi.get(self, "ca_certificate_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate ID (can be handled by `LibraryCertificate`
        resource or datasource). *Note* `authentication_mode` must be set to `CERTIFICATE`
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables or disables IPsec VPN Tunnel (default `true`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ikeFailReason")
    def ike_fail_reason(self) -> pulumi.Output[str]:
        """
        Provides more details of failure if the IKE service is not UP
        """
        return pulumi.get(self, "ike_fail_reason")

    @property
    @pulumi.getter(name="ikeServiceStatus")
    def ike_service_status(self) -> pulumi.Output[str]:
        """
        Status for the actual IKE Session for the given tunnel
        """
        return pulumi.get(self, "ike_service_status")

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> pulumi.Output[str]:
        """
        IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
        """
        return pulumi.get(self, "local_ip_address")

    @property
    @pulumi.getter(name="localNetworks")
    def local_networks(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of local networks in CIDR format. At least one value required
        """
        return pulumi.get(self, "local_networks")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[bool]]:
        """
        Sets whether logging for the tunnel is enabled or not. (default - `false`)
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for NSX-T IPsec VPN Tunnel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> pulumi.Output[str]:
        """
        Pre-shared key for negotiation. **Note** the pre-shared key must be
        the same on the other end of the IPSec VPN tunnel and `authentication_mode` must be `PSK`
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> pulumi.Output[str]:
        """
        Remote ID uniquely identifies the peer site. If the remote ID is
        not set, it will default to the remote IP address
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> pulumi.Output[str]:
        """
        Public IPv4 Address of the remote device terminating the VPN connection
        """
        return pulumi.get(self, "remote_ip_address")

    @property
    @pulumi.getter(name="remoteNetworks")
    def remote_networks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
        """
        return pulumi.get(self, "remote_networks")

    @property
    @pulumi.getter(name="securityProfile")
    def security_profile(self) -> pulumi.Output[str]:
        """
        `DEFAULT` for system provided configuration or `CUSTOM` if `security_profile_customization` is set
        """
        return pulumi.get(self, "security_profile")

    @property
    @pulumi.getter(name="securityProfileCustomization")
    def security_profile_customization(self) -> pulumi.Output[Optional['outputs.NsxtIpsecVpnTunnelSecurityProfileCustomization']]:
        """
        a block allowing to
        customize default security profile parameters

        <a id="security-profile"></a>
        """
        return pulumi.get(self, "security_profile_customization")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Overall IPsec VPN Tunnel Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

