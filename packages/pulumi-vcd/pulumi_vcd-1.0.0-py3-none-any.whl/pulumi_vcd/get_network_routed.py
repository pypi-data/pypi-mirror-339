# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkRoutedResult',
    'AwaitableGetNetworkRoutedResult',
    'get_network_routed',
    'get_network_routed_output',
]

@pulumi.output_type
class GetNetworkRoutedResult:
    """
    A collection of values returned by getNetworkRouted.
    """
    def __init__(__self__, description=None, dhcp_pools=None, dns1=None, dns2=None, dns_suffix=None, edge_gateway=None, filter=None, gateway=None, href=None, id=None, interface_type=None, metadata=None, metadata_entries=None, name=None, netmask=None, org=None, shared=None, static_ip_pools=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dhcp_pools and not isinstance(dhcp_pools, list):
            raise TypeError("Expected argument 'dhcp_pools' to be a list")
        pulumi.set(__self__, "dhcp_pools", dhcp_pools)
        if dns1 and not isinstance(dns1, str):
            raise TypeError("Expected argument 'dns1' to be a str")
        pulumi.set(__self__, "dns1", dns1)
        if dns2 and not isinstance(dns2, str):
            raise TypeError("Expected argument 'dns2' to be a str")
        pulumi.set(__self__, "dns2", dns2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if netmask and not isinstance(netmask, str):
            raise TypeError("Expected argument 'netmask' to be a str")
        pulumi.set(__self__, "netmask", netmask)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if shared and not isinstance(shared, bool):
            raise TypeError("Expected argument 'shared' to be a bool")
        pulumi.set(__self__, "shared", shared)
        if static_ip_pools and not isinstance(static_ip_pools, list):
            raise TypeError("Expected argument 'static_ip_pools' to be a list")
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpPools")
    def dhcp_pools(self) -> Sequence['outputs.GetNetworkRoutedDhcpPoolResult']:
        return pulumi.get(self, "dhcp_pools")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetNetworkRoutedFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> str:
        return pulumi.get(self, "interface_type")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetNetworkRoutedMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def shared(self) -> bool:
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetNetworkRoutedStaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNetworkRoutedResult(GetNetworkRoutedResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkRoutedResult(
            description=self.description,
            dhcp_pools=self.dhcp_pools,
            dns1=self.dns1,
            dns2=self.dns2,
            dns_suffix=self.dns_suffix,
            edge_gateway=self.edge_gateway,
            filter=self.filter,
            gateway=self.gateway,
            href=self.href,
            id=self.id,
            interface_type=self.interface_type,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            netmask=self.netmask,
            org=self.org,
            shared=self.shared,
            static_ip_pools=self.static_ip_pools,
            vdc=self.vdc)


def get_network_routed(filter: Optional[Union['GetNetworkRoutedFilterArgs', 'GetNetworkRoutedFilterArgsDict']] = None,
                       name: Optional[str] = None,
                       org: Optional[str] = None,
                       vdc: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkRoutedResult:
    """
    Provides a VMware Cloud Director Org VDC routed Network data source. This can be used to reference internal networks for vApps to connect.

    Supported in provider *v2.5+*

    > **Note:** This data source supports only NSX-V backed Org VDC networks.
    Please use newer [`NetworkRoutedV2`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/network_routed_v2)
    data source which is compatible with NSX-T.


    :param Union['GetNetworkRoutedFilterArgs', 'GetNetworkRoutedFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: A unique name for the network (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNetworkRouted:getNetworkRouted', __args__, opts=opts, typ=GetNetworkRoutedResult).value

    return AwaitableGetNetworkRoutedResult(
        description=pulumi.get(__ret__, 'description'),
        dhcp_pools=pulumi.get(__ret__, 'dhcp_pools'),
        dns1=pulumi.get(__ret__, 'dns1'),
        dns2=pulumi.get(__ret__, 'dns2'),
        dns_suffix=pulumi.get(__ret__, 'dns_suffix'),
        edge_gateway=pulumi.get(__ret__, 'edge_gateway'),
        filter=pulumi.get(__ret__, 'filter'),
        gateway=pulumi.get(__ret__, 'gateway'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        netmask=pulumi.get(__ret__, 'netmask'),
        org=pulumi.get(__ret__, 'org'),
        shared=pulumi.get(__ret__, 'shared'),
        static_ip_pools=pulumi.get(__ret__, 'static_ip_pools'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_network_routed_output(filter: Optional[pulumi.Input[Optional[Union['GetNetworkRoutedFilterArgs', 'GetNetworkRoutedFilterArgsDict']]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              org: Optional[pulumi.Input[Optional[str]]] = None,
                              vdc: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkRoutedResult]:
    """
    Provides a VMware Cloud Director Org VDC routed Network data source. This can be used to reference internal networks for vApps to connect.

    Supported in provider *v2.5+*

    > **Note:** This data source supports only NSX-V backed Org VDC networks.
    Please use newer [`NetworkRoutedV2`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/network_routed_v2)
    data source which is compatible with NSX-T.


    :param Union['GetNetworkRoutedFilterArgs', 'GetNetworkRoutedFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: A unique name for the network (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNetworkRouted:getNetworkRouted', __args__, opts=opts, typ=GetNetworkRoutedResult)
    return __ret__.apply(lambda __response__: GetNetworkRoutedResult(
        description=pulumi.get(__response__, 'description'),
        dhcp_pools=pulumi.get(__response__, 'dhcp_pools'),
        dns1=pulumi.get(__response__, 'dns1'),
        dns2=pulumi.get(__response__, 'dns2'),
        dns_suffix=pulumi.get(__response__, 'dns_suffix'),
        edge_gateway=pulumi.get(__response__, 'edge_gateway'),
        filter=pulumi.get(__response__, 'filter'),
        gateway=pulumi.get(__response__, 'gateway'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        netmask=pulumi.get(__response__, 'netmask'),
        org=pulumi.get(__response__, 'org'),
        shared=pulumi.get(__response__, 'shared'),
        static_ip_pools=pulumi.get(__response__, 'static_ip_pools'),
        vdc=pulumi.get(__response__, 'vdc')))
