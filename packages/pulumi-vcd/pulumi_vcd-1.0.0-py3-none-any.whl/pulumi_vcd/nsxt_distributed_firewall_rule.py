# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NsxtDistributedFirewallRuleInitArgs', 'NsxtDistributedFirewallRule']

@pulumi.input_type
class NsxtDistributedFirewallRuleInitArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 vdc_group_id: pulumi.Input[str],
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 source_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NsxtDistributedFirewallRule resource.
        :param pulumi.Input[str] action: Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
               supported in VCD 10.2.2+
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        :param pulumi.Input[str] above_rule_id: ID of an existing `NsxtDistributedFirewallRule` entry, above
               which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
               created at the bottom of the list
               
               > When activating Distributed Firewall with resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
               rule created which can make inconvenient to use this resource. For that reason, resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
               `remove_default_firewall_rule` which can remove default firewall rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_port_profile_ids: An optional set of Application Port Profiles.
        :param pulumi.Input[str] comment: Comment field shown in UI
        :param pulumi.Input[str] description: Description of firewall rule (not shown in UI)
        :param pulumi.Input[bool] destination_groups_excluded: reverses value of `destination_ids` for
               the rule to match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A set of source object Firewall Groups (`IP Sets` or `Security
               groups`). Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] direction: One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        :param pulumi.Input[bool] enabled: Defines if the rule is enabled (default `true`)
        :param pulumi.Input[str] ip_protocol: One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        :param pulumi.Input[bool] logging: Defines if logging for this rule is enabled (default `false`)
        :param pulumi.Input[str] name: Explanatory name for firewall rule (uniqueness not enforced)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_context_profile_ids: An optional set of Network Context Profiles. Can be
               looked up using `get_nsxt_network_context_profile` data source.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] source_groups_excluded: reverses value of `source_ids` for the rule to
               match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ids: A set of source object Firewall Groups (`IP Sets` or `Security groups`).
               Leaving it empty matches `Any` (all)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if above_rule_id is not None:
            pulumi.set(__self__, "above_rule_id", above_rule_id)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_groups_excluded is not None:
            pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_context_profile_ids is not None:
            pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if source_groups_excluded is not None:
            pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
        supported in VCD 10.2.2+
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> pulumi.Input[str]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

    @vdc_group_id.setter
    def vdc_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vdc_group_id", value)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing `NsxtDistributedFirewallRule` entry, above
        which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
        created at the bottom of the list

        > When activating Distributed Firewall with resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
        rule created which can make inconvenient to use this resource. For that reason, resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
        `remove_default_firewall_rule` which can remove default firewall rule.
        """
        return pulumi.get(self, "above_rule_id")

    @above_rule_id.setter
    def above_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "above_rule_id", value)

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of Application Port Profiles.
        """
        return pulumi.get(self, "app_port_profile_ids")

    @app_port_profile_ids.setter
    def app_port_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_port_profile_ids", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment field shown in UI
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of firewall rule (not shown in UI)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        """
        reverses value of `destination_ids` for
        the rule to match everything except specified IDs.
        """
        return pulumi.get(self, "destination_groups_excluded")

    @destination_groups_excluded.setter
    def destination_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destination_groups_excluded", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security
        groups`). Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        """
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if logging for this rule is enabled (default `false`)
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Explanatory name for firewall rule (uniqueness not enforced)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of Network Context Profiles. Can be
        looked up using `get_nsxt_network_context_profile` data source.
        """
        return pulumi.get(self, "network_context_profile_ids")

    @network_context_profile_ids.setter
    def network_context_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_context_profile_ids", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        """
        reverses value of `source_ids` for the rule to
        match everything except specified IDs.
        """
        return pulumi.get(self, "source_groups_excluded")

    @source_groups_excluded.setter
    def source_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "source_groups_excluded", value)

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security groups`).
        Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "source_ids")

    @source_ids.setter
    def source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ids", value)


@pulumi.input_type
class _NsxtDistributedFirewallRuleState:
    def __init__(__self__, *,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 source_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtDistributedFirewallRule resources.
        :param pulumi.Input[str] above_rule_id: ID of an existing `NsxtDistributedFirewallRule` entry, above
               which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
               created at the bottom of the list
               
               > When activating Distributed Firewall with resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
               rule created which can make inconvenient to use this resource. For that reason, resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
               `remove_default_firewall_rule` which can remove default firewall rule.
        :param pulumi.Input[str] action: Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
               supported in VCD 10.2.2+
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_port_profile_ids: An optional set of Application Port Profiles.
        :param pulumi.Input[str] comment: Comment field shown in UI
        :param pulumi.Input[str] description: Description of firewall rule (not shown in UI)
        :param pulumi.Input[bool] destination_groups_excluded: reverses value of `destination_ids` for
               the rule to match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A set of source object Firewall Groups (`IP Sets` or `Security
               groups`). Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] direction: One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        :param pulumi.Input[bool] enabled: Defines if the rule is enabled (default `true`)
        :param pulumi.Input[str] ip_protocol: One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        :param pulumi.Input[bool] logging: Defines if logging for this rule is enabled (default `false`)
        :param pulumi.Input[str] name: Explanatory name for firewall rule (uniqueness not enforced)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_context_profile_ids: An optional set of Network Context Profiles. Can be
               looked up using `get_nsxt_network_context_profile` data source.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] source_groups_excluded: reverses value of `source_ids` for the rule to
               match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ids: A set of source object Firewall Groups (`IP Sets` or `Security groups`).
               Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        if above_rule_id is not None:
            pulumi.set(__self__, "above_rule_id", above_rule_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_groups_excluded is not None:
            pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_context_profile_ids is not None:
            pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if source_groups_excluded is not None:
            pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)
        if vdc_group_id is not None:
            pulumi.set(__self__, "vdc_group_id", vdc_group_id)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing `NsxtDistributedFirewallRule` entry, above
        which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
        created at the bottom of the list

        > When activating Distributed Firewall with resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
        rule created which can make inconvenient to use this resource. For that reason, resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
        `remove_default_firewall_rule` which can remove default firewall rule.
        """
        return pulumi.get(self, "above_rule_id")

    @above_rule_id.setter
    def above_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "above_rule_id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
        supported in VCD 10.2.2+
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of Application Port Profiles.
        """
        return pulumi.get(self, "app_port_profile_ids")

    @app_port_profile_ids.setter
    def app_port_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_port_profile_ids", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment field shown in UI
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of firewall rule (not shown in UI)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        """
        reverses value of `destination_ids` for
        the rule to match everything except specified IDs.
        """
        return pulumi.get(self, "destination_groups_excluded")

    @destination_groups_excluded.setter
    def destination_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destination_groups_excluded", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security
        groups`). Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        """
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if logging for this rule is enabled (default `false`)
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Explanatory name for firewall rule (uniqueness not enforced)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of Network Context Profiles. Can be
        looked up using `get_nsxt_network_context_profile` data source.
        """
        return pulumi.get(self, "network_context_profile_ids")

    @network_context_profile_ids.setter
    def network_context_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_context_profile_ids", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        """
        reverses value of `source_ids` for the rule to
        match everything except specified IDs.
        """
        return pulumi.get(self, "source_groups_excluded")

    @source_groups_excluded.setter
    def source_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "source_groups_excluded", value)

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security groups`).
        Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "source_ids")

    @source_ids.setter
    def source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ids", value)

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

    @vdc_group_id.setter
    def vdc_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_group_id", value)


class NsxtDistributedFirewallRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 source_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtDistributedFirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] above_rule_id: ID of an existing `NsxtDistributedFirewallRule` entry, above
               which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
               created at the bottom of the list
               
               > When activating Distributed Firewall with resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
               rule created which can make inconvenient to use this resource. For that reason, resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
               `remove_default_firewall_rule` which can remove default firewall rule.
        :param pulumi.Input[str] action: Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
               supported in VCD 10.2.2+
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_port_profile_ids: An optional set of Application Port Profiles.
        :param pulumi.Input[str] comment: Comment field shown in UI
        :param pulumi.Input[str] description: Description of firewall rule (not shown in UI)
        :param pulumi.Input[bool] destination_groups_excluded: reverses value of `destination_ids` for
               the rule to match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A set of source object Firewall Groups (`IP Sets` or `Security
               groups`). Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] direction: One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        :param pulumi.Input[bool] enabled: Defines if the rule is enabled (default `true`)
        :param pulumi.Input[str] ip_protocol: One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        :param pulumi.Input[bool] logging: Defines if logging for this rule is enabled (default `false`)
        :param pulumi.Input[str] name: Explanatory name for firewall rule (uniqueness not enforced)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_context_profile_ids: An optional set of Network Context Profiles. Can be
               looked up using `get_nsxt_network_context_profile` data source.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] source_groups_excluded: reverses value of `source_ids` for the rule to
               match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ids: A set of source object Firewall Groups (`IP Sets` or `Security groups`).
               Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtDistributedFirewallRuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtDistributedFirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtDistributedFirewallRuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtDistributedFirewallRuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 source_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtDistributedFirewallRuleInitArgs.__new__(NsxtDistributedFirewallRuleInitArgs)

            __props__.__dict__["above_rule_id"] = above_rule_id
            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["app_port_profile_ids"] = app_port_profile_ids
            __props__.__dict__["comment"] = comment
            __props__.__dict__["description"] = description
            __props__.__dict__["destination_groups_excluded"] = destination_groups_excluded
            __props__.__dict__["destination_ids"] = destination_ids
            __props__.__dict__["direction"] = direction
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ip_protocol"] = ip_protocol
            __props__.__dict__["logging"] = logging
            __props__.__dict__["name"] = name
            __props__.__dict__["network_context_profile_ids"] = network_context_profile_ids
            __props__.__dict__["org"] = org
            __props__.__dict__["source_groups_excluded"] = source_groups_excluded
            __props__.__dict__["source_ids"] = source_ids
            if vdc_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'vdc_group_id'")
            __props__.__dict__["vdc_group_id"] = vdc_group_id
        super(NsxtDistributedFirewallRule, __self__).__init__(
            'vcd:index/nsxtDistributedFirewallRule:NsxtDistributedFirewallRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            above_rule_id: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
            destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ip_protocol: Optional[pulumi.Input[str]] = None,
            logging: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            org: Optional[pulumi.Input[str]] = None,
            source_groups_excluded: Optional[pulumi.Input[bool]] = None,
            source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vdc_group_id: Optional[pulumi.Input[str]] = None) -> 'NsxtDistributedFirewallRule':
        """
        Get an existing NsxtDistributedFirewallRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] above_rule_id: ID of an existing `NsxtDistributedFirewallRule` entry, above
               which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
               created at the bottom of the list
               
               > When activating Distributed Firewall with resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
               rule created which can make inconvenient to use this resource. For that reason, resource
               [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
               `remove_default_firewall_rule` which can remove default firewall rule.
        :param pulumi.Input[str] action: Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
               supported in VCD 10.2.2+
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_port_profile_ids: An optional set of Application Port Profiles.
        :param pulumi.Input[str] comment: Comment field shown in UI
        :param pulumi.Input[str] description: Description of firewall rule (not shown in UI)
        :param pulumi.Input[bool] destination_groups_excluded: reverses value of `destination_ids` for
               the rule to match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A set of source object Firewall Groups (`IP Sets` or `Security
               groups`). Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] direction: One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        :param pulumi.Input[bool] enabled: Defines if the rule is enabled (default `true`)
        :param pulumi.Input[str] ip_protocol: One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        :param pulumi.Input[bool] logging: Defines if logging for this rule is enabled (default `false`)
        :param pulumi.Input[str] name: Explanatory name for firewall rule (uniqueness not enforced)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_context_profile_ids: An optional set of Network Context Profiles. Can be
               looked up using `get_nsxt_network_context_profile` data source.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] source_groups_excluded: reverses value of `source_ids` for the rule to
               match everything except specified IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ids: A set of source object Firewall Groups (`IP Sets` or `Security groups`).
               Leaving it empty matches `Any` (all)
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtDistributedFirewallRuleState.__new__(_NsxtDistributedFirewallRuleState)

        __props__.__dict__["above_rule_id"] = above_rule_id
        __props__.__dict__["action"] = action
        __props__.__dict__["app_port_profile_ids"] = app_port_profile_ids
        __props__.__dict__["comment"] = comment
        __props__.__dict__["description"] = description
        __props__.__dict__["destination_groups_excluded"] = destination_groups_excluded
        __props__.__dict__["destination_ids"] = destination_ids
        __props__.__dict__["direction"] = direction
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ip_protocol"] = ip_protocol
        __props__.__dict__["logging"] = logging
        __props__.__dict__["name"] = name
        __props__.__dict__["network_context_profile_ids"] = network_context_profile_ids
        __props__.__dict__["org"] = org
        __props__.__dict__["source_groups_excluded"] = source_groups_excluded
        __props__.__dict__["source_ids"] = source_ids
        __props__.__dict__["vdc_group_id"] = vdc_group_id
        return NsxtDistributedFirewallRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of an existing `NsxtDistributedFirewallRule` entry, above
        which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
        created at the bottom of the list

        > When activating Distributed Firewall with resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
        rule created which can make inconvenient to use this resource. For that reason, resource
        [`VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
        `remove_default_firewall_rule` which can remove default firewall rule.
        """
        return pulumi.get(self, "above_rule_id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
        supported in VCD 10.2.2+
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An optional set of Application Port Profiles.
        """
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment field shown in UI
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of firewall rule (not shown in UI)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> pulumi.Output[Optional[bool]]:
        """
        reverses value of `destination_ids` for
        the rule to match everything except specified IDs.
        """
        return pulumi.get(self, "destination_groups_excluded")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security
        groups`). Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[Optional[str]]:
        """
        One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the rule is enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Output[Optional[str]]:
        """
        One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if logging for this rule is enabled (default `false`)
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Explanatory name for firewall rule (uniqueness not enforced)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An optional set of Network Context Profiles. Can be
        looked up using `get_nsxt_network_context_profile` data source.
        """
        return pulumi.get(self, "network_context_profile_ids")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> pulumi.Output[Optional[bool]]:
        """
        reverses value of `source_ids` for the rule to
        match everything except specified IDs.
        """
        return pulumi.get(self, "source_groups_excluded")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of source object Firewall Groups (`IP Sets` or `Security groups`).
        Leaving it empty matches `Any` (all)
        """
        return pulumi.get(self, "source_ids")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> pulumi.Output[str]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

