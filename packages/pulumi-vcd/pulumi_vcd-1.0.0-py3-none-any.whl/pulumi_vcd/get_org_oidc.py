# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetOrgOidcResult',
    'AwaitableGetOrgOidcResult',
    'get_org_oidc',
    'get_org_oidc_output',
]

@pulumi.output_type
class GetOrgOidcResult:
    """
    A collection of values returned by getOrgOidc.
    """
    def __init__(__self__, access_token_endpoint=None, claims_mappings=None, client_id=None, client_secret=None, enabled=None, id=None, issuer_id=None, key_expire_duration_hours=None, key_refresh_endpoint=None, key_refresh_period_hours=None, key_refresh_strategy=None, keys=None, max_clock_skew_seconds=None, org_id=None, prefer_id_token=None, redirect_uri=None, scopes=None, ui_button_label=None, user_authorization_endpoint=None, userinfo_endpoint=None, wellknown_endpoint=None):
        if access_token_endpoint and not isinstance(access_token_endpoint, str):
            raise TypeError("Expected argument 'access_token_endpoint' to be a str")
        pulumi.set(__self__, "access_token_endpoint", access_token_endpoint)
        if claims_mappings and not isinstance(claims_mappings, list):
            raise TypeError("Expected argument 'claims_mappings' to be a list")
        pulumi.set(__self__, "claims_mappings", claims_mappings)
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        pulumi.set(__self__, "client_secret", client_secret)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer_id and not isinstance(issuer_id, str):
            raise TypeError("Expected argument 'issuer_id' to be a str")
        pulumi.set(__self__, "issuer_id", issuer_id)
        if key_expire_duration_hours and not isinstance(key_expire_duration_hours, int):
            raise TypeError("Expected argument 'key_expire_duration_hours' to be a int")
        pulumi.set(__self__, "key_expire_duration_hours", key_expire_duration_hours)
        if key_refresh_endpoint and not isinstance(key_refresh_endpoint, str):
            raise TypeError("Expected argument 'key_refresh_endpoint' to be a str")
        pulumi.set(__self__, "key_refresh_endpoint", key_refresh_endpoint)
        if key_refresh_period_hours and not isinstance(key_refresh_period_hours, int):
            raise TypeError("Expected argument 'key_refresh_period_hours' to be a int")
        pulumi.set(__self__, "key_refresh_period_hours", key_refresh_period_hours)
        if key_refresh_strategy and not isinstance(key_refresh_strategy, str):
            raise TypeError("Expected argument 'key_refresh_strategy' to be a str")
        pulumi.set(__self__, "key_refresh_strategy", key_refresh_strategy)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if max_clock_skew_seconds and not isinstance(max_clock_skew_seconds, int):
            raise TypeError("Expected argument 'max_clock_skew_seconds' to be a int")
        pulumi.set(__self__, "max_clock_skew_seconds", max_clock_skew_seconds)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if prefer_id_token and not isinstance(prefer_id_token, bool):
            raise TypeError("Expected argument 'prefer_id_token' to be a bool")
        pulumi.set(__self__, "prefer_id_token", prefer_id_token)
        if redirect_uri and not isinstance(redirect_uri, str):
            raise TypeError("Expected argument 'redirect_uri' to be a str")
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if ui_button_label and not isinstance(ui_button_label, str):
            raise TypeError("Expected argument 'ui_button_label' to be a str")
        pulumi.set(__self__, "ui_button_label", ui_button_label)
        if user_authorization_endpoint and not isinstance(user_authorization_endpoint, str):
            raise TypeError("Expected argument 'user_authorization_endpoint' to be a str")
        pulumi.set(__self__, "user_authorization_endpoint", user_authorization_endpoint)
        if userinfo_endpoint and not isinstance(userinfo_endpoint, str):
            raise TypeError("Expected argument 'userinfo_endpoint' to be a str")
        pulumi.set(__self__, "userinfo_endpoint", userinfo_endpoint)
        if wellknown_endpoint and not isinstance(wellknown_endpoint, str):
            raise TypeError("Expected argument 'wellknown_endpoint' to be a str")
        pulumi.set(__self__, "wellknown_endpoint", wellknown_endpoint)

    @property
    @pulumi.getter(name="accessTokenEndpoint")
    def access_token_endpoint(self) -> str:
        return pulumi.get(self, "access_token_endpoint")

    @property
    @pulumi.getter(name="claimsMappings")
    def claims_mappings(self) -> Sequence['outputs.GetOrgOidcClaimsMappingResult']:
        return pulumi.get(self, "claims_mappings")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> str:
        return pulumi.get(self, "issuer_id")

    @property
    @pulumi.getter(name="keyExpireDurationHours")
    def key_expire_duration_hours(self) -> int:
        return pulumi.get(self, "key_expire_duration_hours")

    @property
    @pulumi.getter(name="keyRefreshEndpoint")
    def key_refresh_endpoint(self) -> str:
        return pulumi.get(self, "key_refresh_endpoint")

    @property
    @pulumi.getter(name="keyRefreshPeriodHours")
    def key_refresh_period_hours(self) -> int:
        return pulumi.get(self, "key_refresh_period_hours")

    @property
    @pulumi.getter(name="keyRefreshStrategy")
    def key_refresh_strategy(self) -> str:
        return pulumi.get(self, "key_refresh_strategy")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetOrgOidcKeyResult']:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxClockSkewSeconds")
    def max_clock_skew_seconds(self) -> int:
        return pulumi.get(self, "max_clock_skew_seconds")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="preferIdToken")
    def prefer_id_token(self) -> bool:
        return pulumi.get(self, "prefer_id_token")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="uiButtonLabel")
    def ui_button_label(self) -> str:
        return pulumi.get(self, "ui_button_label")

    @property
    @pulumi.getter(name="userAuthorizationEndpoint")
    def user_authorization_endpoint(self) -> str:
        return pulumi.get(self, "user_authorization_endpoint")

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> str:
        return pulumi.get(self, "userinfo_endpoint")

    @property
    @pulumi.getter(name="wellknownEndpoint")
    def wellknown_endpoint(self) -> str:
        return pulumi.get(self, "wellknown_endpoint")


class AwaitableGetOrgOidcResult(GetOrgOidcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgOidcResult(
            access_token_endpoint=self.access_token_endpoint,
            claims_mappings=self.claims_mappings,
            client_id=self.client_id,
            client_secret=self.client_secret,
            enabled=self.enabled,
            id=self.id,
            issuer_id=self.issuer_id,
            key_expire_duration_hours=self.key_expire_duration_hours,
            key_refresh_endpoint=self.key_refresh_endpoint,
            key_refresh_period_hours=self.key_refresh_period_hours,
            key_refresh_strategy=self.key_refresh_strategy,
            keys=self.keys,
            max_clock_skew_seconds=self.max_clock_skew_seconds,
            org_id=self.org_id,
            prefer_id_token=self.prefer_id_token,
            redirect_uri=self.redirect_uri,
            scopes=self.scopes,
            ui_button_label=self.ui_button_label,
            user_authorization_endpoint=self.user_authorization_endpoint,
            userinfo_endpoint=self.userinfo_endpoint,
            wellknown_endpoint=self.wellknown_endpoint)


def get_org_oidc(org_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgOidcResult:
    """
    Provides a data source to read the OpenID Connect (OIDC) configuration of an Organization in VMware Cloud Director.

    Supported in provider *v3.13+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    oidc_settings = vcd.get_org_oidc(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the OIDC settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgOidc:getOrgOidc', __args__, opts=opts, typ=GetOrgOidcResult).value

    return AwaitableGetOrgOidcResult(
        access_token_endpoint=pulumi.get(__ret__, 'access_token_endpoint'),
        claims_mappings=pulumi.get(__ret__, 'claims_mappings'),
        client_id=pulumi.get(__ret__, 'client_id'),
        client_secret=pulumi.get(__ret__, 'client_secret'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        issuer_id=pulumi.get(__ret__, 'issuer_id'),
        key_expire_duration_hours=pulumi.get(__ret__, 'key_expire_duration_hours'),
        key_refresh_endpoint=pulumi.get(__ret__, 'key_refresh_endpoint'),
        key_refresh_period_hours=pulumi.get(__ret__, 'key_refresh_period_hours'),
        key_refresh_strategy=pulumi.get(__ret__, 'key_refresh_strategy'),
        keys=pulumi.get(__ret__, 'keys'),
        max_clock_skew_seconds=pulumi.get(__ret__, 'max_clock_skew_seconds'),
        org_id=pulumi.get(__ret__, 'org_id'),
        prefer_id_token=pulumi.get(__ret__, 'prefer_id_token'),
        redirect_uri=pulumi.get(__ret__, 'redirect_uri'),
        scopes=pulumi.get(__ret__, 'scopes'),
        ui_button_label=pulumi.get(__ret__, 'ui_button_label'),
        user_authorization_endpoint=pulumi.get(__ret__, 'user_authorization_endpoint'),
        userinfo_endpoint=pulumi.get(__ret__, 'userinfo_endpoint'),
        wellknown_endpoint=pulumi.get(__ret__, 'wellknown_endpoint'))
def get_org_oidc_output(org_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgOidcResult]:
    """
    Provides a data source to read the OpenID Connect (OIDC) configuration of an Organization in VMware Cloud Director.

    Supported in provider *v3.13+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    oidc_settings = vcd.get_org_oidc(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the OIDC settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getOrgOidc:getOrgOidc', __args__, opts=opts, typ=GetOrgOidcResult)
    return __ret__.apply(lambda __response__: GetOrgOidcResult(
        access_token_endpoint=pulumi.get(__response__, 'access_token_endpoint'),
        claims_mappings=pulumi.get(__response__, 'claims_mappings'),
        client_id=pulumi.get(__response__, 'client_id'),
        client_secret=pulumi.get(__response__, 'client_secret'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        issuer_id=pulumi.get(__response__, 'issuer_id'),
        key_expire_duration_hours=pulumi.get(__response__, 'key_expire_duration_hours'),
        key_refresh_endpoint=pulumi.get(__response__, 'key_refresh_endpoint'),
        key_refresh_period_hours=pulumi.get(__response__, 'key_refresh_period_hours'),
        key_refresh_strategy=pulumi.get(__response__, 'key_refresh_strategy'),
        keys=pulumi.get(__response__, 'keys'),
        max_clock_skew_seconds=pulumi.get(__response__, 'max_clock_skew_seconds'),
        org_id=pulumi.get(__response__, 'org_id'),
        prefer_id_token=pulumi.get(__response__, 'prefer_id_token'),
        redirect_uri=pulumi.get(__response__, 'redirect_uri'),
        scopes=pulumi.get(__response__, 'scopes'),
        ui_button_label=pulumi.get(__response__, 'ui_button_label'),
        user_authorization_endpoint=pulumi.get(__response__, 'user_authorization_endpoint'),
        userinfo_endpoint=pulumi.get(__response__, 'userinfo_endpoint'),
        wellknown_endpoint=pulumi.get(__response__, 'wellknown_endpoint')))
