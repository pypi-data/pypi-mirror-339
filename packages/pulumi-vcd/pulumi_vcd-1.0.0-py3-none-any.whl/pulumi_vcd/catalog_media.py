# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CatalogMediaArgs', 'CatalogMedia']

@pulumi.input_type
class CatalogMediaArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 media_path: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 show_upload_progress: Optional[pulumi.Input[bool]] = None,
                 upload_any_file: Optional[pulumi.Input[bool]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a CatalogMedia resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        :param pulumi.Input[str] catalog_id: The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        :param pulumi.Input[str] description: Description of media file
        :param pulumi.Input[str] media_path: Absolute or relative path to file to upload
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign
        :param pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Media file name in catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] show_upload_progress: Default false. Allows to see upload progress. (See note below)
        :param pulumi.Input[bool] upload_any_file: If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        :param pulumi.Input[int] upload_piece_size: size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        if catalog is not None:
            warnings.warn("""Use catalog_id instead""", DeprecationWarning)
            pulumi.log.warn("""catalog is deprecated: Use catalog_id instead""")
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if media_path is not None:
            pulumi.set(__self__, "media_path", media_path)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if show_upload_progress is not None:
            pulumi.set(__self__, "show_upload_progress", show_upload_progress)
        if upload_any_file is not None:
            pulumi.set(__self__, "upload_any_file", upload_any_file)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use catalog_id instead""")
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of media file
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="mediaPath")
    def media_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "media_path")

    @media_path.setter
    def media_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_path", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Media file name in catalog
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="showUploadProgress")
    def show_upload_progress(self) -> Optional[pulumi.Input[bool]]:
        """
        Default false. Allows to see upload progress. (See note below)
        """
        return pulumi.get(self, "show_upload_progress")

    @show_upload_progress.setter
    def show_upload_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_upload_progress", value)

    @property
    @pulumi.getter(name="uploadAnyFile")
    def upload_any_file(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        """
        return pulumi.get(self, "upload_any_file")

    @upload_any_file.setter
    def upload_any_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upload_any_file", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)


@pulumi.input_type
class _CatalogMediaState:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_iso: Optional[pulumi.Input[bool]] = None,
                 is_published: Optional[pulumi.Input[bool]] = None,
                 media_path: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_name: Optional[pulumi.Input[str]] = None,
                 show_upload_progress: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_profile_name: Optional[pulumi.Input[str]] = None,
                 upload_any_file: Optional[pulumi.Input[bool]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering CatalogMedia resources.
        :param pulumi.Input[str] catalog: The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        :param pulumi.Input[str] catalog_id: The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        :param pulumi.Input[str] catalog_item_id: Catalog Item ID of this media item
        :param pulumi.Input[str] creation_date: (Computed) returns creation date
        :param pulumi.Input[str] description: Description of media file
        :param pulumi.Input[bool] is_iso: (Computed) returns True if this media file is ISO
        :param pulumi.Input[bool] is_published: (Computed) returns True if this media file is in a published catalog
        :param pulumi.Input[str] media_path: Absolute or relative path to file to upload
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign
        :param pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Media file name in catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_name: (Computed) returns owner name
        :param pulumi.Input[bool] show_upload_progress: Default false. Allows to see upload progress. (See note below)
        :param pulumi.Input[int] size: (Computed) returns media storage in Bytes
        :param pulumi.Input[str] status: (Computed) returns media status
        :param pulumi.Input[str] storage_profile_name: (Computed) returns storage profile name
        :param pulumi.Input[bool] upload_any_file: If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        :param pulumi.Input[int] upload_piece_size: size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        if catalog is not None:
            warnings.warn("""Use catalog_id instead""", DeprecationWarning)
            pulumi.log.warn("""catalog is deprecated: Use catalog_id instead""")
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_item_id is not None:
            pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_iso is not None:
            pulumi.set(__self__, "is_iso", is_iso)
        if is_published is not None:
            pulumi.set(__self__, "is_published", is_published)
        if media_path is not None:
            pulumi.set(__self__, "media_path", media_path)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_name is not None:
            pulumi.set(__self__, "owner_name", owner_name)
        if show_upload_progress is not None:
            pulumi.set(__self__, "show_upload_progress", show_upload_progress)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_profile_name is not None:
            pulumi.set(__self__, "storage_profile_name", storage_profile_name)
        if upload_any_file is not None:
            pulumi.set(__self__, "upload_any_file", upload_any_file)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use catalog_id instead""")
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog Item ID of this media item
        """
        return pulumi.get(self, "catalog_item_id")

    @catalog_item_id.setter
    def catalog_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_item_id", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns creation date
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of media file
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isIso")
    def is_iso(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed) returns True if this media file is ISO
        """
        return pulumi.get(self, "is_iso")

    @is_iso.setter
    def is_iso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_iso", value)

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed) returns True if this media file is in a published catalog
        """
        return pulumi.get(self, "is_published")

    @is_published.setter
    def is_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_published", value)

    @property
    @pulumi.getter(name="mediaPath")
    def media_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "media_path")

    @media_path.setter
    def media_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_path", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogMediaMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Media file name in catalog
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns owner name
        """
        return pulumi.get(self, "owner_name")

    @owner_name.setter
    def owner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_name", value)

    @property
    @pulumi.getter(name="showUploadProgress")
    def show_upload_progress(self) -> Optional[pulumi.Input[bool]]:
        """
        Default false. Allows to see upload progress. (See note below)
        """
        return pulumi.get(self, "show_upload_progress")

    @show_upload_progress.setter
    def show_upload_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_upload_progress", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        (Computed) returns media storage in Bytes
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns media status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageProfileName")
    def storage_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns storage profile name
        """
        return pulumi.get(self, "storage_profile_name")

    @storage_profile_name.setter
    def storage_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_name", value)

    @property
    @pulumi.getter(name="uploadAnyFile")
    def upload_any_file(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        """
        return pulumi.get(self, "upload_any_file")

    @upload_any_file.setter
    def upload_any_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upload_any_file", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)


class CatalogMedia(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 media_path: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMediaMetadataEntryArgs', 'CatalogMediaMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 show_upload_progress: Optional[pulumi.Input[bool]] = None,
                 upload_any_file: Optional[pulumi.Input[bool]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a CatalogMedia resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        :param pulumi.Input[str] catalog_id: The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        :param pulumi.Input[str] description: Description of media file
        :param pulumi.Input[str] media_path: Absolute or relative path to file to upload
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogMediaMetadataEntryArgs', 'CatalogMediaMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Media file name in catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] show_upload_progress: Default false. Allows to see upload progress. (See note below)
        :param pulumi.Input[bool] upload_any_file: If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        :param pulumi.Input[int] upload_piece_size: size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CatalogMediaArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CatalogMedia resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CatalogMediaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatalogMediaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 media_path: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMediaMetadataEntryArgs', 'CatalogMediaMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 show_upload_progress: Optional[pulumi.Input[bool]] = None,
                 upload_any_file: Optional[pulumi.Input[bool]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatalogMediaArgs.__new__(CatalogMediaArgs)

            __props__.__dict__["catalog"] = catalog
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["description"] = description
            __props__.__dict__["media_path"] = media_path
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["show_upload_progress"] = show_upload_progress
            __props__.__dict__["upload_any_file"] = upload_any_file
            __props__.__dict__["upload_piece_size"] = upload_piece_size
            __props__.__dict__["catalog_item_id"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["is_iso"] = None
            __props__.__dict__["is_published"] = None
            __props__.__dict__["owner_name"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["storage_profile_name"] = None
        super(CatalogMedia, __self__).__init__(
            'vcd:index/catalogMedia:CatalogMedia',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog: Optional[pulumi.Input[str]] = None,
            catalog_id: Optional[pulumi.Input[str]] = None,
            catalog_item_id: Optional[pulumi.Input[str]] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_iso: Optional[pulumi.Input[bool]] = None,
            is_published: Optional[pulumi.Input[bool]] = None,
            media_path: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogMediaMetadataEntryArgs', 'CatalogMediaMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_name: Optional[pulumi.Input[str]] = None,
            show_upload_progress: Optional[pulumi.Input[bool]] = None,
            size: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            storage_profile_name: Optional[pulumi.Input[str]] = None,
            upload_any_file: Optional[pulumi.Input[bool]] = None,
            upload_piece_size: Optional[pulumi.Input[int]] = None) -> 'CatalogMedia':
        """
        Get an existing CatalogMedia resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        :param pulumi.Input[str] catalog_id: The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        :param pulumi.Input[str] catalog_item_id: Catalog Item ID of this media item
        :param pulumi.Input[str] creation_date: (Computed) returns creation date
        :param pulumi.Input[str] description: Description of media file
        :param pulumi.Input[bool] is_iso: (Computed) returns True if this media file is ISO
        :param pulumi.Input[bool] is_published: (Computed) returns True if this media file is in a published catalog
        :param pulumi.Input[str] media_path: Absolute or relative path to file to upload
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogMediaMetadataEntryArgs', 'CatalogMediaMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Media file name in catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_name: (Computed) returns owner name
        :param pulumi.Input[bool] show_upload_progress: Default false. Allows to see upload progress. (See note below)
        :param pulumi.Input[int] size: (Computed) returns media storage in Bytes
        :param pulumi.Input[str] status: (Computed) returns media status
        :param pulumi.Input[str] storage_profile_name: (Computed) returns storage profile name
        :param pulumi.Input[bool] upload_any_file: If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        :param pulumi.Input[int] upload_piece_size: size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CatalogMediaState.__new__(_CatalogMediaState)

        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["catalog_item_id"] = catalog_item_id
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["is_iso"] = is_iso
        __props__.__dict__["is_published"] = is_published
        __props__.__dict__["media_path"] = media_path
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_name"] = owner_name
        __props__.__dict__["show_upload_progress"] = show_upload_progress
        __props__.__dict__["size"] = size
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_profile_name"] = storage_profile_name
        __props__.__dict__["upload_any_file"] = upload_any_file
        __props__.__dict__["upload_piece_size"] = upload_piece_size
        return CatalogMedia(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use catalog_id instead""")
    def catalog(self) -> pulumi.Output[str]:
        """
        The name of the catalog where to upload media file. It's mandatory if `catalog_id` is not used.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[str]:
        """
        The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> pulumi.Output[str]:
        """
        Catalog Item ID of this media item
        """
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        (Computed) returns creation date
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of media file
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isIso")
    def is_iso(self) -> pulumi.Output[bool]:
        """
        (Computed) returns True if this media file is ISO
        """
        return pulumi.get(self, "is_iso")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> pulumi.Output[bool]:
        """
        (Computed) returns True if this media file is in a published catalog
        """
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="mediaPath")
    def media_path(self) -> pulumi.Output[Optional[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "media_path")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.CatalogMediaMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Media file name in catalog
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[str]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> pulumi.Output[str]:
        """
        (Computed) returns owner name
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="showUploadProgress")
    def show_upload_progress(self) -> pulumi.Output[Optional[bool]]:
        """
        Default false. Allows to see upload progress. (See note below)
        """
        return pulumi.get(self, "show_upload_progress")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        (Computed) returns media storage in Bytes
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        (Computed) returns media status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageProfileName")
    def storage_profile_name(self) -> pulumi.Output[str]:
        """
        (Computed) returns storage profile name
        """
        return pulumi.get(self, "storage_profile_name")

    @property
    @pulumi.getter(name="uploadAnyFile")
    def upload_any_file(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
        """
        return pulumi.get(self, "upload_any_file")

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> pulumi.Output[Optional[int]]:
        """
        size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        """
        return pulumi.get(self, "upload_piece_size")

