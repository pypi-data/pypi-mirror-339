# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCatalogAccessControlResult',
    'AwaitableGetCatalogAccessControlResult',
    'get_catalog_access_control',
    'get_catalog_access_control_output',
]

@pulumi.output_type
class GetCatalogAccessControlResult:
    """
    A collection of values returned by getCatalogAccessControl.
    """
    def __init__(__self__, catalog_id=None, everyone_access_level=None, id=None, org=None, read_only_shared_with_all_orgs=None, shared_with_everyone=None, shared_withs=None):
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if everyone_access_level and not isinstance(everyone_access_level, str):
            raise TypeError("Expected argument 'everyone_access_level' to be a str")
        pulumi.set(__self__, "everyone_access_level", everyone_access_level)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if read_only_shared_with_all_orgs and not isinstance(read_only_shared_with_all_orgs, bool):
            raise TypeError("Expected argument 'read_only_shared_with_all_orgs' to be a bool")
        pulumi.set(__self__, "read_only_shared_with_all_orgs", read_only_shared_with_all_orgs)
        if shared_with_everyone and not isinstance(shared_with_everyone, bool):
            raise TypeError("Expected argument 'shared_with_everyone' to be a bool")
        pulumi.set(__self__, "shared_with_everyone", shared_with_everyone)
        if shared_withs and not isinstance(shared_withs, list):
            raise TypeError("Expected argument 'shared_withs' to be a list")
        pulumi.set(__self__, "shared_withs", shared_withs)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="everyoneAccessLevel")
    def everyone_access_level(self) -> str:
        return pulumi.get(self, "everyone_access_level")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="readOnlySharedWithAllOrgs")
    def read_only_shared_with_all_orgs(self) -> bool:
        return pulumi.get(self, "read_only_shared_with_all_orgs")

    @property
    @pulumi.getter(name="sharedWithEveryone")
    def shared_with_everyone(self) -> bool:
        return pulumi.get(self, "shared_with_everyone")

    @property
    @pulumi.getter(name="sharedWiths")
    def shared_withs(self) -> Sequence['outputs.GetCatalogAccessControlSharedWithResult']:
        return pulumi.get(self, "shared_withs")


class AwaitableGetCatalogAccessControlResult(GetCatalogAccessControlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogAccessControlResult(
            catalog_id=self.catalog_id,
            everyone_access_level=self.everyone_access_level,
            id=self.id,
            org=self.org,
            read_only_shared_with_all_orgs=self.read_only_shared_with_all_orgs,
            shared_with_everyone=self.shared_with_everyone,
            shared_withs=self.shared_withs)


def get_catalog_access_control(catalog_id: Optional[str] = None,
                               org: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogAccessControlResult:
    """
    Provides a data source to read Access Control details from a Catalog in VMware Cloud Director.

    > **Note:** Access control reads run in tenant context, meaning that, even if the user is a system administrator,
    in every request it uses headers items that define the tenant context as restricted to the organization to which the Catalog belongs.

    Supported in provider *v3.14+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    catalog = vcd.get_catalog(name="my-catalog")
    ac = vcd.get_catalog_access_control(catalog_id=catalog.id)
    pulumi.export("sharedWith", ac.shared_withs)
    ```


    :param str catalog_id: A unique identifier for the Catalog.
    :param str org: The name of organization to which the Catalog belongs. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalogAccessControl:getCatalogAccessControl', __args__, opts=opts, typ=GetCatalogAccessControlResult).value

    return AwaitableGetCatalogAccessControlResult(
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        everyone_access_level=pulumi.get(__ret__, 'everyone_access_level'),
        id=pulumi.get(__ret__, 'id'),
        org=pulumi.get(__ret__, 'org'),
        read_only_shared_with_all_orgs=pulumi.get(__ret__, 'read_only_shared_with_all_orgs'),
        shared_with_everyone=pulumi.get(__ret__, 'shared_with_everyone'),
        shared_withs=pulumi.get(__ret__, 'shared_withs'))
def get_catalog_access_control_output(catalog_id: Optional[pulumi.Input[str]] = None,
                                      org: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCatalogAccessControlResult]:
    """
    Provides a data source to read Access Control details from a Catalog in VMware Cloud Director.

    > **Note:** Access control reads run in tenant context, meaning that, even if the user is a system administrator,
    in every request it uses headers items that define the tenant context as restricted to the organization to which the Catalog belongs.

    Supported in provider *v3.14+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    catalog = vcd.get_catalog(name="my-catalog")
    ac = vcd.get_catalog_access_control(catalog_id=catalog.id)
    pulumi.export("sharedWith", ac.shared_withs)
    ```


    :param str catalog_id: A unique identifier for the Catalog.
    :param str org: The name of organization to which the Catalog belongs. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getCatalogAccessControl:getCatalogAccessControl', __args__, opts=opts, typ=GetCatalogAccessControlResult)
    return __ret__.apply(lambda __response__: GetCatalogAccessControlResult(
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        everyone_access_level=pulumi.get(__response__, 'everyone_access_level'),
        id=pulumi.get(__response__, 'id'),
        org=pulumi.get(__response__, 'org'),
        read_only_shared_with_all_orgs=pulumi.get(__response__, 'read_only_shared_with_all_orgs'),
        shared_with_everyone=pulumi.get(__response__, 'shared_with_everyone'),
        shared_withs=pulumi.get(__response__, 'shared_withs')))
