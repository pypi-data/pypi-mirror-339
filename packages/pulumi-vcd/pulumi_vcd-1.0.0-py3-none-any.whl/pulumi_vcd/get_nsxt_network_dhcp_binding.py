# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtNetworkDhcpBindingResult',
    'AwaitableGetNsxtNetworkDhcpBindingResult',
    'get_nsxt_network_dhcp_binding',
    'get_nsxt_network_dhcp_binding_output',
]

@pulumi.output_type
class GetNsxtNetworkDhcpBindingResult:
    """
    A collection of values returned by getNsxtNetworkDhcpBinding.
    """
    def __init__(__self__, binding_type=None, description=None, dhcp_v4_configs=None, dhcp_v6_configs=None, dns_servers=None, id=None, ip_address=None, lease_time=None, mac_address=None, name=None, org=None, org_network_id=None):
        if binding_type and not isinstance(binding_type, str):
            raise TypeError("Expected argument 'binding_type' to be a str")
        pulumi.set(__self__, "binding_type", binding_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dhcp_v4_configs and not isinstance(dhcp_v4_configs, list):
            raise TypeError("Expected argument 'dhcp_v4_configs' to be a list")
        pulumi.set(__self__, "dhcp_v4_configs", dhcp_v4_configs)
        if dhcp_v6_configs and not isinstance(dhcp_v6_configs, list):
            raise TypeError("Expected argument 'dhcp_v6_configs' to be a list")
        pulumi.set(__self__, "dhcp_v6_configs", dhcp_v6_configs)
        if dns_servers and not isinstance(dns_servers, list):
            raise TypeError("Expected argument 'dns_servers' to be a list")
        pulumi.set(__self__, "dns_servers", dns_servers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if lease_time and not isinstance(lease_time, int):
            raise TypeError("Expected argument 'lease_time' to be a int")
        pulumi.set(__self__, "lease_time", lease_time)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if org_network_id and not isinstance(org_network_id, str):
            raise TypeError("Expected argument 'org_network_id' to be a str")
        pulumi.set(__self__, "org_network_id", org_network_id)

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> str:
        return pulumi.get(self, "binding_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpV4Configs")
    def dhcp_v4_configs(self) -> Sequence['outputs.GetNsxtNetworkDhcpBindingDhcpV4ConfigResult']:
        return pulumi.get(self, "dhcp_v4_configs")

    @property
    @pulumi.getter(name="dhcpV6Configs")
    def dhcp_v6_configs(self) -> Sequence['outputs.GetNsxtNetworkDhcpBindingDhcpV6ConfigResult']:
        return pulumi.get(self, "dhcp_v6_configs")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> int:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> str:
        return pulumi.get(self, "org_network_id")


class AwaitableGetNsxtNetworkDhcpBindingResult(GetNsxtNetworkDhcpBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtNetworkDhcpBindingResult(
            binding_type=self.binding_type,
            description=self.description,
            dhcp_v4_configs=self.dhcp_v4_configs,
            dhcp_v6_configs=self.dhcp_v6_configs,
            dns_servers=self.dns_servers,
            id=self.id,
            ip_address=self.ip_address,
            lease_time=self.lease_time,
            mac_address=self.mac_address,
            name=self.name,
            org=self.org,
            org_network_id=self.org_network_id)


def get_nsxt_network_dhcp_binding(name: Optional[str] = None,
                                  org: Optional[str] = None,
                                  org_network_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtNetworkDhcpBindingResult:
    """
    Provides a data source to read NSX-T Org VDC network DHCP bindings.

    > This data source requires VCD 10.3.1+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    pools = vcd.get_nsxt_network_dhcp(org="cloud",
        org_network_id=parent["id"])
    binding1 = vcd.get_nsxt_network_dhcp_binding(org="cloud",
        org_network_id=pools.id,
        name="Binding-one")
    ```


    :param str name: A name of DHCP binding
    :param str org: The name of organization. Optional if defined at provider level
    :param str org_network_id: The ID of an Org VDC network. **Note**  `.id` field of
           `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
           here
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['orgNetworkId'] = org_network_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtNetworkDhcpBinding:getNsxtNetworkDhcpBinding', __args__, opts=opts, typ=GetNsxtNetworkDhcpBindingResult).value

    return AwaitableGetNsxtNetworkDhcpBindingResult(
        binding_type=pulumi.get(__ret__, 'binding_type'),
        description=pulumi.get(__ret__, 'description'),
        dhcp_v4_configs=pulumi.get(__ret__, 'dhcp_v4_configs'),
        dhcp_v6_configs=pulumi.get(__ret__, 'dhcp_v6_configs'),
        dns_servers=pulumi.get(__ret__, 'dns_servers'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        lease_time=pulumi.get(__ret__, 'lease_time'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        org_network_id=pulumi.get(__ret__, 'org_network_id'))
def get_nsxt_network_dhcp_binding_output(name: Optional[pulumi.Input[str]] = None,
                                         org: Optional[pulumi.Input[Optional[str]]] = None,
                                         org_network_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtNetworkDhcpBindingResult]:
    """
    Provides a data source to read NSX-T Org VDC network DHCP bindings.

    > This data source requires VCD 10.3.1+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    pools = vcd.get_nsxt_network_dhcp(org="cloud",
        org_network_id=parent["id"])
    binding1 = vcd.get_nsxt_network_dhcp_binding(org="cloud",
        org_network_id=pools.id,
        name="Binding-one")
    ```


    :param str name: A name of DHCP binding
    :param str org: The name of organization. Optional if defined at provider level
    :param str org_network_id: The ID of an Org VDC network. **Note**  `.id` field of
           `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
           here
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['orgNetworkId'] = org_network_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtNetworkDhcpBinding:getNsxtNetworkDhcpBinding', __args__, opts=opts, typ=GetNsxtNetworkDhcpBindingResult)
    return __ret__.apply(lambda __response__: GetNsxtNetworkDhcpBindingResult(
        binding_type=pulumi.get(__response__, 'binding_type'),
        description=pulumi.get(__response__, 'description'),
        dhcp_v4_configs=pulumi.get(__response__, 'dhcp_v4_configs'),
        dhcp_v6_configs=pulumi.get(__response__, 'dhcp_v6_configs'),
        dns_servers=pulumi.get(__response__, 'dns_servers'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        lease_time=pulumi.get(__response__, 'lease_time'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        org_network_id=pulumi.get(__response__, 'org_network_id')))
