# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetLbServiceMonitorResult',
    'AwaitableGetLbServiceMonitorResult',
    'get_lb_service_monitor',
    'get_lb_service_monitor_output',
]

@pulumi.output_type
class GetLbServiceMonitorResult:
    """
    A collection of values returned by getLbServiceMonitor.
    """
    def __init__(__self__, edge_gateway=None, expected=None, extension=None, id=None, interval=None, max_retries=None, method=None, name=None, org=None, receive=None, send=None, timeout=None, type=None, url=None, vdc=None):
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if expected and not isinstance(expected, str):
            raise TypeError("Expected argument 'expected' to be a str")
        pulumi.set(__self__, "expected", expected)
        if extension and not isinstance(extension, dict):
            raise TypeError("Expected argument 'extension' to be a dict")
        pulumi.set(__self__, "extension", extension)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if max_retries and not isinstance(max_retries, int):
            raise TypeError("Expected argument 'max_retries' to be a int")
        pulumi.set(__self__, "max_retries", max_retries)
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        pulumi.set(__self__, "method", method)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if receive and not isinstance(receive, str):
            raise TypeError("Expected argument 'receive' to be a str")
        pulumi.set(__self__, "receive", receive)
        if send and not isinstance(send, str):
            raise TypeError("Expected argument 'send' to be a str")
        pulumi.set(__self__, "send", send)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def expected(self) -> str:
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter
    def extension(self) -> Mapping[str, str]:
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def receive(self) -> str:
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> str:
        return pulumi.get(self, "send")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetLbServiceMonitorResult(GetLbServiceMonitorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbServiceMonitorResult(
            edge_gateway=self.edge_gateway,
            expected=self.expected,
            extension=self.extension,
            id=self.id,
            interval=self.interval,
            max_retries=self.max_retries,
            method=self.method,
            name=self.name,
            org=self.org,
            receive=self.receive,
            send=self.send,
            timeout=self.timeout,
            type=self.type,
            url=self.url,
            vdc=self.vdc)


def get_lb_service_monitor(edge_gateway: Optional[str] = None,
                           name: Optional[str] = None,
                           org: Optional[str] = None,
                           vdc: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbServiceMonitorResult:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Service Monitor data source. A service monitor
    defines health check parameters for a particular type of network traffic. It can be associated with
    a pool. Pool members are monitored according to the service monitor parameters. See example usage of
    this data source in [server pool resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_server_pool).

    > **Note:** See additional support notes in [service monitor resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_service_monitor).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_monitor = vcd.get_lb_service_monitor(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the service monitor is defined
    :param str name: Service Monitor name for identifying the exact service monitor
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getLbServiceMonitor:getLbServiceMonitor', __args__, opts=opts, typ=GetLbServiceMonitorResult).value

    return AwaitableGetLbServiceMonitorResult(
        edge_gateway=pulumi.get(__ret__, 'edge_gateway'),
        expected=pulumi.get(__ret__, 'expected'),
        extension=pulumi.get(__ret__, 'extension'),
        id=pulumi.get(__ret__, 'id'),
        interval=pulumi.get(__ret__, 'interval'),
        max_retries=pulumi.get(__ret__, 'max_retries'),
        method=pulumi.get(__ret__, 'method'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        receive=pulumi.get(__ret__, 'receive'),
        send=pulumi.get(__ret__, 'send'),
        timeout=pulumi.get(__ret__, 'timeout'),
        type=pulumi.get(__ret__, 'type'),
        url=pulumi.get(__ret__, 'url'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_lb_service_monitor_output(edge_gateway: Optional[pulumi.Input[str]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  org: Optional[pulumi.Input[Optional[str]]] = None,
                                  vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLbServiceMonitorResult]:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Service Monitor data source. A service monitor
    defines health check parameters for a particular type of network traffic. It can be associated with
    a pool. Pool members are monitored according to the service monitor parameters. See example usage of
    this data source in [server pool resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_server_pool).

    > **Note:** See additional support notes in [service monitor resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_service_monitor).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_monitor = vcd.get_lb_service_monitor(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the service monitor is defined
    :param str name: Service Monitor name for identifying the exact service monitor
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getLbServiceMonitor:getLbServiceMonitor', __args__, opts=opts, typ=GetLbServiceMonitorResult)
    return __ret__.apply(lambda __response__: GetLbServiceMonitorResult(
        edge_gateway=pulumi.get(__response__, 'edge_gateway'),
        expected=pulumi.get(__response__, 'expected'),
        extension=pulumi.get(__response__, 'extension'),
        id=pulumi.get(__response__, 'id'),
        interval=pulumi.get(__response__, 'interval'),
        max_retries=pulumi.get(__response__, 'max_retries'),
        method=pulumi.get(__response__, 'method'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        receive=pulumi.get(__response__, 'receive'),
        send=pulumi.get(__response__, 'send'),
        timeout=pulumi.get(__response__, 'timeout'),
        type=pulumi.get(__response__, 'type'),
        url=pulumi.get(__response__, 'url'),
        vdc=pulumi.get(__response__, 'vdc')))
