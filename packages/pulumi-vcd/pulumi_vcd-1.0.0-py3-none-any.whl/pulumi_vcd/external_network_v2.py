# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalNetworkV2Args', 'ExternalNetworkV2']

@pulumi.input_type
class ExternalNetworkV2Args:
    def __init__(__self__, *,
                 dedicated_org_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_and_firewall_service_intention: Optional[pulumi.Input[str]] = None,
                 nsxt_network: Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']] = None,
                 route_advertisement_intention: Optional[pulumi.Input[str]] = None,
                 use_ip_spaces: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]] = None):
        """
        The set of arguments for constructing a ExternalNetworkV2 resource.
        :param pulumi.Input[str] dedicated_org_id: An Org ID that this network should be
               dedicated to. Only applicable when `use_ip_spaces=true`
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]] ip_scopes: One or more IP scopes for the network. See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nat_and_firewall_service_intention: Configure intentions for
               NAT and Firewall rule configuration:
               * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
               default behavior.
               * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
               * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
               Edge gateways.
        :param pulumi.Input['ExternalNetworkV2NsxtNetworkArgs'] nsxt_network: NSX-T network definition. See NSX-T Network below for details.
        :param pulumi.Input[str] route_advertisement_intention: Configure intentions for
               Org VDC network Route Advertisement:
               * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
               configured to be advertised. This is the default behavior.
               * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
               advertised by default but can be configured to be advertised after creation.
               * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
               associated with IP Space Uplinks, will be advertised by default. This can be changed on an
               individual network level later, if necessary.
               
               <a id="ipscope"></a>
        :param pulumi.Input[bool] use_ip_spaces: Defines if the network uses IP Spaces. Do
               not specify `ip_scope` when using IP Spaces. (default `false`)
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]] vsphere_networks: One or more blocks of vSphere Network..
        """
        if dedicated_org_id is not None:
            pulumi.set(__self__, "dedicated_org_id", dedicated_org_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_scopes is not None:
            pulumi.set(__self__, "ip_scopes", ip_scopes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_and_firewall_service_intention is not None:
            pulumi.set(__self__, "nat_and_firewall_service_intention", nat_and_firewall_service_intention)
        if nsxt_network is not None:
            pulumi.set(__self__, "nsxt_network", nsxt_network)
        if route_advertisement_intention is not None:
            pulumi.set(__self__, "route_advertisement_intention", route_advertisement_intention)
        if use_ip_spaces is not None:
            pulumi.set(__self__, "use_ip_spaces", use_ip_spaces)
        if vsphere_networks is not None:
            pulumi.set(__self__, "vsphere_networks", vsphere_networks)

    @property
    @pulumi.getter(name="dedicatedOrgId")
    def dedicated_org_id(self) -> Optional[pulumi.Input[str]]:
        """
        An Org ID that this network should be
        dedicated to. Only applicable when `use_ip_spaces=true`
        """
        return pulumi.get(self, "dedicated_org_id")

    @dedicated_org_id.setter
    def dedicated_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_org_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]]:
        """
        One or more IP scopes for the network. See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @ip_scopes.setter
    def ip_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]]):
        pulumi.set(self, "ip_scopes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natAndFirewallServiceIntention")
    def nat_and_firewall_service_intention(self) -> Optional[pulumi.Input[str]]:
        """
        Configure intentions for
        NAT and Firewall rule configuration:
        * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        default behavior.
        * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        Edge gateways.
        """
        return pulumi.get(self, "nat_and_firewall_service_intention")

    @nat_and_firewall_service_intention.setter
    def nat_and_firewall_service_intention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_and_firewall_service_intention", value)

    @property
    @pulumi.getter(name="nsxtNetwork")
    def nsxt_network(self) -> Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']]:
        """
        NSX-T network definition. See NSX-T Network below for details.
        """
        return pulumi.get(self, "nsxt_network")

    @nsxt_network.setter
    def nsxt_network(self, value: Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']]):
        pulumi.set(self, "nsxt_network", value)

    @property
    @pulumi.getter(name="routeAdvertisementIntention")
    def route_advertisement_intention(self) -> Optional[pulumi.Input[str]]:
        """
        Configure intentions for
        Org VDC network Route Advertisement:
        * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        configured to be advertised. This is the default behavior.
        * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        advertised by default but can be configured to be advertised after creation.
        * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        individual network level later, if necessary.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "route_advertisement_intention")

    @route_advertisement_intention.setter
    def route_advertisement_intention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_advertisement_intention", value)

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the network uses IP Spaces. Do
        not specify `ip_scope` when using IP Spaces. (default `false`)
        """
        return pulumi.get(self, "use_ip_spaces")

    @use_ip_spaces.setter
    def use_ip_spaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ip_spaces", value)

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]]:
        """
        One or more blocks of vSphere Network..
        """
        return pulumi.get(self, "vsphere_networks")

    @vsphere_networks.setter
    def vsphere_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]]):
        pulumi.set(self, "vsphere_networks", value)


@pulumi.input_type
class _ExternalNetworkV2State:
    def __init__(__self__, *,
                 dedicated_org_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_and_firewall_service_intention: Optional[pulumi.Input[str]] = None,
                 nsxt_network: Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']] = None,
                 route_advertisement_intention: Optional[pulumi.Input[str]] = None,
                 use_ip_spaces: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]] = None):
        """
        Input properties used for looking up and filtering ExternalNetworkV2 resources.
        :param pulumi.Input[str] dedicated_org_id: An Org ID that this network should be
               dedicated to. Only applicable when `use_ip_spaces=true`
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]] ip_scopes: One or more IP scopes for the network. See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nat_and_firewall_service_intention: Configure intentions for
               NAT and Firewall rule configuration:
               * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
               default behavior.
               * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
               * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
               Edge gateways.
        :param pulumi.Input['ExternalNetworkV2NsxtNetworkArgs'] nsxt_network: NSX-T network definition. See NSX-T Network below for details.
        :param pulumi.Input[str] route_advertisement_intention: Configure intentions for
               Org VDC network Route Advertisement:
               * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
               configured to be advertised. This is the default behavior.
               * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
               advertised by default but can be configured to be advertised after creation.
               * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
               associated with IP Space Uplinks, will be advertised by default. This can be changed on an
               individual network level later, if necessary.
               
               <a id="ipscope"></a>
        :param pulumi.Input[bool] use_ip_spaces: Defines if the network uses IP Spaces. Do
               not specify `ip_scope` when using IP Spaces. (default `false`)
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]] vsphere_networks: One or more blocks of vSphere Network..
        """
        if dedicated_org_id is not None:
            pulumi.set(__self__, "dedicated_org_id", dedicated_org_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_scopes is not None:
            pulumi.set(__self__, "ip_scopes", ip_scopes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_and_firewall_service_intention is not None:
            pulumi.set(__self__, "nat_and_firewall_service_intention", nat_and_firewall_service_intention)
        if nsxt_network is not None:
            pulumi.set(__self__, "nsxt_network", nsxt_network)
        if route_advertisement_intention is not None:
            pulumi.set(__self__, "route_advertisement_intention", route_advertisement_intention)
        if use_ip_spaces is not None:
            pulumi.set(__self__, "use_ip_spaces", use_ip_spaces)
        if vsphere_networks is not None:
            pulumi.set(__self__, "vsphere_networks", vsphere_networks)

    @property
    @pulumi.getter(name="dedicatedOrgId")
    def dedicated_org_id(self) -> Optional[pulumi.Input[str]]:
        """
        An Org ID that this network should be
        dedicated to. Only applicable when `use_ip_spaces=true`
        """
        return pulumi.get(self, "dedicated_org_id")

    @dedicated_org_id.setter
    def dedicated_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_org_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]]:
        """
        One or more IP scopes for the network. See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @ip_scopes.setter
    def ip_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeArgs']]]]):
        pulumi.set(self, "ip_scopes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natAndFirewallServiceIntention")
    def nat_and_firewall_service_intention(self) -> Optional[pulumi.Input[str]]:
        """
        Configure intentions for
        NAT and Firewall rule configuration:
        * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        default behavior.
        * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        Edge gateways.
        """
        return pulumi.get(self, "nat_and_firewall_service_intention")

    @nat_and_firewall_service_intention.setter
    def nat_and_firewall_service_intention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_and_firewall_service_intention", value)

    @property
    @pulumi.getter(name="nsxtNetwork")
    def nsxt_network(self) -> Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']]:
        """
        NSX-T network definition. See NSX-T Network below for details.
        """
        return pulumi.get(self, "nsxt_network")

    @nsxt_network.setter
    def nsxt_network(self, value: Optional[pulumi.Input['ExternalNetworkV2NsxtNetworkArgs']]):
        pulumi.set(self, "nsxt_network", value)

    @property
    @pulumi.getter(name="routeAdvertisementIntention")
    def route_advertisement_intention(self) -> Optional[pulumi.Input[str]]:
        """
        Configure intentions for
        Org VDC network Route Advertisement:
        * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        configured to be advertised. This is the default behavior.
        * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        advertised by default but can be configured to be advertised after creation.
        * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        individual network level later, if necessary.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "route_advertisement_intention")

    @route_advertisement_intention.setter
    def route_advertisement_intention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_advertisement_intention", value)

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the network uses IP Spaces. Do
        not specify `ip_scope` when using IP Spaces. (default `false`)
        """
        return pulumi.get(self, "use_ip_spaces")

    @use_ip_spaces.setter
    def use_ip_spaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ip_spaces", value)

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]]:
        """
        One or more blocks of vSphere Network..
        """
        return pulumi.get(self, "vsphere_networks")

    @vsphere_networks.setter
    def vsphere_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2VsphereNetworkArgs']]]]):
        pulumi.set(self, "vsphere_networks", value)


class ExternalNetworkV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_org_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2IpScopeArgs', 'ExternalNetworkV2IpScopeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_and_firewall_service_intention: Optional[pulumi.Input[str]] = None,
                 nsxt_network: Optional[pulumi.Input[Union['ExternalNetworkV2NsxtNetworkArgs', 'ExternalNetworkV2NsxtNetworkArgsDict']]] = None,
                 route_advertisement_intention: Optional[pulumi.Input[str]] = None,
                 use_ip_spaces: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2VsphereNetworkArgs', 'ExternalNetworkV2VsphereNetworkArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ExternalNetworkV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dedicated_org_id: An Org ID that this network should be
               dedicated to. Only applicable when `use_ip_spaces=true`
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2IpScopeArgs', 'ExternalNetworkV2IpScopeArgsDict']]]] ip_scopes: One or more IP scopes for the network. See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nat_and_firewall_service_intention: Configure intentions for
               NAT and Firewall rule configuration:
               * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
               default behavior.
               * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
               * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
               Edge gateways.
        :param pulumi.Input[Union['ExternalNetworkV2NsxtNetworkArgs', 'ExternalNetworkV2NsxtNetworkArgsDict']] nsxt_network: NSX-T network definition. See NSX-T Network below for details.
        :param pulumi.Input[str] route_advertisement_intention: Configure intentions for
               Org VDC network Route Advertisement:
               * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
               configured to be advertised. This is the default behavior.
               * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
               advertised by default but can be configured to be advertised after creation.
               * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
               associated with IP Space Uplinks, will be advertised by default. This can be changed on an
               individual network level later, if necessary.
               
               <a id="ipscope"></a>
        :param pulumi.Input[bool] use_ip_spaces: Defines if the network uses IP Spaces. Do
               not specify `ip_scope` when using IP Spaces. (default `false`)
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2VsphereNetworkArgs', 'ExternalNetworkV2VsphereNetworkArgsDict']]]] vsphere_networks: One or more blocks of vSphere Network..
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExternalNetworkV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalNetworkV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalNetworkV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalNetworkV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_org_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2IpScopeArgs', 'ExternalNetworkV2IpScopeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_and_firewall_service_intention: Optional[pulumi.Input[str]] = None,
                 nsxt_network: Optional[pulumi.Input[Union['ExternalNetworkV2NsxtNetworkArgs', 'ExternalNetworkV2NsxtNetworkArgsDict']]] = None,
                 route_advertisement_intention: Optional[pulumi.Input[str]] = None,
                 use_ip_spaces: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2VsphereNetworkArgs', 'ExternalNetworkV2VsphereNetworkArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalNetworkV2Args.__new__(ExternalNetworkV2Args)

            __props__.__dict__["dedicated_org_id"] = dedicated_org_id
            __props__.__dict__["description"] = description
            __props__.__dict__["ip_scopes"] = ip_scopes
            __props__.__dict__["name"] = name
            __props__.__dict__["nat_and_firewall_service_intention"] = nat_and_firewall_service_intention
            __props__.__dict__["nsxt_network"] = nsxt_network
            __props__.__dict__["route_advertisement_intention"] = route_advertisement_intention
            __props__.__dict__["use_ip_spaces"] = use_ip_spaces
            __props__.__dict__["vsphere_networks"] = vsphere_networks
        super(ExternalNetworkV2, __self__).__init__(
            'vcd:index/externalNetworkV2:ExternalNetworkV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dedicated_org_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2IpScopeArgs', 'ExternalNetworkV2IpScopeArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat_and_firewall_service_intention: Optional[pulumi.Input[str]] = None,
            nsxt_network: Optional[pulumi.Input[Union['ExternalNetworkV2NsxtNetworkArgs', 'ExternalNetworkV2NsxtNetworkArgsDict']]] = None,
            route_advertisement_intention: Optional[pulumi.Input[str]] = None,
            use_ip_spaces: Optional[pulumi.Input[bool]] = None,
            vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2VsphereNetworkArgs', 'ExternalNetworkV2VsphereNetworkArgsDict']]]]] = None) -> 'ExternalNetworkV2':
        """
        Get an existing ExternalNetworkV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dedicated_org_id: An Org ID that this network should be
               dedicated to. Only applicable when `use_ip_spaces=true`
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2IpScopeArgs', 'ExternalNetworkV2IpScopeArgsDict']]]] ip_scopes: One or more IP scopes for the network. See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] nat_and_firewall_service_intention: Configure intentions for
               NAT and Firewall rule configuration:
               * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
               default behavior.
               * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
               * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
               Edge gateways.
        :param pulumi.Input[Union['ExternalNetworkV2NsxtNetworkArgs', 'ExternalNetworkV2NsxtNetworkArgsDict']] nsxt_network: NSX-T network definition. See NSX-T Network below for details.
        :param pulumi.Input[str] route_advertisement_intention: Configure intentions for
               Org VDC network Route Advertisement:
               * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
               configured to be advertised. This is the default behavior.
               * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
               Uplink will be advertised by default. This can be changed on an individual network level later,
               if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
               advertised by default but can be configured to be advertised after creation.
               * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
               associated with IP Space Uplinks, will be advertised by default. This can be changed on an
               individual network level later, if necessary.
               
               <a id="ipscope"></a>
        :param pulumi.Input[bool] use_ip_spaces: Defines if the network uses IP Spaces. Do
               not specify `ip_scope` when using IP Spaces. (default `false`)
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkV2VsphereNetworkArgs', 'ExternalNetworkV2VsphereNetworkArgsDict']]]] vsphere_networks: One or more blocks of vSphere Network..
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalNetworkV2State.__new__(_ExternalNetworkV2State)

        __props__.__dict__["dedicated_org_id"] = dedicated_org_id
        __props__.__dict__["description"] = description
        __props__.__dict__["ip_scopes"] = ip_scopes
        __props__.__dict__["name"] = name
        __props__.__dict__["nat_and_firewall_service_intention"] = nat_and_firewall_service_intention
        __props__.__dict__["nsxt_network"] = nsxt_network
        __props__.__dict__["route_advertisement_intention"] = route_advertisement_intention
        __props__.__dict__["use_ip_spaces"] = use_ip_spaces
        __props__.__dict__["vsphere_networks"] = vsphere_networks
        return ExternalNetworkV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dedicatedOrgId")
    def dedicated_org_id(self) -> pulumi.Output[str]:
        """
        An Org ID that this network should be
        dedicated to. Only applicable when `use_ip_spaces=true`
        """
        return pulumi.get(self, "dedicated_org_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> pulumi.Output[Optional[Sequence['outputs.ExternalNetworkV2IpScope']]]:
        """
        One or more IP scopes for the network. See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natAndFirewallServiceIntention")
    def nat_and_firewall_service_intention(self) -> pulumi.Output[str]:
        """
        Configure intentions for
        NAT and Firewall rule configuration:
        * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        default behavior.
        * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        Edge gateways.
        """
        return pulumi.get(self, "nat_and_firewall_service_intention")

    @property
    @pulumi.getter(name="nsxtNetwork")
    def nsxt_network(self) -> pulumi.Output[Optional['outputs.ExternalNetworkV2NsxtNetwork']]:
        """
        NSX-T network definition. See NSX-T Network below for details.
        """
        return pulumi.get(self, "nsxt_network")

    @property
    @pulumi.getter(name="routeAdvertisementIntention")
    def route_advertisement_intention(self) -> pulumi.Output[str]:
        """
        Configure intentions for
        Org VDC network Route Advertisement:
        * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        configured to be advertised. This is the default behavior.
        * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        Uplink will be advertised by default. This can be changed on an individual network level later,
        if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        advertised by default but can be configured to be advertised after creation.
        * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        individual network level later, if necessary.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "route_advertisement_intention")

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the network uses IP Spaces. Do
        not specify `ip_scope` when using IP Spaces. (default `false`)
        """
        return pulumi.get(self, "use_ip_spaces")

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> pulumi.Output[Optional[Sequence['outputs.ExternalNetworkV2VsphereNetwork']]]:
        """
        One or more blocks of vSphere Network..
        """
        return pulumi.get(self, "vsphere_networks")

