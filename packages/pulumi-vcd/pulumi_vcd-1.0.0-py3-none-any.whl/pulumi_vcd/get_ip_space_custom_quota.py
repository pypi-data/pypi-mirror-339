# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIpSpaceCustomQuotaResult',
    'AwaitableGetIpSpaceCustomQuotaResult',
    'get_ip_space_custom_quota',
    'get_ip_space_custom_quota_output',
]

@pulumi.output_type
class GetIpSpaceCustomQuotaResult:
    """
    A collection of values returned by getIpSpaceCustomQuota.
    """
    def __init__(__self__, id=None, ip_prefix_quotas=None, ip_range_quota=None, ip_space_id=None, org_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_prefix_quotas and not isinstance(ip_prefix_quotas, list):
            raise TypeError("Expected argument 'ip_prefix_quotas' to be a list")
        pulumi.set(__self__, "ip_prefix_quotas", ip_prefix_quotas)
        if ip_range_quota and not isinstance(ip_range_quota, str):
            raise TypeError("Expected argument 'ip_range_quota' to be a str")
        pulumi.set(__self__, "ip_range_quota", ip_range_quota)
        if ip_space_id and not isinstance(ip_space_id, str):
            raise TypeError("Expected argument 'ip_space_id' to be a str")
        pulumi.set(__self__, "ip_space_id", ip_space_id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipPrefixQuotas")
    def ip_prefix_quotas(self) -> Sequence['outputs.GetIpSpaceCustomQuotaIpPrefixQuotaResult']:
        return pulumi.get(self, "ip_prefix_quotas")

    @property
    @pulumi.getter(name="ipRangeQuota")
    def ip_range_quota(self) -> str:
        return pulumi.get(self, "ip_range_quota")

    @property
    @pulumi.getter(name="ipSpaceId")
    def ip_space_id(self) -> str:
        return pulumi.get(self, "ip_space_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


class AwaitableGetIpSpaceCustomQuotaResult(GetIpSpaceCustomQuotaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpSpaceCustomQuotaResult(
            id=self.id,
            ip_prefix_quotas=self.ip_prefix_quotas,
            ip_range_quota=self.ip_range_quota,
            ip_space_id=self.ip_space_id,
            org_id=self.org_id)


def get_ip_space_custom_quota(ip_space_id: Optional[str] = None,
                              org_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpSpaceCustomQuotaResult:
    """
    Provides a data source to read Custom Quotas for a given Org in a particular IP Space.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    org1 = vcd.get_ip_space_custom_quota(org_id=org1_vcd_org["id"],
        ip_space_id=space1["id"])
    ```


    :param str ip_space_id: IP Space ID to read Custom Quotas
    :param str org_id: Organization ID, for which the Custom Quota should be read
    """
    __args__ = dict()
    __args__['ipSpaceId'] = ip_space_id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getIpSpaceCustomQuota:getIpSpaceCustomQuota', __args__, opts=opts, typ=GetIpSpaceCustomQuotaResult).value

    return AwaitableGetIpSpaceCustomQuotaResult(
        id=pulumi.get(__ret__, 'id'),
        ip_prefix_quotas=pulumi.get(__ret__, 'ip_prefix_quotas'),
        ip_range_quota=pulumi.get(__ret__, 'ip_range_quota'),
        ip_space_id=pulumi.get(__ret__, 'ip_space_id'),
        org_id=pulumi.get(__ret__, 'org_id'))
def get_ip_space_custom_quota_output(ip_space_id: Optional[pulumi.Input[str]] = None,
                                     org_id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpSpaceCustomQuotaResult]:
    """
    Provides a data source to read Custom Quotas for a given Org in a particular IP Space.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    org1 = vcd.get_ip_space_custom_quota(org_id=org1_vcd_org["id"],
        ip_space_id=space1["id"])
    ```


    :param str ip_space_id: IP Space ID to read Custom Quotas
    :param str org_id: Organization ID, for which the Custom Quota should be read
    """
    __args__ = dict()
    __args__['ipSpaceId'] = ip_space_id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getIpSpaceCustomQuota:getIpSpaceCustomQuota', __args__, opts=opts, typ=GetIpSpaceCustomQuotaResult)
    return __ret__.apply(lambda __response__: GetIpSpaceCustomQuotaResult(
        id=pulumi.get(__response__, 'id'),
        ip_prefix_quotas=pulumi.get(__response__, 'ip_prefix_quotas'),
        ip_range_quota=pulumi.get(__response__, 'ip_range_quota'),
        ip_space_id=pulumi.get(__response__, 'ip_space_id'),
        org_id=pulumi.get(__response__, 'org_id')))
