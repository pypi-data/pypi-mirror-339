# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServiceAccountArgs', 'ServiceAccount']

@pulumi.input_type
class ServiceAccountArgs:
    def __init__(__self__, *,
                 role_id: pulumi.Input[str],
                 software_id: pulumi.Input[str],
                 active: Optional[pulumi.Input[bool]] = None,
                 allow_token_file: Optional[pulumi.Input[bool]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceAccount resource.
        :param pulumi.Input[str] role_id: Role ID of service account
        :param pulumi.Input[str] software_id: UUID of the Service Account.
        :param pulumi.Input[bool] active: Status of the Service Account. Can be set to `false` and back to `true` if
               the access token was lost to get a new one.
        :param pulumi.Input[bool] allow_token_file: If set to false, will output a warning about the service account file
               containing sensitive information.
        :param pulumi.Input[str] file_name: Required only when `active` is set to `true`. Contains the access token
               that can be used for authenticating to VCD.
        :param pulumi.Input[str] name: A unique name for the Service Account in an organisation.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] software_version: Version of the service using the Service Account
        :param pulumi.Input[str] uri: URI of the service using the Service Account
        """
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "software_id", software_id)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if allow_token_file is not None:
            pulumi.set(__self__, "allow_token_file", allow_token_file)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        Role ID of service account
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="softwareId")
    def software_id(self) -> pulumi.Input[str]:
        """
        UUID of the Service Account.
        """
        return pulumi.get(self, "software_id")

    @software_id.setter
    def software_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "software_id", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Status of the Service Account. Can be set to `false` and back to `true` if
        the access token was lost to get a new one.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="allowTokenFile")
    def allow_token_file(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, will output a warning about the service account file
        containing sensitive information.
        """
        return pulumi.get(self, "allow_token_file")

    @allow_token_file.setter
    def allow_token_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_token_file", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required only when `active` is set to `true`. Contains the access token
        that can be used for authenticating to VCD.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the Service Account in an organisation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the service using the Service Account
        """
        return pulumi.get(self, "software_version")

    @software_version.setter
    def software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_version", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the service using the Service Account
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class _ServiceAccountState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 allow_token_file: Optional[pulumi.Input[bool]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 software_id: Optional[pulumi.Input[str]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceAccount resources.
        :param pulumi.Input[bool] active: Status of the Service Account. Can be set to `false` and back to `true` if
               the access token was lost to get a new one.
        :param pulumi.Input[bool] allow_token_file: If set to false, will output a warning about the service account file
               containing sensitive information.
        :param pulumi.Input[str] file_name: Required only when `active` is set to `true`. Contains the access token
               that can be used for authenticating to VCD.
        :param pulumi.Input[str] name: A unique name for the Service Account in an organisation.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] role_id: Role ID of service account
        :param pulumi.Input[str] software_id: UUID of the Service Account.
        :param pulumi.Input[str] software_version: Version of the service using the Service Account
        :param pulumi.Input[str] uri: URI of the service using the Service Account
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if allow_token_file is not None:
            pulumi.set(__self__, "allow_token_file", allow_token_file)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if software_id is not None:
            pulumi.set(__self__, "software_id", software_id)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Status of the Service Account. Can be set to `false` and back to `true` if
        the access token was lost to get a new one.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="allowTokenFile")
    def allow_token_file(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, will output a warning about the service account file
        containing sensitive information.
        """
        return pulumi.get(self, "allow_token_file")

    @allow_token_file.setter
    def allow_token_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_token_file", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required only when `active` is set to `true`. Contains the access token
        that can be used for authenticating to VCD.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the Service Account in an organisation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Role ID of service account
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="softwareId")
    def software_id(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the Service Account.
        """
        return pulumi.get(self, "software_id")

    @software_id.setter
    def software_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_id", value)

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the service using the Service Account
        """
        return pulumi.get(self, "software_version")

    @software_version.setter
    def software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_version", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the service using the Service Account
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


class ServiceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 allow_token_file: Optional[pulumi.Input[bool]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 software_id: Optional[pulumi.Input[str]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Status of the Service Account. Can be set to `false` and back to `true` if
               the access token was lost to get a new one.
        :param pulumi.Input[bool] allow_token_file: If set to false, will output a warning about the service account file
               containing sensitive information.
        :param pulumi.Input[str] file_name: Required only when `active` is set to `true`. Contains the access token
               that can be used for authenticating to VCD.
        :param pulumi.Input[str] name: A unique name for the Service Account in an organisation.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] role_id: Role ID of service account
        :param pulumi.Input[str] software_id: UUID of the Service Account.
        :param pulumi.Input[str] software_version: Version of the service using the Service Account
        :param pulumi.Input[str] uri: URI of the service using the Service Account
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 allow_token_file: Optional[pulumi.Input[bool]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 software_id: Optional[pulumi.Input[str]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["allow_token_file"] = allow_token_file
            __props__.__dict__["file_name"] = file_name
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            if software_id is None and not opts.urn:
                raise TypeError("Missing required property 'software_id'")
            __props__.__dict__["software_id"] = software_id
            __props__.__dict__["software_version"] = software_version
            __props__.__dict__["uri"] = uri
        super(ServiceAccount, __self__).__init__(
            'vcd:index/serviceAccount:ServiceAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            allow_token_file: Optional[pulumi.Input[bool]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            software_id: Optional[pulumi.Input[str]] = None,
            software_version: Optional[pulumi.Input[str]] = None,
            uri: Optional[pulumi.Input[str]] = None) -> 'ServiceAccount':
        """
        Get an existing ServiceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Status of the Service Account. Can be set to `false` and back to `true` if
               the access token was lost to get a new one.
        :param pulumi.Input[bool] allow_token_file: If set to false, will output a warning about the service account file
               containing sensitive information.
        :param pulumi.Input[str] file_name: Required only when `active` is set to `true`. Contains the access token
               that can be used for authenticating to VCD.
        :param pulumi.Input[str] name: A unique name for the Service Account in an organisation.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] role_id: Role ID of service account
        :param pulumi.Input[str] software_id: UUID of the Service Account.
        :param pulumi.Input[str] software_version: Version of the service using the Service Account
        :param pulumi.Input[str] uri: URI of the service using the Service Account
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountState.__new__(_ServiceAccountState)

        __props__.__dict__["active"] = active
        __props__.__dict__["allow_token_file"] = allow_token_file
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["software_id"] = software_id
        __props__.__dict__["software_version"] = software_version
        __props__.__dict__["uri"] = uri
        return ServiceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Status of the Service Account. Can be set to `false` and back to `true` if
        the access token was lost to get a new one.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="allowTokenFile")
    def allow_token_file(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to false, will output a warning about the service account file
        containing sensitive information.
        """
        return pulumi.get(self, "allow_token_file")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[Optional[str]]:
        """
        Required only when `active` is set to `true`. Contains the access token
        that can be used for authenticating to VCD.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the Service Account in an organisation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Role ID of service account
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="softwareId")
    def software_id(self) -> pulumi.Output[str]:
        """
        UUID of the Service Account.
        """
        return pulumi.get(self, "software_id")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of the service using the Service Account
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[Optional[str]]:
        """
        URI of the service using the Service Account
        """
        return pulumi.get(self, "uri")

