# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDseRegistryConfigurationResult',
    'AwaitableGetDseRegistryConfigurationResult',
    'get_dse_registry_configuration',
    'get_dse_registry_configuration_output',
]

@pulumi.output_type
class GetDseRegistryConfigurationResult:
    """
    A collection of values returned by getDseRegistryConfiguration.
    """
    def __init__(__self__, chart_repository=None, compatible_version_constraints=None, container_registries=None, default_chart_repository=None, default_package_name=None, default_repository=None, default_version=None, id=None, name=None, package_name=None, package_repository=None, rde_state=None, requires_version_compatibility=None, type=None, version=None):
        if chart_repository and not isinstance(chart_repository, str):
            raise TypeError("Expected argument 'chart_repository' to be a str")
        pulumi.set(__self__, "chart_repository", chart_repository)
        if compatible_version_constraints and not isinstance(compatible_version_constraints, list):
            raise TypeError("Expected argument 'compatible_version_constraints' to be a list")
        pulumi.set(__self__, "compatible_version_constraints", compatible_version_constraints)
        if container_registries and not isinstance(container_registries, list):
            raise TypeError("Expected argument 'container_registries' to be a list")
        pulumi.set(__self__, "container_registries", container_registries)
        if default_chart_repository and not isinstance(default_chart_repository, str):
            raise TypeError("Expected argument 'default_chart_repository' to be a str")
        pulumi.set(__self__, "default_chart_repository", default_chart_repository)
        if default_package_name and not isinstance(default_package_name, str):
            raise TypeError("Expected argument 'default_package_name' to be a str")
        pulumi.set(__self__, "default_package_name", default_package_name)
        if default_repository and not isinstance(default_repository, str):
            raise TypeError("Expected argument 'default_repository' to be a str")
        pulumi.set(__self__, "default_repository", default_repository)
        if default_version and not isinstance(default_version, str):
            raise TypeError("Expected argument 'default_version' to be a str")
        pulumi.set(__self__, "default_version", default_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package_name and not isinstance(package_name, str):
            raise TypeError("Expected argument 'package_name' to be a str")
        pulumi.set(__self__, "package_name", package_name)
        if package_repository and not isinstance(package_repository, str):
            raise TypeError("Expected argument 'package_repository' to be a str")
        pulumi.set(__self__, "package_repository", package_repository)
        if rde_state and not isinstance(rde_state, str):
            raise TypeError("Expected argument 'rde_state' to be a str")
        pulumi.set(__self__, "rde_state", rde_state)
        if requires_version_compatibility and not isinstance(requires_version_compatibility, bool):
            raise TypeError("Expected argument 'requires_version_compatibility' to be a bool")
        pulumi.set(__self__, "requires_version_compatibility", requires_version_compatibility)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="chartRepository")
    def chart_repository(self) -> str:
        return pulumi.get(self, "chart_repository")

    @property
    @pulumi.getter(name="compatibleVersionConstraints")
    def compatible_version_constraints(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_version_constraints")

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> Sequence['outputs.GetDseRegistryConfigurationContainerRegistryResult']:
        return pulumi.get(self, "container_registries")

    @property
    @pulumi.getter(name="defaultChartRepository")
    def default_chart_repository(self) -> str:
        return pulumi.get(self, "default_chart_repository")

    @property
    @pulumi.getter(name="defaultPackageName")
    def default_package_name(self) -> str:
        return pulumi.get(self, "default_package_name")

    @property
    @pulumi.getter(name="defaultRepository")
    def default_repository(self) -> str:
        return pulumi.get(self, "default_repository")

    @property
    @pulumi.getter(name="defaultVersion")
    def default_version(self) -> str:
        return pulumi.get(self, "default_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> str:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageRepository")
    def package_repository(self) -> str:
        return pulumi.get(self, "package_repository")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> str:
        return pulumi.get(self, "rde_state")

    @property
    @pulumi.getter(name="requiresVersionCompatibility")
    def requires_version_compatibility(self) -> bool:
        return pulumi.get(self, "requires_version_compatibility")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetDseRegistryConfigurationResult(GetDseRegistryConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDseRegistryConfigurationResult(
            chart_repository=self.chart_repository,
            compatible_version_constraints=self.compatible_version_constraints,
            container_registries=self.container_registries,
            default_chart_repository=self.default_chart_repository,
            default_package_name=self.default_package_name,
            default_repository=self.default_repository,
            default_version=self.default_version,
            id=self.id,
            name=self.name,
            package_name=self.package_name,
            package_repository=self.package_repository,
            rde_state=self.rde_state,
            requires_version_compatibility=self.requires_version_compatibility,
            type=self.type,
            version=self.version)


def get_dse_registry_configuration(name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDseRegistryConfigurationResult:
    """
    Supported in provider *v3.13+* with Data Solution Extension.

    Provides a data source to read Data Solution Extension (DSE) registry configuration.

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    mongodb = vcd.get_dse_registry_configuration(name="MongoDB")
    ```


    :param str name: The name of Data Solution as it appears in repository configuration
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getDseRegistryConfiguration:getDseRegistryConfiguration', __args__, opts=opts, typ=GetDseRegistryConfigurationResult).value

    return AwaitableGetDseRegistryConfigurationResult(
        chart_repository=pulumi.get(__ret__, 'chart_repository'),
        compatible_version_constraints=pulumi.get(__ret__, 'compatible_version_constraints'),
        container_registries=pulumi.get(__ret__, 'container_registries'),
        default_chart_repository=pulumi.get(__ret__, 'default_chart_repository'),
        default_package_name=pulumi.get(__ret__, 'default_package_name'),
        default_repository=pulumi.get(__ret__, 'default_repository'),
        default_version=pulumi.get(__ret__, 'default_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        package_name=pulumi.get(__ret__, 'package_name'),
        package_repository=pulumi.get(__ret__, 'package_repository'),
        rde_state=pulumi.get(__ret__, 'rde_state'),
        requires_version_compatibility=pulumi.get(__ret__, 'requires_version_compatibility'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_dse_registry_configuration_output(name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDseRegistryConfigurationResult]:
    """
    Supported in provider *v3.13+* with Data Solution Extension.

    Provides a data source to read Data Solution Extension (DSE) registry configuration.

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    mongodb = vcd.get_dse_registry_configuration(name="MongoDB")
    ```


    :param str name: The name of Data Solution as it appears in repository configuration
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getDseRegistryConfiguration:getDseRegistryConfiguration', __args__, opts=opts, typ=GetDseRegistryConfigurationResult)
    return __ret__.apply(lambda __response__: GetDseRegistryConfigurationResult(
        chart_repository=pulumi.get(__response__, 'chart_repository'),
        compatible_version_constraints=pulumi.get(__response__, 'compatible_version_constraints'),
        container_registries=pulumi.get(__response__, 'container_registries'),
        default_chart_repository=pulumi.get(__response__, 'default_chart_repository'),
        default_package_name=pulumi.get(__response__, 'default_package_name'),
        default_repository=pulumi.get(__response__, 'default_repository'),
        default_version=pulumi.get(__response__, 'default_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        package_name=pulumi.get(__response__, 'package_name'),
        package_repository=pulumi.get(__response__, 'package_repository'),
        rde_state=pulumi.get(__response__, 'rde_state'),
        requires_version_compatibility=pulumi.get(__response__, 'requires_version_compatibility'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
