# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbVirtualServerArgs', 'LbVirtualServer']

@pulumi.input_type
class LbVirtualServerArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 ip_address: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 app_profile_id: Optional[pulumi.Input[str]] = None,
                 app_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 connection_rate_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 server_pool_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbVirtualServer resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the virtual server is to be
               created
        :param pulumi.Input[str] ip_address: Set the IP address that the load balancer listens on
        :param pulumi.Input[int] port: The port number that the load balancer listens on
        :param pulumi.Input[str] protocol: Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
               `http`, or `https` **Note**: You must select the same protocol used by the selected
               **Application Profile**
        :param pulumi.Input[str] app_profile_id: Application profile ID to be associated with the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_rule_ids: List of attached application rule IDs
        :param pulumi.Input[int] connection_limit: Maximum concurrent connections that the virtual server can process
        :param pulumi.Input[int] connection_rate_limit: Maximum incoming new connection requests per second
        :param pulumi.Input[str] description: Virtual server description
        :param pulumi.Input[bool] enable_acceleration: Defines if the virtual server uses acceleration. Default
               `false`
        :param pulumi.Input[bool] enabled: Defines if the virtual server is enabled. Default `true`
        :param pulumi.Input[str] name: Virtual server name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] server_pool_id: The server pool that the load balancer will use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if app_profile_id is not None:
            pulumi.set(__self__, "app_profile_id", app_profile_id)
        if app_rule_ids is not None:
            pulumi.set(__self__, "app_rule_ids", app_rule_ids)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if connection_rate_limit is not None:
            pulumi.set(__self__, "connection_rate_limit", connection_rate_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if server_pool_id is not None:
            pulumi.set(__self__, "server_pool_id", server_pool_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which the virtual server is to be
        created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        """
        Set the IP address that the load balancer listens on
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port number that the load balancer listens on
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
        `http`, or `https` **Note**: You must select the same protocol used by the selected
        **Application Profile**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="appProfileId")
    def app_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Application profile ID to be associated with the virtual server
        """
        return pulumi.get(self, "app_profile_id")

    @app_profile_id.setter
    def app_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_profile_id", value)

    @property
    @pulumi.getter(name="appRuleIds")
    def app_rule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of attached application rule IDs
        """
        return pulumi.get(self, "app_rule_ids")

    @app_rule_ids.setter
    def app_rule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_rule_ids", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrent connections that the virtual server can process
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="connectionRateLimit")
    def connection_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum incoming new connection requests per second
        """
        return pulumi.get(self, "connection_rate_limit")

    @connection_rate_limit.setter
    def connection_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_rate_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual server description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the virtual server uses acceleration. Default
        `false`
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the virtual server is enabled. Default `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="serverPoolId")
    def server_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The server pool that the load balancer will use
        """
        return pulumi.get(self, "server_pool_id")

    @server_pool_id.setter
    def server_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_pool_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _LbVirtualServerState:
    def __init__(__self__, *,
                 app_profile_id: Optional[pulumi.Input[str]] = None,
                 app_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 connection_rate_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_pool_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbVirtualServer resources.
        :param pulumi.Input[str] app_profile_id: Application profile ID to be associated with the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_rule_ids: List of attached application rule IDs
        :param pulumi.Input[int] connection_limit: Maximum concurrent connections that the virtual server can process
        :param pulumi.Input[int] connection_rate_limit: Maximum incoming new connection requests per second
        :param pulumi.Input[str] description: Virtual server description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the virtual server is to be
               created
        :param pulumi.Input[bool] enable_acceleration: Defines if the virtual server uses acceleration. Default
               `false`
        :param pulumi.Input[bool] enabled: Defines if the virtual server is enabled. Default `true`
        :param pulumi.Input[str] ip_address: Set the IP address that the load balancer listens on
        :param pulumi.Input[str] name: Virtual server name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[int] port: The port number that the load balancer listens on
        :param pulumi.Input[str] protocol: Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
               `http`, or `https` **Note**: You must select the same protocol used by the selected
               **Application Profile**
        :param pulumi.Input[str] server_pool_id: The server pool that the load balancer will use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if app_profile_id is not None:
            pulumi.set(__self__, "app_profile_id", app_profile_id)
        if app_rule_ids is not None:
            pulumi.set(__self__, "app_rule_ids", app_rule_ids)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if connection_rate_limit is not None:
            pulumi.set(__self__, "connection_rate_limit", connection_rate_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if server_pool_id is not None:
            pulumi.set(__self__, "server_pool_id", server_pool_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="appProfileId")
    def app_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Application profile ID to be associated with the virtual server
        """
        return pulumi.get(self, "app_profile_id")

    @app_profile_id.setter
    def app_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_profile_id", value)

    @property
    @pulumi.getter(name="appRuleIds")
    def app_rule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of attached application rule IDs
        """
        return pulumi.get(self, "app_rule_ids")

    @app_rule_ids.setter
    def app_rule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_rule_ids", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrent connections that the virtual server can process
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="connectionRateLimit")
    def connection_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum incoming new connection requests per second
        """
        return pulumi.get(self, "connection_rate_limit")

    @connection_rate_limit.setter
    def connection_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_rate_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual server description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which the virtual server is to be
        created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the virtual server uses acceleration. Default
        `false`
        """
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the virtual server is enabled. Default `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Set the IP address that the load balancer listens on
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port number that the load balancer listens on
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
        `http`, or `https` **Note**: You must select the same protocol used by the selected
        **Application Profile**
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serverPoolId")
    def server_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The server pool that the load balancer will use
        """
        return pulumi.get(self, "server_pool_id")

    @server_pool_id.setter
    def server_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_pool_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class LbVirtualServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_profile_id: Optional[pulumi.Input[str]] = None,
                 app_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 connection_rate_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_pool_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LbVirtualServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_profile_id: Application profile ID to be associated with the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_rule_ids: List of attached application rule IDs
        :param pulumi.Input[int] connection_limit: Maximum concurrent connections that the virtual server can process
        :param pulumi.Input[int] connection_rate_limit: Maximum incoming new connection requests per second
        :param pulumi.Input[str] description: Virtual server description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the virtual server is to be
               created
        :param pulumi.Input[bool] enable_acceleration: Defines if the virtual server uses acceleration. Default
               `false`
        :param pulumi.Input[bool] enabled: Defines if the virtual server is enabled. Default `true`
        :param pulumi.Input[str] ip_address: Set the IP address that the load balancer listens on
        :param pulumi.Input[str] name: Virtual server name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[int] port: The port number that the load balancer listens on
        :param pulumi.Input[str] protocol: Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
               `http`, or `https` **Note**: You must select the same protocol used by the selected
               **Application Profile**
        :param pulumi.Input[str] server_pool_id: The server pool that the load balancer will use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbVirtualServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbVirtualServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbVirtualServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbVirtualServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_profile_id: Optional[pulumi.Input[str]] = None,
                 app_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 connection_rate_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_pool_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbVirtualServerArgs.__new__(LbVirtualServerArgs)

            __props__.__dict__["app_profile_id"] = app_profile_id
            __props__.__dict__["app_rule_ids"] = app_rule_ids
            __props__.__dict__["connection_limit"] = connection_limit
            __props__.__dict__["connection_rate_limit"] = connection_rate_limit
            __props__.__dict__["description"] = description
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["enable_acceleration"] = enable_acceleration
            __props__.__dict__["enabled"] = enabled
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["server_pool_id"] = server_pool_id
            __props__.__dict__["vdc"] = vdc
        super(LbVirtualServer, __self__).__init__(
            'vcd:index/lbVirtualServer:LbVirtualServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_profile_id: Optional[pulumi.Input[str]] = None,
            app_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            connection_limit: Optional[pulumi.Input[int]] = None,
            connection_rate_limit: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            enable_acceleration: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            server_pool_id: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'LbVirtualServer':
        """
        Get an existing LbVirtualServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_profile_id: Application profile ID to be associated with the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_rule_ids: List of attached application rule IDs
        :param pulumi.Input[int] connection_limit: Maximum concurrent connections that the virtual server can process
        :param pulumi.Input[int] connection_rate_limit: Maximum incoming new connection requests per second
        :param pulumi.Input[str] description: Virtual server description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the virtual server is to be
               created
        :param pulumi.Input[bool] enable_acceleration: Defines if the virtual server uses acceleration. Default
               `false`
        :param pulumi.Input[bool] enabled: Defines if the virtual server is enabled. Default `true`
        :param pulumi.Input[str] ip_address: Set the IP address that the load balancer listens on
        :param pulumi.Input[str] name: Virtual server name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[int] port: The port number that the load balancer listens on
        :param pulumi.Input[str] protocol: Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
               `http`, or `https` **Note**: You must select the same protocol used by the selected
               **Application Profile**
        :param pulumi.Input[str] server_pool_id: The server pool that the load balancer will use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbVirtualServerState.__new__(_LbVirtualServerState)

        __props__.__dict__["app_profile_id"] = app_profile_id
        __props__.__dict__["app_rule_ids"] = app_rule_ids
        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["connection_rate_limit"] = connection_rate_limit
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["enable_acceleration"] = enable_acceleration
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["server_pool_id"] = server_pool_id
        __props__.__dict__["vdc"] = vdc
        return LbVirtualServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appProfileId")
    def app_profile_id(self) -> pulumi.Output[Optional[str]]:
        """
        Application profile ID to be associated with the virtual server
        """
        return pulumi.get(self, "app_profile_id")

    @property
    @pulumi.getter(name="appRuleIds")
    def app_rule_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of attached application rule IDs
        """
        return pulumi.get(self, "app_rule_ids")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum concurrent connections that the virtual server can process
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="connectionRateLimit")
    def connection_rate_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum incoming new connection requests per second
        """
        return pulumi.get(self, "connection_rate_limit")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual server description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which the virtual server is to be
        created
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the virtual server uses acceleration. Default
        `false`
        """
        return pulumi.get(self, "enable_acceleration")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the virtual server is enabled. Default `true`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        Set the IP address that the load balancer listens on
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Virtual server name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port number that the load balancer listens on
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Select the protocol that the virtual server accepts. One of `tcp`, `udp`,
        `http`, or `https` **Note**: You must select the same protocol used by the selected
        **Application Profile**
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serverPoolId")
    def server_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        The server pool that the load balancer will use
        """
        return pulumi.get(self, "server_pool_id")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

