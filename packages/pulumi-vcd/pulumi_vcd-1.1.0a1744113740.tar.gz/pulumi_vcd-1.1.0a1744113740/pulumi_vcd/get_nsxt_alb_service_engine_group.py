# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtAlbServiceEngineGroupResult',
    'AwaitableGetNsxtAlbServiceEngineGroupResult',
    'get_nsxt_alb_service_engine_group',
    'get_nsxt_alb_service_engine_group_output',
]

@pulumi.output_type
class GetNsxtAlbServiceEngineGroupResult:
    """
    A collection of values returned by getNsxtAlbServiceEngineGroup.
    """
    def __init__(__self__, alb_cloud_id=None, deployed_virtual_services=None, description=None, ha_mode=None, id=None, max_virtual_services=None, name=None, overallocated=None, reservation_model=None, reserved_virtual_services=None, supported_feature_set=None, sync_on_refresh=None):
        if alb_cloud_id and not isinstance(alb_cloud_id, str):
            raise TypeError("Expected argument 'alb_cloud_id' to be a str")
        pulumi.set(__self__, "alb_cloud_id", alb_cloud_id)
        if deployed_virtual_services and not isinstance(deployed_virtual_services, int):
            raise TypeError("Expected argument 'deployed_virtual_services' to be a int")
        pulumi.set(__self__, "deployed_virtual_services", deployed_virtual_services)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ha_mode and not isinstance(ha_mode, str):
            raise TypeError("Expected argument 'ha_mode' to be a str")
        pulumi.set(__self__, "ha_mode", ha_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_virtual_services and not isinstance(max_virtual_services, int):
            raise TypeError("Expected argument 'max_virtual_services' to be a int")
        pulumi.set(__self__, "max_virtual_services", max_virtual_services)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if overallocated and not isinstance(overallocated, bool):
            raise TypeError("Expected argument 'overallocated' to be a bool")
        pulumi.set(__self__, "overallocated", overallocated)
        if reservation_model and not isinstance(reservation_model, str):
            raise TypeError("Expected argument 'reservation_model' to be a str")
        pulumi.set(__self__, "reservation_model", reservation_model)
        if reserved_virtual_services and not isinstance(reserved_virtual_services, int):
            raise TypeError("Expected argument 'reserved_virtual_services' to be a int")
        pulumi.set(__self__, "reserved_virtual_services", reserved_virtual_services)
        if supported_feature_set and not isinstance(supported_feature_set, str):
            raise TypeError("Expected argument 'supported_feature_set' to be a str")
        pulumi.set(__self__, "supported_feature_set", supported_feature_set)
        if sync_on_refresh and not isinstance(sync_on_refresh, bool):
            raise TypeError("Expected argument 'sync_on_refresh' to be a bool")
        pulumi.set(__self__, "sync_on_refresh", sync_on_refresh)

    @property
    @pulumi.getter(name="albCloudId")
    def alb_cloud_id(self) -> str:
        return pulumi.get(self, "alb_cloud_id")

    @property
    @pulumi.getter(name="deployedVirtualServices")
    def deployed_virtual_services(self) -> int:
        return pulumi.get(self, "deployed_virtual_services")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> str:
        return pulumi.get(self, "ha_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxVirtualServices")
    def max_virtual_services(self) -> int:
        return pulumi.get(self, "max_virtual_services")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overallocated(self) -> Optional[bool]:
        return pulumi.get(self, "overallocated")

    @property
    @pulumi.getter(name="reservationModel")
    def reservation_model(self) -> str:
        return pulumi.get(self, "reservation_model")

    @property
    @pulumi.getter(name="reservedVirtualServices")
    def reserved_virtual_services(self) -> int:
        return pulumi.get(self, "reserved_virtual_services")

    @property
    @pulumi.getter(name="supportedFeatureSet")
    def supported_feature_set(self) -> str:
        return pulumi.get(self, "supported_feature_set")

    @property
    @pulumi.getter(name="syncOnRefresh")
    def sync_on_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "sync_on_refresh")


class AwaitableGetNsxtAlbServiceEngineGroupResult(GetNsxtAlbServiceEngineGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbServiceEngineGroupResult(
            alb_cloud_id=self.alb_cloud_id,
            deployed_virtual_services=self.deployed_virtual_services,
            description=self.description,
            ha_mode=self.ha_mode,
            id=self.id,
            max_virtual_services=self.max_virtual_services,
            name=self.name,
            overallocated=self.overallocated,
            reservation_model=self.reservation_model,
            reserved_virtual_services=self.reserved_virtual_services,
            supported_feature_set=self.supported_feature_set,
            sync_on_refresh=self.sync_on_refresh)


def get_nsxt_alb_service_engine_group(name: Optional[str] = None,
                                      overallocated: Optional[bool] = None,
                                      sync_on_refresh: Optional[bool] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbServiceEngineGroupResult:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Service Engine Groups. A Service Engine Group is an isolation domain that also
    defines shared service engine properties, such as size, network access, and failover. Resources in a service engine
    group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared
    between different service engine groups.

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    demo = vcd.get_nsxt_alb_service_engine_group(name="configured-service-engine-group",
        sync_on_refresh=False)
    ```


    :param str name: Name of Service Engine Group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['overallocated'] = overallocated
    __args__['syncOnRefresh'] = sync_on_refresh
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup', __args__, opts=opts, typ=GetNsxtAlbServiceEngineGroupResult).value

    return AwaitableGetNsxtAlbServiceEngineGroupResult(
        alb_cloud_id=pulumi.get(__ret__, 'alb_cloud_id'),
        deployed_virtual_services=pulumi.get(__ret__, 'deployed_virtual_services'),
        description=pulumi.get(__ret__, 'description'),
        ha_mode=pulumi.get(__ret__, 'ha_mode'),
        id=pulumi.get(__ret__, 'id'),
        max_virtual_services=pulumi.get(__ret__, 'max_virtual_services'),
        name=pulumi.get(__ret__, 'name'),
        overallocated=pulumi.get(__ret__, 'overallocated'),
        reservation_model=pulumi.get(__ret__, 'reservation_model'),
        reserved_virtual_services=pulumi.get(__ret__, 'reserved_virtual_services'),
        supported_feature_set=pulumi.get(__ret__, 'supported_feature_set'),
        sync_on_refresh=pulumi.get(__ret__, 'sync_on_refresh'))
def get_nsxt_alb_service_engine_group_output(name: Optional[pulumi.Input[str]] = None,
                                             overallocated: Optional[pulumi.Input[Optional[bool]]] = None,
                                             sync_on_refresh: Optional[pulumi.Input[Optional[bool]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtAlbServiceEngineGroupResult]:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Service Engine Groups. A Service Engine Group is an isolation domain that also
    defines shared service engine properties, such as size, network access, and failover. Resources in a service engine
    group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared
    between different service engine groups.

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    demo = vcd.get_nsxt_alb_service_engine_group(name="configured-service-engine-group",
        sync_on_refresh=False)
    ```


    :param str name: Name of Service Engine Group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['overallocated'] = overallocated
    __args__['syncOnRefresh'] = sync_on_refresh
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup', __args__, opts=opts, typ=GetNsxtAlbServiceEngineGroupResult)
    return __ret__.apply(lambda __response__: GetNsxtAlbServiceEngineGroupResult(
        alb_cloud_id=pulumi.get(__response__, 'alb_cloud_id'),
        deployed_virtual_services=pulumi.get(__response__, 'deployed_virtual_services'),
        description=pulumi.get(__response__, 'description'),
        ha_mode=pulumi.get(__response__, 'ha_mode'),
        id=pulumi.get(__response__, 'id'),
        max_virtual_services=pulumi.get(__response__, 'max_virtual_services'),
        name=pulumi.get(__response__, 'name'),
        overallocated=pulumi.get(__response__, 'overallocated'),
        reservation_model=pulumi.get(__response__, 'reservation_model'),
        reserved_virtual_services=pulumi.get(__response__, 'reserved_virtual_services'),
        supported_feature_set=pulumi.get(__response__, 'supported_feature_set'),
        sync_on_refresh=pulumi.get(__response__, 'sync_on_refresh')))
