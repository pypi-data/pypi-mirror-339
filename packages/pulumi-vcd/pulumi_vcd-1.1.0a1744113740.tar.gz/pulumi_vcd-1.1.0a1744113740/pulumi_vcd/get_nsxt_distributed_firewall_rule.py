# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtDistributedFirewallRuleResult',
    'AwaitableGetNsxtDistributedFirewallRuleResult',
    'get_nsxt_distributed_firewall_rule',
    'get_nsxt_distributed_firewall_rule_output',
]

@pulumi.output_type
class GetNsxtDistributedFirewallRuleResult:
    """
    A collection of values returned by getNsxtDistributedFirewallRule.
    """
    def __init__(__self__, action=None, app_port_profile_ids=None, comment=None, description=None, destination_groups_excluded=None, destination_ids=None, direction=None, enabled=None, id=None, ip_protocol=None, logging=None, name=None, network_context_profile_ids=None, org=None, source_groups_excluded=None, source_ids=None, vdc_group_id=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if app_port_profile_ids and not isinstance(app_port_profile_ids, list):
            raise TypeError("Expected argument 'app_port_profile_ids' to be a list")
        pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_groups_excluded and not isinstance(destination_groups_excluded, bool):
            raise TypeError("Expected argument 'destination_groups_excluded' to be a bool")
        pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        if destination_ids and not isinstance(destination_ids, list):
            raise TypeError("Expected argument 'destination_ids' to be a list")
        pulumi.set(__self__, "destination_ids", destination_ids)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_protocol and not isinstance(ip_protocol, str):
            raise TypeError("Expected argument 'ip_protocol' to be a str")
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_context_profile_ids and not isinstance(network_context_profile_ids, list):
            raise TypeError("Expected argument 'network_context_profile_ids' to be a list")
        pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if source_groups_excluded and not isinstance(source_groups_excluded, bool):
            raise TypeError("Expected argument 'source_groups_excluded' to be a bool")
        pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        if source_ids and not isinstance(source_ids, list):
            raise TypeError("Expected argument 'source_ids' to be a list")
        pulumi.set(__self__, "source_ids", source_ids)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> bool:
        return pulumi.get(self, "destination_groups_excluded")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Sequence[str]:
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "network_context_profile_ids")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> bool:
        return pulumi.get(self, "source_groups_excluded")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Sequence[str]:
        return pulumi.get(self, "source_ids")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> str:
        return pulumi.get(self, "vdc_group_id")


class AwaitableGetNsxtDistributedFirewallRuleResult(GetNsxtDistributedFirewallRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtDistributedFirewallRuleResult(
            action=self.action,
            app_port_profile_ids=self.app_port_profile_ids,
            comment=self.comment,
            description=self.description,
            destination_groups_excluded=self.destination_groups_excluded,
            destination_ids=self.destination_ids,
            direction=self.direction,
            enabled=self.enabled,
            id=self.id,
            ip_protocol=self.ip_protocol,
            logging=self.logging,
            name=self.name,
            network_context_profile_ids=self.network_context_profile_ids,
            org=self.org,
            source_groups_excluded=self.source_groups_excluded,
            source_ids=self.source_ids,
            vdc_group_id=self.vdc_group_id)


def get_nsxt_distributed_firewall_rule(name: Optional[str] = None,
                                       org: Optional[str] = None,
                                       vdc_group_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtDistributedFirewallRuleResult:
    """
    The Distributed Firewall data source reads a single rule for a particular VDC Group.

    > There is a different data source
    [`NsxtDistributedFirewall`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_distributed_firewall)
    resource available that can fetch all firewall rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    g1 = vcd.get_vdc_group(org="my-org",
        name="my-vdc-group")
    r1 = vcd.get_nsxt_distributed_firewall_rule(org="my-org",
        vdc_group_id=g1.id,
        name="rule1")
    ```


    :param str name: The name of firewall rule
    :param str org: The name of organization in which Distributed Firewall is located. Optional if
           defined at provider level.
    :param str vdc_group_id: The ID of a VDC Group
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdcGroupId'] = vdc_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtDistributedFirewallRule:getNsxtDistributedFirewallRule', __args__, opts=opts, typ=GetNsxtDistributedFirewallRuleResult).value

    return AwaitableGetNsxtDistributedFirewallRuleResult(
        action=pulumi.get(__ret__, 'action'),
        app_port_profile_ids=pulumi.get(__ret__, 'app_port_profile_ids'),
        comment=pulumi.get(__ret__, 'comment'),
        description=pulumi.get(__ret__, 'description'),
        destination_groups_excluded=pulumi.get(__ret__, 'destination_groups_excluded'),
        destination_ids=pulumi.get(__ret__, 'destination_ids'),
        direction=pulumi.get(__ret__, 'direction'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        ip_protocol=pulumi.get(__ret__, 'ip_protocol'),
        logging=pulumi.get(__ret__, 'logging'),
        name=pulumi.get(__ret__, 'name'),
        network_context_profile_ids=pulumi.get(__ret__, 'network_context_profile_ids'),
        org=pulumi.get(__ret__, 'org'),
        source_groups_excluded=pulumi.get(__ret__, 'source_groups_excluded'),
        source_ids=pulumi.get(__ret__, 'source_ids'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'))
def get_nsxt_distributed_firewall_rule_output(name: Optional[pulumi.Input[str]] = None,
                                              org: Optional[pulumi.Input[Optional[str]]] = None,
                                              vdc_group_id: Optional[pulumi.Input[str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtDistributedFirewallRuleResult]:
    """
    The Distributed Firewall data source reads a single rule for a particular VDC Group.

    > There is a different data source
    [`NsxtDistributedFirewall`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_distributed_firewall)
    resource available that can fetch all firewall rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    g1 = vcd.get_vdc_group(org="my-org",
        name="my-vdc-group")
    r1 = vcd.get_nsxt_distributed_firewall_rule(org="my-org",
        vdc_group_id=g1.id,
        name="rule1")
    ```


    :param str name: The name of firewall rule
    :param str org: The name of organization in which Distributed Firewall is located. Optional if
           defined at provider level.
    :param str vdc_group_id: The ID of a VDC Group
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdcGroupId'] = vdc_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtDistributedFirewallRule:getNsxtDistributedFirewallRule', __args__, opts=opts, typ=GetNsxtDistributedFirewallRuleResult)
    return __ret__.apply(lambda __response__: GetNsxtDistributedFirewallRuleResult(
        action=pulumi.get(__response__, 'action'),
        app_port_profile_ids=pulumi.get(__response__, 'app_port_profile_ids'),
        comment=pulumi.get(__response__, 'comment'),
        description=pulumi.get(__response__, 'description'),
        destination_groups_excluded=pulumi.get(__response__, 'destination_groups_excluded'),
        destination_ids=pulumi.get(__response__, 'destination_ids'),
        direction=pulumi.get(__response__, 'direction'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        ip_protocol=pulumi.get(__response__, 'ip_protocol'),
        logging=pulumi.get(__response__, 'logging'),
        name=pulumi.get(__response__, 'name'),
        network_context_profile_ids=pulumi.get(__response__, 'network_context_profile_ids'),
        org=pulumi.get(__response__, 'org'),
        source_groups_excluded=pulumi.get(__response__, 'source_groups_excluded'),
        source_ids=pulumi.get(__response__, 'source_ids'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id')))
