# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceAccountResult',
    'AwaitableGetServiceAccountResult',
    'get_service_account',
    'get_service_account_output',
]

@pulumi.output_type
class GetServiceAccountResult:
    """
    A collection of values returned by getServiceAccount.
    """
    def __init__(__self__, active=None, id=None, name=None, org=None, role_id=None, software_id=None, software_version=None, uri=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if software_id and not isinstance(software_id, str):
            raise TypeError("Expected argument 'software_id' to be a str")
        pulumi.set(__self__, "software_id", software_id)
        if software_version and not isinstance(software_version, str):
            raise TypeError("Expected argument 'software_version' to be a str")
        pulumi.set(__self__, "software_version", software_version)
        if uri and not isinstance(uri, str):
            raise TypeError("Expected argument 'uri' to be a str")
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="softwareId")
    def software_id(self) -> str:
        return pulumi.get(self, "software_id")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


class AwaitableGetServiceAccountResult(GetServiceAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceAccountResult(
            active=self.active,
            id=self.id,
            name=self.name,
            org=self.org,
            role_id=self.role_id,
            software_id=self.software_id,
            software_version=self.software_version,
            uri=self.uri)


def get_service_account(name: Optional[str] = None,
                        org: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceAccountResult:
    """
    Provides a data source to read VCD Service Accounts.

    Supported in provider *v3.10+* and VCD 10.4+.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    example = vcd.get_service_account(org="my-org",
        name="my-parent-network")
    ```


    :param str name: Name of the Service Account in an organisation
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organisations.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult).value

    return AwaitableGetServiceAccountResult(
        active=pulumi.get(__ret__, 'active'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        role_id=pulumi.get(__ret__, 'role_id'),
        software_id=pulumi.get(__ret__, 'software_id'),
        software_version=pulumi.get(__ret__, 'software_version'),
        uri=pulumi.get(__ret__, 'uri'))
def get_service_account_output(name: Optional[pulumi.Input[str]] = None,
                               org: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceAccountResult]:
    """
    Provides a data source to read VCD Service Accounts.

    Supported in provider *v3.10+* and VCD 10.4+.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    example = vcd.get_service_account(org="my-org",
        name="my-parent-network")
    ```


    :param str name: Name of the Service Account in an organisation
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organisations.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult)
    return __ret__.apply(lambda __response__: GetServiceAccountResult(
        active=pulumi.get(__response__, 'active'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        role_id=pulumi.get(__response__, 'role_id'),
        software_id=pulumi.get(__response__, 'software_id'),
        software_version=pulumi.get(__response__, 'software_version'),
        uri=pulumi.get(__response__, 'uri')))
