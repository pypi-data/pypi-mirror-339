# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InsertedMediaArgs', 'InsertedMedia']

@pulumi.input_type
class InsertedMediaArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 vapp_name: pulumi.Input[str],
                 vm_name: pulumi.Input[str],
                 eject_force: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InsertedMedia resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to find media file
        :param pulumi.Input[str] vapp_name: The name of vApp to find
        :param pulumi.Input[str] vm_name: The name of VM to be used to insert media file
        :param pulumi.Input[bool] eject_force: Allows to pass answer to question in vCD
               "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
               Disconnect anyway (and override the lock)?"
               when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        :param pulumi.Input[str] name: Media file name in catalog which will be inserted to VM
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "vapp_name", vapp_name)
        pulumi.set(__self__, "vm_name", vm_name)
        if eject_force is not None:
            pulumi.set(__self__, "eject_force", eject_force)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        The name of the catalog where to find media file
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Input[str]:
        """
        The name of vApp to find
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Input[str]:
        """
        The name of VM to be used to insert media file
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter(name="ejectForce")
    def eject_force(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to pass answer to question in vCD
        "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
        Disconnect anyway (and override the lock)?"
        when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        """
        return pulumi.get(self, "eject_force")

    @eject_force.setter
    def eject_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eject_force", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Media file name in catalog which will be inserted to VM
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _InsertedMediaState:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 eject_force: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InsertedMedia resources.
        :param pulumi.Input[str] catalog: The name of the catalog where to find media file
        :param pulumi.Input[bool] eject_force: Allows to pass answer to question in vCD
               "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
               Disconnect anyway (and override the lock)?"
               when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        :param pulumi.Input[str] name: Media file name in catalog which will be inserted to VM
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vapp_name: The name of vApp to find
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name: The name of VM to be used to insert media file
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if eject_force is not None:
            pulumi.set(__self__, "eject_force", eject_force)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the catalog where to find media file
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="ejectForce")
    def eject_force(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to pass answer to question in vCD
        "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
        Disconnect anyway (and override the lock)?"
        when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        """
        return pulumi.get(self, "eject_force")

    @eject_force.setter
    def eject_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eject_force", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Media file name in catalog which will be inserted to VM
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of vApp to find
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VM to be used to insert media file
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


class InsertedMedia(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 eject_force: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a VMware Cloud Director resource for inserting or ejecting media (ISO) file for the VM. Create this resource for inserting the media, and destroy it for ejecting.

        Supported in provider *v2.0+*

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_inserted_media = vcd.InsertedMedia("myInsertedMedia",
            org="my-org",
            vdc="my-vcd",
            catalog="my-catalog",
            name="my-iso",
            vapp_name="my-vApp",
            vm_name="my-VM",
            eject_force=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to find media file
        :param pulumi.Input[bool] eject_force: Allows to pass answer to question in vCD
               "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
               Disconnect anyway (and override the lock)?"
               when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        :param pulumi.Input[str] name: Media file name in catalog which will be inserted to VM
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vapp_name: The name of vApp to find
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name: The name of VM to be used to insert media file
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InsertedMediaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a VMware Cloud Director resource for inserting or ejecting media (ISO) file for the VM. Create this resource for inserting the media, and destroy it for ejecting.

        Supported in provider *v2.0+*

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_inserted_media = vcd.InsertedMedia("myInsertedMedia",
            org="my-org",
            vdc="my-vcd",
            catalog="my-catalog",
            name="my-iso",
            vapp_name="my-vApp",
            vm_name="my-VM",
            eject_force=True)
        ```

        :param str resource_name: The name of the resource.
        :param InsertedMediaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InsertedMediaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 eject_force: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InsertedMediaArgs.__new__(InsertedMediaArgs)

            if catalog is None and not opts.urn:
                raise TypeError("Missing required property 'catalog'")
            __props__.__dict__["catalog"] = catalog
            __props__.__dict__["eject_force"] = eject_force
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if vapp_name is None and not opts.urn:
                raise TypeError("Missing required property 'vapp_name'")
            __props__.__dict__["vapp_name"] = vapp_name
            __props__.__dict__["vdc"] = vdc
            if vm_name is None and not opts.urn:
                raise TypeError("Missing required property 'vm_name'")
            __props__.__dict__["vm_name"] = vm_name
        super(InsertedMedia, __self__).__init__(
            'vcd:index/insertedMedia:InsertedMedia',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog: Optional[pulumi.Input[str]] = None,
            eject_force: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            vapp_name: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_name: Optional[pulumi.Input[str]] = None) -> 'InsertedMedia':
        """
        Get an existing InsertedMedia resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: The name of the catalog where to find media file
        :param pulumi.Input[bool] eject_force: Allows to pass answer to question in vCD
               "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
               Disconnect anyway (and override the lock)?"
               when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        :param pulumi.Input[str] name: Media file name in catalog which will be inserted to VM
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vapp_name: The name of vApp to find
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name: The name of VM to be used to insert media file
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InsertedMediaState.__new__(_InsertedMediaState)

        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["eject_force"] = eject_force
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["vapp_name"] = vapp_name
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_name"] = vm_name
        return InsertedMedia(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Output[str]:
        """
        The name of the catalog where to find media file
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="ejectForce")
    def eject_force(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows to pass answer to question in vCD
        "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
        Disconnect anyway (and override the lock)?"
        when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is `true`
        """
        return pulumi.get(self, "eject_force")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Media file name in catalog which will be inserted to VM
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Output[str]:
        """
        The name of vApp to find
        """
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Output[str]:
        """
        The name of VM to be used to insert media file
        """
        return pulumi.get(self, "vm_name")

