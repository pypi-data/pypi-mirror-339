# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VdcGroupArgs', 'VdcGroup']

@pulumi.input_type
class VdcGroupArgs:
    def __init__(__self__, *,
                 participating_vdc_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 starting_vdc_id: pulumi.Input[str],
                 default_policy_status: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dfw_enabled: Optional[pulumi.Input[bool]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 remove_default_firewall_rule: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VdcGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] participating_vdc_ids: The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        :param pulumi.Input[str] starting_vdc_id: With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        :param pulumi.Input[bool] default_policy_status: Whether this security policy is enabled. `dfw_enabled` must be `true`.
        :param pulumi.Input[str] description: VDC group description
        :param pulumi.Input[bool] dfw_enabled: Whether Distributed Firewall is enabled for this VDC group.
        :param pulumi.Input[bool] force_delete: When `true`, will request VCD to force VDC Group deletion. It
               should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
               child components remaining). **Note:** when setting it to `true` for existing resource, it will
               cause a plan change (update), but this will not alter the resource in any way.
        :param pulumi.Input[str] name: The name for VDC group
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[bool] remove_default_firewall_rule: Marks whether default firewall rule should be
               removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
               This is mainly useful when using
               [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
               resource as it cannot remove the default rule.
        """
        pulumi.set(__self__, "participating_vdc_ids", participating_vdc_ids)
        pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if default_policy_status is not None:
            pulumi.set(__self__, "default_policy_status", default_policy_status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dfw_enabled is not None:
            pulumi.set(__self__, "dfw_enabled", dfw_enabled)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if remove_default_firewall_rule is not None:
            pulumi.set(__self__, "remove_default_firewall_rule", remove_default_firewall_rule)

    @property
    @pulumi.getter(name="participatingVdcIds")
    def participating_vdc_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        """
        return pulumi.get(self, "participating_vdc_ids")

    @participating_vdc_ids.setter
    def participating_vdc_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "participating_vdc_ids", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> pulumi.Input[str]:
        """
        With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter(name="defaultPolicyStatus")
    def default_policy_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this security policy is enabled. `dfw_enabled` must be `true`.
        """
        return pulumi.get(self, "default_policy_status")

    @default_policy_status.setter
    def default_policy_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_policy_status", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        VDC group description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dfwEnabled")
    def dfw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Distributed Firewall is enabled for this VDC group.
        """
        return pulumi.get(self, "dfw_enabled")

    @dfw_enabled.setter
    def dfw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dfw_enabled", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, will request VCD to force VDC Group deletion. It
        should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
        child components remaining). **Note:** when setting it to `true` for existing resource, it will
        cause a plan change (update), but this will not alter the resource in any way.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for VDC group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="removeDefaultFirewallRule")
    def remove_default_firewall_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        Marks whether default firewall rule should be
        removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
        This is mainly useful when using
        [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
        resource as it cannot remove the default rule.
        """
        return pulumi.get(self, "remove_default_firewall_rule")

    @remove_default_firewall_rule.setter
    def remove_default_firewall_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_default_firewall_rule", value)


@pulumi.input_type
class _VdcGroupState:
    def __init__(__self__, *,
                 default_policy_status: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dfw_enabled: Optional[pulumi.Input[bool]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 local_egress: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_id: Optional[pulumi.Input[str]] = None,
                 network_pool_universal_id: Optional[pulumi.Input[str]] = None,
                 network_provider_type: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 participating_org_vdcs: Optional[pulumi.Input[Sequence[pulumi.Input['VdcGroupParticipatingOrgVdcArgs']]]] = None,
                 participating_vdc_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remove_default_firewall_rule: Optional[pulumi.Input[bool]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 universal_networking_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering VdcGroup resources.
        :param pulumi.Input[bool] default_policy_status: Whether this security policy is enabled. `dfw_enabled` must be `true`.
        :param pulumi.Input[str] description: VDC group description
        :param pulumi.Input[bool] dfw_enabled: Whether Distributed Firewall is enabled for this VDC group.
        :param pulumi.Input[str] error_message: More detailed error message when VDC group has error status
        :param pulumi.Input[bool] force_delete: When `true`, will request VCD to force VDC Group deletion. It
               should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
               child components remaining). **Note:** when setting it to `true` for existing resource, it will
               cause a plan change (update), but this will not alter the resource in any way.
        :param pulumi.Input[bool] local_egress: Status whether local egress is enabled for a universal router belonging to a universal VDC group.
        :param pulumi.Input[str] name: The name for VDC group
        :param pulumi.Input[str] network_pool_id: ID of used network pool.
        :param pulumi.Input[str] network_pool_universal_id: The network provider’s universal id that is backing the universal network pool.
        :param pulumi.Input[str] network_provider_type: Defines the networking provider backing the VDC group.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[Sequence[pulumi.Input['VdcGroupParticipatingOrgVdcArgs']]] participating_org_vdcs: A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] participating_vdc_ids: The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        :param pulumi.Input[bool] remove_default_firewall_rule: Marks whether default firewall rule should be
               removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
               This is mainly useful when using
               [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
               resource as it cannot remove the default rule.
        :param pulumi.Input[str] starting_vdc_id: With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        :param pulumi.Input[str] status: The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
        :param pulumi.Input[str] type: Defines the group as LOCAL or UNIVERSAL.
        :param pulumi.Input[bool] universal_networking_enabled: True means that a VDC group router has been created.
        """
        if default_policy_status is not None:
            pulumi.set(__self__, "default_policy_status", default_policy_status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dfw_enabled is not None:
            pulumi.set(__self__, "dfw_enabled", dfw_enabled)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if local_egress is not None:
            pulumi.set(__self__, "local_egress", local_egress)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_id is not None:
            pulumi.set(__self__, "network_pool_id", network_pool_id)
        if network_pool_universal_id is not None:
            pulumi.set(__self__, "network_pool_universal_id", network_pool_universal_id)
        if network_provider_type is not None:
            pulumi.set(__self__, "network_provider_type", network_provider_type)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if participating_org_vdcs is not None:
            pulumi.set(__self__, "participating_org_vdcs", participating_org_vdcs)
        if participating_vdc_ids is not None:
            pulumi.set(__self__, "participating_vdc_ids", participating_vdc_ids)
        if remove_default_firewall_rule is not None:
            pulumi.set(__self__, "remove_default_firewall_rule", remove_default_firewall_rule)
        if starting_vdc_id is not None:
            pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if universal_networking_enabled is not None:
            pulumi.set(__self__, "universal_networking_enabled", universal_networking_enabled)

    @property
    @pulumi.getter(name="defaultPolicyStatus")
    def default_policy_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this security policy is enabled. `dfw_enabled` must be `true`.
        """
        return pulumi.get(self, "default_policy_status")

    @default_policy_status.setter
    def default_policy_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_policy_status", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        VDC group description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dfwEnabled")
    def dfw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Distributed Firewall is enabled for this VDC group.
        """
        return pulumi.get(self, "dfw_enabled")

    @dfw_enabled.setter
    def dfw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dfw_enabled", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        More detailed error message when VDC group has error status
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, will request VCD to force VDC Group deletion. It
        should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
        child components remaining). **Note:** when setting it to `true` for existing resource, it will
        cause a plan change (update), but this will not alter the resource in any way.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="localEgress")
    def local_egress(self) -> Optional[pulumi.Input[bool]]:
        """
        Status whether local egress is enabled for a universal router belonging to a universal VDC group.
        """
        return pulumi.get(self, "local_egress")

    @local_egress.setter
    def local_egress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_egress", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for VDC group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of used network pool.
        """
        return pulumi.get(self, "network_pool_id")

    @network_pool_id.setter
    def network_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_id", value)

    @property
    @pulumi.getter(name="networkPoolUniversalId")
    def network_pool_universal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The network provider’s universal id that is backing the universal network pool.
        """
        return pulumi.get(self, "network_pool_universal_id")

    @network_pool_universal_id.setter
    def network_pool_universal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_universal_id", value)

    @property
    @pulumi.getter(name="networkProviderType")
    def network_provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the networking provider backing the VDC group.
        """
        return pulumi.get(self, "network_provider_type")

    @network_provider_type.setter
    def network_provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_provider_type", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="participatingOrgVdcs")
    def participating_org_vdcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VdcGroupParticipatingOrgVdcArgs']]]]:
        """
        A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
        """
        return pulumi.get(self, "participating_org_vdcs")

    @participating_org_vdcs.setter
    def participating_org_vdcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VdcGroupParticipatingOrgVdcArgs']]]]):
        pulumi.set(self, "participating_org_vdcs", value)

    @property
    @pulumi.getter(name="participatingVdcIds")
    def participating_vdc_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        """
        return pulumi.get(self, "participating_vdc_ids")

    @participating_vdc_ids.setter
    def participating_vdc_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "participating_vdc_ids", value)

    @property
    @pulumi.getter(name="removeDefaultFirewallRule")
    def remove_default_firewall_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        Marks whether default firewall rule should be
        removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
        This is mainly useful when using
        [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
        resource as it cannot remove the default rule.
        """
        return pulumi.get(self, "remove_default_firewall_rule")

    @remove_default_firewall_rule.setter
    def remove_default_firewall_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_default_firewall_rule", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the group as LOCAL or UNIVERSAL.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="universalNetworkingEnabled")
    def universal_networking_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True means that a VDC group router has been created.
        """
        return pulumi.get(self, "universal_networking_enabled")

    @universal_networking_enabled.setter
    def universal_networking_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "universal_networking_enabled", value)


class VdcGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_policy_status: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dfw_enabled: Optional[pulumi.Input[bool]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 participating_vdc_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remove_default_firewall_rule: Optional[pulumi.Input[bool]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VdcGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_policy_status: Whether this security policy is enabled. `dfw_enabled` must be `true`.
        :param pulumi.Input[str] description: VDC group description
        :param pulumi.Input[bool] dfw_enabled: Whether Distributed Firewall is enabled for this VDC group.
        :param pulumi.Input[bool] force_delete: When `true`, will request VCD to force VDC Group deletion. It
               should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
               child components remaining). **Note:** when setting it to `true` for existing resource, it will
               cause a plan change (update), but this will not alter the resource in any way.
        :param pulumi.Input[str] name: The name for VDC group
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] participating_vdc_ids: The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        :param pulumi.Input[bool] remove_default_firewall_rule: Marks whether default firewall rule should be
               removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
               This is mainly useful when using
               [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
               resource as it cannot remove the default rule.
        :param pulumi.Input[str] starting_vdc_id: With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VdcGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VdcGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VdcGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VdcGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_policy_status: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dfw_enabled: Optional[pulumi.Input[bool]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 participating_vdc_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remove_default_firewall_rule: Optional[pulumi.Input[bool]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VdcGroupArgs.__new__(VdcGroupArgs)

            __props__.__dict__["default_policy_status"] = default_policy_status
            __props__.__dict__["description"] = description
            __props__.__dict__["dfw_enabled"] = dfw_enabled
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if participating_vdc_ids is None and not opts.urn:
                raise TypeError("Missing required property 'participating_vdc_ids'")
            __props__.__dict__["participating_vdc_ids"] = participating_vdc_ids
            __props__.__dict__["remove_default_firewall_rule"] = remove_default_firewall_rule
            if starting_vdc_id is None and not opts.urn:
                raise TypeError("Missing required property 'starting_vdc_id'")
            __props__.__dict__["starting_vdc_id"] = starting_vdc_id
            __props__.__dict__["error_message"] = None
            __props__.__dict__["local_egress"] = None
            __props__.__dict__["network_pool_id"] = None
            __props__.__dict__["network_pool_universal_id"] = None
            __props__.__dict__["network_provider_type"] = None
            __props__.__dict__["participating_org_vdcs"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["universal_networking_enabled"] = None
        super(VdcGroup, __self__).__init__(
            'vcd:index/vdcGroup:VdcGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_policy_status: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dfw_enabled: Optional[pulumi.Input[bool]] = None,
            error_message: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            local_egress: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_pool_id: Optional[pulumi.Input[str]] = None,
            network_pool_universal_id: Optional[pulumi.Input[str]] = None,
            network_provider_type: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            participating_org_vdcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VdcGroupParticipatingOrgVdcArgs', 'VdcGroupParticipatingOrgVdcArgsDict']]]]] = None,
            participating_vdc_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            remove_default_firewall_rule: Optional[pulumi.Input[bool]] = None,
            starting_vdc_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            universal_networking_enabled: Optional[pulumi.Input[bool]] = None) -> 'VdcGroup':
        """
        Get an existing VdcGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_policy_status: Whether this security policy is enabled. `dfw_enabled` must be `true`.
        :param pulumi.Input[str] description: VDC group description
        :param pulumi.Input[bool] dfw_enabled: Whether Distributed Firewall is enabled for this VDC group.
        :param pulumi.Input[str] error_message: More detailed error message when VDC group has error status
        :param pulumi.Input[bool] force_delete: When `true`, will request VCD to force VDC Group deletion. It
               should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
               child components remaining). **Note:** when setting it to `true` for existing resource, it will
               cause a plan change (update), but this will not alter the resource in any way.
        :param pulumi.Input[bool] local_egress: Status whether local egress is enabled for a universal router belonging to a universal VDC group.
        :param pulumi.Input[str] name: The name for VDC group
        :param pulumi.Input[str] network_pool_id: ID of used network pool.
        :param pulumi.Input[str] network_pool_universal_id: The network provider’s universal id that is backing the universal network pool.
        :param pulumi.Input[str] network_provider_type: Defines the networking provider backing the VDC group.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[Sequence[pulumi.Input[Union['VdcGroupParticipatingOrgVdcArgs', 'VdcGroupParticipatingOrgVdcArgsDict']]]] participating_org_vdcs: A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] participating_vdc_ids: The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        :param pulumi.Input[bool] remove_default_firewall_rule: Marks whether default firewall rule should be
               removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
               This is mainly useful when using
               [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
               resource as it cannot remove the default rule.
        :param pulumi.Input[str] starting_vdc_id: With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        :param pulumi.Input[str] status: The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
        :param pulumi.Input[str] type: Defines the group as LOCAL or UNIVERSAL.
        :param pulumi.Input[bool] universal_networking_enabled: True means that a VDC group router has been created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VdcGroupState.__new__(_VdcGroupState)

        __props__.__dict__["default_policy_status"] = default_policy_status
        __props__.__dict__["description"] = description
        __props__.__dict__["dfw_enabled"] = dfw_enabled
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["local_egress"] = local_egress
        __props__.__dict__["name"] = name
        __props__.__dict__["network_pool_id"] = network_pool_id
        __props__.__dict__["network_pool_universal_id"] = network_pool_universal_id
        __props__.__dict__["network_provider_type"] = network_provider_type
        __props__.__dict__["org"] = org
        __props__.__dict__["participating_org_vdcs"] = participating_org_vdcs
        __props__.__dict__["participating_vdc_ids"] = participating_vdc_ids
        __props__.__dict__["remove_default_firewall_rule"] = remove_default_firewall_rule
        __props__.__dict__["starting_vdc_id"] = starting_vdc_id
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["universal_networking_enabled"] = universal_networking_enabled
        return VdcGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultPolicyStatus")
    def default_policy_status(self) -> pulumi.Output[bool]:
        """
        Whether this security policy is enabled. `dfw_enabled` must be `true`.
        """
        return pulumi.get(self, "default_policy_status")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        VDC group description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dfwEnabled")
    def dfw_enabled(self) -> pulumi.Output[bool]:
        """
        Whether Distributed Firewall is enabled for this VDC group.
        """
        return pulumi.get(self, "dfw_enabled")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[str]:
        """
        More detailed error message when VDC group has error status
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, will request VCD to force VDC Group deletion. It
        should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
        child components remaining). **Note:** when setting it to `true` for existing resource, it will
        cause a plan change (update), but this will not alter the resource in any way.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="localEgress")
    def local_egress(self) -> pulumi.Output[bool]:
        """
        Status whether local egress is enabled for a universal router belonging to a universal VDC group.
        """
        return pulumi.get(self, "local_egress")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name for VDC group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> pulumi.Output[str]:
        """
        ID of used network pool.
        """
        return pulumi.get(self, "network_pool_id")

    @property
    @pulumi.getter(name="networkPoolUniversalId")
    def network_pool_universal_id(self) -> pulumi.Output[str]:
        """
        The network provider’s universal id that is backing the universal network pool.
        """
        return pulumi.get(self, "network_pool_universal_id")

    @property
    @pulumi.getter(name="networkProviderType")
    def network_provider_type(self) -> pulumi.Output[str]:
        """
        Defines the networking provider backing the VDC group.
        """
        return pulumi.get(self, "network_provider_type")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="participatingOrgVdcs")
    def participating_org_vdcs(self) -> pulumi.Output[Sequence['outputs.VdcGroupParticipatingOrgVdc']]:
        """
        A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
        """
        return pulumi.get(self, "participating_org_vdcs")

    @property
    @pulumi.getter(name="participatingVdcIds")
    def participating_vdc_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of organization VDCs that are participating in this group. **Note**: `starting_vdc_id` isn't automatically included in this list.
        """
        return pulumi.get(self, "participating_vdc_ids")

    @property
    @pulumi.getter(name="removeDefaultFirewallRule")
    def remove_default_firewall_rule(self) -> pulumi.Output[Optional[bool]]:
        """
        Marks whether default firewall rule should be
        removed after activating. Both `dfw_enabled` and `default_policy_status` must be true. **Note.**
        This is mainly useful when using
        [`NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
        resource as it cannot remove the default rule.
        """
        return pulumi.get(self, "remove_default_firewall_rule")

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> pulumi.Output[str]:
        """
        With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `starting_vdc_id` must be included in `participating_vdc_ids` to participate in this group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Defines the group as LOCAL or UNIVERSAL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="universalNetworkingEnabled")
    def universal_networking_enabled(self) -> pulumi.Output[bool]:
        """
        True means that a VDC group router has been created.
        """
        return pulumi.get(self, "universal_networking_enabled")

