# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MultisiteOrgAssociationArgs', 'MultisiteOrgAssociation']

@pulumi.input_type
class MultisiteOrgAssociationArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 associated_org_id: Optional[pulumi.Input[str]] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a MultisiteOrgAssociation resource.
        :param pulumi.Input[str] org_id: The ID of the current organization where we start the association with a remote one.
        :param pulumi.Input[str] associated_org_id: ID of the remote org associated with the current one.
        :param pulumi.Input[str] association_data: Data produced from another org, needed to associate to this org from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this org from another one.
               (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes to keep checking for connection (0=no check)
        """
        pulumi.set(__self__, "org_id", org_id)
        if associated_org_id is not None:
            pulumi.set(__self__, "associated_org_id", associated_org_id)
        if association_data is not None:
            pulumi.set(__self__, "association_data", association_data)
        if association_data_file is not None:
            pulumi.set(__self__, "association_data_file", association_data_file)
        if connection_timeout_mins is not None:
            pulumi.set(__self__, "connection_timeout_mins", connection_timeout_mins)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        The ID of the current organization where we start the association with a remote one.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="associatedOrgId")
    def associated_org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the remote org associated with the current one.
        """
        return pulumi.get(self, "associated_org_id")

    @associated_org_id.setter
    def associated_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_org_id", value)

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data produced from another org, needed to associate to this org from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @association_data.setter
    def association_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data", value)

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the file containing the data used to associate to this org from another one.
        (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        """
        return pulumi.get(self, "association_data_file")

    @association_data_file.setter
    def association_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data_file", value)

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> Optional[pulumi.Input[int]]:
        """
        How many minutes to keep checking for connection (0=no check)
        """
        return pulumi.get(self, "connection_timeout_mins")

    @connection_timeout_mins.setter
    def connection_timeout_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout_mins", value)


@pulumi.input_type
class _MultisiteOrgAssociationState:
    def __init__(__self__, *,
                 associated_org_id: Optional[pulumi.Input[str]] = None,
                 associated_org_name: Optional[pulumi.Input[str]] = None,
                 associated_site_id: Optional[pulumi.Input[str]] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MultisiteOrgAssociation resources.
        :param pulumi.Input[str] associated_org_id: ID of the remote org associated with the current one.
        :param pulumi.Input[str] associated_org_name: The name of the associated org.
        :param pulumi.Input[str] associated_site_id: ID of the remote site to which the associated org belongs.
        :param pulumi.Input[str] association_data: Data produced from another org, needed to associate to this org from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this org from another one.
               (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes to keep checking for connection (0=no check)
        :param pulumi.Input[str] org_id: The ID of the current organization where we start the association with a remote one.
        :param pulumi.Input[str] status: The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        if associated_org_id is not None:
            pulumi.set(__self__, "associated_org_id", associated_org_id)
        if associated_org_name is not None:
            pulumi.set(__self__, "associated_org_name", associated_org_name)
        if associated_site_id is not None:
            pulumi.set(__self__, "associated_site_id", associated_site_id)
        if association_data is not None:
            pulumi.set(__self__, "association_data", association_data)
        if association_data_file is not None:
            pulumi.set(__self__, "association_data_file", association_data_file)
        if connection_timeout_mins is not None:
            pulumi.set(__self__, "connection_timeout_mins", connection_timeout_mins)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="associatedOrgId")
    def associated_org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the remote org associated with the current one.
        """
        return pulumi.get(self, "associated_org_id")

    @associated_org_id.setter
    def associated_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_org_id", value)

    @property
    @pulumi.getter(name="associatedOrgName")
    def associated_org_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the associated org.
        """
        return pulumi.get(self, "associated_org_name")

    @associated_org_name.setter
    def associated_org_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_org_name", value)

    @property
    @pulumi.getter(name="associatedSiteId")
    def associated_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the remote site to which the associated org belongs.
        """
        return pulumi.get(self, "associated_site_id")

    @associated_site_id.setter
    def associated_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_site_id", value)

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data produced from another org, needed to associate to this org from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @association_data.setter
    def association_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data", value)

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the file containing the data used to associate to this org from another one.
        (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        """
        return pulumi.get(self, "association_data_file")

    @association_data_file.setter
    def association_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data_file", value)

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> Optional[pulumi.Input[int]]:
        """
        How many minutes to keep checking for connection (0=no check)
        """
        return pulumi.get(self, "connection_timeout_mins")

    @connection_timeout_mins.setter
    def connection_timeout_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout_mins", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the current organization where we start the association with a remote one.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class MultisiteOrgAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_org_id: Optional[pulumi.Input[str]] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MultisiteOrgAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] associated_org_id: ID of the remote org associated with the current one.
        :param pulumi.Input[str] association_data: Data produced from another org, needed to associate to this org from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this org from another one.
               (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes to keep checking for connection (0=no check)
        :param pulumi.Input[str] org_id: The ID of the current organization where we start the association with a remote one.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MultisiteOrgAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MultisiteOrgAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MultisiteOrgAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MultisiteOrgAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_org_id: Optional[pulumi.Input[str]] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MultisiteOrgAssociationArgs.__new__(MultisiteOrgAssociationArgs)

            __props__.__dict__["associated_org_id"] = associated_org_id
            __props__.__dict__["association_data"] = association_data
            __props__.__dict__["association_data_file"] = association_data_file
            __props__.__dict__["connection_timeout_mins"] = connection_timeout_mins
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["associated_org_name"] = None
            __props__.__dict__["associated_site_id"] = None
            __props__.__dict__["status"] = None
        super(MultisiteOrgAssociation, __self__).__init__(
            'vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associated_org_id: Optional[pulumi.Input[str]] = None,
            associated_org_name: Optional[pulumi.Input[str]] = None,
            associated_site_id: Optional[pulumi.Input[str]] = None,
            association_data: Optional[pulumi.Input[str]] = None,
            association_data_file: Optional[pulumi.Input[str]] = None,
            connection_timeout_mins: Optional[pulumi.Input[int]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'MultisiteOrgAssociation':
        """
        Get an existing MultisiteOrgAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] associated_org_id: ID of the remote org associated with the current one.
        :param pulumi.Input[str] associated_org_name: The name of the associated org.
        :param pulumi.Input[str] associated_site_id: ID of the remote site to which the associated org belongs.
        :param pulumi.Input[str] association_data: Data produced from another org, needed to associate to this org from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this org from another one.
               (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes to keep checking for connection (0=no check)
        :param pulumi.Input[str] org_id: The ID of the current organization where we start the association with a remote one.
        :param pulumi.Input[str] status: The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MultisiteOrgAssociationState.__new__(_MultisiteOrgAssociationState)

        __props__.__dict__["associated_org_id"] = associated_org_id
        __props__.__dict__["associated_org_name"] = associated_org_name
        __props__.__dict__["associated_site_id"] = associated_site_id
        __props__.__dict__["association_data"] = association_data
        __props__.__dict__["association_data_file"] = association_data_file
        __props__.__dict__["connection_timeout_mins"] = connection_timeout_mins
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["status"] = status
        return MultisiteOrgAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="associatedOrgId")
    def associated_org_id(self) -> pulumi.Output[str]:
        """
        ID of the remote org associated with the current one.
        """
        return pulumi.get(self, "associated_org_id")

    @property
    @pulumi.getter(name="associatedOrgName")
    def associated_org_name(self) -> pulumi.Output[str]:
        """
        The name of the associated org.
        """
        return pulumi.get(self, "associated_org_name")

    @property
    @pulumi.getter(name="associatedSiteId")
    def associated_site_id(self) -> pulumi.Output[str]:
        """
        ID of the remote site to which the associated org belongs.
        """
        return pulumi.get(self, "associated_site_id")

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> pulumi.Output[Optional[str]]:
        """
        Data produced from another org, needed to associate to this org from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the file containing the data used to associate to this org from another one.
        (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `get_multisite_org_data`.
        """
        return pulumi.get(self, "association_data_file")

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> pulumi.Output[Optional[int]]:
        """
        How many minutes to keep checking for connection (0=no check)
        """
        return pulumi.get(self, "connection_timeout_mins")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        The ID of the current organization where we start the association with a remote one.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        return pulumi.get(self, "status")

