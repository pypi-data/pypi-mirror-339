# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxvSnatResult',
    'AwaitableGetNsxvSnatResult',
    'get_nsxv_snat',
    'get_nsxv_snat_output',
]

@pulumi.output_type
class GetNsxvSnatResult:
    """
    A collection of values returned by getNsxvSnat.
    """
    def __init__(__self__, description=None, edge_gateway=None, enabled=None, id=None, logging_enabled=None, network_name=None, network_type=None, org=None, original_address=None, rule_id=None, rule_tag=None, rule_type=None, translated_address=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logging_enabled and not isinstance(logging_enabled, bool):
            raise TypeError("Expected argument 'logging_enabled' to be a bool")
        pulumi.set(__self__, "logging_enabled", logging_enabled)
        if network_name and not isinstance(network_name, str):
            raise TypeError("Expected argument 'network_name' to be a str")
        pulumi.set(__self__, "network_name", network_name)
        if network_type and not isinstance(network_type, str):
            raise TypeError("Expected argument 'network_type' to be a str")
        pulumi.set(__self__, "network_type", network_type)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if original_address and not isinstance(original_address, str):
            raise TypeError("Expected argument 'original_address' to be a str")
        pulumi.set(__self__, "original_address", original_address)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rule_tag and not isinstance(rule_tag, int):
            raise TypeError("Expected argument 'rule_tag' to be a int")
        pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type and not isinstance(rule_type, str):
            raise TypeError("Expected argument 'rule_type' to be a str")
        pulumi.set(__self__, "rule_type", rule_type)
        if translated_address and not isinstance(translated_address, str):
            raise TypeError("Expected argument 'translated_address' to be a str")
        pulumi.set(__self__, "translated_address", translated_address)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> bool:
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="originalAddress")
    def original_address(self) -> str:
        return pulumi.get(self, "original_address")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> int:
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="translatedAddress")
    def translated_address(self) -> str:
        return pulumi.get(self, "translated_address")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxvSnatResult(GetNsxvSnatResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvSnatResult(
            description=self.description,
            edge_gateway=self.edge_gateway,
            enabled=self.enabled,
            id=self.id,
            logging_enabled=self.logging_enabled,
            network_name=self.network_name,
            network_type=self.network_type,
            org=self.org,
            original_address=self.original_address,
            rule_id=self.rule_id,
            rule_tag=self.rule_tag,
            rule_type=self.rule_type,
            translated_address=self.translated_address,
            vdc=self.vdc)


def get_nsxv_snat(edge_gateway: Optional[str] = None,
                  org: Optional[str] = None,
                  rule_id: Optional[str] = None,
                  vdc: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvSnatResult:
    """
    Provides a VMware Cloud Director SNAT data source for advanced edge gateways (NSX-V). This can be used to
    read existing rule by ID and use its attributes in other resources.

    > **Note:** This data source requires advanced edge gateway.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rule = vcd.get_nsxv_snat(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        rule_id="197867")
    ```


    :param str edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
    :param str rule_id: ID of SNAT rule as shown in the UI.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['org'] = org
    __args__['ruleId'] = rule_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxvSnat:getNsxvSnat', __args__, opts=opts, typ=GetNsxvSnatResult).value

    return AwaitableGetNsxvSnatResult(
        description=pulumi.get(__ret__, 'description'),
        edge_gateway=pulumi.get(__ret__, 'edge_gateway'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        logging_enabled=pulumi.get(__ret__, 'logging_enabled'),
        network_name=pulumi.get(__ret__, 'network_name'),
        network_type=pulumi.get(__ret__, 'network_type'),
        org=pulumi.get(__ret__, 'org'),
        original_address=pulumi.get(__ret__, 'original_address'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rule_tag=pulumi.get(__ret__, 'rule_tag'),
        rule_type=pulumi.get(__ret__, 'rule_type'),
        translated_address=pulumi.get(__ret__, 'translated_address'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_nsxv_snat_output(edge_gateway: Optional[pulumi.Input[str]] = None,
                         org: Optional[pulumi.Input[Optional[str]]] = None,
                         rule_id: Optional[pulumi.Input[str]] = None,
                         vdc: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxvSnatResult]:
    """
    Provides a VMware Cloud Director SNAT data source for advanced edge gateways (NSX-V). This can be used to
    read existing rule by ID and use its attributes in other resources.

    > **Note:** This data source requires advanced edge gateway.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rule = vcd.get_nsxv_snat(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        rule_id="197867")
    ```


    :param str edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
    :param str rule_id: ID of SNAT rule as shown in the UI.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['org'] = org
    __args__['ruleId'] = rule_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxvSnat:getNsxvSnat', __args__, opts=opts, typ=GetNsxvSnatResult)
    return __ret__.apply(lambda __response__: GetNsxvSnatResult(
        description=pulumi.get(__response__, 'description'),
        edge_gateway=pulumi.get(__response__, 'edge_gateway'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        logging_enabled=pulumi.get(__response__, 'logging_enabled'),
        network_name=pulumi.get(__response__, 'network_name'),
        network_type=pulumi.get(__response__, 'network_type'),
        org=pulumi.get(__response__, 'org'),
        original_address=pulumi.get(__response__, 'original_address'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rule_tag=pulumi.get(__response__, 'rule_tag'),
        rule_type=pulumi.get(__response__, 'rule_type'),
        translated_address=pulumi.get(__response__, 'translated_address'),
        vdc=pulumi.get(__response__, 'vdc')))
