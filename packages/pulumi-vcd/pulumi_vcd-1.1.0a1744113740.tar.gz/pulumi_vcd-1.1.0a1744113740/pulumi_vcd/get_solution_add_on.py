# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSolutionAddOnResult',
    'AwaitableGetSolutionAddOnResult',
    'get_solution_add_on',
    'get_solution_add_on_output',
]

@pulumi.output_type
class GetSolutionAddOnResult:
    """
    A collection of values returned by getSolutionAddOn.
    """
    def __init__(__self__, catalog_item_id=None, id=None, name=None, rde_state=None):
        if catalog_item_id and not isinstance(catalog_item_id, str):
            raise TypeError("Expected argument 'catalog_item_id' to be a str")
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rde_state and not isinstance(rde_state, str):
            raise TypeError("Expected argument 'rde_state' to be a str")
        pulumi.set(__self__, "rde_state", rde_state)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> str:
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> str:
        return pulumi.get(self, "rde_state")


class AwaitableGetSolutionAddOnResult(GetSolutionAddOnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSolutionAddOnResult(
            catalog_item_id=self.catalog_item_id,
            id=self.id,
            name=self.name,
            rde_state=self.rde_state)


def get_solution_add_on(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSolutionAddOnResult:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read Solution Add-Ons in Cloud Director. A Solution Add-On is the
    representation of a solution that is custom built for Cloud Director in the Cloud
    Director extensibility ecosystem. A Solution Add-On can encapsulate UI and API Cloud Director
    extensions together with their backend services and lifecycle management. Solution аdd-оns are
    distributed as .iso files. A Solution Add-On can contain numerous elements: UI plugins, vApps,
    users, roles, runtime defined entities, and more.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    dse14 = vcd.get_solution_add_on(name="vmware.ds-1.4.0-23376809")
    ```


    :param str name: Solution Add-On name, e.g. `vmware.ds-1.4.0-23376809`. Solution Add-On
           resource [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
           `import` with `list@` capability can help listing available names.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSolutionAddOn:getSolutionAddOn', __args__, opts=opts, typ=GetSolutionAddOnResult).value

    return AwaitableGetSolutionAddOnResult(
        catalog_item_id=pulumi.get(__ret__, 'catalog_item_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rde_state=pulumi.get(__ret__, 'rde_state'))
def get_solution_add_on_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSolutionAddOnResult]:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read Solution Add-Ons in Cloud Director. A Solution Add-On is the
    representation of a solution that is custom built for Cloud Director in the Cloud
    Director extensibility ecosystem. A Solution Add-On can encapsulate UI and API Cloud Director
    extensions together with their backend services and lifecycle management. Solution аdd-оns are
    distributed as .iso files. A Solution Add-On can contain numerous elements: UI plugins, vApps,
    users, roles, runtime defined entities, and more.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    dse14 = vcd.get_solution_add_on(name="vmware.ds-1.4.0-23376809")
    ```


    :param str name: Solution Add-On name, e.g. `vmware.ds-1.4.0-23376809`. Solution Add-On
           resource [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/solution_add_on)
           `import` with `list@` capability can help listing available names.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getSolutionAddOn:getSolutionAddOn', __args__, opts=opts, typ=GetSolutionAddOnResult)
    return __ret__.apply(lambda __response__: GetSolutionAddOnResult(
        catalog_item_id=pulumi.get(__response__, 'catalog_item_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        rde_state=pulumi.get(__response__, 'rde_state')))
