# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVmAffinityRuleResult',
    'AwaitableGetVmAffinityRuleResult',
    'get_vm_affinity_rule',
    'get_vm_affinity_rule_output',
]

@pulumi.output_type
class GetVmAffinityRuleResult:
    """
    A collection of values returned by getVmAffinityRule.
    """
    def __init__(__self__, enabled=None, id=None, name=None, org=None, polarity=None, required=None, rule_id=None, vdc=None, vm_ids=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if polarity and not isinstance(polarity, str):
            raise TypeError("Expected argument 'polarity' to be a str")
        pulumi.set(__self__, "polarity", polarity)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)
        if vm_ids and not isinstance(vm_ids, list):
            raise TypeError("Expected argument 'vm_ids' to be a list")
        pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if this affinity rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def polarity(self) -> str:
        """
        One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
        need to change polarity, we need to remove the rule and create a new one.
        """
        return pulumi.get(self, "polarity")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        True if this affinity rule is required. When a rule is mandatory, a host failover will not 
        power on the VM if doing so would violate the rule.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[str]:
        """
        A set of virtual machine IDs that compose this rule.
        """
        return pulumi.get(self, "vm_ids")


class AwaitableGetVmAffinityRuleResult(GetVmAffinityRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmAffinityRuleResult(
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            org=self.org,
            polarity=self.polarity,
            required=self.required,
            rule_id=self.rule_id,
            vdc=self.vdc,
            vm_ids=self.vm_ids)


def get_vm_affinity_rule(name: Optional[str] = None,
                         org: Optional[str] = None,
                         rule_id: Optional[str] = None,
                         vdc: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmAffinityRuleResult:
    """
    Provides a VMware Cloud Director VM affinity rule data source. This can be
    used to read VM affinity and anti-affinity rules.

    Supported in provider *v2.9+*

    > **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
    entities: they are differentiated by the `polarity` property (See below).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_rule_by_name = vcd.get_vm_affinity_rule(name="my-rule")
    tf_rule_by_id = vcd.get_vm_affinity_rule(rule_id="eda9011c-6841-4060-9336-d2f609c110c3")
    ```


    :param str name: The name of VM affinity rule. Needed if we don't provide `rule_id`
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str rule_id: Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
           rule, especially if the rule name could have duplicates
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['ruleId'] = rule_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmAffinityRule:getVmAffinityRule', __args__, opts=opts, typ=GetVmAffinityRuleResult).value

    return AwaitableGetVmAffinityRuleResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        polarity=pulumi.get(__ret__, 'polarity'),
        required=pulumi.get(__ret__, 'required'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        vdc=pulumi.get(__ret__, 'vdc'),
        vm_ids=pulumi.get(__ret__, 'vm_ids'))
def get_vm_affinity_rule_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmAffinityRuleResult]:
    """
    Provides a VMware Cloud Director VM affinity rule data source. This can be
    used to read VM affinity and anti-affinity rules.

    Supported in provider *v2.9+*

    > **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
    entities: they are differentiated by the `polarity` property (See below).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_rule_by_name = vcd.get_vm_affinity_rule(name="my-rule")
    tf_rule_by_id = vcd.get_vm_affinity_rule(rule_id="eda9011c-6841-4060-9336-d2f609c110c3")
    ```


    :param str name: The name of VM affinity rule. Needed if we don't provide `rule_id`
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str rule_id: Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
           rule, especially if the rule name could have duplicates
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['ruleId'] = rule_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVmAffinityRule:getVmAffinityRule', __args__, opts=opts, typ=GetVmAffinityRuleResult)
    return __ret__.apply(lambda __response__: GetVmAffinityRuleResult(
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        polarity=pulumi.get(__response__, 'polarity'),
        required=pulumi.get(__response__, 'required'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        vdc=pulumi.get(__response__, 'vdc'),
        vm_ids=pulumi.get(__response__, 'vm_ids')))
