# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIpSpaceIpAllocationResult',
    'AwaitableGetIpSpaceIpAllocationResult',
    'get_ip_space_ip_allocation',
    'get_ip_space_ip_allocation_output',
]

@pulumi.output_type
class GetIpSpaceIpAllocationResult:
    """
    A collection of values returned by getIpSpaceIpAllocation.
    """
    def __init__(__self__, allocation_date=None, description=None, id=None, ip=None, ip_address=None, ip_space_id=None, org_id=None, prefix_length=None, type=None, usage_state=None, used_by_id=None):
        if allocation_date and not isinstance(allocation_date, str):
            raise TypeError("Expected argument 'allocation_date' to be a str")
        pulumi.set(__self__, "allocation_date", allocation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if ip_space_id and not isinstance(ip_space_id, str):
            raise TypeError("Expected argument 'ip_space_id' to be a str")
        pulumi.set(__self__, "ip_space_id", ip_space_id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if prefix_length and not isinstance(prefix_length, str):
            raise TypeError("Expected argument 'prefix_length' to be a str")
        pulumi.set(__self__, "prefix_length", prefix_length)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if usage_state and not isinstance(usage_state, str):
            raise TypeError("Expected argument 'usage_state' to be a str")
        pulumi.set(__self__, "usage_state", usage_state)
        if used_by_id and not isinstance(used_by_id, str):
            raise TypeError("Expected argument 'used_by_id' to be a str")
        pulumi.set(__self__, "used_by_id", used_by_id)

    @property
    @pulumi.getter(name="allocationDate")
    def allocation_date(self) -> str:
        return pulumi.get(self, "allocation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipSpaceId")
    def ip_space_id(self) -> str:
        return pulumi.get(self, "ip_space_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> str:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usageState")
    def usage_state(self) -> str:
        return pulumi.get(self, "usage_state")

    @property
    @pulumi.getter(name="usedById")
    def used_by_id(self) -> str:
        return pulumi.get(self, "used_by_id")


class AwaitableGetIpSpaceIpAllocationResult(GetIpSpaceIpAllocationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpSpaceIpAllocationResult(
            allocation_date=self.allocation_date,
            description=self.description,
            id=self.id,
            ip=self.ip,
            ip_address=self.ip_address,
            ip_space_id=self.ip_space_id,
            org_id=self.org_id,
            prefix_length=self.prefix_length,
            type=self.type,
            usage_state=self.usage_state,
            used_by_id=self.used_by_id)


def get_ip_space_ip_allocation(description: Optional[str] = None,
                               ip_address: Optional[str] = None,
                               ip_space_id: Optional[str] = None,
                               org_id: Optional[str] = None,
                               type: Optional[str] = None,
                               usage_state: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpSpaceIpAllocationResult:
    """
    Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
    (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.

    IP Spaces require VCD 10.4.1+ with NSX-T.

    ## Example Usage

    ### IP Space IP Prefix Allocation)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ip_prefix = vcd.get_ip_space_ip_allocation(org_id=org1["id"],
        ip_space_id=space1["id"],
        type="IP_PREFIX",
        ip_address="192.168.1.1/24")
    ```

    ### IP Space Floating IP Allocation)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    floating_ip = vcd.get_ip_space_ip_allocation(org_id=org1["id"],
        ip_space_id=space1["id"],
        type="FLOATING_IP",
        ip_address="192.168.1.1")
    ```


    :param str ip_address: IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
    :param str ip_space_id: Parent IP Space ID of IP Allocation
    :param str org_id: Parent Org ID of IP Allocation
    :param str type: Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['ipAddress'] = ip_address
    __args__['ipSpaceId'] = ip_space_id
    __args__['orgId'] = org_id
    __args__['type'] = type
    __args__['usageState'] = usage_state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation', __args__, opts=opts, typ=GetIpSpaceIpAllocationResult).value

    return AwaitableGetIpSpaceIpAllocationResult(
        allocation_date=pulumi.get(__ret__, 'allocation_date'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        ip_space_id=pulumi.get(__ret__, 'ip_space_id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        prefix_length=pulumi.get(__ret__, 'prefix_length'),
        type=pulumi.get(__ret__, 'type'),
        usage_state=pulumi.get(__ret__, 'usage_state'),
        used_by_id=pulumi.get(__ret__, 'used_by_id'))
def get_ip_space_ip_allocation_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                      ip_address: Optional[pulumi.Input[str]] = None,
                                      ip_space_id: Optional[pulumi.Input[str]] = None,
                                      org_id: Optional[pulumi.Input[str]] = None,
                                      type: Optional[pulumi.Input[str]] = None,
                                      usage_state: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpSpaceIpAllocationResult]:
    """
    Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
    (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.

    IP Spaces require VCD 10.4.1+ with NSX-T.

    ## Example Usage

    ### IP Space IP Prefix Allocation)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ip_prefix = vcd.get_ip_space_ip_allocation(org_id=org1["id"],
        ip_space_id=space1["id"],
        type="IP_PREFIX",
        ip_address="192.168.1.1/24")
    ```

    ### IP Space Floating IP Allocation)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    floating_ip = vcd.get_ip_space_ip_allocation(org_id=org1["id"],
        ip_space_id=space1["id"],
        type="FLOATING_IP",
        ip_address="192.168.1.1")
    ```


    :param str ip_address: IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
    :param str ip_space_id: Parent IP Space ID of IP Allocation
    :param str org_id: Parent Org ID of IP Allocation
    :param str type: Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['ipAddress'] = ip_address
    __args__['ipSpaceId'] = ip_space_id
    __args__['orgId'] = org_id
    __args__['type'] = type
    __args__['usageState'] = usage_state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation', __args__, opts=opts, typ=GetIpSpaceIpAllocationResult)
    return __ret__.apply(lambda __response__: GetIpSpaceIpAllocationResult(
        allocation_date=pulumi.get(__response__, 'allocation_date'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        ip_space_id=pulumi.get(__response__, 'ip_space_id'),
        org_id=pulumi.get(__response__, 'org_id'),
        prefix_length=pulumi.get(__response__, 'prefix_length'),
        type=pulumi.get(__response__, 'type'),
        usage_state=pulumi.get(__response__, 'usage_state'),
        used_by_id=pulumi.get(__response__, 'used_by_id')))
