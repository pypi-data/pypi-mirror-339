# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VappNetworkArgs', 'VappNetwork']

@pulumi.input_type
class VappNetworkArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 vapp_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VappNetwork resource.
        :param pulumi.Input[str] gateway: Gateway of the network
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] description: Description of vApp network
        :param pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]] dhcp_pools: A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network.
        :param pulumi.Input[bool] guest_vlan_allowed: True if Network allows guest VLAN tagging.
        :param pulumi.Input[str] name: A unique name for the network.
        :param pulumi.Input[str] netmask: Netmask address for a subnet.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[str] prefix_length: The subnet prefix length for the network.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
               
               
               <a id="ip-pools"></a>
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "vapp_name", vapp_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_pools is not None:
            pulumi.set(__self__, "dhcp_pools", dhcp_pools)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if guest_vlan_allowed is not None:
            pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if netmask is not None:
            warnings.warn("""Use prefix_length instead which supports both IPv4 and IPv6""", DeprecationWarning)
            pulumi.log.warn("""netmask is deprecated: Use prefix_length instead which supports both IPv4 and IPv6""")
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_network_name is not None:
            pulumi.set(__self__, "org_network_name", org_network_name)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if reboot_vapp_on_removal is not None:
            pulumi.set(__self__, "reboot_vapp_on_removal", reboot_vapp_on_removal)
        if retain_ip_mac_enabled is not None:
            pulumi.set(__self__, "retain_ip_mac_enabled", retain_ip_mac_enabled)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        Gateway of the network
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Input[str]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of vApp network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpPools")
    def dhcp_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]]:
        """
        A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        """
        return pulumi.get(self, "dhcp_pools")

    @dhcp_pools.setter
    def dhcp_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]]):
        pulumi.set(self, "dhcp_pools", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network.
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Network allows guest VLAN tagging.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @guest_vlan_allowed.setter
    def guest_vlan_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "guest_vlan_allowed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use prefix_length instead which supports both IPv4 and IPv6""")
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask address for a subnet.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @org_network_name.setter
    def org_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_network_name", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet prefix length for the network.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.


        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @reboot_vapp_on_removal.setter
    def reboot_vapp_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reboot_vapp_on_removal", value)

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @retain_ip_mac_enabled.setter
    def retain_ip_mac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_ip_mac_enabled", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _VappNetworkState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VappNetwork resources.
        :param pulumi.Input[str] description: Description of vApp network
        :param pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]] dhcp_pools: A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network.
        :param pulumi.Input[str] gateway: Gateway of the network
        :param pulumi.Input[bool] guest_vlan_allowed: True if Network allows guest VLAN tagging.
        :param pulumi.Input[str] name: A unique name for the network.
        :param pulumi.Input[str] netmask: Netmask address for a subnet.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[str] prefix_length: The subnet prefix length for the network.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
               
               
               <a id="ip-pools"></a>
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_pools is not None:
            pulumi.set(__self__, "dhcp_pools", dhcp_pools)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if guest_vlan_allowed is not None:
            pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if netmask is not None:
            warnings.warn("""Use prefix_length instead which supports both IPv4 and IPv6""", DeprecationWarning)
            pulumi.log.warn("""netmask is deprecated: Use prefix_length instead which supports both IPv4 and IPv6""")
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_network_name is not None:
            pulumi.set(__self__, "org_network_name", org_network_name)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if reboot_vapp_on_removal is not None:
            pulumi.set(__self__, "reboot_vapp_on_removal", reboot_vapp_on_removal)
        if retain_ip_mac_enabled is not None:
            pulumi.set(__self__, "retain_ip_mac_enabled", retain_ip_mac_enabled)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of vApp network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpPools")
    def dhcp_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]]:
        """
        A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        """
        return pulumi.get(self, "dhcp_pools")

    @dhcp_pools.setter
    def dhcp_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkDhcpPoolArgs']]]]):
        pulumi.set(self, "dhcp_pools", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network.
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the network
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Network allows guest VLAN tagging.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @guest_vlan_allowed.setter
    def guest_vlan_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "guest_vlan_allowed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use prefix_length instead which supports both IPv4 and IPv6""")
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask address for a subnet.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @org_network_name.setter
    def org_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_network_name", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet prefix length for the network.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.


        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @reboot_vapp_on_removal.setter
    def reboot_vapp_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reboot_vapp_on_removal", value)

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @retain_ip_mac_enabled.setter
    def retain_ip_mac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_ip_mac_enabled", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappNetworkStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class VappNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkDhcpPoolArgs', 'VappNetworkDhcpPoolArgsDict']]]]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkStaticIpPoolArgs', 'VappNetworkStaticIpPoolArgsDict']]]]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VappNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of vApp network
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkDhcpPoolArgs', 'VappNetworkDhcpPoolArgsDict']]]] dhcp_pools: A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network.
        :param pulumi.Input[str] gateway: Gateway of the network
        :param pulumi.Input[bool] guest_vlan_allowed: True if Network allows guest VLAN tagging.
        :param pulumi.Input[str] name: A unique name for the network.
        :param pulumi.Input[str] netmask: Netmask address for a subnet.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[str] prefix_length: The subnet prefix length for the network.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
               
               
               <a id="ip-pools"></a>
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkStaticIpPoolArgs', 'VappNetworkStaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VappNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VappNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VappNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VappNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkDhcpPoolArgs', 'VappNetworkDhcpPoolArgsDict']]]]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_name: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[str]] = None,
                 reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
                 retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkStaticIpPoolArgs', 'VappNetworkStaticIpPoolArgsDict']]]]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VappNetworkArgs.__new__(VappNetworkArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_pools"] = dhcp_pools
            __props__.__dict__["dns1"] = dns1
            __props__.__dict__["dns2"] = dns2
            __props__.__dict__["dns_suffix"] = dns_suffix
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["guest_vlan_allowed"] = guest_vlan_allowed
            __props__.__dict__["name"] = name
            __props__.__dict__["netmask"] = netmask
            __props__.__dict__["org"] = org
            __props__.__dict__["org_network_name"] = org_network_name
            __props__.__dict__["prefix_length"] = prefix_length
            __props__.__dict__["reboot_vapp_on_removal"] = reboot_vapp_on_removal
            __props__.__dict__["retain_ip_mac_enabled"] = retain_ip_mac_enabled
            __props__.__dict__["static_ip_pools"] = static_ip_pools
            if vapp_name is None and not opts.urn:
                raise TypeError("Missing required property 'vapp_name'")
            __props__.__dict__["vapp_name"] = vapp_name
            __props__.__dict__["vdc"] = vdc
        super(VappNetwork, __self__).__init__(
            'vcd:index/vappNetwork:VappNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dhcp_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkDhcpPoolArgs', 'VappNetworkDhcpPoolArgsDict']]]]] = None,
            dns1: Optional[pulumi.Input[str]] = None,
            dns2: Optional[pulumi.Input[str]] = None,
            dns_suffix: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            netmask: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            org_network_name: Optional[pulumi.Input[str]] = None,
            prefix_length: Optional[pulumi.Input[str]] = None,
            reboot_vapp_on_removal: Optional[pulumi.Input[bool]] = None,
            retain_ip_mac_enabled: Optional[pulumi.Input[bool]] = None,
            static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkStaticIpPoolArgs', 'VappNetworkStaticIpPoolArgsDict']]]]] = None,
            vapp_name: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'VappNetwork':
        """
        Get an existing VappNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of vApp network
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkDhcpPoolArgs', 'VappNetworkDhcpPoolArgsDict']]]] dhcp_pools: A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network.
        :param pulumi.Input[str] gateway: Gateway of the network
        :param pulumi.Input[bool] guest_vlan_allowed: True if Network allows guest VLAN tagging.
        :param pulumi.Input[str] name: A unique name for the network.
        :param pulumi.Input[str] netmask: Netmask address for a subnet.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when 
               connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_name: An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        :param pulumi.Input[str] prefix_length: The subnet prefix length for the network.
        :param pulumi.Input[bool] reboot_vapp_on_removal: **VCD 10.4.1+** API **prohibits removal of vApp
               network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
               If the vApp's original state was powered on, it will be powered back on after removing the
               network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
               never power cycle vApp during *update* operations. Changing this value will cause plan change, but
               *update* will be a no-op operation.
               
               
               <a id="ip-pools"></a>
        :param pulumi.Input[bool] retain_ip_mac_enabled: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappNetworkStaticIpPoolArgs', 'VappNetworkStaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vapp_name: The vApp this network belongs to.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VappNetworkState.__new__(_VappNetworkState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_pools"] = dhcp_pools
        __props__.__dict__["dns1"] = dns1
        __props__.__dict__["dns2"] = dns2
        __props__.__dict__["dns_suffix"] = dns_suffix
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["guest_vlan_allowed"] = guest_vlan_allowed
        __props__.__dict__["name"] = name
        __props__.__dict__["netmask"] = netmask
        __props__.__dict__["org"] = org
        __props__.__dict__["org_network_name"] = org_network_name
        __props__.__dict__["prefix_length"] = prefix_length
        __props__.__dict__["reboot_vapp_on_removal"] = reboot_vapp_on_removal
        __props__.__dict__["retain_ip_mac_enabled"] = retain_ip_mac_enabled
        __props__.__dict__["static_ip_pools"] = static_ip_pools
        __props__.__dict__["vapp_name"] = vapp_name
        __props__.__dict__["vdc"] = vdc
        return VappNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of vApp network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpPools")
    def dhcp_pools(self) -> pulumi.Output[Optional[Sequence['outputs.VappNetworkDhcpPool']]]:
        """
        A range of IPs to issue to virtual machines that don't have a static IP; see IP Pools below for details.
        """
        return pulumi.get(self, "dhcp_pools")

    @property
    @pulumi.getter
    def dns1(self) -> pulumi.Output[Optional[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> pulumi.Output[Optional[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> pulumi.Output[Optional[str]]:
        """
        A FQDN for the virtual machines on this network.
        """
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        Gateway of the network
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> pulumi.Output[Optional[bool]]:
        """
        True if Network allows guest VLAN tagging.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use prefix_length instead which supports both IPv4 and IPv6""")
    def netmask(self) -> pulumi.Output[str]:
        """
        Netmask address for a subnet.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when 
        connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> pulumi.Output[Optional[str]]:
        """
        An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
        """
        return pulumi.get(self, "org_network_name")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Output[str]:
        """
        The subnet prefix length for the network.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="rebootVappOnRemoval")
    def reboot_vapp_on_removal(self) -> pulumi.Output[Optional[bool]]:
        """
        **VCD 10.4.1+** API **prohibits removal of vApp
        network from a powered on vApp**. Set to `true` to power off the vApp during vApp network removal.
        If the vApp's original state was powered on, it will be powered back on after removing the
        network. (default `false`) **Note.** It only affects *delete* operation for the resource and will
        never power cycle vApp during *update* operations. Changing this value will cause plan change, but
        *update* will be a no-op operation.


        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "reboot_vapp_on_removal")

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
        """
        return pulumi.get(self, "retain_ip_mac_enabled")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.VappNetworkStaticIpPool']]]:
        """
        A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Output[str]:
        """
        The vApp this network belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

