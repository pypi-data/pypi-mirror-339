# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SubscribedCatalogArgs', 'SubscribedCatalog']

@pulumi.input_type
class SubscribedCatalogArgs:
    def __init__(__self__, *,
                 subscription_url: pulumi.Input[str],
                 cancel_failed_tasks: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 make_local_copy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 store_tasks: Optional[pulumi.Input[bool]] = None,
                 subscription_password: Optional[pulumi.Input[str]] = None,
                 sync_all: Optional[pulumi.Input[bool]] = None,
                 sync_all_media_items: Optional[pulumi.Input[bool]] = None,
                 sync_all_vapp_templates: Optional[pulumi.Input[bool]] = None,
                 sync_catalog: Optional[pulumi.Input[bool]] = None,
                 sync_media_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_on_refresh: Optional[pulumi.Input[bool]] = None,
                 sync_vapp_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SubscribedCatalog resource.
        :param pulumi.Input[str] subscription_url: The URL to subscribe to the external catalog.
        :param pulumi.Input[bool] cancel_failed_tasks: When `true`, the subscribed catalog will attempt canceling failed tasks.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        :param pulumi.Input[bool] make_local_copy: If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
               It can only be `false` if the user configured in the provider is the System administrator.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog.
        :param pulumi.Input[bool] store_tasks: if `true`, saves the list of tasks to a file for later update.
        :param pulumi.Input[str] subscription_password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
               The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
               Passing in an empty string indicates to remove password.
        :param pulumi.Input[bool] sync_all: If `true`, synchronise this catalog and all items.
        :param pulumi.Input[bool] sync_all_media_items: If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_all_vapp_templates: If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_catalog: If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_media_items: Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        :param pulumi.Input[bool] sync_on_refresh: Boolean value that shows if sync should be performed on every refresh.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_vapp_templates: Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        """
        pulumi.set(__self__, "subscription_url", subscription_url)
        if cancel_failed_tasks is not None:
            pulumi.set(__self__, "cancel_failed_tasks", cancel_failed_tasks)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if make_local_copy is not None:
            pulumi.set(__self__, "make_local_copy", make_local_copy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if store_tasks is not None:
            pulumi.set(__self__, "store_tasks", store_tasks)
        if subscription_password is not None:
            pulumi.set(__self__, "subscription_password", subscription_password)
        if sync_all is not None:
            pulumi.set(__self__, "sync_all", sync_all)
        if sync_all_media_items is not None:
            pulumi.set(__self__, "sync_all_media_items", sync_all_media_items)
        if sync_all_vapp_templates is not None:
            pulumi.set(__self__, "sync_all_vapp_templates", sync_all_vapp_templates)
        if sync_catalog is not None:
            pulumi.set(__self__, "sync_catalog", sync_catalog)
        if sync_media_items is not None:
            pulumi.set(__self__, "sync_media_items", sync_media_items)
        if sync_on_refresh is not None:
            pulumi.set(__self__, "sync_on_refresh", sync_on_refresh)
        if sync_vapp_templates is not None:
            pulumi.set(__self__, "sync_vapp_templates", sync_vapp_templates)

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> pulumi.Input[str]:
        """
        The URL to subscribe to the external catalog.
        """
        return pulumi.get(self, "subscription_url")

    @subscription_url.setter
    def subscription_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_url", value)

    @property
    @pulumi.getter(name="cancelFailedTasks")
    def cancel_failed_tasks(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the subscribed catalog will attempt canceling failed tasks.
        """
        return pulumi.get(self, "cancel_failed_tasks")

    @cancel_failed_tasks.setter
    def cancel_failed_tasks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cancel_failed_tasks", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter(name="makeLocalCopy")
    def make_local_copy(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
        It can only be `false` if the user configured in the provider is the System administrator.
        """
        return pulumi.get(self, "make_local_copy")

    @make_local_copy.setter
    def make_local_copy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "make_local_copy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to set specific storage profile to be used for catalog.
        """
        return pulumi.get(self, "storage_profile_id")

    @storage_profile_id.setter
    def storage_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_id", value)

    @property
    @pulumi.getter(name="storeTasks")
    def store_tasks(self) -> Optional[pulumi.Input[bool]]:
        """
        if `true`, saves the list of tasks to a file for later update.
        """
        return pulumi.get(self, "store_tasks")

    @store_tasks.setter
    def store_tasks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_tasks", value)

    @property
    @pulumi.getter(name="subscriptionPassword")
    def subscription_password(self) -> Optional[pulumi.Input[str]]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
        The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
        Passing in an empty string indicates to remove password.
        """
        return pulumi.get(self, "subscription_password")

    @subscription_password.setter
    def subscription_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_password", value)

    @property
    @pulumi.getter(name="syncAll")
    def sync_all(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise this catalog and all items.
        """
        return pulumi.get(self, "sync_all")

    @sync_all.setter
    def sync_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all", value)

    @property
    @pulumi.getter(name="syncAllMediaItems")
    def sync_all_media_items(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_media_items")

    @sync_all_media_items.setter
    def sync_all_media_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all_media_items", value)

    @property
    @pulumi.getter(name="syncAllVappTemplates")
    def sync_all_vapp_templates(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_vapp_templates")

    @sync_all_vapp_templates.setter
    def sync_all_vapp_templates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all_vapp_templates", value)

    @property
    @pulumi.getter(name="syncCatalog")
    def sync_catalog(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        """
        return pulumi.get(self, "sync_catalog")

    @sync_catalog.setter
    def sync_catalog(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_catalog", value)

    @property
    @pulumi.getter(name="syncMediaItems")
    def sync_media_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        """
        return pulumi.get(self, "sync_media_items")

    @sync_media_items.setter
    def sync_media_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_media_items", value)

    @property
    @pulumi.getter(name="syncOnRefresh")
    def sync_on_refresh(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value that shows if sync should be performed on every refresh.
        """
        return pulumi.get(self, "sync_on_refresh")

    @sync_on_refresh.setter
    def sync_on_refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_on_refresh", value)

    @property
    @pulumi.getter(name="syncVappTemplates")
    def sync_vapp_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        """
        return pulumi.get(self, "sync_vapp_templates")

    @sync_vapp_templates.setter
    def sync_vapp_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_vapp_templates", value)


@pulumi.input_type
class _SubscribedCatalogState:
    def __init__(__self__, *,
                 cancel_failed_tasks: Optional[pulumi.Input[bool]] = None,
                 catalog_version: Optional[pulumi.Input[int]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 failed_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 is_local: Optional[pulumi.Input[bool]] = None,
                 is_published: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 make_local_copy: Optional[pulumi.Input[bool]] = None,
                 media_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_media: Optional[pulumi.Input[int]] = None,
                 number_of_vapp_templates: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_name: Optional[pulumi.Input[str]] = None,
                 publish_subscription_type: Optional[pulumi.Input[str]] = None,
                 running_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 store_tasks: Optional[pulumi.Input[bool]] = None,
                 subscription_password: Optional[pulumi.Input[str]] = None,
                 subscription_url: Optional[pulumi.Input[str]] = None,
                 sync_all: Optional[pulumi.Input[bool]] = None,
                 sync_all_media_items: Optional[pulumi.Input[bool]] = None,
                 sync_all_vapp_templates: Optional[pulumi.Input[bool]] = None,
                 sync_catalog: Optional[pulumi.Input[bool]] = None,
                 sync_media_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_on_refresh: Optional[pulumi.Input[bool]] = None,
                 sync_vapp_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tasks_file_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SubscribedCatalog resources.
        :param pulumi.Input[bool] cancel_failed_tasks: When `true`, the subscribed catalog will attempt canceling failed tasks.
        :param pulumi.Input[int] catalog_version: Version number from this catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[str] created: Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        :param pulumi.Input[str] description: Description of catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] failed_tasks: List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        :param pulumi.Input[str] href: the catalog's Hyper reference.
        :param pulumi.Input[bool] is_local: (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        :param pulumi.Input[bool] is_published: Indicates if this catalog is available for subscription. (Always false)
        :param pulumi.Input[bool] is_shared: Indicates if the catalog is shared.
        :param pulumi.Input[bool] make_local_copy: If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
               It can only be `false` if the user configured in the provider is the System administrator.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] media_item_lists: List of media item names in this catalog, in alphabetical order.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: (*Available until VCD 10.5*) Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[int] number_of_media: Number of media items available in this catalog.
        :param pulumi.Input[int] number_of_vapp_templates: Number of vApp templates available in this catalog.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level.
        :param pulumi.Input[str] owner_name: Owner of the catalog.
        :param pulumi.Input[str] publish_subscription_type: Shows if the catalog is published, if it is a subscription from another one or none of those. (Always `SUBSCRIBED`)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] running_tasks: List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog.
        :param pulumi.Input[bool] store_tasks: if `true`, saves the list of tasks to a file for later update.
        :param pulumi.Input[str] subscription_password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
               The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
               Passing in an empty string indicates to remove password.
        :param pulumi.Input[str] subscription_url: The URL to subscribe to the external catalog.
        :param pulumi.Input[bool] sync_all: If `true`, synchronise this catalog and all items.
        :param pulumi.Input[bool] sync_all_media_items: If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_all_vapp_templates: If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_catalog: If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_media_items: Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        :param pulumi.Input[bool] sync_on_refresh: Boolean value that shows if sync should be performed on every refresh.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_vapp_templates: Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        :param pulumi.Input[str] tasks_file_name: Where the running tasks IDs have been stored. Only if `store_tasks` is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_template_lists: List of vApp template names in this catalog, in alphabetical order.
        """
        if cancel_failed_tasks is not None:
            pulumi.set(__self__, "cancel_failed_tasks", cancel_failed_tasks)
        if catalog_version is not None:
            pulumi.set(__self__, "catalog_version", catalog_version)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if failed_tasks is not None:
            pulumi.set(__self__, "failed_tasks", failed_tasks)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_local is not None:
            pulumi.set(__self__, "is_local", is_local)
        if is_published is not None:
            pulumi.set(__self__, "is_published", is_published)
        if is_shared is not None:
            pulumi.set(__self__, "is_shared", is_shared)
        if make_local_copy is not None:
            pulumi.set(__self__, "make_local_copy", make_local_copy)
        if media_item_lists is not None:
            pulumi.set(__self__, "media_item_lists", media_item_lists)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_media is not None:
            pulumi.set(__self__, "number_of_media", number_of_media)
        if number_of_vapp_templates is not None:
            pulumi.set(__self__, "number_of_vapp_templates", number_of_vapp_templates)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_name is not None:
            pulumi.set(__self__, "owner_name", owner_name)
        if publish_subscription_type is not None:
            pulumi.set(__self__, "publish_subscription_type", publish_subscription_type)
        if running_tasks is not None:
            pulumi.set(__self__, "running_tasks", running_tasks)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if store_tasks is not None:
            pulumi.set(__self__, "store_tasks", store_tasks)
        if subscription_password is not None:
            pulumi.set(__self__, "subscription_password", subscription_password)
        if subscription_url is not None:
            pulumi.set(__self__, "subscription_url", subscription_url)
        if sync_all is not None:
            pulumi.set(__self__, "sync_all", sync_all)
        if sync_all_media_items is not None:
            pulumi.set(__self__, "sync_all_media_items", sync_all_media_items)
        if sync_all_vapp_templates is not None:
            pulumi.set(__self__, "sync_all_vapp_templates", sync_all_vapp_templates)
        if sync_catalog is not None:
            pulumi.set(__self__, "sync_catalog", sync_catalog)
        if sync_media_items is not None:
            pulumi.set(__self__, "sync_media_items", sync_media_items)
        if sync_on_refresh is not None:
            pulumi.set(__self__, "sync_on_refresh", sync_on_refresh)
        if sync_vapp_templates is not None:
            pulumi.set(__self__, "sync_vapp_templates", sync_vapp_templates)
        if tasks_file_name is not None:
            pulumi.set(__self__, "tasks_file_name", tasks_file_name)
        if vapp_template_lists is not None:
            pulumi.set(__self__, "vapp_template_lists", vapp_template_lists)

    @property
    @pulumi.getter(name="cancelFailedTasks")
    def cancel_failed_tasks(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the subscribed catalog will attempt canceling failed tasks.
        """
        return pulumi.get(self, "cancel_failed_tasks")

    @cancel_failed_tasks.setter
    def cancel_failed_tasks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cancel_failed_tasks", value)

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> Optional[pulumi.Input[int]]:
        """
        Version number from this catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "catalog_version")

    @catalog_version.setter
    def catalog_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "catalog_version", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failedTasks")
    def failed_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "failed_tasks")

    @failed_tasks.setter
    def failed_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failed_tasks", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        the catalog's Hyper reference.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> Optional[pulumi.Input[bool]]:
        """
        (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        """
        return pulumi.get(self, "is_local")

    @is_local.setter
    def is_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_local", value)

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if this catalog is available for subscription. (Always false)
        """
        return pulumi.get(self, "is_published")

    @is_published.setter
    def is_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_published", value)

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the catalog is shared.
        """
        return pulumi.get(self, "is_shared")

    @is_shared.setter
    def is_shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_shared", value)

    @property
    @pulumi.getter(name="makeLocalCopy")
    def make_local_copy(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
        It can only be `false` if the user configured in the provider is the System administrator.
        """
        return pulumi.get(self, "make_local_copy")

    @make_local_copy.setter
    def make_local_copy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "make_local_copy", value)

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of media item names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "media_item_lists")

    @media_item_lists.setter
    def media_item_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "media_item_lists", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (*Available until VCD 10.5*) Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> Optional[pulumi.Input[int]]:
        """
        Number of media items available in this catalog.
        """
        return pulumi.get(self, "number_of_media")

    @number_of_media.setter
    def number_of_media(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_media", value)

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> Optional[pulumi.Input[int]]:
        """
        Number of vApp templates available in this catalog.
        """
        return pulumi.get(self, "number_of_vapp_templates")

    @number_of_vapp_templates.setter
    def number_of_vapp_templates(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_vapp_templates", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the catalog.
        """
        return pulumi.get(self, "owner_name")

    @owner_name.setter
    def owner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_name", value)

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> Optional[pulumi.Input[str]]:
        """
        Shows if the catalog is published, if it is a subscription from another one or none of those. (Always `SUBSCRIBED`)
        """
        return pulumi.get(self, "publish_subscription_type")

    @publish_subscription_type.setter
    def publish_subscription_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_subscription_type", value)

    @property
    @pulumi.getter(name="runningTasks")
    def running_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "running_tasks")

    @running_tasks.setter
    def running_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "running_tasks", value)

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to set specific storage profile to be used for catalog.
        """
        return pulumi.get(self, "storage_profile_id")

    @storage_profile_id.setter
    def storage_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_id", value)

    @property
    @pulumi.getter(name="storeTasks")
    def store_tasks(self) -> Optional[pulumi.Input[bool]]:
        """
        if `true`, saves the list of tasks to a file for later update.
        """
        return pulumi.get(self, "store_tasks")

    @store_tasks.setter
    def store_tasks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_tasks", value)

    @property
    @pulumi.getter(name="subscriptionPassword")
    def subscription_password(self) -> Optional[pulumi.Input[str]]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
        The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
        Passing in an empty string indicates to remove password.
        """
        return pulumi.get(self, "subscription_password")

    @subscription_password.setter
    def subscription_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_password", value)

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to subscribe to the external catalog.
        """
        return pulumi.get(self, "subscription_url")

    @subscription_url.setter
    def subscription_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_url", value)

    @property
    @pulumi.getter(name="syncAll")
    def sync_all(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise this catalog and all items.
        """
        return pulumi.get(self, "sync_all")

    @sync_all.setter
    def sync_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all", value)

    @property
    @pulumi.getter(name="syncAllMediaItems")
    def sync_all_media_items(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_media_items")

    @sync_all_media_items.setter
    def sync_all_media_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all_media_items", value)

    @property
    @pulumi.getter(name="syncAllVappTemplates")
    def sync_all_vapp_templates(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_vapp_templates")

    @sync_all_vapp_templates.setter
    def sync_all_vapp_templates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_all_vapp_templates", value)

    @property
    @pulumi.getter(name="syncCatalog")
    def sync_catalog(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        """
        return pulumi.get(self, "sync_catalog")

    @sync_catalog.setter
    def sync_catalog(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_catalog", value)

    @property
    @pulumi.getter(name="syncMediaItems")
    def sync_media_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        """
        return pulumi.get(self, "sync_media_items")

    @sync_media_items.setter
    def sync_media_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_media_items", value)

    @property
    @pulumi.getter(name="syncOnRefresh")
    def sync_on_refresh(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value that shows if sync should be performed on every refresh.
        """
        return pulumi.get(self, "sync_on_refresh")

    @sync_on_refresh.setter
    def sync_on_refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_on_refresh", value)

    @property
    @pulumi.getter(name="syncVappTemplates")
    def sync_vapp_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        """
        return pulumi.get(self, "sync_vapp_templates")

    @sync_vapp_templates.setter
    def sync_vapp_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_vapp_templates", value)

    @property
    @pulumi.getter(name="tasksFileName")
    def tasks_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Where the running tasks IDs have been stored. Only if `store_tasks` is set.
        """
        return pulumi.get(self, "tasks_file_name")

    @tasks_file_name.setter
    def tasks_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tasks_file_name", value)

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of vApp template names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "vapp_template_lists")

    @vapp_template_lists.setter
    def vapp_template_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_template_lists", value)


class SubscribedCatalog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cancel_failed_tasks: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 make_local_copy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 store_tasks: Optional[pulumi.Input[bool]] = None,
                 subscription_password: Optional[pulumi.Input[str]] = None,
                 subscription_url: Optional[pulumi.Input[str]] = None,
                 sync_all: Optional[pulumi.Input[bool]] = None,
                 sync_all_media_items: Optional[pulumi.Input[bool]] = None,
                 sync_all_vapp_templates: Optional[pulumi.Input[bool]] = None,
                 sync_catalog: Optional[pulumi.Input[bool]] = None,
                 sync_media_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_on_refresh: Optional[pulumi.Input[bool]] = None,
                 sync_vapp_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a SubscribedCatalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cancel_failed_tasks: When `true`, the subscribed catalog will attempt canceling failed tasks.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        :param pulumi.Input[bool] make_local_copy: If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
               It can only be `false` if the user configured in the provider is the System administrator.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog.
        :param pulumi.Input[bool] store_tasks: if `true`, saves the list of tasks to a file for later update.
        :param pulumi.Input[str] subscription_password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
               The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
               Passing in an empty string indicates to remove password.
        :param pulumi.Input[str] subscription_url: The URL to subscribe to the external catalog.
        :param pulumi.Input[bool] sync_all: If `true`, synchronise this catalog and all items.
        :param pulumi.Input[bool] sync_all_media_items: If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_all_vapp_templates: If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_catalog: If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_media_items: Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        :param pulumi.Input[bool] sync_on_refresh: Boolean value that shows if sync should be performed on every refresh.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_vapp_templates: Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscribedCatalogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SubscribedCatalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubscribedCatalogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscribedCatalogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cancel_failed_tasks: Optional[pulumi.Input[bool]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 make_local_copy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 storage_profile_id: Optional[pulumi.Input[str]] = None,
                 store_tasks: Optional[pulumi.Input[bool]] = None,
                 subscription_password: Optional[pulumi.Input[str]] = None,
                 subscription_url: Optional[pulumi.Input[str]] = None,
                 sync_all: Optional[pulumi.Input[bool]] = None,
                 sync_all_media_items: Optional[pulumi.Input[bool]] = None,
                 sync_all_vapp_templates: Optional[pulumi.Input[bool]] = None,
                 sync_catalog: Optional[pulumi.Input[bool]] = None,
                 sync_media_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_on_refresh: Optional[pulumi.Input[bool]] = None,
                 sync_vapp_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscribedCatalogArgs.__new__(SubscribedCatalogArgs)

            __props__.__dict__["cancel_failed_tasks"] = cancel_failed_tasks
            __props__.__dict__["delete_force"] = delete_force
            __props__.__dict__["delete_recursive"] = delete_recursive
            __props__.__dict__["make_local_copy"] = make_local_copy
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["storage_profile_id"] = storage_profile_id
            __props__.__dict__["store_tasks"] = store_tasks
            __props__.__dict__["subscription_password"] = None if subscription_password is None else pulumi.Output.secret(subscription_password)
            if subscription_url is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_url'")
            __props__.__dict__["subscription_url"] = subscription_url
            __props__.__dict__["sync_all"] = sync_all
            __props__.__dict__["sync_all_media_items"] = sync_all_media_items
            __props__.__dict__["sync_all_vapp_templates"] = sync_all_vapp_templates
            __props__.__dict__["sync_catalog"] = sync_catalog
            __props__.__dict__["sync_media_items"] = sync_media_items
            __props__.__dict__["sync_on_refresh"] = sync_on_refresh
            __props__.__dict__["sync_vapp_templates"] = sync_vapp_templates
            __props__.__dict__["catalog_version"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["failed_tasks"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_local"] = None
            __props__.__dict__["is_published"] = None
            __props__.__dict__["is_shared"] = None
            __props__.__dict__["media_item_lists"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["number_of_media"] = None
            __props__.__dict__["number_of_vapp_templates"] = None
            __props__.__dict__["owner_name"] = None
            __props__.__dict__["publish_subscription_type"] = None
            __props__.__dict__["running_tasks"] = None
            __props__.__dict__["tasks_file_name"] = None
            __props__.__dict__["vapp_template_lists"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["subscriptionPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SubscribedCatalog, __self__).__init__(
            'vcd:index/subscribedCatalog:SubscribedCatalog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cancel_failed_tasks: Optional[pulumi.Input[bool]] = None,
            catalog_version: Optional[pulumi.Input[int]] = None,
            created: Optional[pulumi.Input[str]] = None,
            delete_force: Optional[pulumi.Input[bool]] = None,
            delete_recursive: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            failed_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            href: Optional[pulumi.Input[str]] = None,
            is_local: Optional[pulumi.Input[bool]] = None,
            is_published: Optional[pulumi.Input[bool]] = None,
            is_shared: Optional[pulumi.Input[bool]] = None,
            make_local_copy: Optional[pulumi.Input[bool]] = None,
            media_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            number_of_media: Optional[pulumi.Input[int]] = None,
            number_of_vapp_templates: Optional[pulumi.Input[int]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_name: Optional[pulumi.Input[str]] = None,
            publish_subscription_type: Optional[pulumi.Input[str]] = None,
            running_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage_profile_id: Optional[pulumi.Input[str]] = None,
            store_tasks: Optional[pulumi.Input[bool]] = None,
            subscription_password: Optional[pulumi.Input[str]] = None,
            subscription_url: Optional[pulumi.Input[str]] = None,
            sync_all: Optional[pulumi.Input[bool]] = None,
            sync_all_media_items: Optional[pulumi.Input[bool]] = None,
            sync_all_vapp_templates: Optional[pulumi.Input[bool]] = None,
            sync_catalog: Optional[pulumi.Input[bool]] = None,
            sync_media_items: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sync_on_refresh: Optional[pulumi.Input[bool]] = None,
            sync_vapp_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tasks_file_name: Optional[pulumi.Input[str]] = None,
            vapp_template_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SubscribedCatalog':
        """
        Get an existing SubscribedCatalog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cancel_failed_tasks: When `true`, the subscribed catalog will attempt canceling failed tasks.
        :param pulumi.Input[int] catalog_version: Version number from this catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[str] created: Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.
        :param pulumi.Input[bool] delete_force: When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        :param pulumi.Input[str] description: Description of catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] failed_tasks: List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        :param pulumi.Input[str] href: the catalog's Hyper reference.
        :param pulumi.Input[bool] is_local: (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        :param pulumi.Input[bool] is_published: Indicates if this catalog is available for subscription. (Always false)
        :param pulumi.Input[bool] is_shared: Indicates if the catalog is shared.
        :param pulumi.Input[bool] make_local_copy: If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
               It can only be `false` if the user configured in the provider is the System administrator.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] media_item_lists: List of media item names in this catalog, in alphabetical order.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: (*Available until VCD 10.5*) Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.
        :param pulumi.Input[str] name: Catalog name
        :param pulumi.Input[int] number_of_media: Number of media items available in this catalog.
        :param pulumi.Input[int] number_of_vapp_templates: Number of vApp templates available in this catalog.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level.
        :param pulumi.Input[str] owner_name: Owner of the catalog.
        :param pulumi.Input[str] publish_subscription_type: Shows if the catalog is published, if it is a subscription from another one or none of those. (Always `SUBSCRIBED`)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] running_tasks: List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        :param pulumi.Input[str] storage_profile_id: Allows to set specific storage profile to be used for catalog.
        :param pulumi.Input[bool] store_tasks: if `true`, saves the list of tasks to a file for later update.
        :param pulumi.Input[str] subscription_password: An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
               The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
               Passing in an empty string indicates to remove password.
        :param pulumi.Input[str] subscription_url: The URL to subscribe to the external catalog.
        :param pulumi.Input[bool] sync_all: If `true`, synchronise this catalog and all items.
        :param pulumi.Input[bool] sync_all_media_items: If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_all_vapp_templates: If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        :param pulumi.Input[bool] sync_catalog: If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_media_items: Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        :param pulumi.Input[bool] sync_on_refresh: Boolean value that shows if sync should be performed on every refresh.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_vapp_templates: Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        :param pulumi.Input[str] tasks_file_name: Where the running tasks IDs have been stored. Only if `store_tasks` is set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_template_lists: List of vApp template names in this catalog, in alphabetical order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscribedCatalogState.__new__(_SubscribedCatalogState)

        __props__.__dict__["cancel_failed_tasks"] = cancel_failed_tasks
        __props__.__dict__["catalog_version"] = catalog_version
        __props__.__dict__["created"] = created
        __props__.__dict__["delete_force"] = delete_force
        __props__.__dict__["delete_recursive"] = delete_recursive
        __props__.__dict__["description"] = description
        __props__.__dict__["failed_tasks"] = failed_tasks
        __props__.__dict__["href"] = href
        __props__.__dict__["is_local"] = is_local
        __props__.__dict__["is_published"] = is_published
        __props__.__dict__["is_shared"] = is_shared
        __props__.__dict__["make_local_copy"] = make_local_copy
        __props__.__dict__["media_item_lists"] = media_item_lists
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["number_of_media"] = number_of_media
        __props__.__dict__["number_of_vapp_templates"] = number_of_vapp_templates
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_name"] = owner_name
        __props__.__dict__["publish_subscription_type"] = publish_subscription_type
        __props__.__dict__["running_tasks"] = running_tasks
        __props__.__dict__["storage_profile_id"] = storage_profile_id
        __props__.__dict__["store_tasks"] = store_tasks
        __props__.__dict__["subscription_password"] = subscription_password
        __props__.__dict__["subscription_url"] = subscription_url
        __props__.__dict__["sync_all"] = sync_all
        __props__.__dict__["sync_all_media_items"] = sync_all_media_items
        __props__.__dict__["sync_all_vapp_templates"] = sync_all_vapp_templates
        __props__.__dict__["sync_catalog"] = sync_catalog
        __props__.__dict__["sync_media_items"] = sync_media_items
        __props__.__dict__["sync_on_refresh"] = sync_on_refresh
        __props__.__dict__["sync_vapp_templates"] = sync_vapp_templates
        __props__.__dict__["tasks_file_name"] = tasks_file_name
        __props__.__dict__["vapp_template_lists"] = vapp_template_lists
        return SubscribedCatalog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cancelFailedTasks")
    def cancel_failed_tasks(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, the subscribed catalog will attempt canceling failed tasks.
        """
        return pulumi.get(self, "cancel_failed_tasks")

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> pulumi.Output[int]:
        """
        Version number from this catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "catalog_version")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Output[Optional[bool]]:
        """
        When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Output[Optional[bool]]:
        """
        When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failedTasks")
    def failed_tasks(self) -> pulumi.Output[Sequence[str]]:
        """
        List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "failed_tasks")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        the catalog's Hyper reference.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> pulumi.Output[bool]:
        """
        (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        """
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> pulumi.Output[bool]:
        """
        Indicates if this catalog is available for subscription. (Always false)
        """
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> pulumi.Output[bool]:
        """
        Indicates if the catalog is shared.
        """
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter(name="makeLocalCopy")
    def make_local_copy(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, subscription to a catalog creates a local copy of all items. Defaults to `false`, which does not create a local copy of catalog items unless a sync operation is performed.
        It can only be `false` if the user configured in the provider is the System administrator.
        """
        return pulumi.get(self, "make_local_copy")

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of media item names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "media_item_lists")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (*Available until VCD 10.5*) Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Catalog name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> pulumi.Output[int]:
        """
        Number of media items available in this catalog.
        """
        return pulumi.get(self, "number_of_media")

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> pulumi.Output[int]:
        """
        Number of vApp templates available in this catalog.
        """
        return pulumi.get(self, "number_of_vapp_templates")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> pulumi.Output[str]:
        """
        Owner of the catalog.
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> pulumi.Output[str]:
        """
        Shows if the catalog is published, if it is a subscription from another one or none of those. (Always `SUBSCRIBED`)
        """
        return pulumi.get(self, "publish_subscription_type")

    @property
    @pulumi.getter(name="runningTasks")
    def running_tasks(self) -> pulumi.Output[Sequence[str]]:
        """
        List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "running_tasks")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> pulumi.Output[Optional[str]]:
        """
        Allows to set specific storage profile to be used for catalog.
        """
        return pulumi.get(self, "storage_profile_id")

    @property
    @pulumi.getter(name="storeTasks")
    def store_tasks(self) -> pulumi.Output[Optional[bool]]:
        """
        if `true`, saves the list of tasks to a file for later update.
        """
        return pulumi.get(self, "store_tasks")

    @property
    @pulumi.getter(name="subscriptionPassword")
    def subscription_password(self) -> pulumi.Output[str]:
        """
        An optional password to access the catalog. Only ASCII characters are allowed in a valid password. 
        The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
        Passing in an empty string indicates to remove password.
        """
        return pulumi.get(self, "subscription_password")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> pulumi.Output[str]:
        """
        The URL to subscribe to the external catalog.
        """
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="syncAll")
    def sync_all(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, synchronise this catalog and all items.
        """
        return pulumi.get(self, "sync_all")

    @property
    @pulumi.getter(name="syncAllMediaItems")
    def sync_all_media_items(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, synchronise all media items. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_media_items")

    @property
    @pulumi.getter(name="syncAllVappTemplates")
    def sync_all_vapp_templates(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, synchronise all vApp templates. Not to be used when `sync_all` is set.
        """
        return pulumi.get(self, "sync_all_vapp_templates")

    @property
    @pulumi.getter(name="syncCatalog")
    def sync_catalog(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, synchronise this catalog. Not to be used when `sync_all` is set. This operation fetches the list of items. If `make_local_copy` is set, it also synchronises all the items.
        """
        return pulumi.get(self, "sync_catalog")

    @property
    @pulumi.getter(name="syncMediaItems")
    def sync_media_items(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Synchronise a list of media items. Not to be used when `sync_all` or `sync_all_media_items` are set.
        """
        return pulumi.get(self, "sync_media_items")

    @property
    @pulumi.getter(name="syncOnRefresh")
    def sync_on_refresh(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value that shows if sync should be performed on every refresh.
        """
        return pulumi.get(self, "sync_on_refresh")

    @property
    @pulumi.getter(name="syncVappTemplates")
    def sync_vapp_templates(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Synchronise a list of vApp templates. Not to be used when `sync_all` or `sync_all_vapp_templates` are set.
        """
        return pulumi.get(self, "sync_vapp_templates")

    @property
    @pulumi.getter(name="tasksFileName")
    def tasks_file_name(self) -> pulumi.Output[str]:
        """
        Where the running tasks IDs have been stored. Only if `store_tasks` is set.
        """
        return pulumi.get(self, "tasks_file_name")

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of vApp template names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "vapp_template_lists")

