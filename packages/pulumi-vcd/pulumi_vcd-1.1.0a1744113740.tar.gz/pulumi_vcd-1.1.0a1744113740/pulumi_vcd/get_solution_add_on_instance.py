# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSolutionAddOnInstanceResult',
    'AwaitableGetSolutionAddOnInstanceResult',
    'get_solution_add_on_instance',
    'get_solution_add_on_instance_output',
]

@pulumi.output_type
class GetSolutionAddOnInstanceResult:
    """
    A collection of values returned by getSolutionAddOnInstance.
    """
    def __init__(__self__, add_on_id=None, id=None, input=None, name=None, rde_state=None):
        if add_on_id and not isinstance(add_on_id, str):
            raise TypeError("Expected argument 'add_on_id' to be a str")
        pulumi.set(__self__, "add_on_id", add_on_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input and not isinstance(input, dict):
            raise TypeError("Expected argument 'input' to be a dict")
        pulumi.set(__self__, "input", input)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rde_state and not isinstance(rde_state, str):
            raise TypeError("Expected argument 'rde_state' to be a str")
        pulumi.set(__self__, "rde_state", rde_state)

    @property
    @pulumi.getter(name="addOnId")
    def add_on_id(self) -> str:
        return pulumi.get(self, "add_on_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def input(self) -> Mapping[str, str]:
        return pulumi.get(self, "input")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> str:
        return pulumi.get(self, "rde_state")


class AwaitableGetSolutionAddOnInstanceResult(GetSolutionAddOnInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSolutionAddOnInstanceResult(
            add_on_id=self.add_on_id,
            id=self.id,
            input=self.input,
            name=self.name,
            rde_state=self.rde_state)


def get_solution_add_on_instance(name: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSolutionAddOnInstanceResult:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read Solution Add-On Instances in Cloud Director. A Solution Add-On
    Instance is created from an existing Solution Add-On by supplying configuration values of that
    particular instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    dse14 = vcd.get_solution_add_on_instance(name="MyDseInstance")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSolutionAddOnInstance:getSolutionAddOnInstance', __args__, opts=opts, typ=GetSolutionAddOnInstanceResult).value

    return AwaitableGetSolutionAddOnInstanceResult(
        add_on_id=pulumi.get(__ret__, 'add_on_id'),
        id=pulumi.get(__ret__, 'id'),
        input=pulumi.get(__ret__, 'input'),
        name=pulumi.get(__ret__, 'name'),
        rde_state=pulumi.get(__ret__, 'rde_state'))
def get_solution_add_on_instance_output(name: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSolutionAddOnInstanceResult]:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read Solution Add-On Instances in Cloud Director. A Solution Add-On
    Instance is created from an existing Solution Add-On by supplying configuration values of that
    particular instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    dse14 = vcd.get_solution_add_on_instance(name="MyDseInstance")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getSolutionAddOnInstance:getSolutionAddOnInstance', __args__, opts=opts, typ=GetSolutionAddOnInstanceResult)
    return __ret__.apply(lambda __response__: GetSolutionAddOnInstanceResult(
        add_on_id=pulumi.get(__response__, 'add_on_id'),
        id=pulumi.get(__response__, 'id'),
        input=pulumi.get(__response__, 'input'),
        name=pulumi.get(__response__, 'name'),
        rde_state=pulumi.get(__response__, 'rde_state')))
