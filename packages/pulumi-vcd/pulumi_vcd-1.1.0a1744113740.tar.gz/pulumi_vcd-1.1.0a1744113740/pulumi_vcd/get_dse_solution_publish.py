# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDseSolutionPublishResult',
    'AwaitableGetDseSolutionPublishResult',
    'get_dse_solution_publish',
    'get_dse_solution_publish_output',
]

@pulumi.output_type
class GetDseSolutionPublishResult:
    """
    A collection of values returned by getDseSolutionPublish.
    """
    def __init__(__self__, confluent_license_type=None, data_solution_id=None, ds_org_config_id=None, dso_acl_id=None, id=None, org_id=None, template_acl_ids=None):
        if confluent_license_type and not isinstance(confluent_license_type, str):
            raise TypeError("Expected argument 'confluent_license_type' to be a str")
        pulumi.set(__self__, "confluent_license_type", confluent_license_type)
        if data_solution_id and not isinstance(data_solution_id, str):
            raise TypeError("Expected argument 'data_solution_id' to be a str")
        pulumi.set(__self__, "data_solution_id", data_solution_id)
        if ds_org_config_id and not isinstance(ds_org_config_id, str):
            raise TypeError("Expected argument 'ds_org_config_id' to be a str")
        pulumi.set(__self__, "ds_org_config_id", ds_org_config_id)
        if dso_acl_id and not isinstance(dso_acl_id, str):
            raise TypeError("Expected argument 'dso_acl_id' to be a str")
        pulumi.set(__self__, "dso_acl_id", dso_acl_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if template_acl_ids and not isinstance(template_acl_ids, list):
            raise TypeError("Expected argument 'template_acl_ids' to be a list")
        pulumi.set(__self__, "template_acl_ids", template_acl_ids)

    @property
    @pulumi.getter(name="confluentLicenseType")
    def confluent_license_type(self) -> str:
        return pulumi.get(self, "confluent_license_type")

    @property
    @pulumi.getter(name="dataSolutionId")
    def data_solution_id(self) -> str:
        return pulumi.get(self, "data_solution_id")

    @property
    @pulumi.getter(name="dsOrgConfigId")
    def ds_org_config_id(self) -> str:
        return pulumi.get(self, "ds_org_config_id")

    @property
    @pulumi.getter(name="dsoAclId")
    def dso_acl_id(self) -> str:
        return pulumi.get(self, "dso_acl_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="templateAclIds")
    def template_acl_ids(self) -> Sequence[str]:
        return pulumi.get(self, "template_acl_ids")


class AwaitableGetDseSolutionPublishResult(GetDseSolutionPublishResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDseSolutionPublishResult(
            confluent_license_type=self.confluent_license_type,
            data_solution_id=self.data_solution_id,
            ds_org_config_id=self.ds_org_config_id,
            dso_acl_id=self.dso_acl_id,
            id=self.id,
            org_id=self.org_id,
            template_acl_ids=self.template_acl_ids)


def get_dse_solution_publish(data_solution_id: Optional[str] = None,
                             org_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDseSolutionPublishResult:
    """
    Supported in provider *v3.13+* with Data Solution Extension.

    Provides a data source to read Data Solution publishing settings for a particular tenant.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tenant_org = vcd.get_org(name="tenant_org")
    mongodb_community = vcd.get_dse_solution_publish(data_solution_id=mongodb_community_vcd_dse_registry_configuration["id"],
        org_id=tenant_org.id)
    ```


    :param str data_solution_id: ID of Data Solution
    :param str org_id: Organization ID
    """
    __args__ = dict()
    __args__['dataSolutionId'] = data_solution_id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getDseSolutionPublish:getDseSolutionPublish', __args__, opts=opts, typ=GetDseSolutionPublishResult).value

    return AwaitableGetDseSolutionPublishResult(
        confluent_license_type=pulumi.get(__ret__, 'confluent_license_type'),
        data_solution_id=pulumi.get(__ret__, 'data_solution_id'),
        ds_org_config_id=pulumi.get(__ret__, 'ds_org_config_id'),
        dso_acl_id=pulumi.get(__ret__, 'dso_acl_id'),
        id=pulumi.get(__ret__, 'id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        template_acl_ids=pulumi.get(__ret__, 'template_acl_ids'))
def get_dse_solution_publish_output(data_solution_id: Optional[pulumi.Input[str]] = None,
                                    org_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDseSolutionPublishResult]:
    """
    Supported in provider *v3.13+* with Data Solution Extension.

    Provides a data source to read Data Solution publishing settings for a particular tenant.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tenant_org = vcd.get_org(name="tenant_org")
    mongodb_community = vcd.get_dse_solution_publish(data_solution_id=mongodb_community_vcd_dse_registry_configuration["id"],
        org_id=tenant_org.id)
    ```


    :param str data_solution_id: ID of Data Solution
    :param str org_id: Organization ID
    """
    __args__ = dict()
    __args__['dataSolutionId'] = data_solution_id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getDseSolutionPublish:getDseSolutionPublish', __args__, opts=opts, typ=GetDseSolutionPublishResult)
    return __ret__.apply(lambda __response__: GetDseSolutionPublishResult(
        confluent_license_type=pulumi.get(__response__, 'confluent_license_type'),
        data_solution_id=pulumi.get(__response__, 'data_solution_id'),
        ds_org_config_id=pulumi.get(__response__, 'ds_org_config_id'),
        dso_acl_id=pulumi.get(__response__, 'dso_acl_id'),
        id=pulumi.get(__response__, 'id'),
        org_id=pulumi.get(__response__, 'org_id'),
        template_acl_ids=pulumi.get(__response__, 'template_acl_ids')))
