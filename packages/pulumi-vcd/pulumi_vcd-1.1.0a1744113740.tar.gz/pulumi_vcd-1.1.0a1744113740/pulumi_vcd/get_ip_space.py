# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIpSpaceResult',
    'AwaitableGetIpSpaceResult',
    'get_ip_space',
    'get_ip_space_output',
]

@pulumi.output_type
class GetIpSpaceResult:
    """
    A collection of values returned by getIpSpace.
    """
    def __init__(__self__, default_firewall_rule_creation_enabled=None, default_no_snat_rule_creation_enabled=None, default_snat_rule_creation_enabled=None, description=None, external_scope=None, id=None, internal_scopes=None, ip_prefixes=None, ip_range_quota=None, ip_ranges=None, name=None, org_id=None, route_advertisement_enabled=None, type=None):
        if default_firewall_rule_creation_enabled and not isinstance(default_firewall_rule_creation_enabled, bool):
            raise TypeError("Expected argument 'default_firewall_rule_creation_enabled' to be a bool")
        pulumi.set(__self__, "default_firewall_rule_creation_enabled", default_firewall_rule_creation_enabled)
        if default_no_snat_rule_creation_enabled and not isinstance(default_no_snat_rule_creation_enabled, bool):
            raise TypeError("Expected argument 'default_no_snat_rule_creation_enabled' to be a bool")
        pulumi.set(__self__, "default_no_snat_rule_creation_enabled", default_no_snat_rule_creation_enabled)
        if default_snat_rule_creation_enabled and not isinstance(default_snat_rule_creation_enabled, bool):
            raise TypeError("Expected argument 'default_snat_rule_creation_enabled' to be a bool")
        pulumi.set(__self__, "default_snat_rule_creation_enabled", default_snat_rule_creation_enabled)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_scope and not isinstance(external_scope, str):
            raise TypeError("Expected argument 'external_scope' to be a str")
        pulumi.set(__self__, "external_scope", external_scope)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_scopes and not isinstance(internal_scopes, list):
            raise TypeError("Expected argument 'internal_scopes' to be a list")
        pulumi.set(__self__, "internal_scopes", internal_scopes)
        if ip_prefixes and not isinstance(ip_prefixes, list):
            raise TypeError("Expected argument 'ip_prefixes' to be a list")
        pulumi.set(__self__, "ip_prefixes", ip_prefixes)
        if ip_range_quota and not isinstance(ip_range_quota, str):
            raise TypeError("Expected argument 'ip_range_quota' to be a str")
        pulumi.set(__self__, "ip_range_quota", ip_range_quota)
        if ip_ranges and not isinstance(ip_ranges, list):
            raise TypeError("Expected argument 'ip_ranges' to be a list")
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if route_advertisement_enabled and not isinstance(route_advertisement_enabled, bool):
            raise TypeError("Expected argument 'route_advertisement_enabled' to be a bool")
        pulumi.set(__self__, "route_advertisement_enabled", route_advertisement_enabled)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultFirewallRuleCreationEnabled")
    def default_firewall_rule_creation_enabled(self) -> bool:
        return pulumi.get(self, "default_firewall_rule_creation_enabled")

    @property
    @pulumi.getter(name="defaultNoSnatRuleCreationEnabled")
    def default_no_snat_rule_creation_enabled(self) -> bool:
        return pulumi.get(self, "default_no_snat_rule_creation_enabled")

    @property
    @pulumi.getter(name="defaultSnatRuleCreationEnabled")
    def default_snat_rule_creation_enabled(self) -> bool:
        return pulumi.get(self, "default_snat_rule_creation_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalScope")
    def external_scope(self) -> str:
        return pulumi.get(self, "external_scope")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalScopes")
    def internal_scopes(self) -> Sequence[str]:
        return pulumi.get(self, "internal_scopes")

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> Sequence['outputs.GetIpSpaceIpPrefixResult']:
        return pulumi.get(self, "ip_prefixes")

    @property
    @pulumi.getter(name="ipRangeQuota")
    def ip_range_quota(self) -> str:
        return pulumi.get(self, "ip_range_quota")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence['outputs.GetIpSpaceIpRangeResult']:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="routeAdvertisementEnabled")
    def route_advertisement_enabled(self) -> bool:
        return pulumi.get(self, "route_advertisement_enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetIpSpaceResult(GetIpSpaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpSpaceResult(
            default_firewall_rule_creation_enabled=self.default_firewall_rule_creation_enabled,
            default_no_snat_rule_creation_enabled=self.default_no_snat_rule_creation_enabled,
            default_snat_rule_creation_enabled=self.default_snat_rule_creation_enabled,
            description=self.description,
            external_scope=self.external_scope,
            id=self.id,
            internal_scopes=self.internal_scopes,
            ip_prefixes=self.ip_prefixes,
            ip_range_quota=self.ip_range_quota,
            ip_ranges=self.ip_ranges,
            name=self.name,
            org_id=self.org_id,
            route_advertisement_enabled=self.route_advertisement_enabled,
            type=self.type)


def get_ip_space(name: Optional[str] = None,
                 org_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpSpaceResult:
    """
    Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
    and private IP addresses by preventing the use of overlapping IP addresses across organizations and
    organization VDCs.

    IP Spaces require VCD 10.4.1+ with NSX-T.

    ## Example Usage

    ### Private IP Space Within An Org)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    space1 = vcd.get_ip_space(org_id=org1["id"],
        name="private-ip-space")
    ```

    ### Public Or Shared IP Space)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    space1 = vcd.get_ip_space(name="public-or-shared-ip-space")
    ```


    :param str name: The name of IP Space.
    :param str org_id: Org ID for Private IP Space.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getIpSpace:getIpSpace', __args__, opts=opts, typ=GetIpSpaceResult).value

    return AwaitableGetIpSpaceResult(
        default_firewall_rule_creation_enabled=pulumi.get(__ret__, 'default_firewall_rule_creation_enabled'),
        default_no_snat_rule_creation_enabled=pulumi.get(__ret__, 'default_no_snat_rule_creation_enabled'),
        default_snat_rule_creation_enabled=pulumi.get(__ret__, 'default_snat_rule_creation_enabled'),
        description=pulumi.get(__ret__, 'description'),
        external_scope=pulumi.get(__ret__, 'external_scope'),
        id=pulumi.get(__ret__, 'id'),
        internal_scopes=pulumi.get(__ret__, 'internal_scopes'),
        ip_prefixes=pulumi.get(__ret__, 'ip_prefixes'),
        ip_range_quota=pulumi.get(__ret__, 'ip_range_quota'),
        ip_ranges=pulumi.get(__ret__, 'ip_ranges'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        route_advertisement_enabled=pulumi.get(__ret__, 'route_advertisement_enabled'),
        type=pulumi.get(__ret__, 'type'))
def get_ip_space_output(name: Optional[pulumi.Input[str]] = None,
                        org_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpSpaceResult]:
    """
    Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
    and private IP addresses by preventing the use of overlapping IP addresses across organizations and
    organization VDCs.

    IP Spaces require VCD 10.4.1+ with NSX-T.

    ## Example Usage

    ### Private IP Space Within An Org)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    space1 = vcd.get_ip_space(org_id=org1["id"],
        name="private-ip-space")
    ```

    ### Public Or Shared IP Space)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    space1 = vcd.get_ip_space(name="public-or-shared-ip-space")
    ```


    :param str name: The name of IP Space.
    :param str org_id: Org ID for Private IP Space.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getIpSpace:getIpSpace', __args__, opts=opts, typ=GetIpSpaceResult)
    return __ret__.apply(lambda __response__: GetIpSpaceResult(
        default_firewall_rule_creation_enabled=pulumi.get(__response__, 'default_firewall_rule_creation_enabled'),
        default_no_snat_rule_creation_enabled=pulumi.get(__response__, 'default_no_snat_rule_creation_enabled'),
        default_snat_rule_creation_enabled=pulumi.get(__response__, 'default_snat_rule_creation_enabled'),
        description=pulumi.get(__response__, 'description'),
        external_scope=pulumi.get(__response__, 'external_scope'),
        id=pulumi.get(__response__, 'id'),
        internal_scopes=pulumi.get(__response__, 'internal_scopes'),
        ip_prefixes=pulumi.get(__response__, 'ip_prefixes'),
        ip_range_quota=pulumi.get(__response__, 'ip_range_quota'),
        ip_ranges=pulumi.get(__response__, 'ip_ranges'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        route_advertisement_enabled=pulumi.get(__response__, 'route_advertisement_enabled'),
        type=pulumi.get(__response__, 'type')))
