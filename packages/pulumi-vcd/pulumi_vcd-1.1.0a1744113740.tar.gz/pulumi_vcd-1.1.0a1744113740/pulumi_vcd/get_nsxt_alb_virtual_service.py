# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtAlbVirtualServiceResult',
    'AwaitableGetNsxtAlbVirtualServiceResult',
    'get_nsxt_alb_virtual_service',
    'get_nsxt_alb_virtual_service_output',
]

@pulumi.output_type
class GetNsxtAlbVirtualServiceResult:
    """
    A collection of values returned by getNsxtAlbVirtualService.
    """
    def __init__(__self__, application_profile_type=None, ca_certificate_id=None, description=None, edge_gateway_id=None, enabled=None, id=None, ipv6_virtual_ip_address=None, is_transparent_mode_enabled=None, name=None, org=None, pool_id=None, service_engine_group_id=None, service_ports=None, vdc=None, virtual_ip_address=None):
        if application_profile_type and not isinstance(application_profile_type, str):
            raise TypeError("Expected argument 'application_profile_type' to be a str")
        pulumi.set(__self__, "application_profile_type", application_profile_type)
        if ca_certificate_id and not isinstance(ca_certificate_id, str):
            raise TypeError("Expected argument 'ca_certificate_id' to be a str")
        pulumi.set(__self__, "ca_certificate_id", ca_certificate_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6_virtual_ip_address and not isinstance(ipv6_virtual_ip_address, str):
            raise TypeError("Expected argument 'ipv6_virtual_ip_address' to be a str")
        pulumi.set(__self__, "ipv6_virtual_ip_address", ipv6_virtual_ip_address)
        if is_transparent_mode_enabled and not isinstance(is_transparent_mode_enabled, bool):
            raise TypeError("Expected argument 'is_transparent_mode_enabled' to be a bool")
        pulumi.set(__self__, "is_transparent_mode_enabled", is_transparent_mode_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if service_engine_group_id and not isinstance(service_engine_group_id, str):
            raise TypeError("Expected argument 'service_engine_group_id' to be a str")
        pulumi.set(__self__, "service_engine_group_id", service_engine_group_id)
        if service_ports and not isinstance(service_ports, list):
            raise TypeError("Expected argument 'service_ports' to be a list")
        pulumi.set(__self__, "service_ports", service_ports)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)
        if virtual_ip_address and not isinstance(virtual_ip_address, str):
            raise TypeError("Expected argument 'virtual_ip_address' to be a str")
        pulumi.set(__self__, "virtual_ip_address", virtual_ip_address)

    @property
    @pulumi.getter(name="applicationProfileType")
    def application_profile_type(self) -> str:
        return pulumi.get(self, "application_profile_type")

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> str:
        return pulumi.get(self, "ca_certificate_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6VirtualIpAddress")
    def ipv6_virtual_ip_address(self) -> str:
        return pulumi.get(self, "ipv6_virtual_ip_address")

    @property
    @pulumi.getter(name="isTransparentModeEnabled")
    def is_transparent_mode_enabled(self) -> bool:
        return pulumi.get(self, "is_transparent_mode_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter(name="serviceEngineGroupId")
    def service_engine_group_id(self) -> str:
        return pulumi.get(self, "service_engine_group_id")

    @property
    @pulumi.getter(name="servicePorts")
    def service_ports(self) -> Sequence['outputs.GetNsxtAlbVirtualServiceServicePortResult']:
        return pulumi.get(self, "service_ports")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> str:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> str:
        return pulumi.get(self, "virtual_ip_address")


class AwaitableGetNsxtAlbVirtualServiceResult(GetNsxtAlbVirtualServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbVirtualServiceResult(
            application_profile_type=self.application_profile_type,
            ca_certificate_id=self.ca_certificate_id,
            description=self.description,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            ipv6_virtual_ip_address=self.ipv6_virtual_ip_address,
            is_transparent_mode_enabled=self.is_transparent_mode_enabled,
            name=self.name,
            org=self.org,
            pool_id=self.pool_id,
            service_engine_group_id=self.service_engine_group_id,
            service_ports=self.service_ports,
            vdc=self.vdc,
            virtual_ip_address=self.virtual_ip_address)


def get_nsxt_alb_virtual_service(edge_gateway_id: Optional[str] = None,
                                 name: Optional[str] = None,
                                 org: Optional[str] = None,
                                 vdc: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbVirtualServiceResult:
    """
    Supported in provider *v3.5+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Virtual services for particular NSX-T Edge Gateway. A virtual service
    advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives
    traffic, it directs it to members in ALB Pool.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_nsxt_edgegateway(org="my-org",
        vdc="nsxt-vdc",
        name="nsxt-gw")
    test = vcd.get_nsxt_alb_virtual_service(org="dainius",
        edge_gateway_id=existing_vcd_nsxt_edgegateway["id"],
        name="virutal-service-name")
    ```


    :param str edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
           [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str name: The name of ALB Virtual Service
    :param str org: The name of organization to which the edge gateway belongs. Optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService', __args__, opts=opts, typ=GetNsxtAlbVirtualServiceResult).value

    return AwaitableGetNsxtAlbVirtualServiceResult(
        application_profile_type=pulumi.get(__ret__, 'application_profile_type'),
        ca_certificate_id=pulumi.get(__ret__, 'ca_certificate_id'),
        description=pulumi.get(__ret__, 'description'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        ipv6_virtual_ip_address=pulumi.get(__ret__, 'ipv6_virtual_ip_address'),
        is_transparent_mode_enabled=pulumi.get(__ret__, 'is_transparent_mode_enabled'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        pool_id=pulumi.get(__ret__, 'pool_id'),
        service_engine_group_id=pulumi.get(__ret__, 'service_engine_group_id'),
        service_ports=pulumi.get(__ret__, 'service_ports'),
        vdc=pulumi.get(__ret__, 'vdc'),
        virtual_ip_address=pulumi.get(__ret__, 'virtual_ip_address'))
def get_nsxt_alb_virtual_service_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                        name: Optional[pulumi.Input[str]] = None,
                                        org: Optional[pulumi.Input[Optional[str]]] = None,
                                        vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtAlbVirtualServiceResult]:
    """
    Supported in provider *v3.5+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Virtual services for particular NSX-T Edge Gateway. A virtual service
    advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives
    traffic, it directs it to members in ALB Pool.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_nsxt_edgegateway(org="my-org",
        vdc="nsxt-vdc",
        name="nsxt-gw")
    test = vcd.get_nsxt_alb_virtual_service(org="dainius",
        edge_gateway_id=existing_vcd_nsxt_edgegateway["id"],
        name="virutal-service-name")
    ```


    :param str edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
           [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str name: The name of ALB Virtual Service
    :param str org: The name of organization to which the edge gateway belongs. Optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService', __args__, opts=opts, typ=GetNsxtAlbVirtualServiceResult)
    return __ret__.apply(lambda __response__: GetNsxtAlbVirtualServiceResult(
        application_profile_type=pulumi.get(__response__, 'application_profile_type'),
        ca_certificate_id=pulumi.get(__response__, 'ca_certificate_id'),
        description=pulumi.get(__response__, 'description'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        ipv6_virtual_ip_address=pulumi.get(__response__, 'ipv6_virtual_ip_address'),
        is_transparent_mode_enabled=pulumi.get(__response__, 'is_transparent_mode_enabled'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        pool_id=pulumi.get(__response__, 'pool_id'),
        service_engine_group_id=pulumi.get(__response__, 'service_engine_group_id'),
        service_ports=pulumi.get(__response__, 'service_ports'),
        vdc=pulumi.get(__response__, 'vdc'),
        virtual_ip_address=pulumi.get(__response__, 'virtual_ip_address')))
