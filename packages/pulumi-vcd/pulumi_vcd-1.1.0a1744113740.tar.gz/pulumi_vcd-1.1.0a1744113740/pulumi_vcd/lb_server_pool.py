# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LbServerPoolArgs', 'LbServerPool']

@pulumi.input_type
class LbServerPoolArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 edge_gateway: pulumi.Input[str],
                 algorithm_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_transparency: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbServerPool resource.
        :param pulumi.Input[str] algorithm: Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the server pool is to be created
        :param pulumi.Input[str] algorithm_parameters: Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
               parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        :param pulumi.Input[str] description: Server Pool description
        :param pulumi.Input[bool] enable_transparency: When transparency is `false` (default) backend servers see the IP address of the
               traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
               address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
               the edge gateway.
        :param pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]] members: A block to define server pool members. Multiple can be used. See Member and 
               example for usage details.
               
               
               <a id="member"></a>
        :param pulumi.Input[str] monitor_id: `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        :param pulumi.Input[str] name: Server Pool name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if algorithm_parameters is not None:
            pulumi.set(__self__, "algorithm_parameters", algorithm_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_transparency is not None:
            pulumi.set(__self__, "enable_transparency", enable_transparency)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which the server pool is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="algorithmParameters")
    def algorithm_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        """
        return pulumi.get(self, "algorithm_parameters")

    @algorithm_parameters.setter
    def algorithm_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Server Pool description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableTransparency")
    def enable_transparency(self) -> Optional[pulumi.Input[bool]]:
        """
        When transparency is `false` (default) backend servers see the IP address of the
        traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        the edge gateway.
        """
        return pulumi.get(self, "enable_transparency")

    @enable_transparency.setter
    def enable_transparency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transparency", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]]:
        """
        A block to define server pool members. Multiple can be used. See Member and 
        example for usage details.


        <a id="member"></a>
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[str]]:
        """
        `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server Pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _LbServerPoolState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 algorithm_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_transparency: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbServerPool resources.
        :param pulumi.Input[str] algorithm: Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        :param pulumi.Input[str] algorithm_parameters: Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
               parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        :param pulumi.Input[str] description: Server Pool description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the server pool is to be created
        :param pulumi.Input[bool] enable_transparency: When transparency is `false` (default) backend servers see the IP address of the
               traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
               address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
               the edge gateway.
        :param pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]] members: A block to define server pool members. Multiple can be used. See Member and 
               example for usage details.
               
               
               <a id="member"></a>
        :param pulumi.Input[str] monitor_id: `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        :param pulumi.Input[str] name: Server Pool name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_parameters is not None:
            pulumi.set(__self__, "algorithm_parameters", algorithm_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enable_transparency is not None:
            pulumi.set(__self__, "enable_transparency", enable_transparency)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="algorithmParameters")
    def algorithm_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        """
        return pulumi.get(self, "algorithm_parameters")

    @algorithm_parameters.setter
    def algorithm_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Server Pool description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which the server pool is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="enableTransparency")
    def enable_transparency(self) -> Optional[pulumi.Input[bool]]:
        """
        When transparency is `false` (default) backend servers see the IP address of the
        traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        the edge gateway.
        """
        return pulumi.get(self, "enable_transparency")

    @enable_transparency.setter
    def enable_transparency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transparency", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]]:
        """
        A block to define server pool members. Multiple can be used. See Member and 
        example for usage details.


        <a id="member"></a>
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbServerPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[str]]:
        """
        `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server Pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class LbServerPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 algorithm_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_transparency: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbServerPoolMemberArgs', 'LbServerPoolMemberArgsDict']]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LbServerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        :param pulumi.Input[str] algorithm_parameters: Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
               parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        :param pulumi.Input[str] description: Server Pool description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the server pool is to be created
        :param pulumi.Input[bool] enable_transparency: When transparency is `false` (default) backend servers see the IP address of the
               traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
               address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
               the edge gateway.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LbServerPoolMemberArgs', 'LbServerPoolMemberArgsDict']]]] members: A block to define server pool members. Multiple can be used. See Member and 
               example for usage details.
               
               
               <a id="member"></a>
        :param pulumi.Input[str] monitor_id: `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        :param pulumi.Input[str] name: Server Pool name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbServerPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbServerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbServerPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbServerPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 algorithm_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_transparency: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbServerPoolMemberArgs', 'LbServerPoolMemberArgsDict']]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbServerPoolArgs.__new__(LbServerPoolArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["algorithm_parameters"] = algorithm_parameters
            __props__.__dict__["description"] = description
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["enable_transparency"] = enable_transparency
            __props__.__dict__["members"] = members
            __props__.__dict__["monitor_id"] = monitor_id
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["vdc"] = vdc
        super(LbServerPool, __self__).__init__(
            'vcd:index/lbServerPool:LbServerPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            algorithm_parameters: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            enable_transparency: Optional[pulumi.Input[bool]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbServerPoolMemberArgs', 'LbServerPoolMemberArgsDict']]]]] = None,
            monitor_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'LbServerPool':
        """
        Get an existing LbServerPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        :param pulumi.Input[str] algorithm_parameters: Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
               parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        :param pulumi.Input[str] description: Server Pool description
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the server pool is to be created
        :param pulumi.Input[bool] enable_transparency: When transparency is `false` (default) backend servers see the IP address of the
               traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
               address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
               the edge gateway.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LbServerPoolMemberArgs', 'LbServerPoolMemberArgsDict']]]] members: A block to define server pool members. Multiple can be used. See Member and 
               example for usage details.
               
               
               <a id="member"></a>
        :param pulumi.Input[str] monitor_id: `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        :param pulumi.Input[str] name: Server Pool name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbServerPoolState.__new__(_LbServerPoolState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["algorithm_parameters"] = algorithm_parameters
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["enable_transparency"] = enable_transparency
        __props__.__dict__["members"] = members
        __props__.__dict__["monitor_id"] = monitor_id
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["vdc"] = vdc
        return LbServerPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="algorithmParameters")
    def algorithm_parameters(self) -> pulumi.Output[Optional[str]]:
        """
        Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
        """
        return pulumi.get(self, "algorithm_parameters")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Server Pool description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which the server pool is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter(name="enableTransparency")
    def enable_transparency(self) -> pulumi.Output[Optional[bool]]:
        """
        When transparency is `false` (default) backend servers see the IP address of the
        traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        the edge gateway.
        """
        return pulumi.get(self, "enable_transparency")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.LbServerPoolMember']]]:
        """
        A block to define server pool members. Multiple can be used. See Member and 
        example for usage details.


        <a id="member"></a>
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[Optional[str]]:
        """
        `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        """
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Server Pool name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

