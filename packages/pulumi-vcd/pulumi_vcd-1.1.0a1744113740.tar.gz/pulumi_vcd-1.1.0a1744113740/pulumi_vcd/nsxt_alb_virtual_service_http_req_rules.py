# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtAlbVirtualServiceHttpReqRulesArgs', 'NsxtAlbVirtualServiceHttpReqRules']

@pulumi.input_type
class NsxtAlbVirtualServiceHttpReqRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]],
                 virtual_service_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a NsxtAlbVirtualServiceHttpReqRules resource.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]] rules: One or more rule blocks with matching criteria and actions.
               
               <a id="rule-block"></a>
        :param pulumi.Input[str] virtual_service_id: An ID of existing ALB Virtual Service.
        """
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]]:
        """
        One or more rule blocks with matching criteria and actions.

        <a id="rule-block"></a>
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> pulumi.Input[str]:
        """
        An ID of existing ALB Virtual Service.
        """
        return pulumi.get(self, "virtual_service_id")

    @virtual_service_id.setter
    def virtual_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_service_id", value)


@pulumi.input_type
class _NsxtAlbVirtualServiceHttpReqRulesState:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]]] = None,
                 virtual_service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAlbVirtualServiceHttpReqRules resources.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]] rules: One or more rule blocks with matching criteria and actions.
               
               <a id="rule-block"></a>
        :param pulumi.Input[str] virtual_service_id: An ID of existing ALB Virtual Service.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]]]:
        """
        One or more rule blocks with matching criteria and actions.

        <a id="rule-block"></a>
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceHttpReqRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        An ID of existing ALB Virtual Service.
        """
        return pulumi.get(self, "virtual_service_id")

    @virtual_service_id.setter
    def virtual_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_service_id", value)


class NsxtAlbVirtualServiceHttpReqRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceHttpReqRulesRuleArgs', 'NsxtAlbVirtualServiceHttpReqRulesRuleArgsDict']]]]] = None,
                 virtual_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAlbVirtualServiceHttpReqRules resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceHttpReqRulesRuleArgs', 'NsxtAlbVirtualServiceHttpReqRulesRuleArgsDict']]]] rules: One or more rule blocks with matching criteria and actions.
               
               <a id="rule-block"></a>
        :param pulumi.Input[str] virtual_service_id: An ID of existing ALB Virtual Service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAlbVirtualServiceHttpReqRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAlbVirtualServiceHttpReqRules resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAlbVirtualServiceHttpReqRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAlbVirtualServiceHttpReqRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceHttpReqRulesRuleArgs', 'NsxtAlbVirtualServiceHttpReqRulesRuleArgsDict']]]]] = None,
                 virtual_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAlbVirtualServiceHttpReqRulesArgs.__new__(NsxtAlbVirtualServiceHttpReqRulesArgs)

            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if virtual_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_service_id'")
            __props__.__dict__["virtual_service_id"] = virtual_service_id
        super(NsxtAlbVirtualServiceHttpReqRules, __self__).__init__(
            'vcd:index/nsxtAlbVirtualServiceHttpReqRules:NsxtAlbVirtualServiceHttpReqRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceHttpReqRulesRuleArgs', 'NsxtAlbVirtualServiceHttpReqRulesRuleArgsDict']]]]] = None,
            virtual_service_id: Optional[pulumi.Input[str]] = None) -> 'NsxtAlbVirtualServiceHttpReqRules':
        """
        Get an existing NsxtAlbVirtualServiceHttpReqRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceHttpReqRulesRuleArgs', 'NsxtAlbVirtualServiceHttpReqRulesRuleArgsDict']]]] rules: One or more rule blocks with matching criteria and actions.
               
               <a id="rule-block"></a>
        :param pulumi.Input[str] virtual_service_id: An ID of existing ALB Virtual Service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAlbVirtualServiceHttpReqRulesState.__new__(_NsxtAlbVirtualServiceHttpReqRulesState)

        __props__.__dict__["rules"] = rules
        __props__.__dict__["virtual_service_id"] = virtual_service_id
        return NsxtAlbVirtualServiceHttpReqRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.NsxtAlbVirtualServiceHttpReqRulesRule']]:
        """
        One or more rule blocks with matching criteria and actions.

        <a id="rule-block"></a>
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> pulumi.Output[str]:
        """
        An ID of existing ALB Virtual Service.
        """
        return pulumi.get(self, "virtual_service_id")

