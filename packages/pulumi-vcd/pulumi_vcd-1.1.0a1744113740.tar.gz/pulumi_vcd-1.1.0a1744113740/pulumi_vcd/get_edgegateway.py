# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEdgegatewayResult',
    'AwaitableGetEdgegatewayResult',
    'get_edgegateway',
    'get_edgegateway_output',
]

@pulumi.output_type
class GetEdgegatewayResult:
    """
    A collection of values returned by getEdgegateway.
    """
    def __init__(__self__, configuration=None, default_external_network_ip=None, description=None, distributed_routing=None, external_network_ips=None, external_networks=None, filter=None, fips_mode_enabled=None, fw_default_rule_action=None, fw_default_rule_logging_enabled=None, fw_enabled=None, ha_enabled=None, id=None, lb_acceleration_enabled=None, lb_enabled=None, lb_logging_enabled=None, lb_loglevel=None, name=None, org=None, use_default_route_for_dns_relay=None, vdc=None):
        if configuration and not isinstance(configuration, str):
            raise TypeError("Expected argument 'configuration' to be a str")
        pulumi.set(__self__, "configuration", configuration)
        if default_external_network_ip and not isinstance(default_external_network_ip, str):
            raise TypeError("Expected argument 'default_external_network_ip' to be a str")
        pulumi.set(__self__, "default_external_network_ip", default_external_network_ip)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if distributed_routing and not isinstance(distributed_routing, bool):
            raise TypeError("Expected argument 'distributed_routing' to be a bool")
        pulumi.set(__self__, "distributed_routing", distributed_routing)
        if external_network_ips and not isinstance(external_network_ips, list):
            raise TypeError("Expected argument 'external_network_ips' to be a list")
        pulumi.set(__self__, "external_network_ips", external_network_ips)
        if external_networks and not isinstance(external_networks, list):
            raise TypeError("Expected argument 'external_networks' to be a list")
        pulumi.set(__self__, "external_networks", external_networks)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if fips_mode_enabled and not isinstance(fips_mode_enabled, bool):
            raise TypeError("Expected argument 'fips_mode_enabled' to be a bool")
        pulumi.set(__self__, "fips_mode_enabled", fips_mode_enabled)
        if fw_default_rule_action and not isinstance(fw_default_rule_action, str):
            raise TypeError("Expected argument 'fw_default_rule_action' to be a str")
        pulumi.set(__self__, "fw_default_rule_action", fw_default_rule_action)
        if fw_default_rule_logging_enabled and not isinstance(fw_default_rule_logging_enabled, bool):
            raise TypeError("Expected argument 'fw_default_rule_logging_enabled' to be a bool")
        pulumi.set(__self__, "fw_default_rule_logging_enabled", fw_default_rule_logging_enabled)
        if fw_enabled and not isinstance(fw_enabled, bool):
            raise TypeError("Expected argument 'fw_enabled' to be a bool")
        pulumi.set(__self__, "fw_enabled", fw_enabled)
        if ha_enabled and not isinstance(ha_enabled, bool):
            raise TypeError("Expected argument 'ha_enabled' to be a bool")
        pulumi.set(__self__, "ha_enabled", ha_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb_acceleration_enabled and not isinstance(lb_acceleration_enabled, bool):
            raise TypeError("Expected argument 'lb_acceleration_enabled' to be a bool")
        pulumi.set(__self__, "lb_acceleration_enabled", lb_acceleration_enabled)
        if lb_enabled and not isinstance(lb_enabled, bool):
            raise TypeError("Expected argument 'lb_enabled' to be a bool")
        pulumi.set(__self__, "lb_enabled", lb_enabled)
        if lb_logging_enabled and not isinstance(lb_logging_enabled, bool):
            raise TypeError("Expected argument 'lb_logging_enabled' to be a bool")
        pulumi.set(__self__, "lb_logging_enabled", lb_logging_enabled)
        if lb_loglevel and not isinstance(lb_loglevel, str):
            raise TypeError("Expected argument 'lb_loglevel' to be a str")
        pulumi.set(__self__, "lb_loglevel", lb_loglevel)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if use_default_route_for_dns_relay and not isinstance(use_default_route_for_dns_relay, bool):
            raise TypeError("Expected argument 'use_default_route_for_dns_relay' to be a bool")
        pulumi.set(__self__, "use_default_route_for_dns_relay", use_default_route_for_dns_relay)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def configuration(self) -> str:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="defaultExternalNetworkIp")
    def default_external_network_ip(self) -> str:
        return pulumi.get(self, "default_external_network_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributedRouting")
    def distributed_routing(self) -> bool:
        return pulumi.get(self, "distributed_routing")

    @property
    @pulumi.getter(name="externalNetworkIps")
    def external_network_ips(self) -> Sequence[str]:
        return pulumi.get(self, "external_network_ips")

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> Sequence['outputs.GetEdgegatewayExternalNetworkResult']:
        return pulumi.get(self, "external_networks")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetEdgegatewayFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="fipsModeEnabled")
    def fips_mode_enabled(self) -> bool:
        return pulumi.get(self, "fips_mode_enabled")

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> str:
        return pulumi.get(self, "fw_default_rule_action")

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> bool:
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> bool:
        return pulumi.get(self, "fw_enabled")

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> bool:
        return pulumi.get(self, "ha_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> bool:
        return pulumi.get(self, "lb_acceleration_enabled")

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> bool:
        return pulumi.get(self, "lb_enabled")

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> bool:
        return pulumi.get(self, "lb_logging_enabled")

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> str:
        return pulumi.get(self, "lb_loglevel")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="useDefaultRouteForDnsRelay")
    def use_default_route_for_dns_relay(self) -> bool:
        return pulumi.get(self, "use_default_route_for_dns_relay")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetEdgegatewayResult(GetEdgegatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgegatewayResult(
            configuration=self.configuration,
            default_external_network_ip=self.default_external_network_ip,
            description=self.description,
            distributed_routing=self.distributed_routing,
            external_network_ips=self.external_network_ips,
            external_networks=self.external_networks,
            filter=self.filter,
            fips_mode_enabled=self.fips_mode_enabled,
            fw_default_rule_action=self.fw_default_rule_action,
            fw_default_rule_logging_enabled=self.fw_default_rule_logging_enabled,
            fw_enabled=self.fw_enabled,
            ha_enabled=self.ha_enabled,
            id=self.id,
            lb_acceleration_enabled=self.lb_acceleration_enabled,
            lb_enabled=self.lb_enabled,
            lb_logging_enabled=self.lb_logging_enabled,
            lb_loglevel=self.lb_loglevel,
            name=self.name,
            org=self.org,
            use_default_route_for_dns_relay=self.use_default_route_for_dns_relay,
            vdc=self.vdc)


def get_edgegateway(filter: Optional[Union['GetEdgegatewayFilterArgs', 'GetEdgegatewayFilterArgsDict']] = None,
                    name: Optional[str] = None,
                    org: Optional[str] = None,
                    vdc: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgegatewayResult:
    """
    Provides a VMware Cloud Director NSX-V edge gateway data source, directly connected to one or more external networks. This can be used to reference
    edge gateways for Org VDC networks to connect.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    mygw = vcd.get_edgegateway(name="mygw",
        org="myorg",
        vdc="myvdc")
    pulumi.export("edgeGatewayId", mygw.id)
    # Get the name of the default gateway from the data source
    # and use it to establish a second data source
    external_network1 = vcd.get_external_network(name=mygw.external_networks.name)
    pulumi.export("gateway", external_network1.ip_scopes[0].gateway)
    pulumi.export("netmask", external_network1.ip_scopes[0].netmask)
    pulumi.export("DNS", external_network1.ip_scopes[0].dns1)
    pulumi.export("externalIp", external_network1.ip_scopes[0].static_ip_pools[0].start_address)
    ```

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param Union['GetEdgegatewayFilterArgs', 'GetEdgegatewayFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: A unique name for the edge gateway (optional when `filter` is used)
    :param str org: The name of organization to which the VDC belongs. Optional if defined at provider level.
    :param str vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getEdgegateway:getEdgegateway', __args__, opts=opts, typ=GetEdgegatewayResult).value

    return AwaitableGetEdgegatewayResult(
        configuration=pulumi.get(__ret__, 'configuration'),
        default_external_network_ip=pulumi.get(__ret__, 'default_external_network_ip'),
        description=pulumi.get(__ret__, 'description'),
        distributed_routing=pulumi.get(__ret__, 'distributed_routing'),
        external_network_ips=pulumi.get(__ret__, 'external_network_ips'),
        external_networks=pulumi.get(__ret__, 'external_networks'),
        filter=pulumi.get(__ret__, 'filter'),
        fips_mode_enabled=pulumi.get(__ret__, 'fips_mode_enabled'),
        fw_default_rule_action=pulumi.get(__ret__, 'fw_default_rule_action'),
        fw_default_rule_logging_enabled=pulumi.get(__ret__, 'fw_default_rule_logging_enabled'),
        fw_enabled=pulumi.get(__ret__, 'fw_enabled'),
        ha_enabled=pulumi.get(__ret__, 'ha_enabled'),
        id=pulumi.get(__ret__, 'id'),
        lb_acceleration_enabled=pulumi.get(__ret__, 'lb_acceleration_enabled'),
        lb_enabled=pulumi.get(__ret__, 'lb_enabled'),
        lb_logging_enabled=pulumi.get(__ret__, 'lb_logging_enabled'),
        lb_loglevel=pulumi.get(__ret__, 'lb_loglevel'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        use_default_route_for_dns_relay=pulumi.get(__ret__, 'use_default_route_for_dns_relay'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_edgegateway_output(filter: Optional[pulumi.Input[Optional[Union['GetEdgegatewayFilterArgs', 'GetEdgegatewayFilterArgsDict']]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           org: Optional[pulumi.Input[Optional[str]]] = None,
                           vdc: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEdgegatewayResult]:
    """
    Provides a VMware Cloud Director NSX-V edge gateway data source, directly connected to one or more external networks. This can be used to reference
    edge gateways for Org VDC networks to connect.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    mygw = vcd.get_edgegateway(name="mygw",
        org="myorg",
        vdc="myvdc")
    pulumi.export("edgeGatewayId", mygw.id)
    # Get the name of the default gateway from the data source
    # and use it to establish a second data source
    external_network1 = vcd.get_external_network(name=mygw.external_networks.name)
    pulumi.export("gateway", external_network1.ip_scopes[0].gateway)
    pulumi.export("netmask", external_network1.ip_scopes[0].netmask)
    pulumi.export("DNS", external_network1.ip_scopes[0].dns1)
    pulumi.export("externalIp", external_network1.ip_scopes[0].static_ip_pools[0].start_address)
    ```

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param Union['GetEdgegatewayFilterArgs', 'GetEdgegatewayFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: A unique name for the edge gateway (optional when `filter` is used)
    :param str org: The name of organization to which the VDC belongs. Optional if defined at provider level.
    :param str vdc: The name of VDC that owns the edge gateway. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getEdgegateway:getEdgegateway', __args__, opts=opts, typ=GetEdgegatewayResult)
    return __ret__.apply(lambda __response__: GetEdgegatewayResult(
        configuration=pulumi.get(__response__, 'configuration'),
        default_external_network_ip=pulumi.get(__response__, 'default_external_network_ip'),
        description=pulumi.get(__response__, 'description'),
        distributed_routing=pulumi.get(__response__, 'distributed_routing'),
        external_network_ips=pulumi.get(__response__, 'external_network_ips'),
        external_networks=pulumi.get(__response__, 'external_networks'),
        filter=pulumi.get(__response__, 'filter'),
        fips_mode_enabled=pulumi.get(__response__, 'fips_mode_enabled'),
        fw_default_rule_action=pulumi.get(__response__, 'fw_default_rule_action'),
        fw_default_rule_logging_enabled=pulumi.get(__response__, 'fw_default_rule_logging_enabled'),
        fw_enabled=pulumi.get(__response__, 'fw_enabled'),
        ha_enabled=pulumi.get(__response__, 'ha_enabled'),
        id=pulumi.get(__response__, 'id'),
        lb_acceleration_enabled=pulumi.get(__response__, 'lb_acceleration_enabled'),
        lb_enabled=pulumi.get(__response__, 'lb_enabled'),
        lb_logging_enabled=pulumi.get(__response__, 'lb_logging_enabled'),
        lb_loglevel=pulumi.get(__response__, 'lb_loglevel'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        use_default_route_for_dns_relay=pulumi.get(__response__, 'use_default_route_for_dns_relay'),
        vdc=pulumi.get(__response__, 'vdc')))
