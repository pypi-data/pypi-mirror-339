# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRdeInterfaceResult',
    'AwaitableGetRdeInterfaceResult',
    'get_rde_interface',
    'get_rde_interface_output',
]

@pulumi.output_type
class GetRdeInterfaceResult:
    """
    A collection of values returned by getRdeInterface.
    """
    def __init__(__self__, id=None, name=None, nss=None, readonly=None, vendor=None, version=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nss and not isinstance(nss, str):
            raise TypeError("Expected argument 'nss' to be a str")
        pulumi.set(__self__, "nss", nss)
        if readonly and not isinstance(readonly, bool):
            raise TypeError("Expected argument 'readonly' to be a bool")
        pulumi.set(__self__, "readonly", readonly)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nss(self) -> str:
        return pulumi.get(self, "nss")

    @property
    @pulumi.getter
    def readonly(self) -> bool:
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetRdeInterfaceResult(GetRdeInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRdeInterfaceResult(
            id=self.id,
            name=self.name,
            nss=self.nss,
            readonly=self.readonly,
            vendor=self.vendor,
            version=self.version)


def get_rde_interface(nss: Optional[str] = None,
                      vendor: Optional[str] = None,
                      version: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRdeInterfaceResult:
    """
    Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_interface = vcd.get_rde_interface(vendor="bigcorp",
        nss="tech",
        version="1.2.3")
    pulumi.export("interfaceName", my_interface.name)
    pulumi.export("interfaceId", my_interface.id)
    ```


    :param str nss: A unique namespace associated with the RDE Interface.
    :param str vendor: The vendor of the RDE Interface.
    :param str version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
    """
    __args__ = dict()
    __args__['nss'] = nss
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getRdeInterface:getRdeInterface', __args__, opts=opts, typ=GetRdeInterfaceResult).value

    return AwaitableGetRdeInterfaceResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        nss=pulumi.get(__ret__, 'nss'),
        readonly=pulumi.get(__ret__, 'readonly'),
        vendor=pulumi.get(__ret__, 'vendor'),
        version=pulumi.get(__ret__, 'version'))
def get_rde_interface_output(nss: Optional[pulumi.Input[str]] = None,
                             vendor: Optional[pulumi.Input[str]] = None,
                             version: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRdeInterfaceResult]:
    """
    Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_interface = vcd.get_rde_interface(vendor="bigcorp",
        nss="tech",
        version="1.2.3")
    pulumi.export("interfaceName", my_interface.name)
    pulumi.export("interfaceId", my_interface.id)
    ```


    :param str nss: A unique namespace associated with the RDE Interface.
    :param str vendor: The vendor of the RDE Interface.
    :param str version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
    """
    __args__ = dict()
    __args__['nss'] = nss
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getRdeInterface:getRdeInterface', __args__, opts=opts, typ=GetRdeInterfaceResult)
    return __ret__.apply(lambda __response__: GetRdeInterfaceResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        nss=pulumi.get(__response__, 'nss'),
        readonly=pulumi.get(__response__, 'readonly'),
        vendor=pulumi.get(__response__, 'vendor'),
        version=pulumi.get(__response__, 'version')))
