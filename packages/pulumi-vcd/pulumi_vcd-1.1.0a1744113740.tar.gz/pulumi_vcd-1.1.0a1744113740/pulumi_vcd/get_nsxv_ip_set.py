# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxvIpSetResult',
    'AwaitableGetNsxvIpSetResult',
    'get_nsxv_ip_set',
    'get_nsxv_ip_set_output',
]

@pulumi.output_type
class GetNsxvIpSetResult:
    """
    A collection of values returned by getNsxvIpSet.
    """
    def __init__(__self__, description=None, id=None, ip_addresses=None, is_inheritance_allowed=None, name=None, org=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if is_inheritance_allowed and not isinstance(is_inheritance_allowed, bool):
            raise TypeError("Expected argument 'is_inheritance_allowed' to be a bool")
        pulumi.set(__self__, "is_inheritance_allowed", is_inheritance_allowed)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="isInheritanceAllowed")
    def is_inheritance_allowed(self) -> bool:
        return pulumi.get(self, "is_inheritance_allowed")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxvIpSetResult(GetNsxvIpSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvIpSetResult(
            description=self.description,
            id=self.id,
            ip_addresses=self.ip_addresses,
            is_inheritance_allowed=self.is_inheritance_allowed,
            name=self.name,
            org=self.org,
            vdc=self.vdc)


def get_nsxv_ip_set(name: Optional[str] = None,
                    org: Optional[str] = None,
                    vdc: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvIpSetResult:
    """
    Provides a VMware Cloud Director IP set data source. An IP set is a group of IP addresses that you can add
      as the source or destination in a firewall rule or in DHCP relay configuration.

    Supported in provider *v2.6+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ip_set__ds = vcd.get_nsxv_ip_set(org="my-org",
        vdc="my-org-vdc",
        name="not-managed")
    ```


    :param str name: IP set name for identifying the exact IP set
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxvIpSet:getNsxvIpSet', __args__, opts=opts, typ=GetNsxvIpSetResult).value

    return AwaitableGetNsxvIpSetResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ip_addresses=pulumi.get(__ret__, 'ip_addresses'),
        is_inheritance_allowed=pulumi.get(__ret__, 'is_inheritance_allowed'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_nsxv_ip_set_output(name: Optional[pulumi.Input[str]] = None,
                           org: Optional[pulumi.Input[Optional[str]]] = None,
                           vdc: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxvIpSetResult]:
    """
    Provides a VMware Cloud Director IP set data source. An IP set is a group of IP addresses that you can add
      as the source or destination in a firewall rule or in DHCP relay configuration.

    Supported in provider *v2.6+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ip_set__ds = vcd.get_nsxv_ip_set(org="my-org",
        vdc="my-org-vdc",
        name="not-managed")
    ```


    :param str name: IP set name for identifying the exact IP set
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxvIpSet:getNsxvIpSet', __args__, opts=opts, typ=GetNsxvIpSetResult)
    return __ret__.apply(lambda __response__: GetNsxvIpSetResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ip_addresses=pulumi.get(__response__, 'ip_addresses'),
        is_inheritance_allowed=pulumi.get(__response__, 'is_inheritance_allowed'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        vdc=pulumi.get(__response__, 'vdc')))
