# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IgnoreMetadataChanges',
]

@pulumi.output_type
class IgnoreMetadataChanges(dict):
    def __init__(__self__, *,
                 conflict_action: Optional[str] = None,
                 key_regex: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 value_regex: Optional[str] = None):
        """
        :param str key_regex: Regular expression of the metadata entry keys to ignore. Either `key_regex` or `value_regex` is required
        :param str resource_name: Ignores metadata from the specific entity in VCD named like this argument
        :param str resource_type: Ignores metadata from the specific resource type
        :param str value_regex: Regular expression of the metadata entry values to ignore. Either `key_regex` or `value_regex` is required
        """
        if conflict_action is not None:
            pulumi.set(__self__, "conflict_action", conflict_action)
        if key_regex is not None:
            pulumi.set(__self__, "key_regex", key_regex)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if value_regex is not None:
            pulumi.set(__self__, "value_regex", value_regex)

    @property
    @pulumi.getter(name="conflictAction")
    def conflict_action(self) -> Optional[str]:
        return pulumi.get(self, "conflict_action")

    @property
    @pulumi.getter(name="keyRegex")
    def key_regex(self) -> Optional[str]:
        """
        Regular expression of the metadata entry keys to ignore. Either `key_regex` or `value_regex` is required
        """
        return pulumi.get(self, "key_regex")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        Ignores metadata from the specific entity in VCD named like this argument
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Ignores metadata from the specific resource type
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="valueRegex")
    def value_regex(self) -> Optional[str]:
        """
        Regular expression of the metadata entry values to ignore. Either `key_regex` or `value_regex` is required
        """
        return pulumi.get(self, "value_regex")


