# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogMediaResult',
    'AwaitableGetCatalogMediaResult',
    'get_catalog_media',
    'get_catalog_media_output',
]

@pulumi.output_type
class GetCatalogMediaResult:
    """
    A collection of values returned by getCatalogMedia.
    """
    def __init__(__self__, catalog=None, catalog_id=None, catalog_item_id=None, creation_date=None, description=None, download_to_file=None, filter=None, id=None, is_iso=None, is_published=None, metadata=None, metadata_entries=None, name=None, org=None, owner_name=None, size=None, status=None, storage_profile_name=None):
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        pulumi.set(__self__, "catalog", catalog)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_item_id and not isinstance(catalog_item_id, str):
            raise TypeError("Expected argument 'catalog_item_id' to be a str")
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if download_to_file and not isinstance(download_to_file, str):
            raise TypeError("Expected argument 'download_to_file' to be a str")
        pulumi.set(__self__, "download_to_file", download_to_file)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_iso and not isinstance(is_iso, bool):
            raise TypeError("Expected argument 'is_iso' to be a bool")
        pulumi.set(__self__, "is_iso", is_iso)
        if is_published and not isinstance(is_published, bool):
            raise TypeError("Expected argument 'is_published' to be a bool")
        pulumi.set(__self__, "is_published", is_published)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_profile_name and not isinstance(storage_profile_name, str):
            raise TypeError("Expected argument 'storage_profile_name' to be a str")
        pulumi.set(__self__, "storage_profile_name", storage_profile_name)

    @property
    @pulumi.getter
    @_utilities.deprecated("""use catalog_id instead, especially if using a shared catalog""")
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> str:
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadToFile")
    def download_to_file(self) -> Optional[str]:
        return pulumi.get(self, "download_to_file")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetCatalogMediaFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIso")
    def is_iso(self) -> bool:
        return pulumi.get(self, "is_iso")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> bool:
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetCatalogMediaMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageProfileName")
    def storage_profile_name(self) -> str:
        return pulumi.get(self, "storage_profile_name")


class AwaitableGetCatalogMediaResult(GetCatalogMediaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogMediaResult(
            catalog=self.catalog,
            catalog_id=self.catalog_id,
            catalog_item_id=self.catalog_item_id,
            creation_date=self.creation_date,
            description=self.description,
            download_to_file=self.download_to_file,
            filter=self.filter,
            id=self.id,
            is_iso=self.is_iso,
            is_published=self.is_published,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            owner_name=self.owner_name,
            size=self.size,
            status=self.status,
            storage_profile_name=self.storage_profile_name)


def get_catalog_media(catalog: Optional[str] = None,
                      catalog_id: Optional[str] = None,
                      download_to_file: Optional[str] = None,
                      filter: Optional[Union['GetCatalogMediaFilterArgs', 'GetCatalogMediaFilterArgsDict']] = None,
                      name: Optional[str] = None,
                      org: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogMediaResult:
    """
    Provides a VMware Cloud Director Catalog media data source. A Catalog media can be used to reference a catalog media and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_catalog = vcd.get_catalog(org="my-org",
        name="my-catalog")
    existing_media = vcd.get_catalog_media(org="my-org",
        catalog_id=my_catalog.id,
        name="my-media")
    pulumi.export("mediaSize", existing_media.size)
    pulumi.export("typeIsIso", existing_media.is_iso)
    ```

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog: The name of the catalog to which media file belongs. It's mandatory if `catalog_id` is not used.
    :param str catalog_id: The ID of the catalog to which the media file belongs. It's mandatory if `catalog` field is not used.
    :param Union['GetCatalogMediaFilterArgs', 'GetCatalogMediaFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Media name in catalog (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['catalogId'] = catalog_id
    __args__['downloadToFile'] = download_to_file
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalogMedia:getCatalogMedia', __args__, opts=opts, typ=GetCatalogMediaResult).value

    return AwaitableGetCatalogMediaResult(
        catalog=pulumi.get(__ret__, 'catalog'),
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_item_id=pulumi.get(__ret__, 'catalog_item_id'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        description=pulumi.get(__ret__, 'description'),
        download_to_file=pulumi.get(__ret__, 'download_to_file'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        is_iso=pulumi.get(__ret__, 'is_iso'),
        is_published=pulumi.get(__ret__, 'is_published'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        owner_name=pulumi.get(__ret__, 'owner_name'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        storage_profile_name=pulumi.get(__ret__, 'storage_profile_name'))
def get_catalog_media_output(catalog: Optional[pulumi.Input[Optional[str]]] = None,
                             catalog_id: Optional[pulumi.Input[Optional[str]]] = None,
                             download_to_file: Optional[pulumi.Input[Optional[str]]] = None,
                             filter: Optional[pulumi.Input[Optional[Union['GetCatalogMediaFilterArgs', 'GetCatalogMediaFilterArgsDict']]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             org: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCatalogMediaResult]:
    """
    Provides a VMware Cloud Director Catalog media data source. A Catalog media can be used to reference a catalog media and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_catalog = vcd.get_catalog(org="my-org",
        name="my-catalog")
    existing_media = vcd.get_catalog_media(org="my-org",
        catalog_id=my_catalog.id,
        name="my-media")
    pulumi.export("mediaSize", existing_media.size)
    pulumi.export("typeIsIso", existing_media.is_iso)
    ```

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog: The name of the catalog to which media file belongs. It's mandatory if `catalog_id` is not used.
    :param str catalog_id: The ID of the catalog to which the media file belongs. It's mandatory if `catalog` field is not used.
    :param Union['GetCatalogMediaFilterArgs', 'GetCatalogMediaFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Media name in catalog (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['catalogId'] = catalog_id
    __args__['downloadToFile'] = download_to_file
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getCatalogMedia:getCatalogMedia', __args__, opts=opts, typ=GetCatalogMediaResult)
    return __ret__.apply(lambda __response__: GetCatalogMediaResult(
        catalog=pulumi.get(__response__, 'catalog'),
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        catalog_item_id=pulumi.get(__response__, 'catalog_item_id'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        description=pulumi.get(__response__, 'description'),
        download_to_file=pulumi.get(__response__, 'download_to_file'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        is_iso=pulumi.get(__response__, 'is_iso'),
        is_published=pulumi.get(__response__, 'is_published'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        owner_name=pulumi.get(__response__, 'owner_name'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        storage_profile_name=pulumi.get(__response__, 'storage_profile_name')))
