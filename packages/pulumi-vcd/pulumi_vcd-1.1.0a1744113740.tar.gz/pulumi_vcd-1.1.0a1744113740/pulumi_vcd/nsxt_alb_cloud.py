# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NsxtAlbCloudArgs', 'NsxtAlbCloud']

@pulumi.input_type
class NsxtAlbCloudArgs:
    def __init__(__self__, *,
                 controller_id: pulumi.Input[str],
                 importable_cloud_id: pulumi.Input[str],
                 network_pool_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtAlbCloud resource.
        :param pulumi.Input[str] controller_id: ALB Controller ID
        :param pulumi.Input[str] importable_cloud_id: Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] network_pool_id: Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] description: An optional description ALB Cloud
        :param pulumi.Input[str] name: A name for ALB Cloud
        """
        pulumi.set(__self__, "controller_id", controller_id)
        pulumi.set(__self__, "importable_cloud_id", importable_cloud_id)
        pulumi.set(__self__, "network_pool_id", network_pool_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> pulumi.Input[str]:
        """
        ALB Controller ID
        """
        return pulumi.get(self, "controller_id")

    @controller_id.setter
    def controller_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "controller_id", value)

    @property
    @pulumi.getter(name="importableCloudId")
    def importable_cloud_id(self) -> pulumi.Input[str]:
        """
        Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "importable_cloud_id")

    @importable_cloud_id.setter
    def importable_cloud_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "importable_cloud_id", value)

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> pulumi.Input[str]:
        """
        Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "network_pool_id")

    @network_pool_id.setter
    def network_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_pool_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Cloud
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Cloud
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NsxtAlbCloudState:
    def __init__(__self__, *,
                 controller_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 health_message: Optional[pulumi.Input[str]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 importable_cloud_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_id: Optional[pulumi.Input[str]] = None,
                 network_pool_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAlbCloud resources.
        :param pulumi.Input[str] controller_id: ALB Controller ID
        :param pulumi.Input[str] description: An optional description ALB Cloud
        :param pulumi.Input[str] health_message: DetailedHealthMessage contains detailed message on the health of the Cloud
        :param pulumi.Input[str] health_status: HealthStatus contains status of the Load Balancer Cloud. Possible values are:
               * UP - The cloud is healthy and ready to enable Load Balancer for an Edge Gateway
               * DOWN - The cloud is in a failure state. Enabling Load balancer on an Edge Gateway may not be possible
               * RUNNING - The cloud is currently processing. An example is if it's enabling a Load Balancer for an Edge Gateway
               * UNAVAILABLE - The cloud is unavailable
               * UNKNOWN - The cloud state is unknown
        :param pulumi.Input[str] importable_cloud_id: Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] name: A name for ALB Cloud
        :param pulumi.Input[str] network_pool_id: Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] network_pool_name: Network Pool Name used by the Cloud
        """
        if controller_id is not None:
            pulumi.set(__self__, "controller_id", controller_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_message is not None:
            pulumi.set(__self__, "health_message", health_message)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if importable_cloud_id is not None:
            pulumi.set(__self__, "importable_cloud_id", importable_cloud_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_id is not None:
            pulumi.set(__self__, "network_pool_id", network_pool_id)
        if network_pool_name is not None:
            pulumi.set(__self__, "network_pool_name", network_pool_name)

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> Optional[pulumi.Input[str]]:
        """
        ALB Controller ID
        """
        return pulumi.get(self, "controller_id")

    @controller_id.setter
    def controller_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Cloud
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> Optional[pulumi.Input[str]]:
        """
        DetailedHealthMessage contains detailed message on the health of the Cloud
        """
        return pulumi.get(self, "health_message")

    @health_message.setter
    def health_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_message", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        HealthStatus contains status of the Load Balancer Cloud. Possible values are:
        * UP - The cloud is healthy and ready to enable Load Balancer for an Edge Gateway
        * DOWN - The cloud is in a failure state. Enabling Load balancer on an Edge Gateway may not be possible
        * RUNNING - The cloud is currently processing. An example is if it's enabling a Load Balancer for an Edge Gateway
        * UNAVAILABLE - The cloud is unavailable
        * UNKNOWN - The cloud state is unknown
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="importableCloudId")
    def importable_cloud_id(self) -> Optional[pulumi.Input[str]]:
        """
        Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "importable_cloud_id")

    @importable_cloud_id.setter
    def importable_cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "importable_cloud_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Cloud
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "network_pool_id")

    @network_pool_id.setter
    def network_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_id", value)

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Network Pool Name used by the Cloud
        """
        return pulumi.get(self, "network_pool_name")

    @network_pool_name.setter
    def network_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_name", value)


class NsxtAlbCloud(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 importable_cloud_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAlbCloud resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] controller_id: ALB Controller ID
        :param pulumi.Input[str] description: An optional description ALB Cloud
        :param pulumi.Input[str] importable_cloud_id: Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] name: A name for ALB Cloud
        :param pulumi.Input[str] network_pool_id: Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAlbCloudArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAlbCloud resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAlbCloudArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAlbCloudArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 importable_cloud_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAlbCloudArgs.__new__(NsxtAlbCloudArgs)

            if controller_id is None and not opts.urn:
                raise TypeError("Missing required property 'controller_id'")
            __props__.__dict__["controller_id"] = controller_id
            __props__.__dict__["description"] = description
            if importable_cloud_id is None and not opts.urn:
                raise TypeError("Missing required property 'importable_cloud_id'")
            __props__.__dict__["importable_cloud_id"] = importable_cloud_id
            __props__.__dict__["name"] = name
            if network_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_pool_id'")
            __props__.__dict__["network_pool_id"] = network_pool_id
            __props__.__dict__["health_message"] = None
            __props__.__dict__["health_status"] = None
            __props__.__dict__["network_pool_name"] = None
        super(NsxtAlbCloud, __self__).__init__(
            'vcd:index/nsxtAlbCloud:NsxtAlbCloud',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            controller_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            health_message: Optional[pulumi.Input[str]] = None,
            health_status: Optional[pulumi.Input[str]] = None,
            importable_cloud_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_pool_id: Optional[pulumi.Input[str]] = None,
            network_pool_name: Optional[pulumi.Input[str]] = None) -> 'NsxtAlbCloud':
        """
        Get an existing NsxtAlbCloud resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] controller_id: ALB Controller ID
        :param pulumi.Input[str] description: An optional description ALB Cloud
        :param pulumi.Input[str] health_message: DetailedHealthMessage contains detailed message on the health of the Cloud
        :param pulumi.Input[str] health_status: HealthStatus contains status of the Load Balancer Cloud. Possible values are:
               * UP - The cloud is healthy and ready to enable Load Balancer for an Edge Gateway
               * DOWN - The cloud is in a failure state. Enabling Load balancer on an Edge Gateway may not be possible
               * RUNNING - The cloud is currently processing. An example is if it's enabling a Load Balancer for an Edge Gateway
               * UNAVAILABLE - The cloud is unavailable
               * UNKNOWN - The cloud state is unknown
        :param pulumi.Input[str] importable_cloud_id: Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] name: A name for ALB Cloud
        :param pulumi.Input[str] network_pool_id: Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
               source
        :param pulumi.Input[str] network_pool_name: Network Pool Name used by the Cloud
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAlbCloudState.__new__(_NsxtAlbCloudState)

        __props__.__dict__["controller_id"] = controller_id
        __props__.__dict__["description"] = description
        __props__.__dict__["health_message"] = health_message
        __props__.__dict__["health_status"] = health_status
        __props__.__dict__["importable_cloud_id"] = importable_cloud_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_pool_id"] = network_pool_id
        __props__.__dict__["network_pool_name"] = network_pool_name
        return NsxtAlbCloud(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> pulumi.Output[str]:
        """
        ALB Controller ID
        """
        return pulumi.get(self, "controller_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description ALB Cloud
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> pulumi.Output[str]:
        """
        DetailedHealthMessage contains detailed message on the health of the Cloud
        """
        return pulumi.get(self, "health_message")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> pulumi.Output[str]:
        """
        HealthStatus contains status of the Load Balancer Cloud. Possible values are:
        * UP - The cloud is healthy and ready to enable Load Balancer for an Edge Gateway
        * DOWN - The cloud is in a failure state. Enabling Load balancer on an Edge Gateway may not be possible
        * RUNNING - The cloud is currently processing. An example is if it's enabling a Load Balancer for an Edge Gateway
        * UNAVAILABLE - The cloud is unavailable
        * UNKNOWN - The cloud state is unknown
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="importableCloudId")
    def importable_cloud_id(self) -> pulumi.Output[str]:
        """
        Importable Cloud ID. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "importable_cloud_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for ALB Cloud
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> pulumi.Output[str]:
        """
        Network pool ID for ALB Cloud. Can be looked up using `get_nsxt_alb_importable_cloud` data
        source
        """
        return pulumi.get(self, "network_pool_id")

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> pulumi.Output[str]:
        """
        Network Pool Name used by the Cloud
        """
        return pulumi.get(self, "network_pool_name")

