# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtEdgegatewayBgpNeighborResult',
    'AwaitableGetNsxtEdgegatewayBgpNeighborResult',
    'get_nsxt_edgegateway_bgp_neighbor',
    'get_nsxt_edgegateway_bgp_neighbor_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayBgpNeighborResult:
    """
    A collection of values returned by getNsxtEdgegatewayBgpNeighbor.
    """
    def __init__(__self__, allow_as_in=None, bfd_dead_multiple=None, bfd_enabled=None, bfd_interval=None, edge_gateway_id=None, graceful_restart_mode=None, hold_down_timer=None, id=None, in_filter_ip_prefix_list_id=None, ip_address=None, keep_alive_timer=None, org=None, out_filter_ip_prefix_list_id=None, password=None, remote_as_number=None, route_filtering=None):
        if allow_as_in and not isinstance(allow_as_in, bool):
            raise TypeError("Expected argument 'allow_as_in' to be a bool")
        pulumi.set(__self__, "allow_as_in", allow_as_in)
        if bfd_dead_multiple and not isinstance(bfd_dead_multiple, int):
            raise TypeError("Expected argument 'bfd_dead_multiple' to be a int")
        pulumi.set(__self__, "bfd_dead_multiple", bfd_dead_multiple)
        if bfd_enabled and not isinstance(bfd_enabled, bool):
            raise TypeError("Expected argument 'bfd_enabled' to be a bool")
        pulumi.set(__self__, "bfd_enabled", bfd_enabled)
        if bfd_interval and not isinstance(bfd_interval, int):
            raise TypeError("Expected argument 'bfd_interval' to be a int")
        pulumi.set(__self__, "bfd_interval", bfd_interval)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if graceful_restart_mode and not isinstance(graceful_restart_mode, str):
            raise TypeError("Expected argument 'graceful_restart_mode' to be a str")
        pulumi.set(__self__, "graceful_restart_mode", graceful_restart_mode)
        if hold_down_timer and not isinstance(hold_down_timer, int):
            raise TypeError("Expected argument 'hold_down_timer' to be a int")
        pulumi.set(__self__, "hold_down_timer", hold_down_timer)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_filter_ip_prefix_list_id and not isinstance(in_filter_ip_prefix_list_id, str):
            raise TypeError("Expected argument 'in_filter_ip_prefix_list_id' to be a str")
        pulumi.set(__self__, "in_filter_ip_prefix_list_id", in_filter_ip_prefix_list_id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if keep_alive_timer and not isinstance(keep_alive_timer, int):
            raise TypeError("Expected argument 'keep_alive_timer' to be a int")
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if out_filter_ip_prefix_list_id and not isinstance(out_filter_ip_prefix_list_id, str):
            raise TypeError("Expected argument 'out_filter_ip_prefix_list_id' to be a str")
        pulumi.set(__self__, "out_filter_ip_prefix_list_id", out_filter_ip_prefix_list_id)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if remote_as_number and not isinstance(remote_as_number, str):
            raise TypeError("Expected argument 'remote_as_number' to be a str")
        pulumi.set(__self__, "remote_as_number", remote_as_number)
        if route_filtering and not isinstance(route_filtering, str):
            raise TypeError("Expected argument 'route_filtering' to be a str")
        pulumi.set(__self__, "route_filtering", route_filtering)

    @property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> bool:
        return pulumi.get(self, "allow_as_in")

    @property
    @pulumi.getter(name="bfdDeadMultiple")
    def bfd_dead_multiple(self) -> int:
        return pulumi.get(self, "bfd_dead_multiple")

    @property
    @pulumi.getter(name="bfdEnabled")
    def bfd_enabled(self) -> bool:
        return pulumi.get(self, "bfd_enabled")

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> int:
        return pulumi.get(self, "bfd_interval")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter(name="gracefulRestartMode")
    def graceful_restart_mode(self) -> str:
        return pulumi.get(self, "graceful_restart_mode")

    @property
    @pulumi.getter(name="holdDownTimer")
    def hold_down_timer(self) -> int:
        return pulumi.get(self, "hold_down_timer")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inFilterIpPrefixListId")
    def in_filter_ip_prefix_list_id(self) -> str:
        return pulumi.get(self, "in_filter_ip_prefix_list_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="outFilterIpPrefixListId")
    def out_filter_ip_prefix_list_id(self) -> str:
        return pulumi.get(self, "out_filter_ip_prefix_list_id")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="remoteAsNumber")
    def remote_as_number(self) -> str:
        return pulumi.get(self, "remote_as_number")

    @property
    @pulumi.getter(name="routeFiltering")
    def route_filtering(self) -> str:
        return pulumi.get(self, "route_filtering")


class AwaitableGetNsxtEdgegatewayBgpNeighborResult(GetNsxtEdgegatewayBgpNeighborResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayBgpNeighborResult(
            allow_as_in=self.allow_as_in,
            bfd_dead_multiple=self.bfd_dead_multiple,
            bfd_enabled=self.bfd_enabled,
            bfd_interval=self.bfd_interval,
            edge_gateway_id=self.edge_gateway_id,
            graceful_restart_mode=self.graceful_restart_mode,
            hold_down_timer=self.hold_down_timer,
            id=self.id,
            in_filter_ip_prefix_list_id=self.in_filter_ip_prefix_list_id,
            ip_address=self.ip_address,
            keep_alive_timer=self.keep_alive_timer,
            org=self.org,
            out_filter_ip_prefix_list_id=self.out_filter_ip_prefix_list_id,
            password=self.password,
            remote_as_number=self.remote_as_number,
            route_filtering=self.route_filtering)


def get_nsxt_edgegateway_bgp_neighbor(edge_gateway_id: Optional[str] = None,
                                      ip_address: Optional[str] = None,
                                      org: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayBgpNeighborResult:
    """
    Supported in provider *v3.7+* and VCD 10.2+ with NSX-T

    Provides a data source to read NSX-T Edge Gateway BGP Neighbors and their configuration.


    :param str edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
           [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str ip_address: An IP Address (IPv4 or IPv6) of existing BGP Neighbor in specified Edge Gateway
    :param str org: The name of organization to which the edge gateway belongs. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['ipAddress'] = ip_address
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegatewayBgpNeighbor:getNsxtEdgegatewayBgpNeighbor', __args__, opts=opts, typ=GetNsxtEdgegatewayBgpNeighborResult).value

    return AwaitableGetNsxtEdgegatewayBgpNeighborResult(
        allow_as_in=pulumi.get(__ret__, 'allow_as_in'),
        bfd_dead_multiple=pulumi.get(__ret__, 'bfd_dead_multiple'),
        bfd_enabled=pulumi.get(__ret__, 'bfd_enabled'),
        bfd_interval=pulumi.get(__ret__, 'bfd_interval'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        graceful_restart_mode=pulumi.get(__ret__, 'graceful_restart_mode'),
        hold_down_timer=pulumi.get(__ret__, 'hold_down_timer'),
        id=pulumi.get(__ret__, 'id'),
        in_filter_ip_prefix_list_id=pulumi.get(__ret__, 'in_filter_ip_prefix_list_id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        keep_alive_timer=pulumi.get(__ret__, 'keep_alive_timer'),
        org=pulumi.get(__ret__, 'org'),
        out_filter_ip_prefix_list_id=pulumi.get(__ret__, 'out_filter_ip_prefix_list_id'),
        password=pulumi.get(__ret__, 'password'),
        remote_as_number=pulumi.get(__ret__, 'remote_as_number'),
        route_filtering=pulumi.get(__ret__, 'route_filtering'))
def get_nsxt_edgegateway_bgp_neighbor_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                             ip_address: Optional[pulumi.Input[str]] = None,
                                             org: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayBgpNeighborResult]:
    """
    Supported in provider *v3.7+* and VCD 10.2+ with NSX-T

    Provides a data source to read NSX-T Edge Gateway BGP Neighbors and their configuration.


    :param str edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
           [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str ip_address: An IP Address (IPv4 or IPv6) of existing BGP Neighbor in specified Edge Gateway
    :param str org: The name of organization to which the edge gateway belongs. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['ipAddress'] = ip_address
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegatewayBgpNeighbor:getNsxtEdgegatewayBgpNeighbor', __args__, opts=opts, typ=GetNsxtEdgegatewayBgpNeighborResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayBgpNeighborResult(
        allow_as_in=pulumi.get(__response__, 'allow_as_in'),
        bfd_dead_multiple=pulumi.get(__response__, 'bfd_dead_multiple'),
        bfd_enabled=pulumi.get(__response__, 'bfd_enabled'),
        bfd_interval=pulumi.get(__response__, 'bfd_interval'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        graceful_restart_mode=pulumi.get(__response__, 'graceful_restart_mode'),
        hold_down_timer=pulumi.get(__response__, 'hold_down_timer'),
        id=pulumi.get(__response__, 'id'),
        in_filter_ip_prefix_list_id=pulumi.get(__response__, 'in_filter_ip_prefix_list_id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        keep_alive_timer=pulumi.get(__response__, 'keep_alive_timer'),
        org=pulumi.get(__response__, 'org'),
        out_filter_ip_prefix_list_id=pulumi.get(__response__, 'out_filter_ip_prefix_list_id'),
        password=pulumi.get(__response__, 'password'),
        remote_as_number=pulumi.get(__response__, 'remote_as_number'),
        route_filtering=pulumi.get(__response__, 'route_filtering')))
