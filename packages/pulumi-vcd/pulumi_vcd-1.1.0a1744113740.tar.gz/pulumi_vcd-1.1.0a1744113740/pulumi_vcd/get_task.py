# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTaskResult',
    'AwaitableGetTaskResult',
    'get_task',
    'get_task_output',
]

@pulumi.output_type
class GetTaskResult:
    """
    A collection of values returned by getTask.
    """
    def __init__(__self__, cancel_requested=None, description=None, end_time=None, error=None, expiry_time=None, href=None, id=None, name=None, operation=None, operation_name=None, org_id=None, org_name=None, owner_id=None, owner_name=None, owner_type=None, progress=None, start_time=None, status=None, type=None, user_id=None, user_name=None):
        if cancel_requested and not isinstance(cancel_requested, bool):
            raise TypeError("Expected argument 'cancel_requested' to be a bool")
        pulumi.set(__self__, "cancel_requested", cancel_requested)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, str):
            raise TypeError("Expected argument 'error' to be a str")
        pulumi.set(__self__, "error", error)
        if expiry_time and not isinstance(expiry_time, str):
            raise TypeError("Expected argument 'expiry_time' to be a str")
        pulumi.set(__self__, "expiry_time", expiry_time)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operation and not isinstance(operation, str):
            raise TypeError("Expected argument 'operation' to be a str")
        pulumi.set(__self__, "operation", operation)
        if operation_name and not isinstance(operation_name, str):
            raise TypeError("Expected argument 'operation_name' to be a str")
        pulumi.set(__self__, "operation_name", operation_name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if org_name and not isinstance(org_name, str):
            raise TypeError("Expected argument 'org_name' to be a str")
        pulumi.set(__self__, "org_name", org_name)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if owner_type and not isinstance(owner_type, str):
            raise TypeError("Expected argument 'owner_type' to be a str")
        pulumi.set(__self__, "owner_type", owner_type)
        if progress and not isinstance(progress, int):
            raise TypeError("Expected argument 'progress' to be a int")
        pulumi.set(__self__, "progress", progress)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="cancelRequested")
    def cancel_requested(self) -> bool:
        """
        Whether user has requested this processing to be canceled (`true` or `false`).
        """
        return pulumi.get(self, "cancel_requested")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The date and time that processing of the task was completed. May not be present if the task is still being executed.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        error information from a failed task.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> str:
        """
        The date and time at which the task resource will be destroyed and no longer available for retrieval. May not be present if the task has not been executed or is still being executed.
        """
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The URI of the task.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the task. May not be unique. Defines the general operation being performed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        A message describing the operation that is tracked by this task.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        """
        The short name of the operation that is tracked by this task.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The unique identifier of the user org.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> str:
        """
        The name of the org to which the user belongs.
        """
        return pulumi.get(self, "org_name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        The unique identifier of the task owner.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        """
        The name of the task owner. This is typically the object that the task is creating or updating.
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="ownerType")
    def owner_type(self) -> str:
        """
        The type of the task owner.
        """
        return pulumi.get(self, "owner_type")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        Indicator of task progress as an approximate percentage between 0 and 100. Not available for all tasks.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The date and time the system started executing the task. May not be present if the task has not been executed yet.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The execution status of the task. One of queued, preRunning, running, success, error, aborted.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the task.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The unique identifier of the task user.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The name of the user who started the task.
        """
        return pulumi.get(self, "user_name")


class AwaitableGetTaskResult(GetTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTaskResult(
            cancel_requested=self.cancel_requested,
            description=self.description,
            end_time=self.end_time,
            error=self.error,
            expiry_time=self.expiry_time,
            href=self.href,
            id=self.id,
            name=self.name,
            operation=self.operation,
            operation_name=self.operation_name,
            org_id=self.org_id,
            org_name=self.org_name,
            owner_id=self.owner_id,
            owner_name=self.owner_name,
            owner_type=self.owner_type,
            progress=self.progress,
            start_time=self.start_time,
            status=self.status,
            type=self.type,
            user_id=self.user_id,
            user_name=self.user_name)


def get_task(id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTaskResult:
    """
    Provides a data source for available tasks.

    Supported in provider *v3.8+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    some_task = vcd.get_task(id="d4fdcaa9-8db4-45a9-80b8-69de49901bc7")
    pulumi.export("some-task", some_task)
    ```


    :param str id: The ID of the task
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getTask:getTask', __args__, opts=opts, typ=GetTaskResult).value

    return AwaitableGetTaskResult(
        cancel_requested=pulumi.get(__ret__, 'cancel_requested'),
        description=pulumi.get(__ret__, 'description'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        expiry_time=pulumi.get(__ret__, 'expiry_time'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operation=pulumi.get(__ret__, 'operation'),
        operation_name=pulumi.get(__ret__, 'operation_name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        org_name=pulumi.get(__ret__, 'org_name'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        owner_name=pulumi.get(__ret__, 'owner_name'),
        owner_type=pulumi.get(__ret__, 'owner_type'),
        progress=pulumi.get(__ret__, 'progress'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_task_output(id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTaskResult]:
    """
    Provides a data source for available tasks.

    Supported in provider *v3.8+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    some_task = vcd.get_task(id="d4fdcaa9-8db4-45a9-80b8-69de49901bc7")
    pulumi.export("some-task", some_task)
    ```


    :param str id: The ID of the task
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getTask:getTask', __args__, opts=opts, typ=GetTaskResult)
    return __ret__.apply(lambda __response__: GetTaskResult(
        cancel_requested=pulumi.get(__response__, 'cancel_requested'),
        description=pulumi.get(__response__, 'description'),
        end_time=pulumi.get(__response__, 'end_time'),
        error=pulumi.get(__response__, 'error'),
        expiry_time=pulumi.get(__response__, 'expiry_time'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operation=pulumi.get(__response__, 'operation'),
        operation_name=pulumi.get(__response__, 'operation_name'),
        org_id=pulumi.get(__response__, 'org_id'),
        org_name=pulumi.get(__response__, 'org_name'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        owner_name=pulumi.get(__response__, 'owner_name'),
        owner_type=pulumi.get(__response__, 'owner_type'),
        progress=pulumi.get(__response__, 'progress'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_name=pulumi.get(__response__, 'user_name')))
