# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtEdgegatewayResult',
    'AwaitableGetNsxtEdgegatewayResult',
    'get_nsxt_edgegateway',
    'get_nsxt_edgegateway_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayResult:
    """
    A collection of values returned by getNsxtEdgegateway.
    """
    def __init__(__self__, dedicate_external_network=None, deployment_mode=None, description=None, edge_cluster_id=None, external_network_allocated_ip_count=None, external_network_id=None, external_networks=None, id=None, ip_count_read_limit=None, name=None, non_distributed_routing_enabled=None, org=None, owner_id=None, primary_ip=None, subnet_with_ip_counts=None, subnet_with_total_ip_counts=None, subnets=None, total_allocated_ip_count=None, unused_ip_count=None, use_ip_spaces=None, used_ip_count=None, vdc=None):
        if dedicate_external_network and not isinstance(dedicate_external_network, bool):
            raise TypeError("Expected argument 'dedicate_external_network' to be a bool")
        pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if deployment_mode and not isinstance(deployment_mode, str):
            raise TypeError("Expected argument 'deployment_mode' to be a str")
        pulumi.set(__self__, "deployment_mode", deployment_mode)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_cluster_id and not isinstance(edge_cluster_id, str):
            raise TypeError("Expected argument 'edge_cluster_id' to be a str")
        pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if external_network_allocated_ip_count and not isinstance(external_network_allocated_ip_count, int):
            raise TypeError("Expected argument 'external_network_allocated_ip_count' to be a int")
        pulumi.set(__self__, "external_network_allocated_ip_count", external_network_allocated_ip_count)
        if external_network_id and not isinstance(external_network_id, str):
            raise TypeError("Expected argument 'external_network_id' to be a str")
        pulumi.set(__self__, "external_network_id", external_network_id)
        if external_networks and not isinstance(external_networks, list):
            raise TypeError("Expected argument 'external_networks' to be a list")
        pulumi.set(__self__, "external_networks", external_networks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_count_read_limit and not isinstance(ip_count_read_limit, int):
            raise TypeError("Expected argument 'ip_count_read_limit' to be a int")
        pulumi.set(__self__, "ip_count_read_limit", ip_count_read_limit)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if non_distributed_routing_enabled and not isinstance(non_distributed_routing_enabled, bool):
            raise TypeError("Expected argument 'non_distributed_routing_enabled' to be a bool")
        pulumi.set(__self__, "non_distributed_routing_enabled", non_distributed_routing_enabled)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if primary_ip and not isinstance(primary_ip, str):
            raise TypeError("Expected argument 'primary_ip' to be a str")
        pulumi.set(__self__, "primary_ip", primary_ip)
        if subnet_with_ip_counts and not isinstance(subnet_with_ip_counts, list):
            raise TypeError("Expected argument 'subnet_with_ip_counts' to be a list")
        pulumi.set(__self__, "subnet_with_ip_counts", subnet_with_ip_counts)
        if subnet_with_total_ip_counts and not isinstance(subnet_with_total_ip_counts, list):
            raise TypeError("Expected argument 'subnet_with_total_ip_counts' to be a list")
        pulumi.set(__self__, "subnet_with_total_ip_counts", subnet_with_total_ip_counts)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if total_allocated_ip_count and not isinstance(total_allocated_ip_count, int):
            raise TypeError("Expected argument 'total_allocated_ip_count' to be a int")
        pulumi.set(__self__, "total_allocated_ip_count", total_allocated_ip_count)
        if unused_ip_count and not isinstance(unused_ip_count, int):
            raise TypeError("Expected argument 'unused_ip_count' to be a int")
        pulumi.set(__self__, "unused_ip_count", unused_ip_count)
        if use_ip_spaces and not isinstance(use_ip_spaces, bool):
            raise TypeError("Expected argument 'use_ip_spaces' to be a bool")
        pulumi.set(__self__, "use_ip_spaces", use_ip_spaces)
        if used_ip_count and not isinstance(used_ip_count, int):
            raise TypeError("Expected argument 'used_ip_count' to be a int")
        pulumi.set(__self__, "used_ip_count", used_ip_count)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> bool:
        return pulumi.get(self, "dedicate_external_network")

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> str:
        return pulumi.get(self, "deployment_mode")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter(name="externalNetworkAllocatedIpCount")
    def external_network_allocated_ip_count(self) -> int:
        return pulumi.get(self, "external_network_allocated_ip_count")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> str:
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> Sequence['outputs.GetNsxtEdgegatewayExternalNetworkResult']:
        return pulumi.get(self, "external_networks")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipCountReadLimit")
    def ip_count_read_limit(self) -> Optional[int]:
        return pulumi.get(self, "ip_count_read_limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonDistributedRoutingEnabled")
    def non_distributed_routing_enabled(self) -> bool:
        return pulumi.get(self, "non_distributed_routing_enabled")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> str:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="subnetWithIpCounts")
    def subnet_with_ip_counts(self) -> Sequence['outputs.GetNsxtEdgegatewaySubnetWithIpCountResult']:
        return pulumi.get(self, "subnet_with_ip_counts")

    @property
    @pulumi.getter(name="subnetWithTotalIpCounts")
    def subnet_with_total_ip_counts(self) -> Sequence['outputs.GetNsxtEdgegatewaySubnetWithTotalIpCountResult']:
        return pulumi.get(self, "subnet_with_total_ip_counts")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetNsxtEdgegatewaySubnetResult']:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="totalAllocatedIpCount")
    def total_allocated_ip_count(self) -> int:
        return pulumi.get(self, "total_allocated_ip_count")

    @property
    @pulumi.getter(name="unusedIpCount")
    def unused_ip_count(self) -> int:
        return pulumi.get(self, "unused_ip_count")

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> bool:
        return pulumi.get(self, "use_ip_spaces")

    @property
    @pulumi.getter(name="usedIpCount")
    def used_ip_count(self) -> int:
        return pulumi.get(self, "used_ip_count")

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> str:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtEdgegatewayResult(GetNsxtEdgegatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayResult(
            dedicate_external_network=self.dedicate_external_network,
            deployment_mode=self.deployment_mode,
            description=self.description,
            edge_cluster_id=self.edge_cluster_id,
            external_network_allocated_ip_count=self.external_network_allocated_ip_count,
            external_network_id=self.external_network_id,
            external_networks=self.external_networks,
            id=self.id,
            ip_count_read_limit=self.ip_count_read_limit,
            name=self.name,
            non_distributed_routing_enabled=self.non_distributed_routing_enabled,
            org=self.org,
            owner_id=self.owner_id,
            primary_ip=self.primary_ip,
            subnet_with_ip_counts=self.subnet_with_ip_counts,
            subnet_with_total_ip_counts=self.subnet_with_total_ip_counts,
            subnets=self.subnets,
            total_allocated_ip_count=self.total_allocated_ip_count,
            unused_ip_count=self.unused_ip_count,
            use_ip_spaces=self.use_ip_spaces,
            used_ip_count=self.used_ip_count,
            vdc=self.vdc)


def get_nsxt_edgegateway(edge_cluster_id: Optional[str] = None,
                         ip_count_read_limit: Optional[int] = None,
                         name: Optional[str] = None,
                         org: Optional[str] = None,
                         owner_id: Optional[str] = None,
                         vdc: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayResult:
    """
    Provides a VMware Cloud Director NSX-T edge gateway data source. This can be used to read NSX-T edge gateway configurations.

    Supported in provider *v3.1+*.

    ## Example Usage

    ### NSX-T Edge Gateway Belonging To VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    group1 = vcd.get_vdc_group(name="existing-group")
    t1 = vcd.get_nsxt_edgegateway(org="myorg",
        owner_id=group1.id,
        name="nsxt-edge-gateway")
    ```

    ### NSX-T Edge Gateway Belonging To VDC)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vdc1 = vcd.get_org_vdc(name="existing-vdc")
    t1 = vcd.get_nsxt_edgegateway(org="myorg",
        owner_id=vdc1.id,
        name="nsxt-edge-gateway")
    ```


    :param int ip_count_read_limit: Sets a limit of IPs to count for
           `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
           counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
           only IP count reporting. Defaults to `1000000`. While it is unlikely that a single Edge Gateway
           can effectively manage more IPs, one can specify `0` for *unlimited* value.
    :param str name: NSX-T Edge Gateway name.
    :param str org: The name of organization to which the NSX-T Edge Gateway belongs. Optional if
           defined at provider level.
    :param str owner_id: The ID of VDC or VDC Group. **Note:** Data sources
           [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
           [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
           name.
           
           > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
           definition at provider level.
    :param str vdc: **Deprecated** - please use `owner_id` field. The name of VDC that owns the
           NSX-T Edge Gateway. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeClusterId'] = edge_cluster_id
    __args__['ipCountReadLimit'] = ip_count_read_limit
    __args__['name'] = name
    __args__['org'] = org
    __args__['ownerId'] = owner_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegateway:getNsxtEdgegateway', __args__, opts=opts, typ=GetNsxtEdgegatewayResult).value

    return AwaitableGetNsxtEdgegatewayResult(
        dedicate_external_network=pulumi.get(__ret__, 'dedicate_external_network'),
        deployment_mode=pulumi.get(__ret__, 'deployment_mode'),
        description=pulumi.get(__ret__, 'description'),
        edge_cluster_id=pulumi.get(__ret__, 'edge_cluster_id'),
        external_network_allocated_ip_count=pulumi.get(__ret__, 'external_network_allocated_ip_count'),
        external_network_id=pulumi.get(__ret__, 'external_network_id'),
        external_networks=pulumi.get(__ret__, 'external_networks'),
        id=pulumi.get(__ret__, 'id'),
        ip_count_read_limit=pulumi.get(__ret__, 'ip_count_read_limit'),
        name=pulumi.get(__ret__, 'name'),
        non_distributed_routing_enabled=pulumi.get(__ret__, 'non_distributed_routing_enabled'),
        org=pulumi.get(__ret__, 'org'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        primary_ip=pulumi.get(__ret__, 'primary_ip'),
        subnet_with_ip_counts=pulumi.get(__ret__, 'subnet_with_ip_counts'),
        subnet_with_total_ip_counts=pulumi.get(__ret__, 'subnet_with_total_ip_counts'),
        subnets=pulumi.get(__ret__, 'subnets'),
        total_allocated_ip_count=pulumi.get(__ret__, 'total_allocated_ip_count'),
        unused_ip_count=pulumi.get(__ret__, 'unused_ip_count'),
        use_ip_spaces=pulumi.get(__ret__, 'use_ip_spaces'),
        used_ip_count=pulumi.get(__ret__, 'used_ip_count'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_nsxt_edgegateway_output(edge_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                ip_count_read_limit: Optional[pulumi.Input[Optional[int]]] = None,
                                name: Optional[pulumi.Input[str]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                owner_id: Optional[pulumi.Input[Optional[str]]] = None,
                                vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayResult]:
    """
    Provides a VMware Cloud Director NSX-T edge gateway data source. This can be used to read NSX-T edge gateway configurations.

    Supported in provider *v3.1+*.

    ## Example Usage

    ### NSX-T Edge Gateway Belonging To VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    group1 = vcd.get_vdc_group(name="existing-group")
    t1 = vcd.get_nsxt_edgegateway(org="myorg",
        owner_id=group1.id,
        name="nsxt-edge-gateway")
    ```

    ### NSX-T Edge Gateway Belonging To VDC)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vdc1 = vcd.get_org_vdc(name="existing-vdc")
    t1 = vcd.get_nsxt_edgegateway(org="myorg",
        owner_id=vdc1.id,
        name="nsxt-edge-gateway")
    ```


    :param int ip_count_read_limit: Sets a limit of IPs to count for
           `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
           counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
           only IP count reporting. Defaults to `1000000`. While it is unlikely that a single Edge Gateway
           can effectively manage more IPs, one can specify `0` for *unlimited* value.
    :param str name: NSX-T Edge Gateway name.
    :param str org: The name of organization to which the NSX-T Edge Gateway belongs. Optional if
           defined at provider level.
    :param str owner_id: The ID of VDC or VDC Group. **Note:** Data sources
           [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
           [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
           name.
           
           > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
           definition at provider level.
    :param str vdc: **Deprecated** - please use `owner_id` field. The name of VDC that owns the
           NSX-T Edge Gateway. Optional if defined at provider level.
    """
    __args__ = dict()
    __args__['edgeClusterId'] = edge_cluster_id
    __args__['ipCountReadLimit'] = ip_count_read_limit
    __args__['name'] = name
    __args__['org'] = org
    __args__['ownerId'] = owner_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegateway:getNsxtEdgegateway', __args__, opts=opts, typ=GetNsxtEdgegatewayResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayResult(
        dedicate_external_network=pulumi.get(__response__, 'dedicate_external_network'),
        deployment_mode=pulumi.get(__response__, 'deployment_mode'),
        description=pulumi.get(__response__, 'description'),
        edge_cluster_id=pulumi.get(__response__, 'edge_cluster_id'),
        external_network_allocated_ip_count=pulumi.get(__response__, 'external_network_allocated_ip_count'),
        external_network_id=pulumi.get(__response__, 'external_network_id'),
        external_networks=pulumi.get(__response__, 'external_networks'),
        id=pulumi.get(__response__, 'id'),
        ip_count_read_limit=pulumi.get(__response__, 'ip_count_read_limit'),
        name=pulumi.get(__response__, 'name'),
        non_distributed_routing_enabled=pulumi.get(__response__, 'non_distributed_routing_enabled'),
        org=pulumi.get(__response__, 'org'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        primary_ip=pulumi.get(__response__, 'primary_ip'),
        subnet_with_ip_counts=pulumi.get(__response__, 'subnet_with_ip_counts'),
        subnet_with_total_ip_counts=pulumi.get(__response__, 'subnet_with_total_ip_counts'),
        subnets=pulumi.get(__response__, 'subnets'),
        total_allocated_ip_count=pulumi.get(__response__, 'total_allocated_ip_count'),
        unused_ip_count=pulumi.get(__response__, 'unused_ip_count'),
        use_ip_spaces=pulumi.get(__response__, 'use_ip_spaces'),
        used_ip_count=pulumi.get(__response__, 'used_ip_count'),
        vdc=pulumi.get(__response__, 'vdc')))
