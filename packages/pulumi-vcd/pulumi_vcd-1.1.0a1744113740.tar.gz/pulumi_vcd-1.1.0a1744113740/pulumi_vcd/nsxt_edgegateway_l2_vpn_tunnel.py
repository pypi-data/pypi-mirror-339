# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtEdgegatewayL2VpnTunnelArgs', 'NsxtEdgegatewayL2VpnTunnel']

@pulumi.input_type
class NsxtEdgegatewayL2VpnTunnelArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 local_endpoint_ip: pulumi.Input[str],
                 remote_endpoint_ip: pulumi.Input[str],
                 session_mode: pulumi.Input[str],
                 connector_initiation_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_code: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 stretched_networks: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]] = None,
                 tunnel_interface: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegatewayL2VpnTunnel resource.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
               Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[str] local_endpoint_ip: The IP address corresponding to the Edge 
               Gateway the tunnel is being configured on. The IP must be sub-allocated
               on the Edge Gateway.
        :param pulumi.Input[str] remote_endpoint_ip: The IP address of the remote endpoint, which 
               corresponds to the device on the remote site terminating the VPN tunnel.
        :param pulumi.Input[str] session_mode: Mode of the tunnel session (SERVER or CLIENT).
        :param pulumi.Input[str] connector_initiation_mode: Mode in which the connection is formed. 
               Required for `SERVER` mode sessions. One of:
               * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
               incoming tunnel setup requests from the peer gateway.
               * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
               requests, it shall not initiate the tunnel setup.
               * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
               first packet matching the policy rule is received, and will also respond to
               incoming initiation requests.
        :param pulumi.Input[str] description: The description of the tunnel.
        :param pulumi.Input[bool] enabled: State of the `SERVER` mode session, always set to `true` for `CLIENT` 
               mode sessions. Default is `true`.
        :param pulumi.Input[str] name: The name of the tunnel.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at 
               provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_code: Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
               SERVER sessions and is a required field for CLIENT sessions.
        :param pulumi.Input[str] pre_shared_key: The key that is used for authenticating the 
               connection. Required for `SERVER` mode sessions.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]] stretched_networks: One or more stretched networks for the tunnel. 
               See `stretched_network` for more detail.
        :param pulumi.Input[str] tunnel_interface: The network CIDR block over which the session 
               interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
               Director will attempt to automatically allocate a tunnel interface.
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "local_endpoint_ip", local_endpoint_ip)
        pulumi.set(__self__, "remote_endpoint_ip", remote_endpoint_ip)
        pulumi.set(__self__, "session_mode", session_mode)
        if connector_initiation_mode is not None:
            pulumi.set(__self__, "connector_initiation_mode", connector_initiation_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if peer_code is not None:
            pulumi.set(__self__, "peer_code", peer_code)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if stretched_networks is not None:
            pulumi.set(__self__, "stretched_networks", stretched_networks)
        if tunnel_interface is not None:
            pulumi.set(__self__, "tunnel_interface", tunnel_interface)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        The ID of the Edge Gateway (NSX-T only). 
        Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="localEndpointIp")
    def local_endpoint_ip(self) -> pulumi.Input[str]:
        """
        The IP address corresponding to the Edge 
        Gateway the tunnel is being configured on. The IP must be sub-allocated
        on the Edge Gateway.
        """
        return pulumi.get(self, "local_endpoint_ip")

    @local_endpoint_ip.setter
    def local_endpoint_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_endpoint_ip", value)

    @property
    @pulumi.getter(name="remoteEndpointIp")
    def remote_endpoint_ip(self) -> pulumi.Input[str]:
        """
        The IP address of the remote endpoint, which 
        corresponds to the device on the remote site terminating the VPN tunnel.
        """
        return pulumi.get(self, "remote_endpoint_ip")

    @remote_endpoint_ip.setter
    def remote_endpoint_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_endpoint_ip", value)

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> pulumi.Input[str]:
        """
        Mode of the tunnel session (SERVER or CLIENT).
        """
        return pulumi.get(self, "session_mode")

    @session_mode.setter
    def session_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "session_mode", value)

    @property
    @pulumi.getter(name="connectorInitiationMode")
    def connector_initiation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode in which the connection is formed. 
        Required for `SERVER` mode sessions. One of:
        * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
        incoming tunnel setup requests from the peer gateway.
        * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
        requests, it shall not initiate the tunnel setup.
        * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
        first packet matching the policy rule is received, and will also respond to
        incoming initiation requests.
        """
        return pulumi.get(self, "connector_initiation_mode")

    @connector_initiation_mode.setter
    def connector_initiation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_initiation_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the tunnel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        State of the `SERVER` mode session, always set to `true` for `CLIENT` 
        mode sessions. Default is `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at 
        provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="peerCode")
    def peer_code(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
        SERVER sessions and is a required field for CLIENT sessions.
        """
        return pulumi.get(self, "peer_code")

    @peer_code.setter
    def peer_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_code", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        """
        The key that is used for authenticating the 
        connection. Required for `SERVER` mode sessions.
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter(name="stretchedNetworks")
    def stretched_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]]:
        """
        One or more stretched networks for the tunnel. 
        See `stretched_network` for more detail.
        """
        return pulumi.get(self, "stretched_networks")

    @stretched_networks.setter
    def stretched_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]]):
        pulumi.set(self, "stretched_networks", value)

    @property
    @pulumi.getter(name="tunnelInterface")
    def tunnel_interface(self) -> Optional[pulumi.Input[str]]:
        """
        The network CIDR block over which the session 
        interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
        Director will attempt to automatically allocate a tunnel interface.
        """
        return pulumi.get(self, "tunnel_interface")

    @tunnel_interface.setter
    def tunnel_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_interface", value)


@pulumi.input_type
class _NsxtEdgegatewayL2VpnTunnelState:
    def __init__(__self__, *,
                 connector_initiation_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_code: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 session_mode: Optional[pulumi.Input[str]] = None,
                 stretched_networks: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]] = None,
                 tunnel_interface: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegatewayL2VpnTunnel resources.
        :param pulumi.Input[str] connector_initiation_mode: Mode in which the connection is formed. 
               Required for `SERVER` mode sessions. One of:
               * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
               incoming tunnel setup requests from the peer gateway.
               * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
               requests, it shall not initiate the tunnel setup.
               * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
               first packet matching the policy rule is received, and will also respond to
               incoming initiation requests.
        :param pulumi.Input[str] description: The description of the tunnel.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
               Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: State of the `SERVER` mode session, always set to `true` for `CLIENT` 
               mode sessions. Default is `true`.
        :param pulumi.Input[str] local_endpoint_ip: The IP address corresponding to the Edge 
               Gateway the tunnel is being configured on. The IP must be sub-allocated
               on the Edge Gateway.
        :param pulumi.Input[str] name: The name of the tunnel.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at 
               provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_code: Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
               SERVER sessions and is a required field for CLIENT sessions.
        :param pulumi.Input[str] pre_shared_key: The key that is used for authenticating the 
               connection. Required for `SERVER` mode sessions.
        :param pulumi.Input[str] remote_endpoint_ip: The IP address of the remote endpoint, which 
               corresponds to the device on the remote site terminating the VPN tunnel.
        :param pulumi.Input[str] session_mode: Mode of the tunnel session (SERVER or CLIENT).
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]] stretched_networks: One or more stretched networks for the tunnel. 
               See `stretched_network` for more detail.
        :param pulumi.Input[str] tunnel_interface: The network CIDR block over which the session 
               interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
               Director will attempt to automatically allocate a tunnel interface.
        """
        if connector_initiation_mode is not None:
            pulumi.set(__self__, "connector_initiation_mode", connector_initiation_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if local_endpoint_ip is not None:
            pulumi.set(__self__, "local_endpoint_ip", local_endpoint_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if peer_code is not None:
            pulumi.set(__self__, "peer_code", peer_code)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if remote_endpoint_ip is not None:
            pulumi.set(__self__, "remote_endpoint_ip", remote_endpoint_ip)
        if session_mode is not None:
            pulumi.set(__self__, "session_mode", session_mode)
        if stretched_networks is not None:
            pulumi.set(__self__, "stretched_networks", stretched_networks)
        if tunnel_interface is not None:
            pulumi.set(__self__, "tunnel_interface", tunnel_interface)

    @property
    @pulumi.getter(name="connectorInitiationMode")
    def connector_initiation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode in which the connection is formed. 
        Required for `SERVER` mode sessions. One of:
        * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
        incoming tunnel setup requests from the peer gateway.
        * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
        requests, it shall not initiate the tunnel setup.
        * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
        first packet matching the policy rule is received, and will also respond to
        incoming initiation requests.
        """
        return pulumi.get(self, "connector_initiation_mode")

    @connector_initiation_mode.setter
    def connector_initiation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_initiation_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the tunnel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Edge Gateway (NSX-T only). 
        Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        State of the `SERVER` mode session, always set to `true` for `CLIENT` 
        mode sessions. Default is `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="localEndpointIp")
    def local_endpoint_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address corresponding to the Edge 
        Gateway the tunnel is being configured on. The IP must be sub-allocated
        on the Edge Gateway.
        """
        return pulumi.get(self, "local_endpoint_ip")

    @local_endpoint_ip.setter
    def local_endpoint_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_endpoint_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at 
        provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="peerCode")
    def peer_code(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
        SERVER sessions and is a required field for CLIENT sessions.
        """
        return pulumi.get(self, "peer_code")

    @peer_code.setter
    def peer_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_code", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        """
        The key that is used for authenticating the 
        connection. Required for `SERVER` mode sessions.
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter(name="remoteEndpointIp")
    def remote_endpoint_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the remote endpoint, which 
        corresponds to the device on the remote site terminating the VPN tunnel.
        """
        return pulumi.get(self, "remote_endpoint_ip")

    @remote_endpoint_ip.setter
    def remote_endpoint_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_endpoint_ip", value)

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of the tunnel session (SERVER or CLIENT).
        """
        return pulumi.get(self, "session_mode")

    @session_mode.setter
    def session_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_mode", value)

    @property
    @pulumi.getter(name="stretchedNetworks")
    def stretched_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]]:
        """
        One or more stretched networks for the tunnel. 
        See `stretched_network` for more detail.
        """
        return pulumi.get(self, "stretched_networks")

    @stretched_networks.setter
    def stretched_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs']]]]):
        pulumi.set(self, "stretched_networks", value)

    @property
    @pulumi.getter(name="tunnelInterface")
    def tunnel_interface(self) -> Optional[pulumi.Input[str]]:
        """
        The network CIDR block over which the session 
        interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
        Director will attempt to automatically allocate a tunnel interface.
        """
        return pulumi.get(self, "tunnel_interface")

    @tunnel_interface.setter
    def tunnel_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_interface", value)


class NsxtEdgegatewayL2VpnTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_initiation_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_code: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 session_mode: Optional[pulumi.Input[str]] = None,
                 stretched_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs', 'NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgsDict']]]]] = None,
                 tunnel_interface: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegatewayL2VpnTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connector_initiation_mode: Mode in which the connection is formed. 
               Required for `SERVER` mode sessions. One of:
               * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
               incoming tunnel setup requests from the peer gateway.
               * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
               requests, it shall not initiate the tunnel setup.
               * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
               first packet matching the policy rule is received, and will also respond to
               incoming initiation requests.
        :param pulumi.Input[str] description: The description of the tunnel.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
               Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: State of the `SERVER` mode session, always set to `true` for `CLIENT` 
               mode sessions. Default is `true`.
        :param pulumi.Input[str] local_endpoint_ip: The IP address corresponding to the Edge 
               Gateway the tunnel is being configured on. The IP must be sub-allocated
               on the Edge Gateway.
        :param pulumi.Input[str] name: The name of the tunnel.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at 
               provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_code: Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
               SERVER sessions and is a required field for CLIENT sessions.
        :param pulumi.Input[str] pre_shared_key: The key that is used for authenticating the 
               connection. Required for `SERVER` mode sessions.
        :param pulumi.Input[str] remote_endpoint_ip: The IP address of the remote endpoint, which 
               corresponds to the device on the remote site terminating the VPN tunnel.
        :param pulumi.Input[str] session_mode: Mode of the tunnel session (SERVER or CLIENT).
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs', 'NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgsDict']]]] stretched_networks: One or more stretched networks for the tunnel. 
               See `stretched_network` for more detail.
        :param pulumi.Input[str] tunnel_interface: The network CIDR block over which the session 
               interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
               Director will attempt to automatically allocate a tunnel interface.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayL2VpnTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegatewayL2VpnTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayL2VpnTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayL2VpnTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_initiation_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_code: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 remote_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 session_mode: Optional[pulumi.Input[str]] = None,
                 stretched_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs', 'NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgsDict']]]]] = None,
                 tunnel_interface: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayL2VpnTunnelArgs.__new__(NsxtEdgegatewayL2VpnTunnelArgs)

            __props__.__dict__["connector_initiation_mode"] = connector_initiation_mode
            __props__.__dict__["description"] = description
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["enabled"] = enabled
            if local_endpoint_ip is None and not opts.urn:
                raise TypeError("Missing required property 'local_endpoint_ip'")
            __props__.__dict__["local_endpoint_ip"] = local_endpoint_ip
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["peer_code"] = peer_code
            __props__.__dict__["pre_shared_key"] = pre_shared_key
            if remote_endpoint_ip is None and not opts.urn:
                raise TypeError("Missing required property 'remote_endpoint_ip'")
            __props__.__dict__["remote_endpoint_ip"] = remote_endpoint_ip
            if session_mode is None and not opts.urn:
                raise TypeError("Missing required property 'session_mode'")
            __props__.__dict__["session_mode"] = session_mode
            __props__.__dict__["stretched_networks"] = stretched_networks
            __props__.__dict__["tunnel_interface"] = tunnel_interface
        super(NsxtEdgegatewayL2VpnTunnel, __self__).__init__(
            'vcd:index/nsxtEdgegatewayL2VpnTunnel:NsxtEdgegatewayL2VpnTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_initiation_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            local_endpoint_ip: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            peer_code: Optional[pulumi.Input[str]] = None,
            pre_shared_key: Optional[pulumi.Input[str]] = None,
            remote_endpoint_ip: Optional[pulumi.Input[str]] = None,
            session_mode: Optional[pulumi.Input[str]] = None,
            stretched_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs', 'NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgsDict']]]]] = None,
            tunnel_interface: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegatewayL2VpnTunnel':
        """
        Get an existing NsxtEdgegatewayL2VpnTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connector_initiation_mode: Mode in which the connection is formed. 
               Required for `SERVER` mode sessions. One of:
               * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
               incoming tunnel setup requests from the peer gateway.
               * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
               requests, it shall not initiate the tunnel setup.
               * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
               first packet matching the policy rule is received, and will also respond to
               incoming initiation requests.
        :param pulumi.Input[str] description: The description of the tunnel.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
               Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: State of the `SERVER` mode session, always set to `true` for `CLIENT` 
               mode sessions. Default is `true`.
        :param pulumi.Input[str] local_endpoint_ip: The IP address corresponding to the Edge 
               Gateway the tunnel is being configured on. The IP must be sub-allocated
               on the Edge Gateway.
        :param pulumi.Input[str] name: The name of the tunnel.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at 
               provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_code: Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
               SERVER sessions and is a required field for CLIENT sessions.
        :param pulumi.Input[str] pre_shared_key: The key that is used for authenticating the 
               connection. Required for `SERVER` mode sessions.
        :param pulumi.Input[str] remote_endpoint_ip: The IP address of the remote endpoint, which 
               corresponds to the device on the remote site terminating the VPN tunnel.
        :param pulumi.Input[str] session_mode: Mode of the tunnel session (SERVER or CLIENT).
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgs', 'NsxtEdgegatewayL2VpnTunnelStretchedNetworkArgsDict']]]] stretched_networks: One or more stretched networks for the tunnel. 
               See `stretched_network` for more detail.
        :param pulumi.Input[str] tunnel_interface: The network CIDR block over which the session 
               interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
               Director will attempt to automatically allocate a tunnel interface.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayL2VpnTunnelState.__new__(_NsxtEdgegatewayL2VpnTunnelState)

        __props__.__dict__["connector_initiation_mode"] = connector_initiation_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["local_endpoint_ip"] = local_endpoint_ip
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["peer_code"] = peer_code
        __props__.__dict__["pre_shared_key"] = pre_shared_key
        __props__.__dict__["remote_endpoint_ip"] = remote_endpoint_ip
        __props__.__dict__["session_mode"] = session_mode
        __props__.__dict__["stretched_networks"] = stretched_networks
        __props__.__dict__["tunnel_interface"] = tunnel_interface
        return NsxtEdgegatewayL2VpnTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectorInitiationMode")
    def connector_initiation_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Mode in which the connection is formed. 
        Required for `SERVER` mode sessions. One of:
        * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
        incoming tunnel setup requests from the peer gateway.
        * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
        requests, it shall not initiate the tunnel setup.
        * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
        first packet matching the policy rule is received, and will also respond to
        incoming initiation requests.
        """
        return pulumi.get(self, "connector_initiation_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the tunnel.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        The ID of the Edge Gateway (NSX-T only). 
        Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        State of the `SERVER` mode session, always set to `true` for `CLIENT` 
        mode sessions. Default is `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="localEndpointIp")
    def local_endpoint_ip(self) -> pulumi.Output[str]:
        """
        The IP address corresponding to the Edge 
        Gateway the tunnel is being configured on. The IP must be sub-allocated
        on the Edge Gateway.
        """
        return pulumi.get(self, "local_endpoint_ip")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the tunnel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at 
        provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="peerCode")
    def peer_code(self) -> pulumi.Output[str]:
        """
        Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
        SERVER sessions and is a required field for CLIENT sessions.
        """
        return pulumi.get(self, "peer_code")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> pulumi.Output[Optional[str]]:
        """
        The key that is used for authenticating the 
        connection. Required for `SERVER` mode sessions.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="remoteEndpointIp")
    def remote_endpoint_ip(self) -> pulumi.Output[str]:
        """
        The IP address of the remote endpoint, which 
        corresponds to the device on the remote site terminating the VPN tunnel.
        """
        return pulumi.get(self, "remote_endpoint_ip")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> pulumi.Output[str]:
        """
        Mode of the tunnel session (SERVER or CLIENT).
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="stretchedNetworks")
    def stretched_networks(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtEdgegatewayL2VpnTunnelStretchedNetwork']]]:
        """
        One or more stretched networks for the tunnel. 
        See `stretched_network` for more detail.
        """
        return pulumi.get(self, "stretched_networks")

    @property
    @pulumi.getter(name="tunnelInterface")
    def tunnel_interface(self) -> pulumi.Output[str]:
        """
        The network CIDR block over which the session 
        interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
        Director will attempt to automatically allocate a tunnel interface.
        """
        return pulumi.get(self, "tunnel_interface")

