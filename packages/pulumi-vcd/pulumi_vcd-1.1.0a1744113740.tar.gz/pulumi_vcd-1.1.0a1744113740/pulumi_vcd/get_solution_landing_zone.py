# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSolutionLandingZoneResult',
    'AwaitableGetSolutionLandingZoneResult',
    'get_solution_landing_zone',
    'get_solution_landing_zone_output',
]

@pulumi.output_type
class GetSolutionLandingZoneResult:
    """
    A collection of values returned by getSolutionLandingZone.
    """
    def __init__(__self__, catalogs=None, id=None, org=None, state=None, vdcs=None):
        if catalogs and not isinstance(catalogs, list):
            raise TypeError("Expected argument 'catalogs' to be a list")
        pulumi.set(__self__, "catalogs", catalogs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if vdcs and not isinstance(vdcs, list):
            raise TypeError("Expected argument 'vdcs' to be a list")
        pulumi.set(__self__, "vdcs", vdcs)

    @property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetSolutionLandingZoneCatalogResult']:
        return pulumi.get(self, "catalogs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def vdcs(self) -> Sequence['outputs.GetSolutionLandingZoneVdcResult']:
        return pulumi.get(self, "vdcs")


class AwaitableGetSolutionLandingZoneResult(GetSolutionLandingZoneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSolutionLandingZoneResult(
            catalogs=self.catalogs,
            id=self.id,
            org=self.org,
            state=self.state,
            vdcs=self.vdcs)


def get_solution_landing_zone(org: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSolutionLandingZoneResult:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read VCD Solution Add-on Landing Zone.

    > Only `System Administrator` can read this configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    slz = vcd.get_solution_landing_zone()
    ```
    """
    __args__ = dict()
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSolutionLandingZone:getSolutionLandingZone', __args__, opts=opts, typ=GetSolutionLandingZoneResult).value

    return AwaitableGetSolutionLandingZoneResult(
        catalogs=pulumi.get(__ret__, 'catalogs'),
        id=pulumi.get(__ret__, 'id'),
        org=pulumi.get(__ret__, 'org'),
        state=pulumi.get(__ret__, 'state'),
        vdcs=pulumi.get(__ret__, 'vdcs'))
def get_solution_landing_zone_output(org: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSolutionLandingZoneResult]:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read VCD Solution Add-on Landing Zone.

    > Only `System Administrator` can read this configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    slz = vcd.get_solution_landing_zone()
    ```
    """
    __args__ = dict()
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getSolutionLandingZone:getSolutionLandingZone', __args__, opts=opts, typ=GetSolutionLandingZoneResult)
    return __ret__.apply(lambda __response__: GetSolutionLandingZoneResult(
        catalogs=pulumi.get(__response__, 'catalogs'),
        id=pulumi.get(__response__, 'id'),
        org=pulumi.get(__response__, 'org'),
        state=pulumi.get(__response__, 'state'),
        vdcs=pulumi.get(__response__, 'vdcs')))
