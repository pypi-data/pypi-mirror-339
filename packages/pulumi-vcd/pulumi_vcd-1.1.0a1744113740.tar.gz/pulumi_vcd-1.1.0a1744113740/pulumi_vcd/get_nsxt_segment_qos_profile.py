# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtSegmentQosProfileResult',
    'AwaitableGetNsxtSegmentQosProfileResult',
    'get_nsxt_segment_qos_profile',
    'get_nsxt_segment_qos_profile_output',
]

@pulumi.output_type
class GetNsxtSegmentQosProfileResult:
    """
    A collection of values returned by getNsxtSegmentQosProfile.
    """
    def __init__(__self__, class_of_service=None, description=None, dscp_priority=None, dscp_trust_mode=None, egress_rate_limiter_avg_bandwidth=None, egress_rate_limiter_burst_size=None, egress_rate_limiter_peak_bandwidth=None, id=None, ingress_broadcast_rate_limiter_avg_bandwidth=None, ingress_broadcast_rate_limiter_burst_size=None, ingress_broadcast_rate_limiter_peak_bandwidth=None, ingress_rate_limiter_avg_bandwidth=None, ingress_rate_limiter_burst_size=None, ingress_rate_limiter_peak_bandwidth=None, name=None, nsxt_manager_id=None, vdc_group_id=None, vdc_id=None):
        if class_of_service and not isinstance(class_of_service, int):
            raise TypeError("Expected argument 'class_of_service' to be a int")
        pulumi.set(__self__, "class_of_service", class_of_service)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dscp_priority and not isinstance(dscp_priority, int):
            raise TypeError("Expected argument 'dscp_priority' to be a int")
        pulumi.set(__self__, "dscp_priority", dscp_priority)
        if dscp_trust_mode and not isinstance(dscp_trust_mode, str):
            raise TypeError("Expected argument 'dscp_trust_mode' to be a str")
        pulumi.set(__self__, "dscp_trust_mode", dscp_trust_mode)
        if egress_rate_limiter_avg_bandwidth and not isinstance(egress_rate_limiter_avg_bandwidth, int):
            raise TypeError("Expected argument 'egress_rate_limiter_avg_bandwidth' to be a int")
        pulumi.set(__self__, "egress_rate_limiter_avg_bandwidth", egress_rate_limiter_avg_bandwidth)
        if egress_rate_limiter_burst_size and not isinstance(egress_rate_limiter_burst_size, int):
            raise TypeError("Expected argument 'egress_rate_limiter_burst_size' to be a int")
        pulumi.set(__self__, "egress_rate_limiter_burst_size", egress_rate_limiter_burst_size)
        if egress_rate_limiter_peak_bandwidth and not isinstance(egress_rate_limiter_peak_bandwidth, int):
            raise TypeError("Expected argument 'egress_rate_limiter_peak_bandwidth' to be a int")
        pulumi.set(__self__, "egress_rate_limiter_peak_bandwidth", egress_rate_limiter_peak_bandwidth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_broadcast_rate_limiter_avg_bandwidth and not isinstance(ingress_broadcast_rate_limiter_avg_bandwidth, int):
            raise TypeError("Expected argument 'ingress_broadcast_rate_limiter_avg_bandwidth' to be a int")
        pulumi.set(__self__, "ingress_broadcast_rate_limiter_avg_bandwidth", ingress_broadcast_rate_limiter_avg_bandwidth)
        if ingress_broadcast_rate_limiter_burst_size and not isinstance(ingress_broadcast_rate_limiter_burst_size, int):
            raise TypeError("Expected argument 'ingress_broadcast_rate_limiter_burst_size' to be a int")
        pulumi.set(__self__, "ingress_broadcast_rate_limiter_burst_size", ingress_broadcast_rate_limiter_burst_size)
        if ingress_broadcast_rate_limiter_peak_bandwidth and not isinstance(ingress_broadcast_rate_limiter_peak_bandwidth, int):
            raise TypeError("Expected argument 'ingress_broadcast_rate_limiter_peak_bandwidth' to be a int")
        pulumi.set(__self__, "ingress_broadcast_rate_limiter_peak_bandwidth", ingress_broadcast_rate_limiter_peak_bandwidth)
        if ingress_rate_limiter_avg_bandwidth and not isinstance(ingress_rate_limiter_avg_bandwidth, int):
            raise TypeError("Expected argument 'ingress_rate_limiter_avg_bandwidth' to be a int")
        pulumi.set(__self__, "ingress_rate_limiter_avg_bandwidth", ingress_rate_limiter_avg_bandwidth)
        if ingress_rate_limiter_burst_size and not isinstance(ingress_rate_limiter_burst_size, int):
            raise TypeError("Expected argument 'ingress_rate_limiter_burst_size' to be a int")
        pulumi.set(__self__, "ingress_rate_limiter_burst_size", ingress_rate_limiter_burst_size)
        if ingress_rate_limiter_peak_bandwidth and not isinstance(ingress_rate_limiter_peak_bandwidth, int):
            raise TypeError("Expected argument 'ingress_rate_limiter_peak_bandwidth' to be a int")
        pulumi.set(__self__, "ingress_rate_limiter_peak_bandwidth", ingress_rate_limiter_peak_bandwidth)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter(name="classOfService")
    def class_of_service(self) -> int:
        """
        Class of service groups similar types of traffic in the network and each type
        of traffic is treated as a class with its own level of service priority. The lower priority
        traffic is slowed down or in some cases dropped to provide better throughput for higher priority
        traffic.
        """
        return pulumi.get(self, "class_of_service")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of QoS Profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dscpPriority")
    def dscp_priority(self) -> int:
        """
        A Differentiated Services Code Point (DSCP) priority
        Profile.
        """
        return pulumi.get(self, "dscp_priority")

    @property
    @pulumi.getter(name="dscpTrustMode")
    def dscp_trust_mode(self) -> str:
        """
        A Differentiated Services Code Point (DSCP) trust mode. Values are below:
        * `TRUSTED` - With Trusted mode the inner header DSCP value is applied to the outer IP header for
        IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.
        * `UNTRUSTED` - Untrusted mode is supported on overlay-based and VLAN-based logical port.
        """
        return pulumi.get(self, "dscp_trust_mode")

    @property
    @pulumi.getter(name="egressRateLimiterAvgBandwidth")
    def egress_rate_limiter_avg_bandwidth(self) -> int:
        """
        Average egress bandwidth in Mb/s.
        """
        return pulumi.get(self, "egress_rate_limiter_avg_bandwidth")

    @property
    @pulumi.getter(name="egressRateLimiterBurstSize")
    def egress_rate_limiter_burst_size(self) -> int:
        """
        Egress burst size in bytes.
        """
        return pulumi.get(self, "egress_rate_limiter_burst_size")

    @property
    @pulumi.getter(name="egressRateLimiterPeakBandwidth")
    def egress_rate_limiter_peak_bandwidth(self) -> int:
        """
        Peak egress bandwidth in Mb/s.
        """
        return pulumi.get(self, "egress_rate_limiter_peak_bandwidth")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressBroadcastRateLimiterAvgBandwidth")
    def ingress_broadcast_rate_limiter_avg_bandwidth(self) -> int:
        """
        Average ingress broadcast bandwidth in Mb/s.
        """
        return pulumi.get(self, "ingress_broadcast_rate_limiter_avg_bandwidth")

    @property
    @pulumi.getter(name="ingressBroadcastRateLimiterBurstSize")
    def ingress_broadcast_rate_limiter_burst_size(self) -> int:
        """
        Ingress broadcast burst size in bytes.
        """
        return pulumi.get(self, "ingress_broadcast_rate_limiter_burst_size")

    @property
    @pulumi.getter(name="ingressBroadcastRateLimiterPeakBandwidth")
    def ingress_broadcast_rate_limiter_peak_bandwidth(self) -> int:
        """
        Peak ingress broadcast bandwidth in Mb/s.
        """
        return pulumi.get(self, "ingress_broadcast_rate_limiter_peak_bandwidth")

    @property
    @pulumi.getter(name="ingressRateLimiterAvgBandwidth")
    def ingress_rate_limiter_avg_bandwidth(self) -> int:
        """
        Average ingress bandwidth in Mb/s.
        """
        return pulumi.get(self, "ingress_rate_limiter_avg_bandwidth")

    @property
    @pulumi.getter(name="ingressRateLimiterBurstSize")
    def ingress_rate_limiter_burst_size(self) -> int:
        """
        Ingress burst size in bytes.
        """
        return pulumi.get(self, "ingress_rate_limiter_burst_size")

    @property
    @pulumi.getter(name="ingressRateLimiterPeakBandwidth")
    def ingress_rate_limiter_peak_bandwidth(self) -> int:
        """
        Peak ingress broadcast bandwidth in Mb/s.
        """
        return pulumi.get(self, "ingress_rate_limiter_peak_bandwidth")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtSegmentQosProfileResult(GetNsxtSegmentQosProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtSegmentQosProfileResult(
            class_of_service=self.class_of_service,
            description=self.description,
            dscp_priority=self.dscp_priority,
            dscp_trust_mode=self.dscp_trust_mode,
            egress_rate_limiter_avg_bandwidth=self.egress_rate_limiter_avg_bandwidth,
            egress_rate_limiter_burst_size=self.egress_rate_limiter_burst_size,
            egress_rate_limiter_peak_bandwidth=self.egress_rate_limiter_peak_bandwidth,
            id=self.id,
            ingress_broadcast_rate_limiter_avg_bandwidth=self.ingress_broadcast_rate_limiter_avg_bandwidth,
            ingress_broadcast_rate_limiter_burst_size=self.ingress_broadcast_rate_limiter_burst_size,
            ingress_broadcast_rate_limiter_peak_bandwidth=self.ingress_broadcast_rate_limiter_peak_bandwidth,
            ingress_rate_limiter_avg_bandwidth=self.ingress_rate_limiter_avg_bandwidth,
            ingress_rate_limiter_burst_size=self.ingress_rate_limiter_burst_size,
            ingress_rate_limiter_peak_bandwidth=self.ingress_rate_limiter_peak_bandwidth,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_segment_qos_profile(name: Optional[str] = None,
                                 nsxt_manager_id: Optional[str] = None,
                                 vdc_group_id: Optional[str] = None,
                                 vdc_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtSegmentQosProfileResult:
    """
    Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### QoS Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_qos_profile(name="qos-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile', __args__, opts=opts, typ=GetNsxtSegmentQosProfileResult).value

    return AwaitableGetNsxtSegmentQosProfileResult(
        class_of_service=pulumi.get(__ret__, 'class_of_service'),
        description=pulumi.get(__ret__, 'description'),
        dscp_priority=pulumi.get(__ret__, 'dscp_priority'),
        dscp_trust_mode=pulumi.get(__ret__, 'dscp_trust_mode'),
        egress_rate_limiter_avg_bandwidth=pulumi.get(__ret__, 'egress_rate_limiter_avg_bandwidth'),
        egress_rate_limiter_burst_size=pulumi.get(__ret__, 'egress_rate_limiter_burst_size'),
        egress_rate_limiter_peak_bandwidth=pulumi.get(__ret__, 'egress_rate_limiter_peak_bandwidth'),
        id=pulumi.get(__ret__, 'id'),
        ingress_broadcast_rate_limiter_avg_bandwidth=pulumi.get(__ret__, 'ingress_broadcast_rate_limiter_avg_bandwidth'),
        ingress_broadcast_rate_limiter_burst_size=pulumi.get(__ret__, 'ingress_broadcast_rate_limiter_burst_size'),
        ingress_broadcast_rate_limiter_peak_bandwidth=pulumi.get(__ret__, 'ingress_broadcast_rate_limiter_peak_bandwidth'),
        ingress_rate_limiter_avg_bandwidth=pulumi.get(__ret__, 'ingress_rate_limiter_avg_bandwidth'),
        ingress_rate_limiter_burst_size=pulumi.get(__ret__, 'ingress_rate_limiter_burst_size'),
        ingress_rate_limiter_peak_bandwidth=pulumi.get(__ret__, 'ingress_rate_limiter_peak_bandwidth'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxt_segment_qos_profile_output(name: Optional[pulumi.Input[str]] = None,
                                        nsxt_manager_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtSegmentQosProfileResult]:
    """
    Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### QoS Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_qos_profile(name="qos-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile', __args__, opts=opts, typ=GetNsxtSegmentQosProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtSegmentQosProfileResult(
        class_of_service=pulumi.get(__response__, 'class_of_service'),
        description=pulumi.get(__response__, 'description'),
        dscp_priority=pulumi.get(__response__, 'dscp_priority'),
        dscp_trust_mode=pulumi.get(__response__, 'dscp_trust_mode'),
        egress_rate_limiter_avg_bandwidth=pulumi.get(__response__, 'egress_rate_limiter_avg_bandwidth'),
        egress_rate_limiter_burst_size=pulumi.get(__response__, 'egress_rate_limiter_burst_size'),
        egress_rate_limiter_peak_bandwidth=pulumi.get(__response__, 'egress_rate_limiter_peak_bandwidth'),
        id=pulumi.get(__response__, 'id'),
        ingress_broadcast_rate_limiter_avg_bandwidth=pulumi.get(__response__, 'ingress_broadcast_rate_limiter_avg_bandwidth'),
        ingress_broadcast_rate_limiter_burst_size=pulumi.get(__response__, 'ingress_broadcast_rate_limiter_burst_size'),
        ingress_broadcast_rate_limiter_peak_bandwidth=pulumi.get(__response__, 'ingress_broadcast_rate_limiter_peak_bandwidth'),
        ingress_rate_limiter_avg_bandwidth=pulumi.get(__response__, 'ingress_rate_limiter_avg_bandwidth'),
        ingress_rate_limiter_burst_size=pulumi.get(__response__, 'ingress_rate_limiter_burst_size'),
        ingress_rate_limiter_peak_bandwidth=pulumi.get(__response__, 'ingress_rate_limiter_peak_bandwidth'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
