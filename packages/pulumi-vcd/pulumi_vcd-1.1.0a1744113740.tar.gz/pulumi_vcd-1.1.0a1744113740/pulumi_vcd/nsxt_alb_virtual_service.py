# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtAlbVirtualServiceArgs', 'NsxtAlbVirtualService']

@pulumi.input_type
class NsxtAlbVirtualServiceArgs:
    def __init__(__self__, *,
                 application_profile_type: pulumi.Input[str],
                 edge_gateway_id: pulumi.Input[str],
                 pool_id: pulumi.Input[str],
                 service_engine_group_id: pulumi.Input[str],
                 virtual_ip_address: pulumi.Input[str],
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 is_transparent_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 service_ports: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtAlbVirtualService resource.
        :param pulumi.Input[str] application_profile_type: One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[str] pool_id: A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
               source
        :param pulumi.Input[str] service_engine_group_id: A reference to ALB Service Engine Group. Can be looked up using
               `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        :param pulumi.Input[str] virtual_ip_address: IP Address for the service to listen on.
        :param pulumi.Input[str] ca_certificate_id: ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
               or `L4_TLS`
        :param pulumi.Input[str] description: An optional description ALB Virtual Service
        :param pulumi.Input[bool] enabled: Virtual Service is enabled or disabled (default true)
        :param pulumi.Input[str] ipv6_virtual_ip_address: IPv6 Address for the service to listen on.
        :param pulumi.Input[bool] is_transparent_mode_enabled: Preserves Client IP on a
               Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
               * ALB Pool membership must be configured in Group mode
               * Backing Avi Service Engine Group must be in Legacy Active Standby mode
               
               <a id="service-port-block"></a>
        :param pulumi.Input[str] name: A name for ALB Virtual Service
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]] service_ports: A block to define port, port range and traffic type. Multiple can be used. See
               service_port and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "application_profile_type", application_profile_type)
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "pool_id", pool_id)
        pulumi.set(__self__, "service_engine_group_id", service_engine_group_id)
        pulumi.set(__self__, "virtual_ip_address", virtual_ip_address)
        if ca_certificate_id is not None:
            pulumi.set(__self__, "ca_certificate_id", ca_certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipv6_virtual_ip_address is not None:
            pulumi.set(__self__, "ipv6_virtual_ip_address", ipv6_virtual_ip_address)
        if is_transparent_mode_enabled is not None:
            pulumi.set(__self__, "is_transparent_mode_enabled", is_transparent_mode_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if service_ports is not None:
            pulumi.set(__self__, "service_ports", service_ports)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="applicationProfileType")
    def application_profile_type(self) -> pulumi.Input[str]:
        """
        One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        """
        return pulumi.get(self, "application_profile_type")

    @application_profile_type.setter
    def application_profile_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_profile_type", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Input[str]:
        """
        A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
        source
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pool_id", value)

    @property
    @pulumi.getter(name="serviceEngineGroupId")
    def service_engine_group_id(self) -> pulumi.Input[str]:
        """
        A reference to ALB Service Engine Group. Can be looked up using
        `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        """
        return pulumi.get(self, "service_engine_group_id")

    @service_engine_group_id.setter
    def service_engine_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_engine_group_id", value)

    @property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> pulumi.Input[str]:
        """
        IP Address for the service to listen on.
        """
        return pulumi.get(self, "virtual_ip_address")

    @virtual_ip_address.setter
    def virtual_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_ip_address", value)

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
        or `L4_TLS`
        """
        return pulumi.get(self, "ca_certificate_id")

    @ca_certificate_id.setter
    def ca_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Virtual Service
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Virtual Service is enabled or disabled (default true)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipv6VirtualIpAddress")
    def ipv6_virtual_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address for the service to listen on.
        """
        return pulumi.get(self, "ipv6_virtual_ip_address")

    @ipv6_virtual_ip_address.setter
    def ipv6_virtual_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_virtual_ip_address", value)

    @property
    @pulumi.getter(name="isTransparentModeEnabled")
    def is_transparent_mode_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Preserves Client IP on a
        Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
        * ALB Pool membership must be configured in Group mode
        * Backing Avi Service Engine Group must be in Legacy Active Standby mode

        <a id="service-port-block"></a>
        """
        return pulumi.get(self, "is_transparent_mode_enabled")

    @is_transparent_mode_enabled.setter
    def is_transparent_mode_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transparent_mode_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Virtual Service
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="servicePorts")
    def service_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]]:
        """
        A block to define port, port range and traffic type. Multiple can be used. See
        service_port and example for usage details.
        """
        return pulumi.get(self, "service_ports")

    @service_ports.setter
    def service_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]]):
        pulumi.set(self, "service_ports", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtAlbVirtualServiceState:
    def __init__(__self__, *,
                 application_profile_type: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 is_transparent_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 service_engine_group_id: Optional[pulumi.Input[str]] = None,
                 service_ports: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAlbVirtualService resources.
        :param pulumi.Input[str] application_profile_type: One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        :param pulumi.Input[str] ca_certificate_id: ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
               or `L4_TLS`
        :param pulumi.Input[str] description: An optional description ALB Virtual Service
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Virtual Service is enabled or disabled (default true)
        :param pulumi.Input[str] ipv6_virtual_ip_address: IPv6 Address for the service to listen on.
        :param pulumi.Input[bool] is_transparent_mode_enabled: Preserves Client IP on a
               Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
               * ALB Pool membership must be configured in Group mode
               * Backing Avi Service Engine Group must be in Legacy Active Standby mode
               
               <a id="service-port-block"></a>
        :param pulumi.Input[str] name: A name for ALB Virtual Service
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pool_id: A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
               source
        :param pulumi.Input[str] service_engine_group_id: A reference to ALB Service Engine Group. Can be looked up using
               `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]] service_ports: A block to define port, port range and traffic type. Multiple can be used. See
               service_port and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] virtual_ip_address: IP Address for the service to listen on.
        """
        if application_profile_type is not None:
            pulumi.set(__self__, "application_profile_type", application_profile_type)
        if ca_certificate_id is not None:
            pulumi.set(__self__, "ca_certificate_id", ca_certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipv6_virtual_ip_address is not None:
            pulumi.set(__self__, "ipv6_virtual_ip_address", ipv6_virtual_ip_address)
        if is_transparent_mode_enabled is not None:
            pulumi.set(__self__, "is_transparent_mode_enabled", is_transparent_mode_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if service_engine_group_id is not None:
            pulumi.set(__self__, "service_engine_group_id", service_engine_group_id)
        if service_ports is not None:
            pulumi.set(__self__, "service_ports", service_ports)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if virtual_ip_address is not None:
            pulumi.set(__self__, "virtual_ip_address", virtual_ip_address)

    @property
    @pulumi.getter(name="applicationProfileType")
    def application_profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        """
        return pulumi.get(self, "application_profile_type")

    @application_profile_type.setter
    def application_profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_profile_type", value)

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
        or `L4_TLS`
        """
        return pulumi.get(self, "ca_certificate_id")

    @ca_certificate_id.setter
    def ca_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Virtual Service
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Virtual Service is enabled or disabled (default true)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipv6VirtualIpAddress")
    def ipv6_virtual_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address for the service to listen on.
        """
        return pulumi.get(self, "ipv6_virtual_ip_address")

    @ipv6_virtual_ip_address.setter
    def ipv6_virtual_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_virtual_ip_address", value)

    @property
    @pulumi.getter(name="isTransparentModeEnabled")
    def is_transparent_mode_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Preserves Client IP on a
        Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
        * ALB Pool membership must be configured in Group mode
        * Backing Avi Service Engine Group must be in Legacy Active Standby mode

        <a id="service-port-block"></a>
        """
        return pulumi.get(self, "is_transparent_mode_enabled")

    @is_transparent_mode_enabled.setter
    def is_transparent_mode_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transparent_mode_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Virtual Service
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
        source
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool_id", value)

    @property
    @pulumi.getter(name="serviceEngineGroupId")
    def service_engine_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to ALB Service Engine Group. Can be looked up using
        `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        """
        return pulumi.get(self, "service_engine_group_id")

    @service_engine_group_id.setter
    def service_engine_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_engine_group_id", value)

    @property
    @pulumi.getter(name="servicePorts")
    def service_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]]:
        """
        A block to define port, port range and traffic type. Multiple can be used. See
        service_port and example for usage details.
        """
        return pulumi.get(self, "service_ports")

    @service_ports.setter
    def service_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbVirtualServiceServicePortArgs']]]]):
        pulumi.set(self, "service_ports", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address for the service to listen on.
        """
        return pulumi.get(self, "virtual_ip_address")

    @virtual_ip_address.setter
    def virtual_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_ip_address", value)


class NsxtAlbVirtualService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_profile_type: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 is_transparent_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 service_engine_group_id: Optional[pulumi.Input[str]] = None,
                 service_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceServicePortArgs', 'NsxtAlbVirtualServiceServicePortArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAlbVirtualService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_profile_type: One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        :param pulumi.Input[str] ca_certificate_id: ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
               or `L4_TLS`
        :param pulumi.Input[str] description: An optional description ALB Virtual Service
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Virtual Service is enabled or disabled (default true)
        :param pulumi.Input[str] ipv6_virtual_ip_address: IPv6 Address for the service to listen on.
        :param pulumi.Input[bool] is_transparent_mode_enabled: Preserves Client IP on a
               Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
               * ALB Pool membership must be configured in Group mode
               * Backing Avi Service Engine Group must be in Legacy Active Standby mode
               
               <a id="service-port-block"></a>
        :param pulumi.Input[str] name: A name for ALB Virtual Service
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pool_id: A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
               source
        :param pulumi.Input[str] service_engine_group_id: A reference to ALB Service Engine Group. Can be looked up using
               `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceServicePortArgs', 'NsxtAlbVirtualServiceServicePortArgsDict']]]] service_ports: A block to define port, port range and traffic type. Multiple can be used. See
               service_port and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] virtual_ip_address: IP Address for the service to listen on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAlbVirtualServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAlbVirtualService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAlbVirtualServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAlbVirtualServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_profile_type: Optional[pulumi.Input[str]] = None,
                 ca_certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 is_transparent_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 service_engine_group_id: Optional[pulumi.Input[str]] = None,
                 service_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceServicePortArgs', 'NsxtAlbVirtualServiceServicePortArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAlbVirtualServiceArgs.__new__(NsxtAlbVirtualServiceArgs)

            if application_profile_type is None and not opts.urn:
                raise TypeError("Missing required property 'application_profile_type'")
            __props__.__dict__["application_profile_type"] = application_profile_type
            __props__.__dict__["ca_certificate_id"] = ca_certificate_id
            __props__.__dict__["description"] = description
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ipv6_virtual_ip_address"] = ipv6_virtual_ip_address
            __props__.__dict__["is_transparent_mode_enabled"] = is_transparent_mode_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'pool_id'")
            __props__.__dict__["pool_id"] = pool_id
            if service_engine_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_engine_group_id'")
            __props__.__dict__["service_engine_group_id"] = service_engine_group_id
            __props__.__dict__["service_ports"] = service_ports
            __props__.__dict__["vdc"] = vdc
            if virtual_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_ip_address'")
            __props__.__dict__["virtual_ip_address"] = virtual_ip_address
        super(NsxtAlbVirtualService, __self__).__init__(
            'vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_profile_type: Optional[pulumi.Input[str]] = None,
            ca_certificate_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ipv6_virtual_ip_address: Optional[pulumi.Input[str]] = None,
            is_transparent_mode_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            pool_id: Optional[pulumi.Input[str]] = None,
            service_engine_group_id: Optional[pulumi.Input[str]] = None,
            service_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceServicePortArgs', 'NsxtAlbVirtualServiceServicePortArgsDict']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            virtual_ip_address: Optional[pulumi.Input[str]] = None) -> 'NsxtAlbVirtualService':
        """
        Get an existing NsxtAlbVirtualService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_profile_type: One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        :param pulumi.Input[str] ca_certificate_id: ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
               or `L4_TLS`
        :param pulumi.Input[str] description: An optional description ALB Virtual Service
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Virtual Service is enabled or disabled (default true)
        :param pulumi.Input[str] ipv6_virtual_ip_address: IPv6 Address for the service to listen on.
        :param pulumi.Input[bool] is_transparent_mode_enabled: Preserves Client IP on a
               Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
               * ALB Pool membership must be configured in Group mode
               * Backing Avi Service Engine Group must be in Legacy Active Standby mode
               
               <a id="service-port-block"></a>
        :param pulumi.Input[str] name: A name for ALB Virtual Service
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] pool_id: A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
               source
        :param pulumi.Input[str] service_engine_group_id: A reference to ALB Service Engine Group. Can be looked up using
               `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbVirtualServiceServicePortArgs', 'NsxtAlbVirtualServiceServicePortArgsDict']]]] service_ports: A block to define port, port range and traffic type. Multiple can be used. See
               service_port and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] virtual_ip_address: IP Address for the service to listen on.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAlbVirtualServiceState.__new__(_NsxtAlbVirtualServiceState)

        __props__.__dict__["application_profile_type"] = application_profile_type
        __props__.__dict__["ca_certificate_id"] = ca_certificate_id
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ipv6_virtual_ip_address"] = ipv6_virtual_ip_address
        __props__.__dict__["is_transparent_mode_enabled"] = is_transparent_mode_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["service_engine_group_id"] = service_engine_group_id
        __props__.__dict__["service_ports"] = service_ports
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["virtual_ip_address"] = virtual_ip_address
        return NsxtAlbVirtualService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationProfileType")
    def application_profile_type(self) -> pulumi.Output[str]:
        """
        One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
        """
        return pulumi.get(self, "application_profile_type")

    @property
    @pulumi.getter(name="caCertificateId")
    def ca_certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID reference of CA certificate. Required when `application_profile_type` is `HTTPS`
        or `L4_TLS`
        """
        return pulumi.get(self, "ca_certificate_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description ALB Virtual Service
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Virtual Service is enabled or disabled (default true)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipv6VirtualIpAddress")
    def ipv6_virtual_ip_address(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 Address for the service to listen on.
        """
        return pulumi.get(self, "ipv6_virtual_ip_address")

    @property
    @pulumi.getter(name="isTransparentModeEnabled")
    def is_transparent_mode_enabled(self) -> pulumi.Output[bool]:
        """
        Preserves Client IP on a
        Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
        * ALB Pool membership must be configured in Group mode
        * Backing Avi Service Engine Group must be in Legacy Active Standby mode

        <a id="service-port-block"></a>
        """
        return pulumi.get(self, "is_transparent_mode_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for ALB Virtual Service
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[str]:
        """
        A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
        source
        """
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter(name="serviceEngineGroupId")
    def service_engine_group_id(self) -> pulumi.Output[str]:
        """
        A reference to ALB Service Engine Group. Can be looked up using
        `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
        """
        return pulumi.get(self, "service_engine_group_id")

    @property
    @pulumi.getter(name="servicePorts")
    def service_ports(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtAlbVirtualServiceServicePort']]]:
        """
        A block to define port, port range and traffic type. Multiple can be used. See
        service_port and example for usage details.
        """
        return pulumi.get(self, "service_ports")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> pulumi.Output[str]:
        """
        IP Address for the service to listen on.
        """
        return pulumi.get(self, "virtual_ip_address")

