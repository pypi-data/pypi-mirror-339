# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtAlbPoolArgs', 'NsxtAlbPool']

@pulumi.input_type
class NsxtAlbPoolArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ca_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cn_check_enabled: Optional[pulumi.Input[bool]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 graceful_timeout_period: Optional[pulumi.Input[int]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]] = None,
                 member_group_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 passive_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 persistence_profile: Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtAlbPool resource.
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[str] algorithm: Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
               contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
               `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificate_ids: A set of CA Certificates to be used when validating certificates presented by the
               pool members. Can be looked up using
               [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        :param pulumi.Input[bool] cn_check_enabled: Specifies whether to check the common name of the certificate presented by the pool
               member
        :param pulumi.Input[int] default_port: Default Port defines destination server port used by the traffic sent to the member
               (default `80`)
        :param pulumi.Input[str] description: An optional description ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: A set of domain names which will be used to verify the common names or subject alternative
               names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
               enabled
        :param pulumi.Input[bool] enabled: Boolean value if ALB Pool should be enabled (default `true`)
        :param pulumi.Input[int] graceful_timeout_period: Maximum time in minutes to gracefully disable pool member (default `1`). Special
               values are `0` (immediate) and `-1` (infinite)
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]] health_monitors: A block to define health monitor. Multiple can be used. See Health
               monitor and example for usage details.
               
               <a id="member-block"></a>
        :param pulumi.Input[str] member_group_id: A reference to NSX-T IP Set (`NsxtIpSet`).
               **Note** only one of `member`, `member_group_id` can be specified.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]] members: A block to define pool members. Multiple can be used. See
               Member and example for usage details. **Note** only one of `member`,
               `member_group_id` can be specified.
        :param pulumi.Input[str] name: A name for ALB Pool
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] passive_monitoring_enabled: defines if client traffic should be used to check if pool member is up or down
               (default `true`)
        :param pulumi.Input['NsxtAlbPoolPersistenceProfileArgs'] persistence_profile: Persistence profile will ensure that the same user sticks to the same server for a
               desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
               unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
               Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
               profile and example for usage details.
        :param pulumi.Input[bool] ssl_enabled: Enables SSL - Will be turned on automatically when CA certificates are used
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if ca_certificate_ids is not None:
            pulumi.set(__self__, "ca_certificate_ids", ca_certificate_ids)
        if cn_check_enabled is not None:
            pulumi.set(__self__, "cn_check_enabled", cn_check_enabled)
        if default_port is not None:
            pulumi.set(__self__, "default_port", default_port)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if graceful_timeout_period is not None:
            pulumi.set(__self__, "graceful_timeout_period", graceful_timeout_period)
        if health_monitors is not None:
            pulumi.set(__self__, "health_monitors", health_monitors)
        if member_group_id is not None:
            pulumi.set(__self__, "member_group_id", member_group_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if passive_monitoring_enabled is not None:
            pulumi.set(__self__, "passive_monitoring_enabled", passive_monitoring_enabled)
        if persistence_profile is not None:
            pulumi.set(__self__, "persistence_profile", persistence_profile)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
        contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
        `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="caCertificateIds")
    def ca_certificate_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of CA Certificates to be used when validating certificates presented by the
        pool members. Can be looked up using
        [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        """
        return pulumi.get(self, "ca_certificate_ids")

    @ca_certificate_ids.setter
    def ca_certificate_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_certificate_ids", value)

    @property
    @pulumi.getter(name="cnCheckEnabled")
    def cn_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to check the common name of the certificate presented by the pool
        member
        """
        return pulumi.get(self, "cn_check_enabled")

    @cn_check_enabled.setter
    def cn_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cn_check_enabled", value)

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> Optional[pulumi.Input[int]]:
        """
        Default Port defines destination server port used by the traffic sent to the member
        (default `80`)
        """
        return pulumi.get(self, "default_port")

    @default_port.setter
    def default_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_port", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of domain names which will be used to verify the common names or subject alternative
        names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
        enabled
        """
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value if ALB Pool should be enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="gracefulTimeoutPeriod")
    def graceful_timeout_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time in minutes to gracefully disable pool member (default `1`). Special
        values are `0` (immediate) and `-1` (infinite)
        """
        return pulumi.get(self, "graceful_timeout_period")

    @graceful_timeout_period.setter
    def graceful_timeout_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_timeout_period", value)

    @property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]]:
        """
        A block to define health monitor. Multiple can be used. See Health
        monitor and example for usage details.

        <a id="member-block"></a>
        """
        return pulumi.get(self, "health_monitors")

    @health_monitors.setter
    def health_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]]):
        pulumi.set(self, "health_monitors", value)

    @property
    @pulumi.getter(name="memberGroupId")
    def member_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to NSX-T IP Set (`NsxtIpSet`).
        **Note** only one of `member`, `member_group_id` can be specified.
        """
        return pulumi.get(self, "member_group_id")

    @member_group_id.setter
    def member_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_group_id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]]:
        """
        A block to define pool members. Multiple can be used. See
        Member and example for usage details. **Note** only one of `member`,
        `member_group_id` can be specified.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="passiveMonitoringEnabled")
    def passive_monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        defines if client traffic should be used to check if pool member is up or down
        (default `true`)
        """
        return pulumi.get(self, "passive_monitoring_enabled")

    @passive_monitoring_enabled.setter
    def passive_monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive_monitoring_enabled", value)

    @property
    @pulumi.getter(name="persistenceProfile")
    def persistence_profile(self) -> Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']]:
        """
        Persistence profile will ensure that the same user sticks to the same server for a
        desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
        unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
        Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
        profile and example for usage details.
        """
        return pulumi.get(self, "persistence_profile")

    @persistence_profile.setter
    def persistence_profile(self, value: Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']]):
        pulumi.set(self, "persistence_profile", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables SSL - Will be turned on automatically when CA certificates are used
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtAlbPoolState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 associated_virtual_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 associated_virtual_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ca_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cn_check_enabled: Optional[pulumi.Input[bool]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_member_count: Optional[pulumi.Input[int]] = None,
                 graceful_timeout_period: Optional[pulumi.Input[int]] = None,
                 health_message: Optional[pulumi.Input[str]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]] = None,
                 member_count: Optional[pulumi.Input[int]] = None,
                 member_group_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 passive_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 persistence_profile: Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 up_member_count: Optional[pulumi.Input[int]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAlbPool resources.
        :param pulumi.Input[str] algorithm: Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
               contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
               `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_virtual_service_ids: A set of associated Virtual Service IDs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_virtual_services: A set of associated Virtual Service names
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificate_ids: A set of CA Certificates to be used when validating certificates presented by the
               pool members. Can be looked up using
               [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        :param pulumi.Input[bool] cn_check_enabled: Specifies whether to check the common name of the certificate presented by the pool
               member
        :param pulumi.Input[int] default_port: Default Port defines destination server port used by the traffic sent to the member
               (default `80`)
        :param pulumi.Input[str] description: An optional description ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: A set of domain names which will be used to verify the common names or subject alternative
               names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
               enabled
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Boolean value if ALB Pool should be enabled (default `true`)
        :param pulumi.Input[int] enabled_member_count: Number of enabled members defined in the Pool
        :param pulumi.Input[int] graceful_timeout_period: Maximum time in minutes to gracefully disable pool member (default `1`). Special
               values are `0` (immediate) and `-1` (infinite)
        :param pulumi.Input[str] health_message: Health message of ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]] health_monitors: A block to define health monitor. Multiple can be used. See Health
               monitor and example for usage details.
               
               <a id="member-block"></a>
        :param pulumi.Input[int] member_count: Total number of members defined in the Pool
        :param pulumi.Input[str] member_group_id: A reference to NSX-T IP Set (`NsxtIpSet`).
               **Note** only one of `member`, `member_group_id` can be specified.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]] members: A block to define pool members. Multiple can be used. See
               Member and example for usage details. **Note** only one of `member`,
               `member_group_id` can be specified.
        :param pulumi.Input[str] name: A name for ALB Pool
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] passive_monitoring_enabled: defines if client traffic should be used to check if pool member is up or down
               (default `true`)
        :param pulumi.Input['NsxtAlbPoolPersistenceProfileArgs'] persistence_profile: Persistence profile will ensure that the same user sticks to the same server for a
               desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
               unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
               Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
               profile and example for usage details.
        :param pulumi.Input[bool] ssl_enabled: Enables SSL - Will be turned on automatically when CA certificates are used
        :param pulumi.Input[int] up_member_count: Number of members defined in the Pool that are accepting traffic
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if associated_virtual_service_ids is not None:
            pulumi.set(__self__, "associated_virtual_service_ids", associated_virtual_service_ids)
        if associated_virtual_services is not None:
            pulumi.set(__self__, "associated_virtual_services", associated_virtual_services)
        if ca_certificate_ids is not None:
            pulumi.set(__self__, "ca_certificate_ids", ca_certificate_ids)
        if cn_check_enabled is not None:
            pulumi.set(__self__, "cn_check_enabled", cn_check_enabled)
        if default_port is not None:
            pulumi.set(__self__, "default_port", default_port)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_member_count is not None:
            pulumi.set(__self__, "enabled_member_count", enabled_member_count)
        if graceful_timeout_period is not None:
            pulumi.set(__self__, "graceful_timeout_period", graceful_timeout_period)
        if health_message is not None:
            pulumi.set(__self__, "health_message", health_message)
        if health_monitors is not None:
            pulumi.set(__self__, "health_monitors", health_monitors)
        if member_count is not None:
            pulumi.set(__self__, "member_count", member_count)
        if member_group_id is not None:
            pulumi.set(__self__, "member_group_id", member_group_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if passive_monitoring_enabled is not None:
            pulumi.set(__self__, "passive_monitoring_enabled", passive_monitoring_enabled)
        if persistence_profile is not None:
            pulumi.set(__self__, "persistence_profile", persistence_profile)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if up_member_count is not None:
            pulumi.set(__self__, "up_member_count", up_member_count)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
        contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
        `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="associatedVirtualServiceIds")
    def associated_virtual_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of associated Virtual Service IDs
        """
        return pulumi.get(self, "associated_virtual_service_ids")

    @associated_virtual_service_ids.setter
    def associated_virtual_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "associated_virtual_service_ids", value)

    @property
    @pulumi.getter(name="associatedVirtualServices")
    def associated_virtual_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of associated Virtual Service names
        """
        return pulumi.get(self, "associated_virtual_services")

    @associated_virtual_services.setter
    def associated_virtual_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "associated_virtual_services", value)

    @property
    @pulumi.getter(name="caCertificateIds")
    def ca_certificate_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of CA Certificates to be used when validating certificates presented by the
        pool members. Can be looked up using
        [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        """
        return pulumi.get(self, "ca_certificate_ids")

    @ca_certificate_ids.setter
    def ca_certificate_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_certificate_ids", value)

    @property
    @pulumi.getter(name="cnCheckEnabled")
    def cn_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to check the common name of the certificate presented by the pool
        member
        """
        return pulumi.get(self, "cn_check_enabled")

    @cn_check_enabled.setter
    def cn_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cn_check_enabled", value)

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> Optional[pulumi.Input[int]]:
        """
        Default Port defines destination server port used by the traffic sent to the member
        (default `80`)
        """
        return pulumi.get(self, "default_port")

    @default_port.setter
    def default_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_port", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description ALB Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of domain names which will be used to verify the common names or subject alternative
        names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
        enabled
        """
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value if ALB Pool should be enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledMemberCount")
    def enabled_member_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of enabled members defined in the Pool
        """
        return pulumi.get(self, "enabled_member_count")

    @enabled_member_count.setter
    def enabled_member_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enabled_member_count", value)

    @property
    @pulumi.getter(name="gracefulTimeoutPeriod")
    def graceful_timeout_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time in minutes to gracefully disable pool member (default `1`). Special
        values are `0` (immediate) and `-1` (infinite)
        """
        return pulumi.get(self, "graceful_timeout_period")

    @graceful_timeout_period.setter
    def graceful_timeout_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_timeout_period", value)

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> Optional[pulumi.Input[str]]:
        """
        Health message of ALB Pool
        """
        return pulumi.get(self, "health_message")

    @health_message.setter
    def health_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_message", value)

    @property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]]:
        """
        A block to define health monitor. Multiple can be used. See Health
        monitor and example for usage details.

        <a id="member-block"></a>
        """
        return pulumi.get(self, "health_monitors")

    @health_monitors.setter
    def health_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolHealthMonitorArgs']]]]):
        pulumi.set(self, "health_monitors", value)

    @property
    @pulumi.getter(name="memberCount")
    def member_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of members defined in the Pool
        """
        return pulumi.get(self, "member_count")

    @member_count.setter
    def member_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_count", value)

    @property
    @pulumi.getter(name="memberGroupId")
    def member_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to NSX-T IP Set (`NsxtIpSet`).
        **Note** only one of `member`, `member_group_id` can be specified.
        """
        return pulumi.get(self, "member_group_id")

    @member_group_id.setter
    def member_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_group_id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]]:
        """
        A block to define pool members. Multiple can be used. See
        Member and example for usage details. **Note** only one of `member`,
        `member_group_id` can be specified.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAlbPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for ALB Pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="passiveMonitoringEnabled")
    def passive_monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        defines if client traffic should be used to check if pool member is up or down
        (default `true`)
        """
        return pulumi.get(self, "passive_monitoring_enabled")

    @passive_monitoring_enabled.setter
    def passive_monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive_monitoring_enabled", value)

    @property
    @pulumi.getter(name="persistenceProfile")
    def persistence_profile(self) -> Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']]:
        """
        Persistence profile will ensure that the same user sticks to the same server for a
        desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
        unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
        Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
        profile and example for usage details.
        """
        return pulumi.get(self, "persistence_profile")

    @persistence_profile.setter
    def persistence_profile(self, value: Optional[pulumi.Input['NsxtAlbPoolPersistenceProfileArgs']]):
        pulumi.set(self, "persistence_profile", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables SSL - Will be turned on automatically when CA certificates are used
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter(name="upMemberCount")
    def up_member_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of members defined in the Pool that are accepting traffic
        """
        return pulumi.get(self, "up_member_count")

    @up_member_count.setter
    def up_member_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up_member_count", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtAlbPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ca_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cn_check_enabled: Optional[pulumi.Input[bool]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 graceful_timeout_period: Optional[pulumi.Input[int]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolHealthMonitorArgs', 'NsxtAlbPoolHealthMonitorArgsDict']]]]] = None,
                 member_group_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolMemberArgs', 'NsxtAlbPoolMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 passive_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 persistence_profile: Optional[pulumi.Input[Union['NsxtAlbPoolPersistenceProfileArgs', 'NsxtAlbPoolPersistenceProfileArgsDict']]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAlbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
               contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
               `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificate_ids: A set of CA Certificates to be used when validating certificates presented by the
               pool members. Can be looked up using
               [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        :param pulumi.Input[bool] cn_check_enabled: Specifies whether to check the common name of the certificate presented by the pool
               member
        :param pulumi.Input[int] default_port: Default Port defines destination server port used by the traffic sent to the member
               (default `80`)
        :param pulumi.Input[str] description: An optional description ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: A set of domain names which will be used to verify the common names or subject alternative
               names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
               enabled
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Boolean value if ALB Pool should be enabled (default `true`)
        :param pulumi.Input[int] graceful_timeout_period: Maximum time in minutes to gracefully disable pool member (default `1`). Special
               values are `0` (immediate) and `-1` (infinite)
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolHealthMonitorArgs', 'NsxtAlbPoolHealthMonitorArgsDict']]]] health_monitors: A block to define health monitor. Multiple can be used. See Health
               monitor and example for usage details.
               
               <a id="member-block"></a>
        :param pulumi.Input[str] member_group_id: A reference to NSX-T IP Set (`NsxtIpSet`).
               **Note** only one of `member`, `member_group_id` can be specified.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolMemberArgs', 'NsxtAlbPoolMemberArgsDict']]]] members: A block to define pool members. Multiple can be used. See
               Member and example for usage details. **Note** only one of `member`,
               `member_group_id` can be specified.
        :param pulumi.Input[str] name: A name for ALB Pool
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] passive_monitoring_enabled: defines if client traffic should be used to check if pool member is up or down
               (default `true`)
        :param pulumi.Input[Union['NsxtAlbPoolPersistenceProfileArgs', 'NsxtAlbPoolPersistenceProfileArgsDict']] persistence_profile: Persistence profile will ensure that the same user sticks to the same server for a
               desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
               unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
               Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
               profile and example for usage details.
        :param pulumi.Input[bool] ssl_enabled: Enables SSL - Will be turned on automatically when CA certificates are used
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAlbPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAlbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAlbPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAlbPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ca_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cn_check_enabled: Optional[pulumi.Input[bool]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 graceful_timeout_period: Optional[pulumi.Input[int]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolHealthMonitorArgs', 'NsxtAlbPoolHealthMonitorArgsDict']]]]] = None,
                 member_group_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolMemberArgs', 'NsxtAlbPoolMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 passive_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 persistence_profile: Optional[pulumi.Input[Union['NsxtAlbPoolPersistenceProfileArgs', 'NsxtAlbPoolPersistenceProfileArgsDict']]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAlbPoolArgs.__new__(NsxtAlbPoolArgs)

            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["ca_certificate_ids"] = ca_certificate_ids
            __props__.__dict__["cn_check_enabled"] = cn_check_enabled
            __props__.__dict__["default_port"] = default_port
            __props__.__dict__["description"] = description
            __props__.__dict__["domain_names"] = domain_names
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["graceful_timeout_period"] = graceful_timeout_period
            __props__.__dict__["health_monitors"] = health_monitors
            __props__.__dict__["member_group_id"] = member_group_id
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["passive_monitoring_enabled"] = passive_monitoring_enabled
            __props__.__dict__["persistence_profile"] = persistence_profile
            __props__.__dict__["ssl_enabled"] = ssl_enabled
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["associated_virtual_service_ids"] = None
            __props__.__dict__["associated_virtual_services"] = None
            __props__.__dict__["enabled_member_count"] = None
            __props__.__dict__["health_message"] = None
            __props__.__dict__["member_count"] = None
            __props__.__dict__["up_member_count"] = None
        super(NsxtAlbPool, __self__).__init__(
            'vcd:index/nsxtAlbPool:NsxtAlbPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            associated_virtual_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            associated_virtual_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ca_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cn_check_enabled: Optional[pulumi.Input[bool]] = None,
            default_port: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            enabled_member_count: Optional[pulumi.Input[int]] = None,
            graceful_timeout_period: Optional[pulumi.Input[int]] = None,
            health_message: Optional[pulumi.Input[str]] = None,
            health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolHealthMonitorArgs', 'NsxtAlbPoolHealthMonitorArgsDict']]]]] = None,
            member_count: Optional[pulumi.Input[int]] = None,
            member_group_id: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolMemberArgs', 'NsxtAlbPoolMemberArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            passive_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
            persistence_profile: Optional[pulumi.Input[Union['NsxtAlbPoolPersistenceProfileArgs', 'NsxtAlbPoolPersistenceProfileArgsDict']]] = None,
            ssl_enabled: Optional[pulumi.Input[bool]] = None,
            up_member_count: Optional[pulumi.Input[int]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtAlbPool':
        """
        Get an existing NsxtAlbPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
               contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
               `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_virtual_service_ids: A set of associated Virtual Service IDs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_virtual_services: A set of associated Virtual Service names
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificate_ids: A set of CA Certificates to be used when validating certificates presented by the
               pool members. Can be looked up using
               [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        :param pulumi.Input[bool] cn_check_enabled: Specifies whether to check the common name of the certificate presented by the pool
               member
        :param pulumi.Input[int] default_port: Default Port defines destination server port used by the traffic sent to the member
               (default `80`)
        :param pulumi.Input[str] description: An optional description ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: A set of domain names which will be used to verify the common names or subject alternative
               names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
               enabled
        :param pulumi.Input[str] edge_gateway_id: An ID of NSX-T Edge Gateway. Can be looked up using
               [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        :param pulumi.Input[bool] enabled: Boolean value if ALB Pool should be enabled (default `true`)
        :param pulumi.Input[int] enabled_member_count: Number of enabled members defined in the Pool
        :param pulumi.Input[int] graceful_timeout_period: Maximum time in minutes to gracefully disable pool member (default `1`). Special
               values are `0` (immediate) and `-1` (infinite)
        :param pulumi.Input[str] health_message: Health message of ALB Pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolHealthMonitorArgs', 'NsxtAlbPoolHealthMonitorArgsDict']]]] health_monitors: A block to define health monitor. Multiple can be used. See Health
               monitor and example for usage details.
               
               <a id="member-block"></a>
        :param pulumi.Input[int] member_count: Total number of members defined in the Pool
        :param pulumi.Input[str] member_group_id: A reference to NSX-T IP Set (`NsxtIpSet`).
               **Note** only one of `member`, `member_group_id` can be specified.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAlbPoolMemberArgs', 'NsxtAlbPoolMemberArgsDict']]]] members: A block to define pool members. Multiple can be used. See
               Member and example for usage details. **Note** only one of `member`,
               `member_group_id` can be specified.
        :param pulumi.Input[str] name: A name for ALB Pool
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[bool] passive_monitoring_enabled: defines if client traffic should be used to check if pool member is up or down
               (default `true`)
        :param pulumi.Input[Union['NsxtAlbPoolPersistenceProfileArgs', 'NsxtAlbPoolPersistenceProfileArgsDict']] persistence_profile: Persistence profile will ensure that the same user sticks to the same server for a
               desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
               unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
               Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
               profile and example for usage details.
        :param pulumi.Input[bool] ssl_enabled: Enables SSL - Will be turned on automatically when CA certificates are used
        :param pulumi.Input[int] up_member_count: Number of members defined in the Pool that are accepting traffic
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAlbPoolState.__new__(_NsxtAlbPoolState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["associated_virtual_service_ids"] = associated_virtual_service_ids
        __props__.__dict__["associated_virtual_services"] = associated_virtual_services
        __props__.__dict__["ca_certificate_ids"] = ca_certificate_ids
        __props__.__dict__["cn_check_enabled"] = cn_check_enabled
        __props__.__dict__["default_port"] = default_port
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_names"] = domain_names
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enabled_member_count"] = enabled_member_count
        __props__.__dict__["graceful_timeout_period"] = graceful_timeout_period
        __props__.__dict__["health_message"] = health_message
        __props__.__dict__["health_monitors"] = health_monitors
        __props__.__dict__["member_count"] = member_count
        __props__.__dict__["member_group_id"] = member_group_id
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["passive_monitoring_enabled"] = passive_monitoring_enabled
        __props__.__dict__["persistence_profile"] = persistence_profile
        __props__.__dict__["ssl_enabled"] = ssl_enabled
        __props__.__dict__["up_member_count"] = up_member_count
        __props__.__dict__["vdc"] = vdc
        return NsxtAlbPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Optional algorithm for choosing pool members (default `LEAST_CONNECTIONS`). Other options
        contain `ROUND_ROBIN`, `CONSISTENT_HASH` (uses Source IP Address hash), `FASTEST_RESPONSE`, `LEAST_LOAD`,
        `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`, `CORE_AFFINITY`
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="associatedVirtualServiceIds")
    def associated_virtual_service_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of associated Virtual Service IDs
        """
        return pulumi.get(self, "associated_virtual_service_ids")

    @property
    @pulumi.getter(name="associatedVirtualServices")
    def associated_virtual_services(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of associated Virtual Service names
        """
        return pulumi.get(self, "associated_virtual_services")

    @property
    @pulumi.getter(name="caCertificateIds")
    def ca_certificate_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of CA Certificates to be used when validating certificates presented by the
        pool members. Can be looked up using
        [LibraryCertificate](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/library_certificate) data source
        """
        return pulumi.get(self, "ca_certificate_ids")

    @property
    @pulumi.getter(name="cnCheckEnabled")
    def cn_check_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to check the common name of the certificate presented by the pool
        member
        """
        return pulumi.get(self, "cn_check_enabled")

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> pulumi.Output[Optional[int]]:
        """
        Default Port defines destination server port used by the traffic sent to the member
        (default `80`)
        """
        return pulumi.get(self, "default_port")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description ALB Pool
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of domain names which will be used to verify the common names or subject alternative
        names presented by the pool member certificates. It is performed only when common name check `cn_check_enabled` is
        enabled
        """
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        An ID of NSX-T Edge Gateway. Can be looked up using
        [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value if ALB Pool should be enabled (default `true`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enabledMemberCount")
    def enabled_member_count(self) -> pulumi.Output[int]:
        """
        Number of enabled members defined in the Pool
        """
        return pulumi.get(self, "enabled_member_count")

    @property
    @pulumi.getter(name="gracefulTimeoutPeriod")
    def graceful_timeout_period(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum time in minutes to gracefully disable pool member (default `1`). Special
        values are `0` (immediate) and `-1` (infinite)
        """
        return pulumi.get(self, "graceful_timeout_period")

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> pulumi.Output[str]:
        """
        Health message of ALB Pool
        """
        return pulumi.get(self, "health_message")

    @property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtAlbPoolHealthMonitor']]]:
        """
        A block to define health monitor. Multiple can be used. See Health
        monitor and example for usage details.

        <a id="member-block"></a>
        """
        return pulumi.get(self, "health_monitors")

    @property
    @pulumi.getter(name="memberCount")
    def member_count(self) -> pulumi.Output[int]:
        """
        Total number of members defined in the Pool
        """
        return pulumi.get(self, "member_count")

    @property
    @pulumi.getter(name="memberGroupId")
    def member_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        A reference to NSX-T IP Set (`NsxtIpSet`).
        **Note** only one of `member`, `member_group_id` can be specified.
        """
        return pulumi.get(self, "member_group_id")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtAlbPoolMember']]]:
        """
        A block to define pool members. Multiple can be used. See
        Member and example for usage details. **Note** only one of `member`,
        `member_group_id` can be specified.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for ALB Pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="passiveMonitoringEnabled")
    def passive_monitoring_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        defines if client traffic should be used to check if pool member is up or down
        (default `true`)
        """
        return pulumi.get(self, "passive_monitoring_enabled")

    @property
    @pulumi.getter(name="persistenceProfile")
    def persistence_profile(self) -> pulumi.Output[Optional['outputs.NsxtAlbPoolPersistenceProfile']]:
        """
        Persistence profile will ensure that the same user sticks to the same server for a
        desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
        unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
        Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
        profile and example for usage details.
        """
        return pulumi.get(self, "persistence_profile")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> pulumi.Output[bool]:
        """
        Enables SSL - Will be turned on automatically when CA certificates are used
        """
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="upMemberCount")
    def up_member_count(self) -> pulumi.Output[int]:
        """
        Number of members defined in the Pool that are accepting traffic
        """
        return pulumi.get(self, "up_member_count")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Edge Gateway will be looked up based on 'edge_gateway_id' field""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

