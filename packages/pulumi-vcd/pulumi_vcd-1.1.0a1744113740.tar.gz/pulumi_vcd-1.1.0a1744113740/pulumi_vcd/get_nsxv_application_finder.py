# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxvApplicationFinderResult',
    'AwaitableGetNsxvApplicationFinderResult',
    'get_nsxv_application_finder',
    'get_nsxv_application_finder_output',
]

@pulumi.output_type
class GetNsxvApplicationFinderResult:
    """
    A collection of values returned by getNsxvApplicationFinder.
    """
    def __init__(__self__, case_sensitive=None, id=None, objects=None, search_expression=None, type=None, vdc_id=None):
        if case_sensitive and not isinstance(case_sensitive, bool):
            raise TypeError("Expected argument 'case_sensitive' to be a bool")
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if objects and not isinstance(objects, list):
            raise TypeError("Expected argument 'objects' to be a list")
        pulumi.set(__self__, "objects", objects)
        if search_expression and not isinstance(search_expression, str):
            raise TypeError("Expected argument 'search_expression' to be a str")
        pulumi.set(__self__, "search_expression", search_expression)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetNsxvApplicationFinderObjectResult']:
        """
        A list of objects found by the search expression. Each one contains the following properties:
        """
        return pulumi.get(self, "objects")

    @property
    @pulumi.getter(name="searchExpression")
    def search_expression(self) -> str:
        return pulumi.get(self, "search_expression")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        the type of the object (`Application` or `ApplicationGroup`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> str:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxvApplicationFinderResult(GetNsxvApplicationFinderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvApplicationFinderResult(
            case_sensitive=self.case_sensitive,
            id=self.id,
            objects=self.objects,
            search_expression=self.search_expression,
            type=self.type,
            vdc_id=self.vdc_id)


def get_nsxv_application_finder(case_sensitive: Optional[bool] = None,
                                search_expression: Optional[str] = None,
                                type: Optional[str] = None,
                                vdc_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvApplicationFinderResult:
    """
    Provides a VMware Cloud Director NSX-V distributed firewall applications and application groups finder
    used to retrieve existing ones by regular expressions.

    Supported in provider *v3.9+*

    ## Example Usage

    ### 2

    ```python
    import pulumi
    import pulumi_vcd as vcd

    applications = vcd.get_nsxv_application_finder(vdc_id=my_vdc["id"],
        search_expression="dns",
        case_sensitive=False,
        type="application")
    ```

    Sample output:

    ## Search expressions

    To search for an application or application group, we can use simple or complex [regular expressions](https://en.wikipedia.org/wiki/Regular_expression).
    The expressions in this data source follow the [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) standard.

    A **simple** regular expression is a (short) text that we expect to find within the application name. For example, the
    expression `sql` will find, among others, `Oracle i*SQLPlus` and `MSSQL Server Database Engine`, because the search, by default,
    ignores the case of the searched text.

    A more complex regular expression could use meta-characters and regular expression directives to search more precisely.
    For example, the expression `^server` tells the search to find a name that starts (`^`) with "server", thus finding
    "Server Message Block (SMB)" (starts with `server`), but not  "SAP MDM Server" (where `server` is not at the beginning
    of the name).

    If we want to search with even more accuracy, we could set the property `case_sensitive = true`, where the case of the
    text matters. Thus, searching for `VMware` would find `VMware-SRM-Replication` and `VMware-VCO-Messaging`, but not
    `Vmware-VC-WebAccess` (lowercase `m` after `V`).


    :param bool case_sensitive: Makes the search case-sensitive. By default, it is false
    :param str search_expression: The regular expression that will be used to search the applications. See Search Expressions below
    :param str type: What kind of application we seek. One of `application`, `application_group`
    :param str vdc_id: The ID of VDC to use
    """
    __args__ = dict()
    __args__['caseSensitive'] = case_sensitive
    __args__['searchExpression'] = search_expression
    __args__['type'] = type
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxvApplicationFinder:getNsxvApplicationFinder', __args__, opts=opts, typ=GetNsxvApplicationFinderResult).value

    return AwaitableGetNsxvApplicationFinderResult(
        case_sensitive=pulumi.get(__ret__, 'case_sensitive'),
        id=pulumi.get(__ret__, 'id'),
        objects=pulumi.get(__ret__, 'objects'),
        search_expression=pulumi.get(__ret__, 'search_expression'),
        type=pulumi.get(__ret__, 'type'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxv_application_finder_output(case_sensitive: Optional[pulumi.Input[Optional[bool]]] = None,
                                       search_expression: Optional[pulumi.Input[str]] = None,
                                       type: Optional[pulumi.Input[str]] = None,
                                       vdc_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxvApplicationFinderResult]:
    """
    Provides a VMware Cloud Director NSX-V distributed firewall applications and application groups finder
    used to retrieve existing ones by regular expressions.

    Supported in provider *v3.9+*

    ## Example Usage

    ### 2

    ```python
    import pulumi
    import pulumi_vcd as vcd

    applications = vcd.get_nsxv_application_finder(vdc_id=my_vdc["id"],
        search_expression="dns",
        case_sensitive=False,
        type="application")
    ```

    Sample output:

    ## Search expressions

    To search for an application or application group, we can use simple or complex [regular expressions](https://en.wikipedia.org/wiki/Regular_expression).
    The expressions in this data source follow the [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) standard.

    A **simple** regular expression is a (short) text that we expect to find within the application name. For example, the
    expression `sql` will find, among others, `Oracle i*SQLPlus` and `MSSQL Server Database Engine`, because the search, by default,
    ignores the case of the searched text.

    A more complex regular expression could use meta-characters and regular expression directives to search more precisely.
    For example, the expression `^server` tells the search to find a name that starts (`^`) with "server", thus finding
    "Server Message Block (SMB)" (starts with `server`), but not  "SAP MDM Server" (where `server` is not at the beginning
    of the name).

    If we want to search with even more accuracy, we could set the property `case_sensitive = true`, where the case of the
    text matters. Thus, searching for `VMware` would find `VMware-SRM-Replication` and `VMware-VCO-Messaging`, but not
    `Vmware-VC-WebAccess` (lowercase `m` after `V`).


    :param bool case_sensitive: Makes the search case-sensitive. By default, it is false
    :param str search_expression: The regular expression that will be used to search the applications. See Search Expressions below
    :param str type: What kind of application we seek. One of `application`, `application_group`
    :param str vdc_id: The ID of VDC to use
    """
    __args__ = dict()
    __args__['caseSensitive'] = case_sensitive
    __args__['searchExpression'] = search_expression
    __args__['type'] = type
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxvApplicationFinder:getNsxvApplicationFinder', __args__, opts=opts, typ=GetNsxvApplicationFinderResult)
    return __ret__.apply(lambda __response__: GetNsxvApplicationFinderResult(
        case_sensitive=pulumi.get(__response__, 'case_sensitive'),
        id=pulumi.get(__response__, 'id'),
        objects=pulumi.get(__response__, 'objects'),
        search_expression=pulumi.get(__response__, 'search_expression'),
        type=pulumi.get(__response__, 'type'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
