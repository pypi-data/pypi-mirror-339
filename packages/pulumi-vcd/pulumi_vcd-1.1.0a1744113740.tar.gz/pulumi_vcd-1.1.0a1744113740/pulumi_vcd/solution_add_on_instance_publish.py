# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SolutionAddOnInstancePublishArgs', 'SolutionAddOnInstancePublish']

@pulumi.input_type
class SolutionAddOnInstancePublishArgs:
    def __init__(__self__, *,
                 add_on_instance_id: pulumi.Input[str],
                 org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 publish_to_all_tenants: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SolutionAddOnInstancePublish resource.
        :param pulumi.Input[str] add_on_instance_id: Solution Add-On instance ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] org_ids: Recipient Organization IDs
        :param pulumi.Input[bool] publish_to_all_tenants: Set to `true` to publish to everyone
        """
        pulumi.set(__self__, "add_on_instance_id", add_on_instance_id)
        if org_ids is not None:
            pulumi.set(__self__, "org_ids", org_ids)
        if publish_to_all_tenants is not None:
            pulumi.set(__self__, "publish_to_all_tenants", publish_to_all_tenants)

    @property
    @pulumi.getter(name="addOnInstanceId")
    def add_on_instance_id(self) -> pulumi.Input[str]:
        """
        Solution Add-On instance ID
        """
        return pulumi.get(self, "add_on_instance_id")

    @add_on_instance_id.setter
    def add_on_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "add_on_instance_id", value)

    @property
    @pulumi.getter(name="orgIds")
    def org_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Recipient Organization IDs
        """
        return pulumi.get(self, "org_ids")

    @org_ids.setter
    def org_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "org_ids", value)

    @property
    @pulumi.getter(name="publishToAllTenants")
    def publish_to_all_tenants(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to publish to everyone
        """
        return pulumi.get(self, "publish_to_all_tenants")

    @publish_to_all_tenants.setter
    def publish_to_all_tenants(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_to_all_tenants", value)


@pulumi.input_type
class _SolutionAddOnInstancePublishState:
    def __init__(__self__, *,
                 add_on_instance_id: Optional[pulumi.Input[str]] = None,
                 org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 publish_to_all_tenants: Optional[pulumi.Input[bool]] = None,
                 rde_state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SolutionAddOnInstancePublish resources.
        :param pulumi.Input[str] add_on_instance_id: Solution Add-On instance ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] org_ids: Recipient Organization IDs
        :param pulumi.Input[bool] publish_to_all_tenants: Set to `true` to publish to everyone
        :param pulumi.Input[str] rde_state: Parent RDE state
        """
        if add_on_instance_id is not None:
            pulumi.set(__self__, "add_on_instance_id", add_on_instance_id)
        if org_ids is not None:
            pulumi.set(__self__, "org_ids", org_ids)
        if publish_to_all_tenants is not None:
            pulumi.set(__self__, "publish_to_all_tenants", publish_to_all_tenants)
        if rde_state is not None:
            pulumi.set(__self__, "rde_state", rde_state)

    @property
    @pulumi.getter(name="addOnInstanceId")
    def add_on_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Solution Add-On instance ID
        """
        return pulumi.get(self, "add_on_instance_id")

    @add_on_instance_id.setter
    def add_on_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_on_instance_id", value)

    @property
    @pulumi.getter(name="orgIds")
    def org_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Recipient Organization IDs
        """
        return pulumi.get(self, "org_ids")

    @org_ids.setter
    def org_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "org_ids", value)

    @property
    @pulumi.getter(name="publishToAllTenants")
    def publish_to_all_tenants(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to publish to everyone
        """
        return pulumi.get(self, "publish_to_all_tenants")

    @publish_to_all_tenants.setter
    def publish_to_all_tenants(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_to_all_tenants", value)

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> Optional[pulumi.Input[str]]:
        """
        Parent RDE state
        """
        return pulumi.get(self, "rde_state")

    @rde_state.setter
    def rde_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_state", value)


class SolutionAddOnInstancePublish(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_instance_id: Optional[pulumi.Input[str]] = None,
                 org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 publish_to_all_tenants: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a SolutionAddOnInstancePublish resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_on_instance_id: Solution Add-On instance ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] org_ids: Recipient Organization IDs
        :param pulumi.Input[bool] publish_to_all_tenants: Set to `true` to publish to everyone
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SolutionAddOnInstancePublishArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SolutionAddOnInstancePublish resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SolutionAddOnInstancePublishArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SolutionAddOnInstancePublishArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_instance_id: Optional[pulumi.Input[str]] = None,
                 org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 publish_to_all_tenants: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SolutionAddOnInstancePublishArgs.__new__(SolutionAddOnInstancePublishArgs)

            if add_on_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'add_on_instance_id'")
            __props__.__dict__["add_on_instance_id"] = add_on_instance_id
            __props__.__dict__["org_ids"] = org_ids
            __props__.__dict__["publish_to_all_tenants"] = publish_to_all_tenants
            __props__.__dict__["rde_state"] = None
        super(SolutionAddOnInstancePublish, __self__).__init__(
            'vcd:index/solutionAddOnInstancePublish:SolutionAddOnInstancePublish',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_on_instance_id: Optional[pulumi.Input[str]] = None,
            org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            publish_to_all_tenants: Optional[pulumi.Input[bool]] = None,
            rde_state: Optional[pulumi.Input[str]] = None) -> 'SolutionAddOnInstancePublish':
        """
        Get an existing SolutionAddOnInstancePublish resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_on_instance_id: Solution Add-On instance ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] org_ids: Recipient Organization IDs
        :param pulumi.Input[bool] publish_to_all_tenants: Set to `true` to publish to everyone
        :param pulumi.Input[str] rde_state: Parent RDE state
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SolutionAddOnInstancePublishState.__new__(_SolutionAddOnInstancePublishState)

        __props__.__dict__["add_on_instance_id"] = add_on_instance_id
        __props__.__dict__["org_ids"] = org_ids
        __props__.__dict__["publish_to_all_tenants"] = publish_to_all_tenants
        __props__.__dict__["rde_state"] = rde_state
        return SolutionAddOnInstancePublish(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addOnInstanceId")
    def add_on_instance_id(self) -> pulumi.Output[str]:
        """
        Solution Add-On instance ID
        """
        return pulumi.get(self, "add_on_instance_id")

    @property
    @pulumi.getter(name="orgIds")
    def org_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Recipient Organization IDs
        """
        return pulumi.get(self, "org_ids")

    @property
    @pulumi.getter(name="publishToAllTenants")
    def publish_to_all_tenants(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to `true` to publish to everyone
        """
        return pulumi.get(self, "publish_to_all_tenants")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> pulumi.Output[str]:
        """
        Parent RDE state
        """
        return pulumi.get(self, "rde_state")

