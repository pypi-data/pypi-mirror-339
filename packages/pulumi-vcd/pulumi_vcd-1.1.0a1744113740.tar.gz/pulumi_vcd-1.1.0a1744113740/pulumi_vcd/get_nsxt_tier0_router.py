# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtTier0RouterResult',
    'AwaitableGetNsxtTier0RouterResult',
    'get_nsxt_tier0_router',
    'get_nsxt_tier0_router_output',
]

@pulumi.output_type
class GetNsxtTier0RouterResult:
    """
    A collection of values returned by getNsxtTier0Router.
    """
    def __init__(__self__, id=None, is_assigned=None, name=None, nsxt_manager_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_assigned and not isinstance(is_assigned, bool):
            raise TypeError("Expected argument 'is_assigned' to be a bool")
        pulumi.set(__self__, "is_assigned", is_assigned)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAssigned")
    def is_assigned(self) -> bool:
        """
        Boolean value reflecting if Tier-0 router is already consumed by external network.
        """
        return pulumi.get(self, "is_assigned")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")


class AwaitableGetNsxtTier0RouterResult(GetNsxtTier0RouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtTier0RouterResult(
            id=self.id,
            is_assigned=self.is_assigned,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id)


def get_nsxt_tier0_router(name: Optional[str] = None,
                          nsxt_manager_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtTier0RouterResult:
    """
    Provides a data source for available NSX-T Tier-0 routers.

    Supported in provider *v3.0+*

    > **Note:** This resource uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.1.1+* and NSX-T *3.0+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_manager(name="nsxt-manager-one")
    router = vcd.get_nsxt_tier0_router(name="nsxt-tier0-router",
        nsxt_manager_id=main.id)
    ```


    :param str name: NSX-T Tier-0 router name. **Note**. Tier-0 router name must be unique inside NSX-T manager because
           API does not allow to filter by other fields.
    :param str nsxt_manager_id: NSX-T manager should be referenced.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtTier0Router:getNsxtTier0Router', __args__, opts=opts, typ=GetNsxtTier0RouterResult).value

    return AwaitableGetNsxtTier0RouterResult(
        id=pulumi.get(__ret__, 'id'),
        is_assigned=pulumi.get(__ret__, 'is_assigned'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'))
def get_nsxt_tier0_router_output(name: Optional[pulumi.Input[str]] = None,
                                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtTier0RouterResult]:
    """
    Provides a data source for available NSX-T Tier-0 routers.

    Supported in provider *v3.0+*

    > **Note:** This resource uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.1.1+* and NSX-T *3.0+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_manager(name="nsxt-manager-one")
    router = vcd.get_nsxt_tier0_router(name="nsxt-tier0-router",
        nsxt_manager_id=main.id)
    ```


    :param str name: NSX-T Tier-0 router name. **Note**. Tier-0 router name must be unique inside NSX-T manager because
           API does not allow to filter by other fields.
    :param str nsxt_manager_id: NSX-T manager should be referenced.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtTier0Router:getNsxtTier0Router', __args__, opts=opts, typ=GetNsxtTier0RouterResult)
    return __ret__.apply(lambda __response__: GetNsxtTier0RouterResult(
        id=pulumi.get(__response__, 'id'),
        is_assigned=pulumi.get(__response__, 'is_assigned'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id')))
