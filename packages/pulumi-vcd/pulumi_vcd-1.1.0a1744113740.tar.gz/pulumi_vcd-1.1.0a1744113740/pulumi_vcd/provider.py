# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 url: pulumi.Input[str],
                 allow_api_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_service_account_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_unverified_ssl: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ignore_metadata_changes: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderIgnoreMetadataChangeArgs']]]] = None,
                 import_separator: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 logging_file: Optional[pulumi.Input[str]] = None,
                 max_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 saml_adfs_cookie: Optional[pulumi.Input[str]] = None,
                 saml_adfs_rpt_id: Optional[pulumi.Input[str]] = None,
                 service_account_token_file: Optional[pulumi.Input[str]] = None,
                 sysorg: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] org: The VCD Org for API operations
        :param pulumi.Input[str] url: The VCD url for VCD API operations.
        :param pulumi.Input[bool] allow_api_token_file: Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
        :param pulumi.Input[bool] allow_service_account_token_file: Set this to true if you understand the security risks of using Service Account token files and would like to suppress
               the warnings
        :param pulumi.Input[bool] allow_unverified_ssl: If set, VCDClient will permit unverifiable SSL certificates.
        :param pulumi.Input[str] api_token: The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        :param pulumi.Input[str] api_token_file: The API token file instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        :param pulumi.Input[str] auth_type: 'integrated', 'saml_adfs', 'token', 'api_token', 'api_token_file' and 'service_account_token_file' are supported.
               'integrated' is default.
        :param pulumi.Input[Sequence[pulumi.Input['ProviderIgnoreMetadataChangeArgs']]] ignore_metadata_changes: Defines a set of `metadata_entry` that need to be ignored by this provider. All filters on this attribute are computed
               with a logical AND
        :param pulumi.Input[bool] logging: If set, it will enable logging of API requests and responses
        :param pulumi.Input[str] logging_file: Defines the full name of the logging file for API calls (requires 'logging')
        :param pulumi.Input[int] max_retry_timeout: Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)
        :param pulumi.Input[str] password: The user password for VCD API operations.
        :param pulumi.Input[str] saml_adfs_cookie: Allows to specify custom cookie for ADFS server lookup. '{{.Org}}' is replaced by real Org - e.g. 'sso-preferred=yes;
               sso_redirect_org={{.Org}}'
        :param pulumi.Input[str] saml_adfs_rpt_id: Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        :param pulumi.Input[str] service_account_token_file: The Service Account API token file instead of username/password for VCD API operations. (Requires VCD 10.4.0+)
        :param pulumi.Input[str] sysorg: The VCD Org for user authentication
        :param pulumi.Input[str] token: The token used instead of username/password for VCD API operations.
        :param pulumi.Input[str] user: The user name for VCD API operations.
        :param pulumi.Input[str] vdc: The VDC for API operations
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "url", url)
        if allow_api_token_file is not None:
            pulumi.set(__self__, "allow_api_token_file", allow_api_token_file)
        if allow_service_account_token_file is not None:
            pulumi.set(__self__, "allow_service_account_token_file", allow_service_account_token_file)
        if allow_unverified_ssl is not None:
            pulumi.set(__self__, "allow_unverified_ssl", allow_unverified_ssl)
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if api_token_file is not None:
            pulumi.set(__self__, "api_token_file", api_token_file)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if ignore_metadata_changes is not None:
            pulumi.set(__self__, "ignore_metadata_changes", ignore_metadata_changes)
        if import_separator is not None:
            pulumi.set(__self__, "import_separator", import_separator)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if logging_file is not None:
            pulumi.set(__self__, "logging_file", logging_file)
        if max_retry_timeout is not None:
            pulumi.set(__self__, "max_retry_timeout", max_retry_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if saml_adfs_cookie is not None:
            pulumi.set(__self__, "saml_adfs_cookie", saml_adfs_cookie)
        if saml_adfs_rpt_id is not None:
            pulumi.set(__self__, "saml_adfs_rpt_id", saml_adfs_rpt_id)
        if service_account_token_file is not None:
            pulumi.set(__self__, "service_account_token_file", service_account_token_file)
        if sysorg is not None:
            pulumi.set(__self__, "sysorg", sysorg)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        """
        The VCD Org for API operations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The VCD url for VCD API operations.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="allowApiTokenFile")
    def allow_api_token_file(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
        """
        return pulumi.get(self, "allow_api_token_file")

    @allow_api_token_file.setter
    def allow_api_token_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_api_token_file", value)

    @property
    @pulumi.getter(name="allowServiceAccountTokenFile")
    def allow_service_account_token_file(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this to true if you understand the security risks of using Service Account token files and would like to suppress
        the warnings
        """
        return pulumi.get(self, "allow_service_account_token_file")

    @allow_service_account_token_file.setter
    def allow_service_account_token_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_service_account_token_file", value)

    @property
    @pulumi.getter(name="allowUnverifiedSsl")
    def allow_unverified_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, VCDClient will permit unverifiable SSL certificates.
        """
        return pulumi.get(self, "allow_unverified_ssl")

    @allow_unverified_ssl.setter
    def allow_unverified_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_unverified_ssl", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="apiTokenFile")
    def api_token_file(self) -> Optional[pulumi.Input[str]]:
        """
        The API token file instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        """
        return pulumi.get(self, "api_token_file")

    @api_token_file.setter
    def api_token_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_file", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        'integrated', 'saml_adfs', 'token', 'api_token', 'api_token_file' and 'service_account_token_file' are supported.
        'integrated' is default.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="ignoreMetadataChanges")
    def ignore_metadata_changes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderIgnoreMetadataChangeArgs']]]]:
        """
        Defines a set of `metadata_entry` that need to be ignored by this provider. All filters on this attribute are computed
        with a logical AND
        """
        return pulumi.get(self, "ignore_metadata_changes")

    @ignore_metadata_changes.setter
    def ignore_metadata_changes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderIgnoreMetadataChangeArgs']]]]):
        pulumi.set(self, "ignore_metadata_changes", value)

    @property
    @pulumi.getter(name="importSeparator")
    def import_separator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_separator")

    @import_separator.setter
    def import_separator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_separator", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, it will enable logging of API requests and responses
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="loggingFile")
    def logging_file(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the full name of the logging file for API calls (requires 'logging')
        """
        return pulumi.get(self, "logging_file")

    @logging_file.setter
    def logging_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logging_file", value)

    @property
    @pulumi.getter(name="maxRetryTimeout")
    def max_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)
        """
        return pulumi.get(self, "max_retry_timeout")

    @max_retry_timeout.setter
    def max_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The user password for VCD API operations.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="samlAdfsCookie")
    def saml_adfs_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to specify custom cookie for ADFS server lookup. '{{.Org}}' is replaced by real Org - e.g. 'sso-preferred=yes;
        sso_redirect_org={{.Org}}'
        """
        return pulumi.get(self, "saml_adfs_cookie")

    @saml_adfs_cookie.setter
    def saml_adfs_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_adfs_cookie", value)

    @property
    @pulumi.getter(name="samlAdfsRptId")
    def saml_adfs_rpt_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        """
        return pulumi.get(self, "saml_adfs_rpt_id")

    @saml_adfs_rpt_id.setter
    def saml_adfs_rpt_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_adfs_rpt_id", value)

    @property
    @pulumi.getter(name="serviceAccountTokenFile")
    def service_account_token_file(self) -> Optional[pulumi.Input[str]]:
        """
        The Service Account API token file instead of username/password for VCD API operations. (Requires VCD 10.4.0+)
        """
        return pulumi.get(self, "service_account_token_file")

    @service_account_token_file.setter
    def service_account_token_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_token_file", value)

    @property
    @pulumi.getter
    def sysorg(self) -> Optional[pulumi.Input[str]]:
        """
        The VCD Org for user authentication
        """
        return pulumi.get(self, "sysorg")

    @sysorg.setter
    def sysorg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sysorg", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The token used instead of username/password for VCD API operations.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The user name for VCD API operations.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The VDC for API operations
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_api_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_service_account_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_unverified_ssl: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ignore_metadata_changes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderIgnoreMetadataChangeArgs', 'ProviderIgnoreMetadataChangeArgsDict']]]]] = None,
                 import_separator: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 logging_file: Optional[pulumi.Input[str]] = None,
                 max_retry_timeout: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 saml_adfs_cookie: Optional[pulumi.Input[str]] = None,
                 saml_adfs_rpt_id: Optional[pulumi.Input[str]] = None,
                 service_account_token_file: Optional[pulumi.Input[str]] = None,
                 sysorg: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the vcd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_api_token_file: Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
        :param pulumi.Input[bool] allow_service_account_token_file: Set this to true if you understand the security risks of using Service Account token files and would like to suppress
               the warnings
        :param pulumi.Input[bool] allow_unverified_ssl: If set, VCDClient will permit unverifiable SSL certificates.
        :param pulumi.Input[str] api_token: The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        :param pulumi.Input[str] api_token_file: The API token file instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        :param pulumi.Input[str] auth_type: 'integrated', 'saml_adfs', 'token', 'api_token', 'api_token_file' and 'service_account_token_file' are supported.
               'integrated' is default.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProviderIgnoreMetadataChangeArgs', 'ProviderIgnoreMetadataChangeArgsDict']]]] ignore_metadata_changes: Defines a set of `metadata_entry` that need to be ignored by this provider. All filters on this attribute are computed
               with a logical AND
        :param pulumi.Input[bool] logging: If set, it will enable logging of API requests and responses
        :param pulumi.Input[str] logging_file: Defines the full name of the logging file for API calls (requires 'logging')
        :param pulumi.Input[int] max_retry_timeout: Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)
        :param pulumi.Input[str] org: The VCD Org for API operations
        :param pulumi.Input[str] password: The user password for VCD API operations.
        :param pulumi.Input[str] saml_adfs_cookie: Allows to specify custom cookie for ADFS server lookup. '{{.Org}}' is replaced by real Org - e.g. 'sso-preferred=yes;
               sso_redirect_org={{.Org}}'
        :param pulumi.Input[str] saml_adfs_rpt_id: Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        :param pulumi.Input[str] service_account_token_file: The Service Account API token file instead of username/password for VCD API operations. (Requires VCD 10.4.0+)
        :param pulumi.Input[str] sysorg: The VCD Org for user authentication
        :param pulumi.Input[str] token: The token used instead of username/password for VCD API operations.
        :param pulumi.Input[str] url: The VCD url for VCD API operations.
        :param pulumi.Input[str] user: The user name for VCD API operations.
        :param pulumi.Input[str] vdc: The VDC for API operations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the vcd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_api_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_service_account_token_file: Optional[pulumi.Input[bool]] = None,
                 allow_unverified_ssl: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_token_file: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ignore_metadata_changes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderIgnoreMetadataChangeArgs', 'ProviderIgnoreMetadataChangeArgsDict']]]]] = None,
                 import_separator: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 logging_file: Optional[pulumi.Input[str]] = None,
                 max_retry_timeout: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 saml_adfs_cookie: Optional[pulumi.Input[str]] = None,
                 saml_adfs_rpt_id: Optional[pulumi.Input[str]] = None,
                 service_account_token_file: Optional[pulumi.Input[str]] = None,
                 sysorg: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["allow_api_token_file"] = pulumi.Output.from_input(allow_api_token_file).apply(pulumi.runtime.to_json) if allow_api_token_file is not None else None
            __props__.__dict__["allow_service_account_token_file"] = pulumi.Output.from_input(allow_service_account_token_file).apply(pulumi.runtime.to_json) if allow_service_account_token_file is not None else None
            __props__.__dict__["allow_unverified_ssl"] = pulumi.Output.from_input(allow_unverified_ssl).apply(pulumi.runtime.to_json) if allow_unverified_ssl is not None else None
            __props__.__dict__["api_token"] = api_token
            __props__.__dict__["api_token_file"] = api_token_file
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["ignore_metadata_changes"] = pulumi.Output.from_input(ignore_metadata_changes).apply(pulumi.runtime.to_json) if ignore_metadata_changes is not None else None
            __props__.__dict__["import_separator"] = import_separator
            __props__.__dict__["logging"] = pulumi.Output.from_input(logging).apply(pulumi.runtime.to_json) if logging is not None else None
            __props__.__dict__["logging_file"] = logging_file
            __props__.__dict__["max_retry_timeout"] = pulumi.Output.from_input(max_retry_timeout).apply(pulumi.runtime.to_json) if max_retry_timeout is not None else None
            if org is None and not opts.urn:
                raise TypeError("Missing required property 'org'")
            __props__.__dict__["org"] = org
            __props__.__dict__["password"] = password
            __props__.__dict__["saml_adfs_cookie"] = saml_adfs_cookie
            __props__.__dict__["saml_adfs_rpt_id"] = saml_adfs_rpt_id
            __props__.__dict__["service_account_token_file"] = service_account_token_file
            __props__.__dict__["sysorg"] = sysorg
            __props__.__dict__["token"] = token
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["user"] = user
            __props__.__dict__["vdc"] = vdc
        super(Provider, __self__).__init__(
            'vcd',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[Optional[str]]:
        """
        The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="apiTokenFile")
    def api_token_file(self) -> pulumi.Output[Optional[str]]:
        """
        The API token file instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        """
        return pulumi.get(self, "api_token_file")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[str]]:
        """
        'integrated', 'saml_adfs', 'token', 'api_token', 'api_token_file' and 'service_account_token_file' are supported.
        'integrated' is default.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="importSeparator")
    def import_separator(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "import_separator")

    @property
    @pulumi.getter(name="loggingFile")
    def logging_file(self) -> pulumi.Output[Optional[str]]:
        """
        Defines the full name of the logging file for API calls (requires 'logging')
        """
        return pulumi.get(self, "logging_file")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[str]:
        """
        The VCD Org for API operations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The user password for VCD API operations.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="samlAdfsCookie")
    def saml_adfs_cookie(self) -> pulumi.Output[Optional[str]]:
        """
        Allows to specify custom cookie for ADFS server lookup. '{{.Org}}' is replaced by real Org - e.g. 'sso-preferred=yes;
        sso_redirect_org={{.Org}}'
        """
        return pulumi.get(self, "saml_adfs_cookie")

    @property
    @pulumi.getter(name="samlAdfsRptId")
    def saml_adfs_rpt_id(self) -> pulumi.Output[Optional[str]]:
        """
        Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        """
        return pulumi.get(self, "saml_adfs_rpt_id")

    @property
    @pulumi.getter(name="serviceAccountTokenFile")
    def service_account_token_file(self) -> pulumi.Output[Optional[str]]:
        """
        The Service Account API token file instead of username/password for VCD API operations. (Requires VCD 10.4.0+)
        """
        return pulumi.get(self, "service_account_token_file")

    @property
    @pulumi.getter
    def sysorg(self) -> pulumi.Output[Optional[str]]:
        """
        The VCD Org for user authentication
        """
        return pulumi.get(self, "sysorg")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        """
        The token used instead of username/password for VCD API operations.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The VCD url for VCD API operations.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional[str]]:
        """
        The user name for VCD API operations.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The VDC for API operations
        """
        return pulumi.get(self, "vdc")

