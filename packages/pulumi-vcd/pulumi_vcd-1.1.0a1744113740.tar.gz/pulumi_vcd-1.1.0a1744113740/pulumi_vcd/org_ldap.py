# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgLdapArgs', 'OrgLdap']

@pulumi.input_type
class OrgLdapArgs:
    def __init__(__self__, *,
                 ldap_mode: pulumi.Input[str],
                 org_id: pulumi.Input[str],
                 custom_settings: Optional[pulumi.Input['OrgLdapCustomSettingsArgs']] = None,
                 custom_user_ou: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgLdap resource.
        :param pulumi.Input[str] ldap_mode: One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        :param pulumi.Input[str] org_id: Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        :param pulumi.Input['OrgLdapCustomSettingsArgs'] custom_settings: LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details
               
               <a id="custom-settings"></a>
        :param pulumi.Input[str] custom_user_ou: If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        """
        pulumi.set(__self__, "ldap_mode", ldap_mode)
        pulumi.set(__self__, "org_id", org_id)
        if custom_settings is not None:
            pulumi.set(__self__, "custom_settings", custom_settings)
        if custom_user_ou is not None:
            pulumi.set(__self__, "custom_user_ou", custom_user_ou)

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> pulumi.Input[str]:
        """
        One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        """
        return pulumi.get(self, "ldap_mode")

    @ldap_mode.setter
    def ldap_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_mode", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="customSettings")
    def custom_settings(self) -> Optional[pulumi.Input['OrgLdapCustomSettingsArgs']]:
        """
        LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details

        <a id="custom-settings"></a>
        """
        return pulumi.get(self, "custom_settings")

    @custom_settings.setter
    def custom_settings(self, value: Optional[pulumi.Input['OrgLdapCustomSettingsArgs']]):
        pulumi.set(self, "custom_settings", value)

    @property
    @pulumi.getter(name="customUserOu")
    def custom_user_ou(self) -> Optional[pulumi.Input[str]]:
        """
        If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        """
        return pulumi.get(self, "custom_user_ou")

    @custom_user_ou.setter
    def custom_user_ou(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_ou", value)


@pulumi.input_type
class _OrgLdapState:
    def __init__(__self__, *,
                 custom_settings: Optional[pulumi.Input['OrgLdapCustomSettingsArgs']] = None,
                 custom_user_ou: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgLdap resources.
        :param pulumi.Input['OrgLdapCustomSettingsArgs'] custom_settings: LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details
               
               <a id="custom-settings"></a>
        :param pulumi.Input[str] custom_user_ou: If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        :param pulumi.Input[str] ldap_mode: One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        :param pulumi.Input[str] org_id: Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        if custom_settings is not None:
            pulumi.set(__self__, "custom_settings", custom_settings)
        if custom_user_ou is not None:
            pulumi.set(__self__, "custom_user_ou", custom_user_ou)
        if ldap_mode is not None:
            pulumi.set(__self__, "ldap_mode", ldap_mode)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="customSettings")
    def custom_settings(self) -> Optional[pulumi.Input['OrgLdapCustomSettingsArgs']]:
        """
        LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details

        <a id="custom-settings"></a>
        """
        return pulumi.get(self, "custom_settings")

    @custom_settings.setter
    def custom_settings(self, value: Optional[pulumi.Input['OrgLdapCustomSettingsArgs']]):
        pulumi.set(self, "custom_settings", value)

    @property
    @pulumi.getter(name="customUserOu")
    def custom_user_ou(self) -> Optional[pulumi.Input[str]]:
        """
        If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        """
        return pulumi.get(self, "custom_user_ou")

    @custom_user_ou.setter
    def custom_user_ou(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_ou", value)

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> Optional[pulumi.Input[str]]:
        """
        One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        """
        return pulumi.get(self, "ldap_mode")

    @ldap_mode.setter
    def ldap_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_mode", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)


class OrgLdap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_settings: Optional[pulumi.Input[Union['OrgLdapCustomSettingsArgs', 'OrgLdapCustomSettingsArgsDict']]] = None,
                 custom_user_ou: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OrgLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OrgLdapCustomSettingsArgs', 'OrgLdapCustomSettingsArgsDict']] custom_settings: LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details
               
               <a id="custom-settings"></a>
        :param pulumi.Input[str] custom_user_ou: If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        :param pulumi.Input[str] ldap_mode: One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        :param pulumi.Input[str] org_id: Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgLdapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgLdapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgLdapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_settings: Optional[pulumi.Input[Union['OrgLdapCustomSettingsArgs', 'OrgLdapCustomSettingsArgsDict']]] = None,
                 custom_user_ou: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgLdapArgs.__new__(OrgLdapArgs)

            __props__.__dict__["custom_settings"] = custom_settings
            __props__.__dict__["custom_user_ou"] = custom_user_ou
            if ldap_mode is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_mode'")
            __props__.__dict__["ldap_mode"] = ldap_mode
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
        super(OrgLdap, __self__).__init__(
            'vcd:index/orgLdap:OrgLdap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_settings: Optional[pulumi.Input[Union['OrgLdapCustomSettingsArgs', 'OrgLdapCustomSettingsArgsDict']]] = None,
            custom_user_ou: Optional[pulumi.Input[str]] = None,
            ldap_mode: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None) -> 'OrgLdap':
        """
        Get an existing OrgLdap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OrgLdapCustomSettingsArgs', 'OrgLdapCustomSettingsArgsDict']] custom_settings: LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details
               
               <a id="custom-settings"></a>
        :param pulumi.Input[str] custom_user_ou: If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        :param pulumi.Input[str] ldap_mode: One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        :param pulumi.Input[str] org_id: Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgLdapState.__new__(_OrgLdapState)

        __props__.__dict__["custom_settings"] = custom_settings
        __props__.__dict__["custom_user_ou"] = custom_user_ou
        __props__.__dict__["ldap_mode"] = ldap_mode
        __props__.__dict__["org_id"] = org_id
        return OrgLdap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customSettings")
    def custom_settings(self) -> pulumi.Output[Optional['outputs.OrgLdapCustomSettings']]:
        """
        LDAP server configuration. Becomes mandatory if `ldap_mode` is set to `CUSTOM`. See Custom Settings below for details

        <a id="custom-settings"></a>
        """
        return pulumi.get(self, "custom_settings")

    @property
    @pulumi.getter(name="customUserOu")
    def custom_user_ou(self) -> pulumi.Output[Optional[str]]:
        """
        If `ldap_mode` is `SYSTEM`, specifies an LDAP `attribute=value` pair to use for OU (organizational unit)
        """
        return pulumi.get(self, "custom_user_ou")

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> pulumi.Output[str]:
        """
        One of `NONE`, `CUSTOM`, `SYSTEM`. Note that using `NONE` has the effect of removing the LDAP settings
        """
        return pulumi.get(self, "ldap_mode")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
        """
        return pulumi.get(self, "org_id")

