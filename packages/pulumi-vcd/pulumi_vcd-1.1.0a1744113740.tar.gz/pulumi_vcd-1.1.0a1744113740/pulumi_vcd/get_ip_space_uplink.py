# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIpSpaceUplinkResult',
    'AwaitableGetIpSpaceUplinkResult',
    'get_ip_space_uplink',
    'get_ip_space_uplink_output',
]

@pulumi.output_type
class GetIpSpaceUplinkResult:
    """
    A collection of values returned by getIpSpaceUplink.
    """
    def __init__(__self__, associated_interface_ids=None, description=None, external_network_id=None, id=None, ip_space_id=None, ip_space_type=None, name=None, status=None):
        if associated_interface_ids and not isinstance(associated_interface_ids, list):
            raise TypeError("Expected argument 'associated_interface_ids' to be a list")
        pulumi.set(__self__, "associated_interface_ids", associated_interface_ids)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_network_id and not isinstance(external_network_id, str):
            raise TypeError("Expected argument 'external_network_id' to be a str")
        pulumi.set(__self__, "external_network_id", external_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_space_id and not isinstance(ip_space_id, str):
            raise TypeError("Expected argument 'ip_space_id' to be a str")
        pulumi.set(__self__, "ip_space_id", ip_space_id)
        if ip_space_type and not isinstance(ip_space_type, str):
            raise TypeError("Expected argument 'ip_space_type' to be a str")
        pulumi.set(__self__, "ip_space_type", ip_space_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="associatedInterfaceIds")
    def associated_interface_ids(self) -> Sequence[str]:
        return pulumi.get(self, "associated_interface_ids")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> str:
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipSpaceId")
    def ip_space_id(self) -> str:
        return pulumi.get(self, "ip_space_id")

    @property
    @pulumi.getter(name="ipSpaceType")
    def ip_space_type(self) -> str:
        return pulumi.get(self, "ip_space_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetIpSpaceUplinkResult(GetIpSpaceUplinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpSpaceUplinkResult(
            associated_interface_ids=self.associated_interface_ids,
            description=self.description,
            external_network_id=self.external_network_id,
            id=self.id,
            ip_space_id=self.ip_space_id,
            ip_space_type=self.ip_space_type,
            name=self.name,
            status=self.status)


def get_ip_space_uplink(description: Optional[str] = None,
                        external_network_id: Optional[str] = None,
                        name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpSpaceUplinkResult:
    """
    Provides a data source to read IP Space Uplinks in External Networks (Provider Gateways).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    u1 = vcd.get_ip_space_uplink(name="ip-space-uplink-1",
        external_network_id=provider_gateway["id"])
    ```


    :param str external_network_id: Parent External Network ID
    :param str name: Name of IP Space Uplink
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['externalNetworkId'] = external_network_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getIpSpaceUplink:getIpSpaceUplink', __args__, opts=opts, typ=GetIpSpaceUplinkResult).value

    return AwaitableGetIpSpaceUplinkResult(
        associated_interface_ids=pulumi.get(__ret__, 'associated_interface_ids'),
        description=pulumi.get(__ret__, 'description'),
        external_network_id=pulumi.get(__ret__, 'external_network_id'),
        id=pulumi.get(__ret__, 'id'),
        ip_space_id=pulumi.get(__ret__, 'ip_space_id'),
        ip_space_type=pulumi.get(__ret__, 'ip_space_type'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'))
def get_ip_space_uplink_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                               external_network_id: Optional[pulumi.Input[str]] = None,
                               name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpSpaceUplinkResult]:
    """
    Provides a data source to read IP Space Uplinks in External Networks (Provider Gateways).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    u1 = vcd.get_ip_space_uplink(name="ip-space-uplink-1",
        external_network_id=provider_gateway["id"])
    ```


    :param str external_network_id: Parent External Network ID
    :param str name: Name of IP Space Uplink
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['externalNetworkId'] = external_network_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getIpSpaceUplink:getIpSpaceUplink', __args__, opts=opts, typ=GetIpSpaceUplinkResult)
    return __ret__.apply(lambda __response__: GetIpSpaceUplinkResult(
        associated_interface_ids=pulumi.get(__response__, 'associated_interface_ids'),
        description=pulumi.get(__response__, 'description'),
        external_network_id=pulumi.get(__response__, 'external_network_id'),
        id=pulumi.get(__response__, 'id'),
        ip_space_id=pulumi.get(__response__, 'ip_space_id'),
        ip_space_type=pulumi.get(__response__, 'ip_space_type'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status')))
