# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RdeTypeBehaviorAclArgs', 'RdeTypeBehaviorAcl']

@pulumi.input_type
class RdeTypeBehaviorAclArgs:
    def __init__(__self__, *,
                 access_level_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 behavior_id: pulumi.Input[str],
                 rde_type_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RdeTypeBehaviorAcl resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_level_ids: Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        :param pulumi.Input[str] behavior_id: The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
               or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        :param pulumi.Input[str] rde_type_id: The ID of the RDE Type
        """
        pulumi.set(__self__, "access_level_ids", access_level_ids)
        pulumi.set(__self__, "behavior_id", behavior_id)
        pulumi.set(__self__, "rde_type_id", rde_type_id)

    @property
    @pulumi.getter(name="accessLevelIds")
    def access_level_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        """
        return pulumi.get(self, "access_level_ids")

    @access_level_ids.setter
    def access_level_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "access_level_ids", value)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> pulumi.Input[str]:
        """
        The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
        or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        """
        return pulumi.get(self, "behavior_id")

    @behavior_id.setter
    def behavior_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "behavior_id", value)

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> pulumi.Input[str]:
        """
        The ID of the RDE Type
        """
        return pulumi.get(self, "rde_type_id")

    @rde_type_id.setter
    def rde_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rde_type_id", value)


@pulumi.input_type
class _RdeTypeBehaviorAclState:
    def __init__(__self__, *,
                 access_level_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 behavior_id: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RdeTypeBehaviorAcl resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_level_ids: Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        :param pulumi.Input[str] behavior_id: The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
               or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        :param pulumi.Input[str] rde_type_id: The ID of the RDE Type
        """
        if access_level_ids is not None:
            pulumi.set(__self__, "access_level_ids", access_level_ids)
        if behavior_id is not None:
            pulumi.set(__self__, "behavior_id", behavior_id)
        if rde_type_id is not None:
            pulumi.set(__self__, "rde_type_id", rde_type_id)

    @property
    @pulumi.getter(name="accessLevelIds")
    def access_level_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        """
        return pulumi.get(self, "access_level_ids")

    @access_level_ids.setter
    def access_level_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_level_ids", value)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
        or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        """
        return pulumi.get(self, "behavior_id")

    @behavior_id.setter
    def behavior_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior_id", value)

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the RDE Type
        """
        return pulumi.get(self, "rde_type_id")

    @rde_type_id.setter
    def rde_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_type_id", value)


class RdeTypeBehaviorAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_level_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 behavior_id: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RdeTypeBehaviorAcl resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_level_ids: Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        :param pulumi.Input[str] behavior_id: The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
               or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        :param pulumi.Input[str] rde_type_id: The ID of the RDE Type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdeTypeBehaviorAclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RdeTypeBehaviorAcl resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdeTypeBehaviorAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdeTypeBehaviorAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_level_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 behavior_id: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdeTypeBehaviorAclArgs.__new__(RdeTypeBehaviorAclArgs)

            if access_level_ids is None and not opts.urn:
                raise TypeError("Missing required property 'access_level_ids'")
            __props__.__dict__["access_level_ids"] = access_level_ids
            if behavior_id is None and not opts.urn:
                raise TypeError("Missing required property 'behavior_id'")
            __props__.__dict__["behavior_id"] = behavior_id
            if rde_type_id is None and not opts.urn:
                raise TypeError("Missing required property 'rde_type_id'")
            __props__.__dict__["rde_type_id"] = rde_type_id
        super(RdeTypeBehaviorAcl, __self__).__init__(
            'vcd:index/rdeTypeBehaviorAcl:RdeTypeBehaviorAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_level_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            behavior_id: Optional[pulumi.Input[str]] = None,
            rde_type_id: Optional[pulumi.Input[str]] = None) -> 'RdeTypeBehaviorAcl':
        """
        Get an existing RdeTypeBehaviorAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_level_ids: Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        :param pulumi.Input[str] behavior_id: The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
               or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        :param pulumi.Input[str] rde_type_id: The ID of the RDE Type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdeTypeBehaviorAclState.__new__(_RdeTypeBehaviorAclState)

        __props__.__dict__["access_level_ids"] = access_level_ids
        __props__.__dict__["behavior_id"] = behavior_id
        __props__.__dict__["rde_type_id"] = rde_type_id
        return RdeTypeBehaviorAcl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessLevelIds")
    def access_level_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
        """
        return pulumi.get(self, "access_level_ids")

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> pulumi.Output[str]:
        """
        The ID of either a [RDE Type Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type_behavior)
        or a [RDE Interface Behavior](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_interface_behavior)
        """
        return pulumi.get(self, "behavior_id")

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> pulumi.Output[str]:
        """
        The ID of the RDE Type
        """
        return pulumi.get(self, "rde_type_id")

