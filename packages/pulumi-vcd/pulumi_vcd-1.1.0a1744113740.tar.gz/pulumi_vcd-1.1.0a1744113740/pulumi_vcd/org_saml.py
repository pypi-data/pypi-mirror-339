# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgSamlArgs', 'OrgSaml']

@pulumi.input_type
class OrgSamlArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 org_id: pulumi.Input[str],
                 email: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_file: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_text: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 surname: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgSaml resource.
        :param pulumi.Input[bool] enabled: If true, the organization will use SAML for authentication
        :param pulumi.Input[str] org_id: Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        :param pulumi.Input[str] email: The name of the SAML attribute that returns the email address of the user
        :param pulumi.Input[str] entity_id: Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        :param pulumi.Input[str] first_name: The name of the SAML attribute that returns the first name of the user
        :param pulumi.Input[str] full_name: The name of the SAML attribute that returns the full name of the user
        :param pulumi.Input[str] group: The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        :param pulumi.Input[str] identity_provider_metadata_file: Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        :param pulumi.Input[str] identity_provider_metadata_text: Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        :param pulumi.Input[str] role: The name of the SAML attribute that returns the identifiers of all roles of the user
        :param pulumi.Input[str] surname: The name of the SAML attribute that returns the surname of the user
        :param pulumi.Input[str] user_name: The name of the SAML attribute that returns the username of the user
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "org_id", org_id)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if identity_provider_metadata_file is not None:
            pulumi.set(__self__, "identity_provider_metadata_file", identity_provider_metadata_file)
        if identity_provider_metadata_text is not None:
            pulumi.set(__self__, "identity_provider_metadata_text", identity_provider_metadata_text)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        If true, the organization will use SAML for authentication
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the email address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the first name of the user
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the full name of the user
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="identityProviderMetadataFile")
    def identity_provider_metadata_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_file")

    @identity_provider_metadata_file.setter
    def identity_provider_metadata_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_metadata_file", value)

    @property
    @pulumi.getter(name="identityProviderMetadataText")
    def identity_provider_metadata_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_text")

    @identity_provider_metadata_text.setter
    def identity_provider_metadata_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_metadata_text", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all roles of the user
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def surname(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the surname of the user
        """
        return pulumi.get(self, "surname")

    @surname.setter
    def surname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "surname", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the username of the user
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _OrgSamlState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_file: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_text: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 surname: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgSaml resources.
        :param pulumi.Input[str] email: The name of the SAML attribute that returns the email address of the user
        :param pulumi.Input[bool] enabled: If true, the organization will use SAML for authentication
        :param pulumi.Input[str] entity_id: Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        :param pulumi.Input[str] first_name: The name of the SAML attribute that returns the first name of the user
        :param pulumi.Input[str] full_name: The name of the SAML attribute that returns the full name of the user
        :param pulumi.Input[str] group: The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        :param pulumi.Input[str] identity_provider_metadata_file: Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        :param pulumi.Input[str] identity_provider_metadata_text: Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        :param pulumi.Input[str] org_id: Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        :param pulumi.Input[str] role: The name of the SAML attribute that returns the identifiers of all roles of the user
        :param pulumi.Input[str] surname: The name of the SAML attribute that returns the surname of the user
        :param pulumi.Input[str] user_name: The name of the SAML attribute that returns the username of the user
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if identity_provider_metadata_file is not None:
            pulumi.set(__self__, "identity_provider_metadata_file", identity_provider_metadata_file)
        if identity_provider_metadata_text is not None:
            pulumi.set(__self__, "identity_provider_metadata_text", identity_provider_metadata_text)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the email address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the organization will use SAML for authentication
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the first name of the user
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the full name of the user
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="identityProviderMetadataFile")
    def identity_provider_metadata_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_file")

    @identity_provider_metadata_file.setter
    def identity_provider_metadata_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_metadata_file", value)

    @property
    @pulumi.getter(name="identityProviderMetadataText")
    def identity_provider_metadata_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_text")

    @identity_provider_metadata_text.setter
    def identity_provider_metadata_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_metadata_text", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all roles of the user
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def surname(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the surname of the user
        """
        return pulumi.get(self, "surname")

    @surname.setter
    def surname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "surname", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML attribute that returns the username of the user
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class OrgSaml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_file: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_text: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 surname: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OrgSaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The name of the SAML attribute that returns the email address of the user
        :param pulumi.Input[bool] enabled: If true, the organization will use SAML for authentication
        :param pulumi.Input[str] entity_id: Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        :param pulumi.Input[str] first_name: The name of the SAML attribute that returns the first name of the user
        :param pulumi.Input[str] full_name: The name of the SAML attribute that returns the full name of the user
        :param pulumi.Input[str] group: The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        :param pulumi.Input[str] identity_provider_metadata_file: Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        :param pulumi.Input[str] identity_provider_metadata_text: Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        :param pulumi.Input[str] org_id: Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        :param pulumi.Input[str] role: The name of the SAML attribute that returns the identifiers of all roles of the user
        :param pulumi.Input[str] surname: The name of the SAML attribute that returns the surname of the user
        :param pulumi.Input[str] user_name: The name of the SAML attribute that returns the username of the user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgSamlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgSaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgSamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgSamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_file: Optional[pulumi.Input[str]] = None,
                 identity_provider_metadata_text: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 surname: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgSamlArgs.__new__(OrgSamlArgs)

            __props__.__dict__["email"] = email
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["first_name"] = first_name
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["group"] = group
            __props__.__dict__["identity_provider_metadata_file"] = identity_provider_metadata_file
            __props__.__dict__["identity_provider_metadata_text"] = identity_provider_metadata_text
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["role"] = role
            __props__.__dict__["surname"] = surname
            __props__.__dict__["user_name"] = user_name
        super(OrgSaml, __self__).__init__(
            'vcd:index/orgSaml:OrgSaml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            first_name: Optional[pulumi.Input[str]] = None,
            full_name: Optional[pulumi.Input[str]] = None,
            group: Optional[pulumi.Input[str]] = None,
            identity_provider_metadata_file: Optional[pulumi.Input[str]] = None,
            identity_provider_metadata_text: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            surname: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'OrgSaml':
        """
        Get an existing OrgSaml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The name of the SAML attribute that returns the email address of the user
        :param pulumi.Input[bool] enabled: If true, the organization will use SAML for authentication
        :param pulumi.Input[str] entity_id: Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        :param pulumi.Input[str] first_name: The name of the SAML attribute that returns the first name of the user
        :param pulumi.Input[str] full_name: The name of the SAML attribute that returns the full name of the user
        :param pulumi.Input[str] group: The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        :param pulumi.Input[str] identity_provider_metadata_file: Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        :param pulumi.Input[str] identity_provider_metadata_text: Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        :param pulumi.Input[str] org_id: Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        :param pulumi.Input[str] role: The name of the SAML attribute that returns the identifiers of all roles of the user
        :param pulumi.Input[str] surname: The name of the SAML attribute that returns the surname of the user
        :param pulumi.Input[str] user_name: The name of the SAML attribute that returns the username of the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgSamlState.__new__(_OrgSamlState)

        __props__.__dict__["email"] = email
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["first_name"] = first_name
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["group"] = group
        __props__.__dict__["identity_provider_metadata_file"] = identity_provider_metadata_file
        __props__.__dict__["identity_provider_metadata_text"] = identity_provider_metadata_text
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["role"] = role
        __props__.__dict__["surname"] = surname
        __props__.__dict__["user_name"] = user_name
        return OrgSaml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the email address of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        If true, the organization will use SAML for authentication
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[Optional[str]]:
        """
        Your service provider entity ID. Once you set this field, it cannot be changed back to empty
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the first name of the user
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the full name of the user
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="identityProviderMetadataFile")
    def identity_provider_metadata_file(self) -> pulumi.Output[Optional[str]]:
        """
        Name of a file containing the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_text` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_file")

    @property
    @pulumi.getter(name="identityProviderMetadataText")
    def identity_provider_metadata_text(self) -> pulumi.Output[Optional[str]]:
        """
        Text of the metadata text from a SAML Identity Provider. Required if `identity_provider_metadata_file` is not defined
        """
        return pulumi.get(self, "identity_provider_metadata_text")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the identifiers of all roles of the user
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def surname(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the surname of the user
        """
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the SAML attribute that returns the username of the user
        """
        return pulumi.get(self, "user_name")

