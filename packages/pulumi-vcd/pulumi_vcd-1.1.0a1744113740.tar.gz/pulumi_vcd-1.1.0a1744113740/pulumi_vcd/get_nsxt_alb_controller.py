# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtAlbControllerResult',
    'AwaitableGetNsxtAlbControllerResult',
    'get_nsxt_alb_controller',
    'get_nsxt_alb_controller_output',
]

@pulumi.output_type
class GetNsxtAlbControllerResult:
    """
    A collection of values returned by getNsxtAlbController.
    """
    def __init__(__self__, description=None, id=None, license_type=None, name=None, url=None, username=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if license_type and not isinstance(license_type, str):
            raise TypeError("Expected argument 'license_type' to be a str")
        pulumi.set(__self__, "license_type", license_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetNsxtAlbControllerResult(GetNsxtAlbControllerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbControllerResult(
            description=self.description,
            id=self.id,
            license_type=self.license_type,
            name=self.name,
            url=self.url,
            username=self.username,
            version=self.version)


def get_nsxt_alb_controller(name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbControllerResult:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Controller for Providers. It helps to integrate VMware Cloud Director with
    Avi Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance.
    Controller instances serve as a central control plane for the load-balancing services provided by Avi Load
    Balancer.

    > Only `System Administrator` can use this data source.

    > VCD 10.3.0 has a caching bug which prevents listing importable clouds immediately (retrieved using
    [`get_nsxt_alb_importable_cloud`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_alb_importable_cloud)) after ALB
    Controller is created. This data should be available 15 minutes after the Controller is created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_alb_controller(name="avi controller")
    ```


    :param str name: Unique name of existing ALB Controller.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbController:getNsxtAlbController', __args__, opts=opts, typ=GetNsxtAlbControllerResult).value

    return AwaitableGetNsxtAlbControllerResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        license_type=pulumi.get(__ret__, 'license_type'),
        name=pulumi.get(__ret__, 'name'),
        url=pulumi.get(__ret__, 'url'),
        username=pulumi.get(__ret__, 'username'),
        version=pulumi.get(__ret__, 'version'))
def get_nsxt_alb_controller_output(name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtAlbControllerResult]:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to read ALB Controller for Providers. It helps to integrate VMware Cloud Director with
    Avi Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance.
    Controller instances serve as a central control plane for the load-balancing services provided by Avi Load
    Balancer.

    > Only `System Administrator` can use this data source.

    > VCD 10.3.0 has a caching bug which prevents listing importable clouds immediately (retrieved using
    [`get_nsxt_alb_importable_cloud`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_alb_importable_cloud)) after ALB
    Controller is created. This data should be available 15 minutes after the Controller is created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_alb_controller(name="avi controller")
    ```


    :param str name: Unique name of existing ALB Controller.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtAlbController:getNsxtAlbController', __args__, opts=opts, typ=GetNsxtAlbControllerResult)
    return __ret__.apply(lambda __response__: GetNsxtAlbControllerResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        license_type=pulumi.get(__response__, 'license_type'),
        name=pulumi.get(__response__, 'name'),
        url=pulumi.get(__response__, 'url'),
        username=pulumi.get(__response__, 'username'),
        version=pulumi.get(__response__, 'version')))
