# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DseRegistryConfigurationArgs', 'DseRegistryConfiguration']

@pulumi.input_type
class DseRegistryConfigurationArgs:
    def __init__(__self__, *,
                 chart_repository: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_repository: Optional[pulumi.Input[str]] = None,
                 use_default_values: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DseRegistryConfiguration resource.
        :param pulumi.Input[str] chart_repository: Chart repository for Helm based images
        :param pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]] container_registries: Only applies to `VCD Data Solutions` configuration. Specifies
               credentials that can be used to authenticate to repositories. See Container Registry
               Configuration 
               
               
               <a id="container-registry"></a>
        :param pulumi.Input[str] name: The name of Data Solution as it appears in repository configuration
        :param pulumi.Input[str] package_name: Helm package name. Only for Helm based images
        :param pulumi.Input[str] package_repository: Package repository for container based images
        :param pulumi.Input[bool] use_default_values: Defines if repository settings should be inherited from Data
               Solution itself. Default `false`
        :param pulumi.Input[str] version: Version of package to use. Required when `use_default_values` is not used.
        """
        if chart_repository is not None:
            pulumi.set(__self__, "chart_repository", chart_repository)
        if container_registries is not None:
            pulumi.set(__self__, "container_registries", container_registries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_repository is not None:
            pulumi.set(__self__, "package_repository", package_repository)
        if use_default_values is not None:
            pulumi.set(__self__, "use_default_values", use_default_values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="chartRepository")
    def chart_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Chart repository for Helm based images
        """
        return pulumi.get(self, "chart_repository")

    @chart_repository.setter
    def chart_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_repository", value)

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]]:
        """
        Only applies to `VCD Data Solutions` configuration. Specifies
        credentials that can be used to authenticate to repositories. See Container Registry
        Configuration 


        <a id="container-registry"></a>
        """
        return pulumi.get(self, "container_registries")

    @container_registries.setter
    def container_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]]):
        pulumi.set(self, "container_registries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Data Solution as it appears in repository configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Helm package name. Only for Helm based images
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="packageRepository")
    def package_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Package repository for container based images
        """
        return pulumi.get(self, "package_repository")

    @package_repository.setter
    def package_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_repository", value)

    @property
    @pulumi.getter(name="useDefaultValues")
    def use_default_values(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if repository settings should be inherited from Data
        Solution itself. Default `false`
        """
        return pulumi.get(self, "use_default_values")

    @use_default_values.setter
    def use_default_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of package to use. Required when `use_default_values` is not used.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _DseRegistryConfigurationState:
    def __init__(__self__, *,
                 chart_repository: Optional[pulumi.Input[str]] = None,
                 compatible_version_constraints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]] = None,
                 default_chart_repository: Optional[pulumi.Input[str]] = None,
                 default_package_name: Optional[pulumi.Input[str]] = None,
                 default_repository: Optional[pulumi.Input[str]] = None,
                 default_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_repository: Optional[pulumi.Input[str]] = None,
                 rde_state: Optional[pulumi.Input[str]] = None,
                 requires_version_compatibility: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_default_values: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DseRegistryConfiguration resources.
        :param pulumi.Input[str] chart_repository: Chart repository for Helm based images
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_version_constraints: A set of version constrains that this Data Solution defines
        :param pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]] container_registries: Only applies to `VCD Data Solutions` configuration. Specifies
               credentials that can be used to authenticate to repositories. See Container Registry
               Configuration 
               
               
               <a id="container-registry"></a>
        :param pulumi.Input[str] default_chart_repository: Default chart repository as provided by Data Solution
        :param pulumi.Input[str] default_package_name: Default package name as provided by Data Solution
        :param pulumi.Input[str] default_repository: Default container repository as provided by Data Solution
        :param pulumi.Input[str] default_version: Default package version as provided by Data Solution
        :param pulumi.Input[str] name: The name of Data Solution as it appears in repository configuration
        :param pulumi.Input[str] package_name: Helm package name. Only for Helm based images
        :param pulumi.Input[str] package_repository: Package repository for container based images
        :param pulumi.Input[str] rde_state: State of parent Runtime Defined Entity (RDE)
        :param pulumi.Input[bool] requires_version_compatibility: Boolean flag as defined in Data Solution
        :param pulumi.Input[str] type: Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
        :param pulumi.Input[bool] use_default_values: Defines if repository settings should be inherited from Data
               Solution itself. Default `false`
        :param pulumi.Input[str] version: Version of package to use. Required when `use_default_values` is not used.
        """
        if chart_repository is not None:
            pulumi.set(__self__, "chart_repository", chart_repository)
        if compatible_version_constraints is not None:
            pulumi.set(__self__, "compatible_version_constraints", compatible_version_constraints)
        if container_registries is not None:
            pulumi.set(__self__, "container_registries", container_registries)
        if default_chart_repository is not None:
            pulumi.set(__self__, "default_chart_repository", default_chart_repository)
        if default_package_name is not None:
            pulumi.set(__self__, "default_package_name", default_package_name)
        if default_repository is not None:
            pulumi.set(__self__, "default_repository", default_repository)
        if default_version is not None:
            pulumi.set(__self__, "default_version", default_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_repository is not None:
            pulumi.set(__self__, "package_repository", package_repository)
        if rde_state is not None:
            pulumi.set(__self__, "rde_state", rde_state)
        if requires_version_compatibility is not None:
            pulumi.set(__self__, "requires_version_compatibility", requires_version_compatibility)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_default_values is not None:
            pulumi.set(__self__, "use_default_values", use_default_values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="chartRepository")
    def chart_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Chart repository for Helm based images
        """
        return pulumi.get(self, "chart_repository")

    @chart_repository.setter
    def chart_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_repository", value)

    @property
    @pulumi.getter(name="compatibleVersionConstraints")
    def compatible_version_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of version constrains that this Data Solution defines
        """
        return pulumi.get(self, "compatible_version_constraints")

    @compatible_version_constraints.setter
    def compatible_version_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compatible_version_constraints", value)

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]]:
        """
        Only applies to `VCD Data Solutions` configuration. Specifies
        credentials that can be used to authenticate to repositories. See Container Registry
        Configuration 


        <a id="container-registry"></a>
        """
        return pulumi.get(self, "container_registries")

    @container_registries.setter
    def container_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DseRegistryConfigurationContainerRegistryArgs']]]]):
        pulumi.set(self, "container_registries", value)

    @property
    @pulumi.getter(name="defaultChartRepository")
    def default_chart_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Default chart repository as provided by Data Solution
        """
        return pulumi.get(self, "default_chart_repository")

    @default_chart_repository.setter
    def default_chart_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_chart_repository", value)

    @property
    @pulumi.getter(name="defaultPackageName")
    def default_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Default package name as provided by Data Solution
        """
        return pulumi.get(self, "default_package_name")

    @default_package_name.setter
    def default_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_package_name", value)

    @property
    @pulumi.getter(name="defaultRepository")
    def default_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Default container repository as provided by Data Solution
        """
        return pulumi.get(self, "default_repository")

    @default_repository.setter
    def default_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_repository", value)

    @property
    @pulumi.getter(name="defaultVersion")
    def default_version(self) -> Optional[pulumi.Input[str]]:
        """
        Default package version as provided by Data Solution
        """
        return pulumi.get(self, "default_version")

    @default_version.setter
    def default_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Data Solution as it appears in repository configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Helm package name. Only for Helm based images
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="packageRepository")
    def package_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Package repository for container based images
        """
        return pulumi.get(self, "package_repository")

    @package_repository.setter
    def package_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_repository", value)

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of parent Runtime Defined Entity (RDE)
        """
        return pulumi.get(self, "rde_state")

    @rde_state.setter
    def rde_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_state", value)

    @property
    @pulumi.getter(name="requiresVersionCompatibility")
    def requires_version_compatibility(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean flag as defined in Data Solution
        """
        return pulumi.get(self, "requires_version_compatibility")

    @requires_version_compatibility.setter
    def requires_version_compatibility(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_version_compatibility", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useDefaultValues")
    def use_default_values(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if repository settings should be inherited from Data
        Solution itself. Default `false`
        """
        return pulumi.get(self, "use_default_values")

    @use_default_values.setter
    def use_default_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of package to use. Required when `use_default_values` is not used.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class DseRegistryConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chart_repository: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DseRegistryConfigurationContainerRegistryArgs', 'DseRegistryConfigurationContainerRegistryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_repository: Optional[pulumi.Input[str]] = None,
                 use_default_values: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DseRegistryConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chart_repository: Chart repository for Helm based images
        :param pulumi.Input[Sequence[pulumi.Input[Union['DseRegistryConfigurationContainerRegistryArgs', 'DseRegistryConfigurationContainerRegistryArgsDict']]]] container_registries: Only applies to `VCD Data Solutions` configuration. Specifies
               credentials that can be used to authenticate to repositories. See Container Registry
               Configuration 
               
               
               <a id="container-registry"></a>
        :param pulumi.Input[str] name: The name of Data Solution as it appears in repository configuration
        :param pulumi.Input[str] package_name: Helm package name. Only for Helm based images
        :param pulumi.Input[str] package_repository: Package repository for container based images
        :param pulumi.Input[bool] use_default_values: Defines if repository settings should be inherited from Data
               Solution itself. Default `false`
        :param pulumi.Input[str] version: Version of package to use. Required when `use_default_values` is not used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DseRegistryConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DseRegistryConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DseRegistryConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DseRegistryConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chart_repository: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DseRegistryConfigurationContainerRegistryArgs', 'DseRegistryConfigurationContainerRegistryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_repository: Optional[pulumi.Input[str]] = None,
                 use_default_values: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DseRegistryConfigurationArgs.__new__(DseRegistryConfigurationArgs)

            __props__.__dict__["chart_repository"] = chart_repository
            __props__.__dict__["container_registries"] = container_registries
            __props__.__dict__["name"] = name
            __props__.__dict__["package_name"] = package_name
            __props__.__dict__["package_repository"] = package_repository
            __props__.__dict__["use_default_values"] = use_default_values
            __props__.__dict__["version"] = version
            __props__.__dict__["compatible_version_constraints"] = None
            __props__.__dict__["default_chart_repository"] = None
            __props__.__dict__["default_package_name"] = None
            __props__.__dict__["default_repository"] = None
            __props__.__dict__["default_version"] = None
            __props__.__dict__["rde_state"] = None
            __props__.__dict__["requires_version_compatibility"] = None
            __props__.__dict__["type"] = None
        super(DseRegistryConfiguration, __self__).__init__(
            'vcd:index/dseRegistryConfiguration:DseRegistryConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chart_repository: Optional[pulumi.Input[str]] = None,
            compatible_version_constraints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DseRegistryConfigurationContainerRegistryArgs', 'DseRegistryConfigurationContainerRegistryArgsDict']]]]] = None,
            default_chart_repository: Optional[pulumi.Input[str]] = None,
            default_package_name: Optional[pulumi.Input[str]] = None,
            default_repository: Optional[pulumi.Input[str]] = None,
            default_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            package_name: Optional[pulumi.Input[str]] = None,
            package_repository: Optional[pulumi.Input[str]] = None,
            rde_state: Optional[pulumi.Input[str]] = None,
            requires_version_compatibility: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None,
            use_default_values: Optional[pulumi.Input[bool]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'DseRegistryConfiguration':
        """
        Get an existing DseRegistryConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chart_repository: Chart repository for Helm based images
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_version_constraints: A set of version constrains that this Data Solution defines
        :param pulumi.Input[Sequence[pulumi.Input[Union['DseRegistryConfigurationContainerRegistryArgs', 'DseRegistryConfigurationContainerRegistryArgsDict']]]] container_registries: Only applies to `VCD Data Solutions` configuration. Specifies
               credentials that can be used to authenticate to repositories. See Container Registry
               Configuration 
               
               
               <a id="container-registry"></a>
        :param pulumi.Input[str] default_chart_repository: Default chart repository as provided by Data Solution
        :param pulumi.Input[str] default_package_name: Default package name as provided by Data Solution
        :param pulumi.Input[str] default_repository: Default container repository as provided by Data Solution
        :param pulumi.Input[str] default_version: Default package version as provided by Data Solution
        :param pulumi.Input[str] name: The name of Data Solution as it appears in repository configuration
        :param pulumi.Input[str] package_name: Helm package name. Only for Helm based images
        :param pulumi.Input[str] package_repository: Package repository for container based images
        :param pulumi.Input[str] rde_state: State of parent Runtime Defined Entity (RDE)
        :param pulumi.Input[bool] requires_version_compatibility: Boolean flag as defined in Data Solution
        :param pulumi.Input[str] type: Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
        :param pulumi.Input[bool] use_default_values: Defines if repository settings should be inherited from Data
               Solution itself. Default `false`
        :param pulumi.Input[str] version: Version of package to use. Required when `use_default_values` is not used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DseRegistryConfigurationState.__new__(_DseRegistryConfigurationState)

        __props__.__dict__["chart_repository"] = chart_repository
        __props__.__dict__["compatible_version_constraints"] = compatible_version_constraints
        __props__.__dict__["container_registries"] = container_registries
        __props__.__dict__["default_chart_repository"] = default_chart_repository
        __props__.__dict__["default_package_name"] = default_package_name
        __props__.__dict__["default_repository"] = default_repository
        __props__.__dict__["default_version"] = default_version
        __props__.__dict__["name"] = name
        __props__.__dict__["package_name"] = package_name
        __props__.__dict__["package_repository"] = package_repository
        __props__.__dict__["rde_state"] = rde_state
        __props__.__dict__["requires_version_compatibility"] = requires_version_compatibility
        __props__.__dict__["type"] = type
        __props__.__dict__["use_default_values"] = use_default_values
        __props__.__dict__["version"] = version
        return DseRegistryConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chartRepository")
    def chart_repository(self) -> pulumi.Output[str]:
        """
        Chart repository for Helm based images
        """
        return pulumi.get(self, "chart_repository")

    @property
    @pulumi.getter(name="compatibleVersionConstraints")
    def compatible_version_constraints(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of version constrains that this Data Solution defines
        """
        return pulumi.get(self, "compatible_version_constraints")

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> pulumi.Output[Optional[Sequence['outputs.DseRegistryConfigurationContainerRegistry']]]:
        """
        Only applies to `VCD Data Solutions` configuration. Specifies
        credentials that can be used to authenticate to repositories. See Container Registry
        Configuration 


        <a id="container-registry"></a>
        """
        return pulumi.get(self, "container_registries")

    @property
    @pulumi.getter(name="defaultChartRepository")
    def default_chart_repository(self) -> pulumi.Output[str]:
        """
        Default chart repository as provided by Data Solution
        """
        return pulumi.get(self, "default_chart_repository")

    @property
    @pulumi.getter(name="defaultPackageName")
    def default_package_name(self) -> pulumi.Output[str]:
        """
        Default package name as provided by Data Solution
        """
        return pulumi.get(self, "default_package_name")

    @property
    @pulumi.getter(name="defaultRepository")
    def default_repository(self) -> pulumi.Output[str]:
        """
        Default container repository as provided by Data Solution
        """
        return pulumi.get(self, "default_repository")

    @property
    @pulumi.getter(name="defaultVersion")
    def default_version(self) -> pulumi.Output[str]:
        """
        Default package version as provided by Data Solution
        """
        return pulumi.get(self, "default_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of Data Solution as it appears in repository configuration
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> pulumi.Output[str]:
        """
        Helm package name. Only for Helm based images
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageRepository")
    def package_repository(self) -> pulumi.Output[str]:
        """
        Package repository for container based images
        """
        return pulumi.get(self, "package_repository")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> pulumi.Output[str]:
        """
        State of parent Runtime Defined Entity (RDE)
        """
        return pulumi.get(self, "rde_state")

    @property
    @pulumi.getter(name="requiresVersionCompatibility")
    def requires_version_compatibility(self) -> pulumi.Output[bool]:
        """
        Boolean flag as defined in Data Solution
        """
        return pulumi.get(self, "requires_version_compatibility")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useDefaultValues")
    def use_default_values(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if repository settings should be inherited from Data
        Solution itself. Default `false`
        """
        return pulumi.get(self, "use_default_values")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version of package to use. Required when `use_default_values` is not used.
        """
        return pulumi.get(self, "version")

