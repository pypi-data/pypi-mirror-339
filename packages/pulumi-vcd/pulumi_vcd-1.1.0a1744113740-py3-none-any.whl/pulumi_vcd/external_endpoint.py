# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ExternalEndpointArgs', 'ExternalEndpoint']

@pulumi.input_type
class ExternalEndpointArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 root_url: pulumi.Input[str],
                 vendor: pulumi.Input[str],
                 version: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 disable_on_removal: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExternalEndpoint resource.
        :param pulumi.Input[bool] enabled: Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
               To disable it automatically on removal, set `disable_on_removal=true` (see below)
        :param pulumi.Input[str] root_url: The endpoint which requests will be redirected to. Must use HTTPS protocol
        :param pulumi.Input[str] vendor: The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] version: The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] description: Description of the External Endpoint
        :param pulumi.Input[bool] disable_on_removal: Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
               It is `false` by default
        :param pulumi.Input[str] name: The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "root_url", root_url)
        pulumi.set(__self__, "vendor", vendor)
        pulumi.set(__self__, "version", version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_on_removal is not None:
            pulumi.set(__self__, "disable_on_removal", disable_on_removal)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
        To disable it automatically on removal, set `disable_on_removal=true` (see below)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> pulumi.Input[str]:
        """
        The endpoint which requests will be redirected to. Must use HTTPS protocol
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Input[str]:
        """
        The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: pulumi.Input[str]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the External Endpoint
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableOnRemoval")
    def disable_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
        It is `false` by default
        """
        return pulumi.get(self, "disable_on_removal")

    @disable_on_removal.setter
    def disable_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_on_removal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ExternalEndpointState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_on_removal: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalEndpoint resources.
        :param pulumi.Input[str] description: Description of the External Endpoint
        :param pulumi.Input[bool] disable_on_removal: Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
               It is `false` by default
        :param pulumi.Input[bool] enabled: Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
               To disable it automatically on removal, set `disable_on_removal=true` (see below)
        :param pulumi.Input[str] name: The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] root_url: The endpoint which requests will be redirected to. Must use HTTPS protocol
        :param pulumi.Input[str] vendor: The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] version: The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_on_removal is not None:
            pulumi.set(__self__, "disable_on_removal", disable_on_removal)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the External Endpoint
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableOnRemoval")
    def disable_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
        It is `false` by default
        """
        return pulumi.get(self, "disable_on_removal")

    @disable_on_removal.setter
    def disable_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_on_removal", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
        To disable it automatically on removal, set `disable_on_removal=true` (see below)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint which requests will be redirected to. Must use HTTPS protocol
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class ExternalEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_on_removal: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ExternalEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the External Endpoint
        :param pulumi.Input[bool] disable_on_removal: Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
               It is `false` by default
        :param pulumi.Input[bool] enabled: Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
               To disable it automatically on removal, set `disable_on_removal=true` (see below)
        :param pulumi.Input[str] name: The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] root_url: The endpoint which requests will be redirected to. Must use HTTPS protocol
        :param pulumi.Input[str] vendor: The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] version: The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_on_removal: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalEndpointArgs.__new__(ExternalEndpointArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["disable_on_removal"] = disable_on_removal
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            if root_url is None and not opts.urn:
                raise TypeError("Missing required property 'root_url'")
            __props__.__dict__["root_url"] = root_url
            if vendor is None and not opts.urn:
                raise TypeError("Missing required property 'vendor'")
            __props__.__dict__["vendor"] = vendor
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        super(ExternalEndpoint, __self__).__init__(
            'vcd:index/externalEndpoint:ExternalEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            disable_on_removal: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            root_url: Optional[pulumi.Input[str]] = None,
            vendor: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'ExternalEndpoint':
        """
        Get an existing ExternalEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the External Endpoint
        :param pulumi.Input[bool] disable_on_removal: Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
               It is `false` by default
        :param pulumi.Input[bool] enabled: Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
               To disable it automatically on removal, set `disable_on_removal=true` (see below)
        :param pulumi.Input[str] name: The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] root_url: The endpoint which requests will be redirected to. Must use HTTPS protocol
        :param pulumi.Input[str] vendor: The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        :param pulumi.Input[str] version: The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalEndpointState.__new__(_ExternalEndpointState)

        __props__.__dict__["description"] = description
        __props__.__dict__["disable_on_removal"] = disable_on_removal
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["root_url"] = root_url
        __props__.__dict__["vendor"] = vendor
        __props__.__dict__["version"] = version
        return ExternalEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the External Endpoint
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableOnRemoval")
    def disable_on_removal(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
        It is `false` by default
        """
        return pulumi.get(self, "disable_on_removal")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the External Endpoint is enabled or not. **Must be `false` before removing this resource**, otherwise deletion will fail.
        To disable it automatically on removal, set `disable_on_removal=true` (see below)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> pulumi.Output[str]:
        """
        The endpoint which requests will be redirected to. Must use HTTPS protocol
        """
        return pulumi.get(self, "root_url")

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Output[str]:
        """
        The vendor name of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the External Endpoint. The combination of `vendor` + `name` + `version` must be unique. Can't be modified after creation
        """
        return pulumi.get(self, "version")

