# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RdeInterfaceArgs', 'RdeInterface']

@pulumi.input_type
class RdeInterfaceArgs:
    def __init__(__self__, *,
                 nss: pulumi.Input[str],
                 vendor: pulumi.Input[str],
                 version: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RdeInterface resource.
        :param pulumi.Input[str] nss: A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] vendor: The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        :param pulumi.Input[str] name: The name of the RDE Interface.
        """
        pulumi.set(__self__, "nss", nss)
        pulumi.set(__self__, "vendor", vendor)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def nss(self) -> pulumi.Input[str]:
        """
        A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "nss")

    @nss.setter
    def nss(self, value: pulumi.Input[str]):
        pulumi.set(self, "nss", value)

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Input[str]:
        """
        The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: pulumi.Input[str]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the RDE Interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RdeInterfaceState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 nss: Optional[pulumi.Input[str]] = None,
                 readonly: Optional[pulumi.Input[bool]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RdeInterface resources.
        :param pulumi.Input[str] name: The name of the RDE Interface.
        :param pulumi.Input[str] nss: A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[bool] readonly: Specifies if the RDE Interface can be only read.
        :param pulumi.Input[str] vendor: The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nss is not None:
            pulumi.set(__self__, "nss", nss)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the RDE Interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nss(self) -> Optional[pulumi.Input[str]]:
        """
        A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "nss")

    @nss.setter
    def nss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nss", value)

    @property
    @pulumi.getter
    def readonly(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if the RDE Interface can be only read.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "readonly", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class RdeInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nss: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RdeInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the RDE Interface.
        :param pulumi.Input[str] nss: A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] vendor: The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdeInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RdeInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdeInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdeInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nss: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdeInterfaceArgs.__new__(RdeInterfaceArgs)

            __props__.__dict__["name"] = name
            if nss is None and not opts.urn:
                raise TypeError("Missing required property 'nss'")
            __props__.__dict__["nss"] = nss
            if vendor is None and not opts.urn:
                raise TypeError("Missing required property 'vendor'")
            __props__.__dict__["vendor"] = vendor
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["readonly"] = None
        super(RdeInterface, __self__).__init__(
            'vcd:index/rdeInterface:RdeInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            nss: Optional[pulumi.Input[str]] = None,
            readonly: Optional[pulumi.Input[bool]] = None,
            vendor: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'RdeInterface':
        """
        Get an existing RdeInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the RDE Interface.
        :param pulumi.Input[str] nss: A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[bool] readonly: Specifies if the RDE Interface can be only read.
        :param pulumi.Input[str] vendor: The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        :param pulumi.Input[str] version: The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdeInterfaceState.__new__(_RdeInterfaceState)

        __props__.__dict__["name"] = name
        __props__.__dict__["nss"] = nss
        __props__.__dict__["readonly"] = readonly
        __props__.__dict__["vendor"] = vendor
        __props__.__dict__["version"] = version
        return RdeInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the RDE Interface.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nss(self) -> pulumi.Output[str]:
        """
        A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "nss")

    @property
    @pulumi.getter
    def readonly(self) -> pulumi.Output[bool]:
        """
        Specifies if the RDE Interface can be only read.
        """
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Output[str]:
        """
        The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        """
        return pulumi.get(self, "version")

