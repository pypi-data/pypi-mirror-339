# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NsxvSnatArgs', 'NsxvSnat']

@pulumi.input_type
class NsxvSnatArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 network_name: pulumi.Input[str],
                 network_type: pulumi.Input[str],
                 original_address: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 translated_address: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxvSnat resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
        :param pulumi.Input[str] network_name: The name of the network on which to apply the SNAT rule.
        :param pulumi.Input[str] network_type: Type of the network on which to apply the DNAT rule. Possible values
               `org` or `ext`.
        :param pulumi.Input[str] original_address: IP address, range or subnet. These addresses are the IP addresses
               of one or more virtual machines for which you are configuring the SNAT rule so that they can send
               traffic to the external network.
        :param pulumi.Input[str] description: Free text description.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[str] translated_address: IP address, range or subnet. This address is always the public
               IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
               which source addresses (the virtual machines) on outbound packets are translated to when they send
               traffic to the external network.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "original_address", original_address)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if translated_address is not None:
            pulumi.set(__self__, "translated_address", translated_address)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which to apply the SNAT rule.
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> pulumi.Input[str]:
        """
        The name of the network on which to apply the SNAT rule.
        """
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Input[str]:
        """
        Type of the network on which to apply the DNAT rule. Possible values
        `org` or `ext`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="originalAddress")
    def original_address(self) -> pulumi.Input[str]:
        """
        IP address, range or subnet. These addresses are the IP addresses
        of one or more virtual machines for which you are configuring the SNAT rule so that they can send
        traffic to the external network.
        """
        return pulumi.get(self, "original_address")

    @original_address.setter
    def original_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "original_address", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Free text description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[int]]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="translatedAddress")
    def translated_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address, range or subnet. This address is always the public
        IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
        which source addresses (the virtual machines) on outbound packets are translated to when they send
        traffic to the external network.
        """
        return pulumi.get(self, "translated_address")

    @translated_address.setter
    def translated_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translated_address", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxvSnatState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 original_address: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 translated_address: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxvSnat resources.
        :param pulumi.Input[str] description: Free text description.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] network_name: The name of the network on which to apply the SNAT rule.
        :param pulumi.Input[str] network_type: Type of the network on which to apply the DNAT rule. Possible values
               `org` or `ext`.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] original_address: IP address, range or subnet. These addresses are the IP addresses
               of one or more virtual machines for which you are configuring the SNAT rule so that they can send
               traffic to the external network.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[str] translated_address: IP address, range or subnet. This address is always the public
               IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
               which source addresses (the virtual machines) on outbound packets are translated to when they send
               traffic to the external network.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if original_address is not None:
            pulumi.set(__self__, "original_address", original_address)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if translated_address is not None:
            pulumi.set(__self__, "translated_address", translated_address)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Free text description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which to apply the SNAT rule.
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network on which to apply the SNAT rule.
        """
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network on which to apply the DNAT rule. Possible values
        `org` or `ext`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="originalAddress")
    def original_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address, range or subnet. These addresses are the IP addresses
        of one or more virtual machines for which you are configuring the SNAT rule so that they can send
        traffic to the external network.
        """
        return pulumi.get(self, "original_address")

    @original_address.setter
    def original_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_address", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[int]]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="translatedAddress")
    def translated_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address, range or subnet. This address is always the public
        IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
        which source addresses (the virtual machines) on outbound packets are translated to when they send
        traffic to the external network.
        """
        return pulumi.get(self, "translated_address")

    @translated_address.setter
    def translated_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translated_address", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxvSnat(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 original_address: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 translated_address: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxvSnat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free text description.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] network_name: The name of the network on which to apply the SNAT rule.
        :param pulumi.Input[str] network_type: Type of the network on which to apply the DNAT rule. Possible values
               `org` or `ext`.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] original_address: IP address, range or subnet. These addresses are the IP addresses
               of one or more virtual machines for which you are configuring the SNAT rule so that they can send
               traffic to the external network.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[str] translated_address: IP address, range or subnet. This address is always the public
               IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
               which source addresses (the virtual machines) on outbound packets are translated to when they send
               traffic to the external network.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxvSnatArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxvSnat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxvSnatArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxvSnatArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 original_address: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 translated_address: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxvSnatArgs.__new__(NsxvSnatArgs)

            __props__.__dict__["description"] = description
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["logging_enabled"] = logging_enabled
            if network_name is None and not opts.urn:
                raise TypeError("Missing required property 'network_name'")
            __props__.__dict__["network_name"] = network_name
            if network_type is None and not opts.urn:
                raise TypeError("Missing required property 'network_type'")
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["org"] = org
            if original_address is None and not opts.urn:
                raise TypeError("Missing required property 'original_address'")
            __props__.__dict__["original_address"] = original_address
            __props__.__dict__["rule_tag"] = rule_tag
            __props__.__dict__["rule_type"] = rule_type
            __props__.__dict__["translated_address"] = translated_address
            __props__.__dict__["vdc"] = vdc
        super(NsxvSnat, __self__).__init__(
            'vcd:index/nsxvSnat:NsxvSnat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            logging_enabled: Optional[pulumi.Input[bool]] = None,
            network_name: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            original_address: Optional[pulumi.Input[str]] = None,
            rule_tag: Optional[pulumi.Input[int]] = None,
            rule_type: Optional[pulumi.Input[str]] = None,
            translated_address: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxvSnat':
        """
        Get an existing NsxvSnat resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free text description.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the SNAT rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] network_name: The name of the network on which to apply the SNAT rule.
        :param pulumi.Input[str] network_type: Type of the network on which to apply the DNAT rule. Possible values
               `org` or `ext`.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] original_address: IP address, range or subnet. These addresses are the IP addresses
               of one or more virtual machines for which you are configuring the SNAT rule so that they can send
               traffic to the external network.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[str] translated_address: IP address, range or subnet. This address is always the public
               IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
               which source addresses (the virtual machines) on outbound packets are translated to when they send
               traffic to the external network.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxvSnatState.__new__(_NsxvSnatState)

        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["logging_enabled"] = logging_enabled
        __props__.__dict__["network_name"] = network_name
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["org"] = org
        __props__.__dict__["original_address"] = original_address
        __props__.__dict__["rule_tag"] = rule_tag
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["translated_address"] = translated_address
        __props__.__dict__["vdc"] = vdc
        return NsxvSnat(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Free text description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which to apply the SNAT rule.
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> pulumi.Output[str]:
        """
        The name of the network on which to apply the SNAT rule.
        """
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        """
        Type of the network on which to apply the DNAT rule. Possible values
        `org` or `ext`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="originalAddress")
    def original_address(self) -> pulumi.Output[str]:
        """
        IP address, range or subnet. These addresses are the IP addresses
        of one or more virtual machines for which you are configuring the SNAT rule so that they can send
        traffic to the external network.
        """
        return pulumi.get(self, "original_address")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> pulumi.Output[int]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[str]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="translatedAddress")
    def translated_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP address, range or subnet. This address is always the public
        IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
        which source addresses (the virtual machines) on outbound packets are translated to when they send
        traffic to the external network.
        """
        return pulumi.get(self, "translated_address")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

