# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVmGroupResult',
    'AwaitableGetVmGroupResult',
    'get_vm_group',
    'get_vm_group_output',
]

@pulumi.output_type
class GetVmGroupResult:
    """
    A collection of values returned by getVmGroup.
    """
    def __init__(__self__, cluster_moref=None, cluster_name=None, id=None, name=None, named_vm_group_id=None, provider_vdc_id=None, vcenter_id=None):
        if cluster_moref and not isinstance(cluster_moref, str):
            raise TypeError("Expected argument 'cluster_moref' to be a str")
        pulumi.set(__self__, "cluster_moref", cluster_moref)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if named_vm_group_id and not isinstance(named_vm_group_id, str):
            raise TypeError("Expected argument 'named_vm_group_id' to be a str")
        pulumi.set(__self__, "named_vm_group_id", named_vm_group_id)
        if provider_vdc_id and not isinstance(provider_vdc_id, str):
            raise TypeError("Expected argument 'provider_vdc_id' to be a str")
        pulumi.set(__self__, "provider_vdc_id", provider_vdc_id)
        if vcenter_id and not isinstance(vcenter_id, str):
            raise TypeError("Expected argument 'vcenter_id' to be a str")
        pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter(name="clusterMoref")
    def cluster_moref(self) -> str:
        return pulumi.get(self, "cluster_moref")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namedVmGroupId")
    def named_vm_group_id(self) -> str:
        return pulumi.get(self, "named_vm_group_id")

    @property
    @pulumi.getter(name="providerVdcId")
    def provider_vdc_id(self) -> str:
        return pulumi.get(self, "provider_vdc_id")

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> str:
        return pulumi.get(self, "vcenter_id")


class AwaitableGetVmGroupResult(GetVmGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmGroupResult(
            cluster_moref=self.cluster_moref,
            cluster_name=self.cluster_name,
            id=self.id,
            name=self.name,
            named_vm_group_id=self.named_vm_group_id,
            provider_vdc_id=self.provider_vdc_id,
            vcenter_id=self.vcenter_id)


def get_vm_group(name: Optional[str] = None,
                 provider_vdc_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmGroupResult:
    """
    Provides a VMware Cloud Director VM Group data source. This can be used to fetch vSphere VM Groups and create VM Placement Policies with them.

    Supported in provider *v3.8+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_provider_vdc(name="my-pvdc")
    vm_group = vcd.get_vm_group(name="vmware-license-group",
        provider_vdc_id=my_vdc.id)
    ```

    ## Attributes reference

    * `cluster_name` - Name of the vSphere cluster associated to this VM Group.
    * `named_vm_group_id` - ID of the named VM Group. Used to create Logical VM Groups.
    * `vcenter_id` - ID of the vCenter server.
    * `cluster_moref` - Managed object reference of the vSphere cluster associated to this VM Group.


    :param str name: The name of VM Group to fetch from vSphere.
    :param str provider_vdc_id: The ID of [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Group belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['providerVdcId'] = provider_vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmGroup:getVmGroup', __args__, opts=opts, typ=GetVmGroupResult).value

    return AwaitableGetVmGroupResult(
        cluster_moref=pulumi.get(__ret__, 'cluster_moref'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        named_vm_group_id=pulumi.get(__ret__, 'named_vm_group_id'),
        provider_vdc_id=pulumi.get(__ret__, 'provider_vdc_id'),
        vcenter_id=pulumi.get(__ret__, 'vcenter_id'))
def get_vm_group_output(name: Optional[pulumi.Input[str]] = None,
                        provider_vdc_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmGroupResult]:
    """
    Provides a VMware Cloud Director VM Group data source. This can be used to fetch vSphere VM Groups and create VM Placement Policies with them.

    Supported in provider *v3.8+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_provider_vdc(name="my-pvdc")
    vm_group = vcd.get_vm_group(name="vmware-license-group",
        provider_vdc_id=my_vdc.id)
    ```

    ## Attributes reference

    * `cluster_name` - Name of the vSphere cluster associated to this VM Group.
    * `named_vm_group_id` - ID of the named VM Group. Used to create Logical VM Groups.
    * `vcenter_id` - ID of the vCenter server.
    * `cluster_moref` - Managed object reference of the vSphere cluster associated to this VM Group.


    :param str name: The name of VM Group to fetch from vSphere.
    :param str provider_vdc_id: The ID of [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Group belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['providerVdcId'] = provider_vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVmGroup:getVmGroup', __args__, opts=opts, typ=GetVmGroupResult)
    return __ret__.apply(lambda __response__: GetVmGroupResult(
        cluster_moref=pulumi.get(__response__, 'cluster_moref'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        named_vm_group_id=pulumi.get(__response__, 'named_vm_group_id'),
        provider_vdc_id=pulumi.get(__response__, 'provider_vdc_id'),
        vcenter_id=pulumi.get(__response__, 'vcenter_id')))
