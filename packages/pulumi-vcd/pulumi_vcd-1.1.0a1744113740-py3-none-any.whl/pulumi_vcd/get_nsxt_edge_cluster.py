# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtEdgeClusterResult',
    'AwaitableGetNsxtEdgeClusterResult',
    'get_nsxt_edge_cluster',
    'get_nsxt_edge_cluster_output',
]

@pulumi.output_type
class GetNsxtEdgeClusterResult:
    """
    A collection of values returned by getNsxtEdgeCluster.
    """
    def __init__(__self__, deployment_type=None, description=None, id=None, name=None, node_count=None, node_type=None, org=None, provider_vdc_id=None, vdc=None, vdc_group_id=None, vdc_id=None):
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        pulumi.set(__self__, "deployment_type", deployment_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if provider_vdc_id and not isinstance(provider_vdc_id, str):
            raise TypeError("Expected argument 'provider_vdc_id' to be a str")
        pulumi.set(__self__, "provider_vdc_id", provider_vdc_id)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        Deployment type of Edge Cluster.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Edge Cluster description in NSX-T manager.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes in Edge Cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Type of nodes in Edge Cluster.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerVdcId")
    def provider_vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "provider_vdc_id")

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'vdc_id', 'vdc_group_id', and 'provider_vdc_id' which accept IDs of VDC, VDC Group and Provider VDC respectively""")
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtEdgeClusterResult(GetNsxtEdgeClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgeClusterResult(
            deployment_type=self.deployment_type,
            description=self.description,
            id=self.id,
            name=self.name,
            node_count=self.node_count,
            node_type=self.node_type,
            org=self.org,
            provider_vdc_id=self.provider_vdc_id,
            vdc=self.vdc,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_edge_cluster(name: Optional[str] = None,
                          org: Optional[str] = None,
                          provider_vdc_id: Optional[str] = None,
                          vdc: Optional[str] = None,
                          vdc_group_id: Optional[str] = None,
                          vdc_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgeClusterResult:
    """
    Provides a data source for available NSX-T Edge Clusters.

    Supported in provider *v3.1+*

    > **Note:** This data source uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.1.1+* and NSX-T *3.0+*.

    ## Example Usage

    ### With VDC ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(org="my-org",
        name="nsxt-vdc-1")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        vdc_id=existing.id,
        name="edge-cluster-one")
    ```

    ### With VDC Group ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_vdc_group(org="my-org",
        name="nsxt-vdc-group-1")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        vdc_group_id=existing.id,
        name="edge-cluster-one")
    ```

    ### With Provider VDC ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt_pvdc = vcd.get_provider_vdc(name="nsxt-provider-vdc")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        provider_vdc_id=nsxt_pvdc.id,
        name="edge-cluster-one")
    ```


    :param str name: NSX-T Edge Cluster name. **Note.** NSX-T does allow to have duplicate names therefore to be able
           to correctly use this data source there should not be multiple NSX-T Edge Clusters with the same name defined.
    :param str org: The name of organization to which edge cluster belongs. Optional if defined at provider level.
    :param str provider_vdc_id: The ID of VDC Group for lookup. Data source `ProviderVdc` can be used to get ID.
    :param str vdc: The name of VDC that owns the edge cluster. Optional if defined at provider level.
    :param str vdc_group_id: The ID of VDC Group for lookup. Data source `VdcGroup` can be used to get ID.
    :param str vdc_id: The ID of VDC for lookup. Data source `OrgVdc` can be used to get ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['providerVdcId'] = provider_vdc_id
    __args__['vdc'] = vdc
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgeCluster:getNsxtEdgeCluster', __args__, opts=opts, typ=GetNsxtEdgeClusterResult).value

    return AwaitableGetNsxtEdgeClusterResult(
        deployment_type=pulumi.get(__ret__, 'deployment_type'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        node_count=pulumi.get(__ret__, 'node_count'),
        node_type=pulumi.get(__ret__, 'node_type'),
        org=pulumi.get(__ret__, 'org'),
        provider_vdc_id=pulumi.get(__ret__, 'provider_vdc_id'),
        vdc=pulumi.get(__ret__, 'vdc'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxt_edge_cluster_output(name: Optional[pulumi.Input[str]] = None,
                                 org: Optional[pulumi.Input[Optional[str]]] = None,
                                 provider_vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgeClusterResult]:
    """
    Provides a data source for available NSX-T Edge Clusters.

    Supported in provider *v3.1+*

    > **Note:** This data source uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.1.1+* and NSX-T *3.0+*.

    ## Example Usage

    ### With VDC ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(org="my-org",
        name="nsxt-vdc-1")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        vdc_id=existing.id,
        name="edge-cluster-one")
    ```

    ### With VDC Group ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_vdc_group(org="my-org",
        name="nsxt-vdc-group-1")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        vdc_group_id=existing.id,
        name="edge-cluster-one")
    ```

    ### With Provider VDC ID)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt_pvdc = vcd.get_provider_vdc(name="nsxt-provider-vdc")
    first = vcd.get_nsxt_edge_cluster(org="my-org",
        provider_vdc_id=nsxt_pvdc.id,
        name="edge-cluster-one")
    ```


    :param str name: NSX-T Edge Cluster name. **Note.** NSX-T does allow to have duplicate names therefore to be able
           to correctly use this data source there should not be multiple NSX-T Edge Clusters with the same name defined.
    :param str org: The name of organization to which edge cluster belongs. Optional if defined at provider level.
    :param str provider_vdc_id: The ID of VDC Group for lookup. Data source `ProviderVdc` can be used to get ID.
    :param str vdc: The name of VDC that owns the edge cluster. Optional if defined at provider level.
    :param str vdc_group_id: The ID of VDC Group for lookup. Data source `VdcGroup` can be used to get ID.
    :param str vdc_id: The ID of VDC for lookup. Data source `OrgVdc` can be used to get ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['providerVdcId'] = provider_vdc_id
    __args__['vdc'] = vdc
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgeCluster:getNsxtEdgeCluster', __args__, opts=opts, typ=GetNsxtEdgeClusterResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgeClusterResult(
        deployment_type=pulumi.get(__response__, 'deployment_type'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        node_count=pulumi.get(__response__, 'node_count'),
        node_type=pulumi.get(__response__, 'node_type'),
        org=pulumi.get(__response__, 'org'),
        provider_vdc_id=pulumi.get(__response__, 'provider_vdc_id'),
        vdc=pulumi.get(__response__, 'vdc'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
