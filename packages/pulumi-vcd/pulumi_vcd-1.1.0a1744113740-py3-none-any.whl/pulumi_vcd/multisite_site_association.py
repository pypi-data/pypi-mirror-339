# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MultisiteSiteAssociationArgs', 'MultisiteSiteAssociation']

@pulumi.input_type
class MultisiteSiteAssociationArgs:
    def __init__(__self__, *,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a MultisiteSiteAssociation resource.
        :param pulumi.Input[str] association_data: Data produced from another site, needed to associate to this site from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this site from another one.
               (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes we wait for the association to be complete. (0 = no check) 
               This property is only used during update, and should not be used until both sides of the association have been completed.
        """
        if association_data is not None:
            pulumi.set(__self__, "association_data", association_data)
        if association_data_file is not None:
            pulumi.set(__self__, "association_data_file", association_data_file)
        if connection_timeout_mins is not None:
            pulumi.set(__self__, "connection_timeout_mins", connection_timeout_mins)

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data produced from another site, needed to associate to this site from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @association_data.setter
    def association_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data", value)

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the file containing the data used to associate to this site from another one.
        (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        """
        return pulumi.get(self, "association_data_file")

    @association_data_file.setter
    def association_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data_file", value)

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> Optional[pulumi.Input[int]]:
        """
        How many minutes we wait for the association to be complete. (0 = no check) 
        This property is only used during update, and should not be used until both sides of the association have been completed.
        """
        return pulumi.get(self, "connection_timeout_mins")

    @connection_timeout_mins.setter
    def connection_timeout_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout_mins", value)


@pulumi.input_type
class _MultisiteSiteAssociationState:
    def __init__(__self__, *,
                 associated_site_href: Optional[pulumi.Input[str]] = None,
                 associated_site_id: Optional[pulumi.Input[str]] = None,
                 associated_site_name: Optional[pulumi.Input[str]] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MultisiteSiteAssociation resources.
        :param pulumi.Input[str] associated_site_href: URL of the associated site
        :param pulumi.Input[str] associated_site_id: ID of the remote site associated with the current one.
        :param pulumi.Input[str] associated_site_name: The name of the associated site.
        :param pulumi.Input[str] association_data: Data produced from another site, needed to associate to this site from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this site from another one.
               (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes we wait for the association to be complete. (0 = no check) 
               This property is only used during update, and should not be used until both sides of the association have been completed.
        :param pulumi.Input[str] status: The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        if associated_site_href is not None:
            pulumi.set(__self__, "associated_site_href", associated_site_href)
        if associated_site_id is not None:
            pulumi.set(__self__, "associated_site_id", associated_site_id)
        if associated_site_name is not None:
            pulumi.set(__self__, "associated_site_name", associated_site_name)
        if association_data is not None:
            pulumi.set(__self__, "association_data", association_data)
        if association_data_file is not None:
            pulumi.set(__self__, "association_data_file", association_data_file)
        if connection_timeout_mins is not None:
            pulumi.set(__self__, "connection_timeout_mins", connection_timeout_mins)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="associatedSiteHref")
    def associated_site_href(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the associated site
        """
        return pulumi.get(self, "associated_site_href")

    @associated_site_href.setter
    def associated_site_href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_site_href", value)

    @property
    @pulumi.getter(name="associatedSiteId")
    def associated_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the remote site associated with the current one.
        """
        return pulumi.get(self, "associated_site_id")

    @associated_site_id.setter
    def associated_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_site_id", value)

    @property
    @pulumi.getter(name="associatedSiteName")
    def associated_site_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the associated site.
        """
        return pulumi.get(self, "associated_site_name")

    @associated_site_name.setter
    def associated_site_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_site_name", value)

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data produced from another site, needed to associate to this site from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @association_data.setter
    def association_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data", value)

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the file containing the data used to associate to this site from another one.
        (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        """
        return pulumi.get(self, "association_data_file")

    @association_data_file.setter
    def association_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_data_file", value)

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> Optional[pulumi.Input[int]]:
        """
        How many minutes we wait for the association to be complete. (0 = no check) 
        This property is only used during update, and should not be used until both sides of the association have been completed.
        """
        return pulumi.get(self, "connection_timeout_mins")

    @connection_timeout_mins.setter
    def connection_timeout_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout_mins", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class MultisiteSiteAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a MultisiteSiteAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] association_data: Data produced from another site, needed to associate to this site from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this site from another one.
               (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes we wait for the association to be complete. (0 = no check) 
               This property is only used during update, and should not be used until both sides of the association have been completed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MultisiteSiteAssociationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MultisiteSiteAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MultisiteSiteAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MultisiteSiteAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 association_data: Optional[pulumi.Input[str]] = None,
                 association_data_file: Optional[pulumi.Input[str]] = None,
                 connection_timeout_mins: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MultisiteSiteAssociationArgs.__new__(MultisiteSiteAssociationArgs)

            __props__.__dict__["association_data"] = association_data
            __props__.__dict__["association_data_file"] = association_data_file
            __props__.__dict__["connection_timeout_mins"] = connection_timeout_mins
            __props__.__dict__["associated_site_href"] = None
            __props__.__dict__["associated_site_id"] = None
            __props__.__dict__["associated_site_name"] = None
            __props__.__dict__["status"] = None
        super(MultisiteSiteAssociation, __self__).__init__(
            'vcd:index/multisiteSiteAssociation:MultisiteSiteAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associated_site_href: Optional[pulumi.Input[str]] = None,
            associated_site_id: Optional[pulumi.Input[str]] = None,
            associated_site_name: Optional[pulumi.Input[str]] = None,
            association_data: Optional[pulumi.Input[str]] = None,
            association_data_file: Optional[pulumi.Input[str]] = None,
            connection_timeout_mins: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'MultisiteSiteAssociation':
        """
        Get an existing MultisiteSiteAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] associated_site_href: URL of the associated site
        :param pulumi.Input[str] associated_site_id: ID of the remote site associated with the current one.
        :param pulumi.Input[str] associated_site_name: The name of the associated site.
        :param pulumi.Input[str] association_data: Data produced from another site, needed to associate to this site from another one.
               (Used instead of `associated_data_file`)
        :param pulumi.Input[str] association_data_file: Name of the file containing the data used to associate to this site from another one.
               (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        :param pulumi.Input[int] connection_timeout_mins: How many minutes we wait for the association to be complete. (0 = no check) 
               This property is only used during update, and should not be used until both sides of the association have been completed.
        :param pulumi.Input[str] status: The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MultisiteSiteAssociationState.__new__(_MultisiteSiteAssociationState)

        __props__.__dict__["associated_site_href"] = associated_site_href
        __props__.__dict__["associated_site_id"] = associated_site_id
        __props__.__dict__["associated_site_name"] = associated_site_name
        __props__.__dict__["association_data"] = association_data
        __props__.__dict__["association_data_file"] = association_data_file
        __props__.__dict__["connection_timeout_mins"] = connection_timeout_mins
        __props__.__dict__["status"] = status
        return MultisiteSiteAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="associatedSiteHref")
    def associated_site_href(self) -> pulumi.Output[str]:
        """
        URL of the associated site
        """
        return pulumi.get(self, "associated_site_href")

    @property
    @pulumi.getter(name="associatedSiteId")
    def associated_site_id(self) -> pulumi.Output[str]:
        """
        ID of the remote site associated with the current one.
        """
        return pulumi.get(self, "associated_site_id")

    @property
    @pulumi.getter(name="associatedSiteName")
    def associated_site_name(self) -> pulumi.Output[str]:
        """
        The name of the associated site.
        """
        return pulumi.get(self, "associated_site_name")

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> pulumi.Output[Optional[str]]:
        """
        Data produced from another site, needed to associate to this site from another one.
        (Used instead of `associated_data_file`)
        """
        return pulumi.get(self, "association_data")

    @property
    @pulumi.getter(name="associationDataFile")
    def association_data_file(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the file containing the data used to associate to this site from another one.
        (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `get_multisite_site_data`.
        """
        return pulumi.get(self, "association_data_file")

    @property
    @pulumi.getter(name="connectionTimeoutMins")
    def connection_timeout_mins(self) -> pulumi.Output[Optional[int]]:
        """
        How many minutes we wait for the association to be complete. (0 = no check) 
        This property is only used during update, and should not be used until both sides of the association have been completed.
        """
        return pulumi.get(self, "connection_timeout_mins")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        """
        return pulumi.get(self, "status")

