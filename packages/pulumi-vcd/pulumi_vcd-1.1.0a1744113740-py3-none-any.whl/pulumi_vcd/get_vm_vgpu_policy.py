# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVmVgpuPolicyResult',
    'AwaitableGetVmVgpuPolicyResult',
    'get_vm_vgpu_policy',
    'get_vm_vgpu_policy_output',
]

@pulumi.output_type
class GetVmVgpuPolicyResult:
    """
    A collection of values returned by getVmVgpuPolicy.
    """
    def __init__(__self__, cpus=None, description=None, id=None, memories=None, name=None, provider_vdc_scopes=None, vgpu_profiles=None):
        if cpus and not isinstance(cpus, list):
            raise TypeError("Expected argument 'cpus' to be a list")
        pulumi.set(__self__, "cpus", cpus)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        pulumi.set(__self__, "memories", memories)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_vdc_scopes and not isinstance(provider_vdc_scopes, list):
            raise TypeError("Expected argument 'provider_vdc_scopes' to be a list")
        pulumi.set(__self__, "provider_vdc_scopes", provider_vdc_scopes)
        if vgpu_profiles and not isinstance(vgpu_profiles, list):
            raise TypeError("Expected argument 'vgpu_profiles' to be a list")
        pulumi.set(__self__, "vgpu_profiles", vgpu_profiles)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetVmVgpuPolicyCpusResult']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetVmVgpuPolicyMemoryResult']:
        return pulumi.get(self, "memories")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerVdcScopes")
    def provider_vdc_scopes(self) -> Sequence['outputs.GetVmVgpuPolicyProviderVdcScopeResult']:
        return pulumi.get(self, "provider_vdc_scopes")

    @property
    @pulumi.getter(name="vgpuProfiles")
    def vgpu_profiles(self) -> Sequence['outputs.GetVmVgpuPolicyVgpuProfileResult']:
        return pulumi.get(self, "vgpu_profiles")


class AwaitableGetVmVgpuPolicyResult(GetVmVgpuPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmVgpuPolicyResult(
            cpus=self.cpus,
            description=self.description,
            id=self.id,
            memories=self.memories,
            name=self.name,
            provider_vdc_scopes=self.provider_vdc_scopes,
            vgpu_profiles=self.vgpu_profiles)


def get_vm_vgpu_policy(name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmVgpuPolicyResult:
    """
    Experimental in provider *3.11*.

    Provides a data source to read vGPU policies in VMware Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_policy_name = vcd.get_vm_vgpu_policy(name="my-rule")
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name of the VM vGPU policy.
           
           All arguments defined in [`VmVgpuPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_vgpu_policy#argument-reference) are supported.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmVgpuPolicy:getVmVgpuPolicy', __args__, opts=opts, typ=GetVmVgpuPolicyResult).value

    return AwaitableGetVmVgpuPolicyResult(
        cpus=pulumi.get(__ret__, 'cpus'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        memories=pulumi.get(__ret__, 'memories'),
        name=pulumi.get(__ret__, 'name'),
        provider_vdc_scopes=pulumi.get(__ret__, 'provider_vdc_scopes'),
        vgpu_profiles=pulumi.get(__ret__, 'vgpu_profiles'))
def get_vm_vgpu_policy_output(name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmVgpuPolicyResult]:
    """
    Experimental in provider *3.11*.

    Provides a data source to read vGPU policies in VMware Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_policy_name = vcd.get_vm_vgpu_policy(name="my-rule")
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name of the VM vGPU policy.
           
           All arguments defined in [`VmVgpuPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_vgpu_policy#argument-reference) are supported.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVmVgpuPolicy:getVmVgpuPolicy', __args__, opts=opts, typ=GetVmVgpuPolicyResult)
    return __ret__.apply(lambda __response__: GetVmVgpuPolicyResult(
        cpus=pulumi.get(__response__, 'cpus'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        memories=pulumi.get(__response__, 'memories'),
        name=pulumi.get(__response__, 'name'),
        provider_vdc_scopes=pulumi.get(__response__, 'provider_vdc_scopes'),
        vgpu_profiles=pulumi.get(__response__, 'vgpu_profiles')))
