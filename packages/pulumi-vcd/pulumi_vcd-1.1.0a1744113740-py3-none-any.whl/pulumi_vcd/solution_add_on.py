# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SolutionAddOnArgs', 'SolutionAddOn']

@pulumi.input_type
class SolutionAddOnArgs:
    def __init__(__self__, *,
                 add_on_path: pulumi.Input[str],
                 catalog_item_id: pulumi.Input[str],
                 auto_trust_certificate: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SolutionAddOn resource.
        :param pulumi.Input[str] add_on_path: Local filesystem path of Solution Add-On. The Add-On image is required
               locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
               Director.
        :param pulumi.Input[str] catalog_item_id: The catalog item ID of Solution Add-On. It can be uploaded using
               [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        :param pulumi.Input[bool] auto_trust_certificate: Plugin can automatically trust the certificate of Solution
               Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
               using the Solution Add-On if not enabled here.
        """
        pulumi.set(__self__, "add_on_path", add_on_path)
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if auto_trust_certificate is not None:
            pulumi.set(__self__, "auto_trust_certificate", auto_trust_certificate)

    @property
    @pulumi.getter(name="addOnPath")
    def add_on_path(self) -> pulumi.Input[str]:
        """
        Local filesystem path of Solution Add-On. The Add-On image is required
        locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        Director.
        """
        return pulumi.get(self, "add_on_path")

    @add_on_path.setter
    def add_on_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "add_on_path", value)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> pulumi.Input[str]:
        """
        The catalog item ID of Solution Add-On. It can be uploaded using
        [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        """
        return pulumi.get(self, "catalog_item_id")

    @catalog_item_id.setter
    def catalog_item_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_item_id", value)

    @property
    @pulumi.getter(name="autoTrustCertificate")
    def auto_trust_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Plugin can automatically trust the certificate of Solution
        Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        using the Solution Add-On if not enabled here.
        """
        return pulumi.get(self, "auto_trust_certificate")

    @auto_trust_certificate.setter
    def auto_trust_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_trust_certificate", value)


@pulumi.input_type
class _SolutionAddOnState:
    def __init__(__self__, *,
                 add_on_path: Optional[pulumi.Input[str]] = None,
                 auto_trust_certificate: Optional[pulumi.Input[bool]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rde_state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SolutionAddOn resources.
        :param pulumi.Input[str] add_on_path: Local filesystem path of Solution Add-On. The Add-On image is required
               locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
               Director.
        :param pulumi.Input[bool] auto_trust_certificate: Plugin can automatically trust the certificate of Solution
               Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
               using the Solution Add-On if not enabled here.
        :param pulumi.Input[str] catalog_item_id: The catalog item ID of Solution Add-On. It can be uploaded using
               [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        :param pulumi.Input[str] name: reports the name of Solution Add-On as defined in the system. This name can be also used
               in data source
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        :param pulumi.Input[str] rde_state: Parent RDE state
        """
        if add_on_path is not None:
            pulumi.set(__self__, "add_on_path", add_on_path)
        if auto_trust_certificate is not None:
            pulumi.set(__self__, "auto_trust_certificate", auto_trust_certificate)
        if catalog_item_id is not None:
            pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rde_state is not None:
            pulumi.set(__self__, "rde_state", rde_state)

    @property
    @pulumi.getter(name="addOnPath")
    def add_on_path(self) -> Optional[pulumi.Input[str]]:
        """
        Local filesystem path of Solution Add-On. The Add-On image is required
        locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        Director.
        """
        return pulumi.get(self, "add_on_path")

    @add_on_path.setter
    def add_on_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_on_path", value)

    @property
    @pulumi.getter(name="autoTrustCertificate")
    def auto_trust_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Plugin can automatically trust the certificate of Solution
        Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        using the Solution Add-On if not enabled here.
        """
        return pulumi.get(self, "auto_trust_certificate")

    @auto_trust_certificate.setter
    def auto_trust_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_trust_certificate", value)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog item ID of Solution Add-On. It can be uploaded using
        [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        """
        return pulumi.get(self, "catalog_item_id")

    @catalog_item_id.setter
    def catalog_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_item_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        reports the name of Solution Add-On as defined in the system. This name can be also used
        in data source
        [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> Optional[pulumi.Input[str]]:
        """
        Parent RDE state
        """
        return pulumi.get(self, "rde_state")

    @rde_state.setter
    def rde_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_state", value)


class SolutionAddOn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_path: Optional[pulumi.Input[str]] = None,
                 auto_trust_certificate: Optional[pulumi.Input[bool]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SolutionAddOn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_on_path: Local filesystem path of Solution Add-On. The Add-On image is required
               locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
               Director.
        :param pulumi.Input[bool] auto_trust_certificate: Plugin can automatically trust the certificate of Solution
               Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
               using the Solution Add-On if not enabled here.
        :param pulumi.Input[str] catalog_item_id: The catalog item ID of Solution Add-On. It can be uploaded using
               [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SolutionAddOnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SolutionAddOn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SolutionAddOnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SolutionAddOnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_path: Optional[pulumi.Input[str]] = None,
                 auto_trust_certificate: Optional[pulumi.Input[bool]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SolutionAddOnArgs.__new__(SolutionAddOnArgs)

            if add_on_path is None and not opts.urn:
                raise TypeError("Missing required property 'add_on_path'")
            __props__.__dict__["add_on_path"] = add_on_path
            __props__.__dict__["auto_trust_certificate"] = auto_trust_certificate
            if catalog_item_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_item_id'")
            __props__.__dict__["catalog_item_id"] = catalog_item_id
            __props__.__dict__["name"] = None
            __props__.__dict__["rde_state"] = None
        super(SolutionAddOn, __self__).__init__(
            'vcd:index/solutionAddOn:SolutionAddOn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_on_path: Optional[pulumi.Input[str]] = None,
            auto_trust_certificate: Optional[pulumi.Input[bool]] = None,
            catalog_item_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rde_state: Optional[pulumi.Input[str]] = None) -> 'SolutionAddOn':
        """
        Get an existing SolutionAddOn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_on_path: Local filesystem path of Solution Add-On. The Add-On image is required
               locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
               Director.
        :param pulumi.Input[bool] auto_trust_certificate: Plugin can automatically trust the certificate of Solution
               Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
               using the Solution Add-On if not enabled here.
        :param pulumi.Input[str] catalog_item_id: The catalog item ID of Solution Add-On. It can be uploaded using
               [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        :param pulumi.Input[str] name: reports the name of Solution Add-On as defined in the system. This name can be also used
               in data source
               [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        :param pulumi.Input[str] rde_state: Parent RDE state
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SolutionAddOnState.__new__(_SolutionAddOnState)

        __props__.__dict__["add_on_path"] = add_on_path
        __props__.__dict__["auto_trust_certificate"] = auto_trust_certificate
        __props__.__dict__["catalog_item_id"] = catalog_item_id
        __props__.__dict__["name"] = name
        __props__.__dict__["rde_state"] = rde_state
        return SolutionAddOn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addOnPath")
    def add_on_path(self) -> pulumi.Output[str]:
        """
        Local filesystem path of Solution Add-On. The Add-On image is required
        locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        Director.
        """
        return pulumi.get(self, "add_on_path")

    @property
    @pulumi.getter(name="autoTrustCertificate")
    def auto_trust_certificate(self) -> pulumi.Output[Optional[bool]]:
        """
        Plugin can automatically trust the certificate of Solution
        Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        using the Solution Add-On if not enabled here.
        """
        return pulumi.get(self, "auto_trust_certificate")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> pulumi.Output[str]:
        """
        The catalog item ID of Solution Add-On. It can be uploaded using
        [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        """
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        reports the name of Solution Add-On as defined in the system. This name can be also used
        in data source
        [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> pulumi.Output[str]:
        """
        Parent RDE state
        """
        return pulumi.get(self, "rde_state")

