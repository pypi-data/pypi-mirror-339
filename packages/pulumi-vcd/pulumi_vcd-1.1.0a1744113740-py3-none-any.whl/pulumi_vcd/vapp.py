# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VappArgs', 'Vapp']

@pulumi.input_type
class VappArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lease: Optional[pulumi.Input['VappLeaseArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vapp resource.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of vApp guest properties
        :param pulumi.Input['VappLeaseArgs'] lease: the information about the vApp lease. It includes the fields below. When this section is 
               included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
               are **silently** reduced to the highest value allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        :param pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of vApp guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter
    def lease(self) -> Optional[pulumi.Input['VappLeaseArgs']]:
        """
        the information about the vApp lease. It includes the fields below. When this section is 
        included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
        are **silently** reduced to the highest value allowed.
        """
        return pulumi.get(self, "lease")

    @lease.setter
    def lease(self, value: Optional[pulumi.Input['VappLeaseArgs']]):
        pulumi.set(self, "lease", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _VappState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lease: Optional[pulumi.Input['VappLeaseArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_text: Optional[pulumi.Input[str]] = None,
                 vapp_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vapp_org_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Vapp resources.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of vApp guest properties
        :param pulumi.Input[str] href: (Computed) The vApp Hyper Reference.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: (Computed; *v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
               details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        :param pulumi.Input['VappLeaseArgs'] lease: the information about the vApp lease. It includes the fields below. When this section is 
               included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
               are **silently** reduced to the highest value allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        :param pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        :param pulumi.Input[int] status: (Computed; *v2.5+*) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (Computed; *v2.5+*) The vApp status as text.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_network_names: (*v3.13.0+*) A list of vApp network names included in this vApp
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_org_network_names: (*v3.13.0+*) A list of vApp Org network names included in this vApp
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: (*v3.13.0+*) A list of VM names included in this vApp
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if inherited_metadata is not None:
            pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)
        if vapp_network_names is not None:
            pulumi.set(__self__, "vapp_network_names", vapp_network_names)
        if vapp_org_network_names is not None:
            pulumi.set(__self__, "vapp_org_network_names", vapp_org_network_names)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_names is not None:
            pulumi.set(__self__, "vm_names", vm_names)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of vApp guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The vApp Hyper Reference.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Computed; *v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        """
        return pulumi.get(self, "inherited_metadata")

    @inherited_metadata.setter
    def inherited_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "inherited_metadata", value)

    @property
    @pulumi.getter
    def lease(self) -> Optional[pulumi.Input['VappLeaseArgs']]:
        """
        the information about the vApp lease. It includes the fields below. When this section is 
        included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
        are **silently** reduced to the highest value allowed.
        """
        return pulumi.get(self, "lease")

    @lease.setter
    def lease(self, value: Optional[pulumi.Input['VappLeaseArgs']]):
        pulumi.set(self, "lease", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        (Computed; *v2.5+*) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed; *v2.5+*) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)

    @property
    @pulumi.getter(name="vappNetworkNames")
    def vapp_network_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v3.13.0+*) A list of vApp network names included in this vApp
        """
        return pulumi.get(self, "vapp_network_names")

    @vapp_network_names.setter
    def vapp_network_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_network_names", value)

    @property
    @pulumi.getter(name="vappOrgNetworkNames")
    def vapp_org_network_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v3.13.0+*) A list of vApp Org network names included in this vApp
        """
        return pulumi.get(self, "vapp_org_network_names")

    @vapp_org_network_names.setter
    def vapp_org_network_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_org_network_names", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (*v3.13.0+*) A list of VM names included in this vApp
        """
        return pulumi.get(self, "vm_names")

    @vm_names.setter
    def vm_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_names", value)


class Vapp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lease: Optional[pulumi.Input[Union['VappLeaseArgs', 'VappLeaseArgsDict']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappMetadataEntryArgs', 'VappMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vapp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of vApp guest properties
        :param pulumi.Input[Union['VappLeaseArgs', 'VappLeaseArgsDict']] lease: the information about the vApp lease. It includes the fields below. When this section is 
               included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
               are **silently** reduced to the highest value allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappMetadataEntryArgs', 'VappMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VappArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vapp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VappArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VappArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lease: Optional[pulumi.Input[Union['VappLeaseArgs', 'VappLeaseArgsDict']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappMetadataEntryArgs', 'VappMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VappArgs.__new__(VappArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["guest_properties"] = guest_properties
            __props__.__dict__["lease"] = lease
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["power_on"] = power_on
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["href"] = None
            __props__.__dict__["inherited_metadata"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_text"] = None
            __props__.__dict__["vapp_network_names"] = None
            __props__.__dict__["vapp_org_network_names"] = None
            __props__.__dict__["vm_names"] = None
        super(Vapp, __self__).__init__(
            'vcd:index/vapp:Vapp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            href: Optional[pulumi.Input[str]] = None,
            inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            lease: Optional[pulumi.Input[Union['VappLeaseArgs', 'VappLeaseArgsDict']]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappMetadataEntryArgs', 'VappMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            power_on: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_text: Optional[pulumi.Input[str]] = None,
            vapp_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vapp_org_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Vapp':
        """
        Get an existing Vapp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of vApp guest properties
        :param pulumi.Input[str] href: (Computed) The vApp Hyper Reference.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: (Computed; *v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
               details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        :param pulumi.Input[Union['VappLeaseArgs', 'VappLeaseArgsDict']] lease: the information about the vApp lease. It includes the fields below. When this section is 
               included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
               are **silently** reduced to the highest value allowed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappMetadataEntryArgs', 'VappMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        :param pulumi.Input[int] status: (Computed; *v2.5+*) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (Computed; *v2.5+*) The vApp status as text.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_network_names: (*v3.13.0+*) A list of vApp network names included in this vApp
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_org_network_names: (*v3.13.0+*) A list of vApp Org network names included in this vApp
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: (*v3.13.0+*) A list of VM names included in this vApp
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VappState.__new__(_VappState)

        __props__.__dict__["description"] = description
        __props__.__dict__["guest_properties"] = guest_properties
        __props__.__dict__["href"] = href
        __props__.__dict__["inherited_metadata"] = inherited_metadata
        __props__.__dict__["lease"] = lease
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["power_on"] = power_on
        __props__.__dict__["status"] = status
        __props__.__dict__["status_text"] = status_text
        __props__.__dict__["vapp_network_names"] = vapp_network_names
        __props__.__dict__["vapp_org_network_names"] = vapp_org_network_names
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_names"] = vm_names
        return Vapp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key value map of vApp guest properties
        """
        return pulumi.get(self, "guest_properties")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        (Computed) The vApp Hyper Reference.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (Computed; *v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        """
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter
    def lease(self) -> pulumi.Output['outputs.VappLease']:
        """
        the information about the vApp lease. It includes the fields below. When this section is 
        included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
        are **silently** reduced to the highest value allowed.
        """
        return pulumi.get(self, "lease")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since *v2.2+* metadata is added directly to vApp instead of first VM in vApp)
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.VappMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`. Works only on update when vApp already has VMs.
        """
        return pulumi.get(self, "power_on")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        (Computed; *v2.5+*) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> pulumi.Output[str]:
        """
        (Computed; *v2.5+*) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter(name="vappNetworkNames")
    def vapp_network_names(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v3.13.0+*) A list of vApp network names included in this vApp
        """
        return pulumi.get(self, "vapp_network_names")

    @property
    @pulumi.getter(name="vappOrgNetworkNames")
    def vapp_org_network_names(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v3.13.0+*) A list of vApp Org network names included in this vApp
        """
        return pulumi.get(self, "vapp_org_network_names")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> pulumi.Output[Sequence[str]]:
        """
        (*v3.13.0+*) A list of VM names included in this vApp
        """
        return pulumi.get(self, "vm_names")

