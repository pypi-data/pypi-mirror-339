# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtNetworkDhcpBindingArgs', 'NsxtNetworkDhcpBinding']

@pulumi.input_type
class NsxtNetworkDhcpBindingArgs:
    def __init__(__self__, *,
                 binding_type: pulumi.Input[str],
                 ip_address: pulumi.Input[str],
                 lease_time: pulumi.Input[int],
                 mac_address: pulumi.Input[str],
                 org_network_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_v4_config: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']] = None,
                 dhcp_v6_config: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtNetworkDhcpBinding resource.
        :param pulumi.Input[str] binding_type: One of `IPV4` or `IPV6`
        :param pulumi.Input[str] ip_address: IP address used for binding
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum `3600` seconds
        :param pulumi.Input[str] mac_address: MAC address used for binding
        :param pulumi.Input[str] org_network_id: The ID of an Org VDC network. **Note**  (`.id` field) of
               `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
               here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
               that DHCP is enabled before configuring pools
        :param pulumi.Input[str] description: Description of DHCP binding
        :param pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs'] dhcp_v4_config: Additional configuration for IPv4 specific options. See IPv4 block
        :param pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs'] dhcp_v6_config: Additional configuration for IPv6 specific options. See IPv6 block
               
               <a id="ipv4-block"></a>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: A list of DNS servers. Maximum 2 can be specified
        :param pulumi.Input[str] name: Name of DHCP binding
        :param pulumi.Input[str] org: The name of organization. Optional if defined at provider level
        """
        pulumi.set(__self__, "binding_type", binding_type)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "lease_time", lease_time)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "org_network_id", org_network_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_v4_config is not None:
            pulumi.set(__self__, "dhcp_v4_config", dhcp_v4_config)
        if dhcp_v6_config is not None:
            pulumi.set(__self__, "dhcp_v6_config", dhcp_v6_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> pulumi.Input[str]:
        """
        One of `IPV4` or `IPV6`
        """
        return pulumi.get(self, "binding_type")

    @binding_type.setter
    def binding_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "binding_type", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        """
        IP address used for binding
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Input[int]:
        """
        Lease time in seconds. Minimum `3600` seconds
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Input[str]:
        """
        MAC address used for binding
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> pulumi.Input[str]:
        """
        The ID of an Org VDC network. **Note**  (`.id` field) of
        `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
        here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
        that DHCP is enabled before configuring pools
        """
        return pulumi.get(self, "org_network_id")

    @org_network_id.setter
    def org_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_network_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of DHCP binding
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpV4Config")
    def dhcp_v4_config(self) -> Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']]:
        """
        Additional configuration for IPv4 specific options. See IPv4 block
        """
        return pulumi.get(self, "dhcp_v4_config")

    @dhcp_v4_config.setter
    def dhcp_v4_config(self, value: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']]):
        pulumi.set(self, "dhcp_v4_config", value)

    @property
    @pulumi.getter(name="dhcpV6Config")
    def dhcp_v6_config(self) -> Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']]:
        """
        Additional configuration for IPv6 specific options. See IPv6 block

        <a id="ipv4-block"></a>
        """
        return pulumi.get(self, "dhcp_v6_config")

    @dhcp_v6_config.setter
    def dhcp_v6_config(self, value: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']]):
        pulumi.set(self, "dhcp_v6_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS servers. Maximum 2 can be specified
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of DHCP binding
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization. Optional if defined at provider level
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


@pulumi.input_type
class _NsxtNetworkDhcpBindingState:
    def __init__(__self__, *,
                 binding_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_v4_config: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']] = None,
                 dhcp_v6_config: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtNetworkDhcpBinding resources.
        :param pulumi.Input[str] binding_type: One of `IPV4` or `IPV6`
        :param pulumi.Input[str] description: Description of DHCP binding
        :param pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs'] dhcp_v4_config: Additional configuration for IPv4 specific options. See IPv4 block
        :param pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs'] dhcp_v6_config: Additional configuration for IPv6 specific options. See IPv6 block
               
               <a id="ipv4-block"></a>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: A list of DNS servers. Maximum 2 can be specified
        :param pulumi.Input[str] ip_address: IP address used for binding
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum `3600` seconds
        :param pulumi.Input[str] mac_address: MAC address used for binding
        :param pulumi.Input[str] name: Name of DHCP binding
        :param pulumi.Input[str] org: The name of organization. Optional if defined at provider level
        :param pulumi.Input[str] org_network_id: The ID of an Org VDC network. **Note**  (`.id` field) of
               `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
               here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
               that DHCP is enabled before configuring pools
        """
        if binding_type is not None:
            pulumi.set(__self__, "binding_type", binding_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_v4_config is not None:
            pulumi.set(__self__, "dhcp_v4_config", dhcp_v4_config)
        if dhcp_v6_config is not None:
            pulumi.set(__self__, "dhcp_v6_config", dhcp_v6_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_network_id is not None:
            pulumi.set(__self__, "org_network_id", org_network_id)

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> Optional[pulumi.Input[str]]:
        """
        One of `IPV4` or `IPV6`
        """
        return pulumi.get(self, "binding_type")

    @binding_type.setter
    def binding_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of DHCP binding
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpV4Config")
    def dhcp_v4_config(self) -> Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']]:
        """
        Additional configuration for IPv4 specific options. See IPv4 block
        """
        return pulumi.get(self, "dhcp_v4_config")

    @dhcp_v4_config.setter
    def dhcp_v4_config(self, value: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV4ConfigArgs']]):
        pulumi.set(self, "dhcp_v4_config", value)

    @property
    @pulumi.getter(name="dhcpV6Config")
    def dhcp_v6_config(self) -> Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']]:
        """
        Additional configuration for IPv6 specific options. See IPv6 block

        <a id="ipv4-block"></a>
        """
        return pulumi.get(self, "dhcp_v6_config")

    @dhcp_v6_config.setter
    def dhcp_v6_config(self, value: Optional[pulumi.Input['NsxtNetworkDhcpBindingDhcpV6ConfigArgs']]):
        pulumi.set(self, "dhcp_v6_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS servers. Maximum 2 can be specified
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used for binding
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        Lease time in seconds. Minimum `3600` seconds
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address used for binding
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of DHCP binding
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization. Optional if defined at provider level
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an Org VDC network. **Note**  (`.id` field) of
        `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
        here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
        that DHCP is enabled before configuring pools
        """
        return pulumi.get(self, "org_network_id")

    @org_network_id.setter
    def org_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_network_id", value)


class NsxtNetworkDhcpBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_v4_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV4ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV4ConfigArgsDict']]] = None,
                 dhcp_v6_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV6ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV6ConfigArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtNetworkDhcpBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] binding_type: One of `IPV4` or `IPV6`
        :param pulumi.Input[str] description: Description of DHCP binding
        :param pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV4ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV4ConfigArgsDict']] dhcp_v4_config: Additional configuration for IPv4 specific options. See IPv4 block
        :param pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV6ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV6ConfigArgsDict']] dhcp_v6_config: Additional configuration for IPv6 specific options. See IPv6 block
               
               <a id="ipv4-block"></a>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: A list of DNS servers. Maximum 2 can be specified
        :param pulumi.Input[str] ip_address: IP address used for binding
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum `3600` seconds
        :param pulumi.Input[str] mac_address: MAC address used for binding
        :param pulumi.Input[str] name: Name of DHCP binding
        :param pulumi.Input[str] org: The name of organization. Optional if defined at provider level
        :param pulumi.Input[str] org_network_id: The ID of an Org VDC network. **Note**  (`.id` field) of
               `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
               here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
               that DHCP is enabled before configuring pools
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtNetworkDhcpBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtNetworkDhcpBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtNetworkDhcpBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtNetworkDhcpBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_v4_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV4ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV4ConfigArgsDict']]] = None,
                 dhcp_v6_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV6ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV6ConfigArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtNetworkDhcpBindingArgs.__new__(NsxtNetworkDhcpBindingArgs)

            if binding_type is None and not opts.urn:
                raise TypeError("Missing required property 'binding_type'")
            __props__.__dict__["binding_type"] = binding_type
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_v4_config"] = dhcp_v4_config
            __props__.__dict__["dhcp_v6_config"] = dhcp_v6_config
            __props__.__dict__["dns_servers"] = dns_servers
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            if lease_time is None and not opts.urn:
                raise TypeError("Missing required property 'lease_time'")
            __props__.__dict__["lease_time"] = lease_time
            if mac_address is None and not opts.urn:
                raise TypeError("Missing required property 'mac_address'")
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if org_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_network_id'")
            __props__.__dict__["org_network_id"] = org_network_id
        super(NsxtNetworkDhcpBinding, __self__).__init__(
            'vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binding_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dhcp_v4_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV4ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV4ConfigArgsDict']]] = None,
            dhcp_v6_config: Optional[pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV6ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV6ConfigArgsDict']]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            lease_time: Optional[pulumi.Input[int]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            org_network_id: Optional[pulumi.Input[str]] = None) -> 'NsxtNetworkDhcpBinding':
        """
        Get an existing NsxtNetworkDhcpBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] binding_type: One of `IPV4` or `IPV6`
        :param pulumi.Input[str] description: Description of DHCP binding
        :param pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV4ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV4ConfigArgsDict']] dhcp_v4_config: Additional configuration for IPv4 specific options. See IPv4 block
        :param pulumi.Input[Union['NsxtNetworkDhcpBindingDhcpV6ConfigArgs', 'NsxtNetworkDhcpBindingDhcpV6ConfigArgsDict']] dhcp_v6_config: Additional configuration for IPv6 specific options. See IPv6 block
               
               <a id="ipv4-block"></a>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: A list of DNS servers. Maximum 2 can be specified
        :param pulumi.Input[str] ip_address: IP address used for binding
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum `3600` seconds
        :param pulumi.Input[str] mac_address: MAC address used for binding
        :param pulumi.Input[str] name: Name of DHCP binding
        :param pulumi.Input[str] org: The name of organization. Optional if defined at provider level
        :param pulumi.Input[str] org_network_id: The ID of an Org VDC network. **Note**  (`.id` field) of
               `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
               here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
               that DHCP is enabled before configuring pools
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtNetworkDhcpBindingState.__new__(_NsxtNetworkDhcpBindingState)

        __props__.__dict__["binding_type"] = binding_type
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_v4_config"] = dhcp_v4_config
        __props__.__dict__["dhcp_v6_config"] = dhcp_v6_config
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["org_network_id"] = org_network_id
        return NsxtNetworkDhcpBinding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> pulumi.Output[str]:
        """
        One of `IPV4` or `IPV6`
        """
        return pulumi.get(self, "binding_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of DHCP binding
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpV4Config")
    def dhcp_v4_config(self) -> pulumi.Output[Optional['outputs.NsxtNetworkDhcpBindingDhcpV4Config']]:
        """
        Additional configuration for IPv4 specific options. See IPv4 block
        """
        return pulumi.get(self, "dhcp_v4_config")

    @property
    @pulumi.getter(name="dhcpV6Config")
    def dhcp_v6_config(self) -> pulumi.Output[Optional['outputs.NsxtNetworkDhcpBindingDhcpV6Config']]:
        """
        Additional configuration for IPv6 specific options. See IPv6 block

        <a id="ipv4-block"></a>
        """
        return pulumi.get(self, "dhcp_v6_config")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of DNS servers. Maximum 2 can be specified
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        IP address used for binding
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[int]:
        """
        Lease time in seconds. Minimum `3600` seconds
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        """
        MAC address used for binding
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of DHCP binding
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization. Optional if defined at provider level
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> pulumi.Output[str]:
        """
        The ID of an Org VDC network. **Note**  (`.id` field) of
        `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
        here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
        that DHCP is enabled before configuring pools
        """
        return pulumi.get(self, "org_network_id")

