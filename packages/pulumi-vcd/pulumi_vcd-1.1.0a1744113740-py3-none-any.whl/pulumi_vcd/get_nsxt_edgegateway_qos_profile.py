# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtEdgegatewayQosProfileResult',
    'AwaitableGetNsxtEdgegatewayQosProfileResult',
    'get_nsxt_edgegateway_qos_profile',
    'get_nsxt_edgegateway_qos_profile_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayQosProfileResult:
    """
    A collection of values returned by getNsxtEdgegatewayQosProfile.
    """
    def __init__(__self__, burst_size=None, committed_bandwidth=None, description=None, excess_action=None, id=None, name=None, nsxt_manager_id=None):
        if burst_size and not isinstance(burst_size, int):
            raise TypeError("Expected argument 'burst_size' to be a int")
        pulumi.set(__self__, "burst_size", burst_size)
        if committed_bandwidth and not isinstance(committed_bandwidth, int):
            raise TypeError("Expected argument 'committed_bandwidth' to be a int")
        pulumi.set(__self__, "committed_bandwidth", committed_bandwidth)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if excess_action and not isinstance(excess_action, str):
            raise TypeError("Expected argument 'excess_action' to be a str")
        pulumi.set(__self__, "excess_action", excess_action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)

    @property
    @pulumi.getter(name="burstSize")
    def burst_size(self) -> int:
        """
        Burst size defined in bytes
        """
        return pulumi.get(self, "burst_size")

    @property
    @pulumi.getter(name="committedBandwidth")
    def committed_bandwidth(self) -> int:
        """
        Committed bandwith specificd in Mb/s
        """
        return pulumi.get(self, "committed_bandwidth")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of QoS Profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="excessAction")
    def excess_action(self) -> str:
        """
        Excess action defines action on traffic exceeding bandwidth
        """
        return pulumi.get(self, "excess_action")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")


class AwaitableGetNsxtEdgegatewayQosProfileResult(GetNsxtEdgegatewayQosProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayQosProfileResult(
            burst_size=self.burst_size,
            committed_bandwidth=self.committed_bandwidth,
            description=self.description,
            excess_action=self.excess_action,
            id=self.id,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id)


def get_nsxt_edgegateway_qos_profile(name: Optional[str] = None,
                                     nsxt_manager_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayQosProfileResult:
    """
    Supported in provider *v3.9+* and VCD 10.3.2+ with NSX-T.

    Provides a data source to read NSX-T Edge Gateway QoS profiles, which can be used to modify NSX-T
    Edge Gateway Rate Limiting (QoS) configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_manager(name="nsxt-manager-name")
    qos_1 = vcd.get_nsxt_edgegateway_qos_profile(nsxt_manager_id=first_nsxt_manager_id["id"],
        name="qos-profile-1")
    ```


    :param str name: QoS Profile Name
    :param str nsxt_manager_id: NSX-T Manager where the QoS profile is defined in (can be looked up
           using `get_nsxt_manager` data source)
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegatewayQosProfile:getNsxtEdgegatewayQosProfile', __args__, opts=opts, typ=GetNsxtEdgegatewayQosProfileResult).value

    return AwaitableGetNsxtEdgegatewayQosProfileResult(
        burst_size=pulumi.get(__ret__, 'burst_size'),
        committed_bandwidth=pulumi.get(__ret__, 'committed_bandwidth'),
        description=pulumi.get(__ret__, 'description'),
        excess_action=pulumi.get(__ret__, 'excess_action'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'))
def get_nsxt_edgegateway_qos_profile_output(name: Optional[pulumi.Input[str]] = None,
                                            nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayQosProfileResult]:
    """
    Supported in provider *v3.9+* and VCD 10.3.2+ with NSX-T.

    Provides a data source to read NSX-T Edge Gateway QoS profiles, which can be used to modify NSX-T
    Edge Gateway Rate Limiting (QoS) configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_manager(name="nsxt-manager-name")
    qos_1 = vcd.get_nsxt_edgegateway_qos_profile(nsxt_manager_id=first_nsxt_manager_id["id"],
        name="qos-profile-1")
    ```


    :param str name: QoS Profile Name
    :param str nsxt_manager_id: NSX-T Manager where the QoS profile is defined in (can be looked up
           using `get_nsxt_manager` data source)
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegatewayQosProfile:getNsxtEdgegatewayQosProfile', __args__, opts=opts, typ=GetNsxtEdgegatewayQosProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayQosProfileResult(
        burst_size=pulumi.get(__response__, 'burst_size'),
        committed_bandwidth=pulumi.get(__response__, 'committed_bandwidth'),
        description=pulumi.get(__response__, 'description'),
        excess_action=pulumi.get(__response__, 'excess_action'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id')))
