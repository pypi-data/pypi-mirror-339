# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CatalogVappTemplateArgs', 'CatalogVappTemplate']

@pulumi.input_type
class CatalogVappTemplateArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 capture_vapp: Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lease: Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a CatalogVappTemplate resource.
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input['CatalogVappTemplateCaptureVappArgs'] capture_vapp: A configuration block to create template from existing
               vApp (Standalone VM or vApp)
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input['CatalogVappTemplateLeaseArgs'] lease: The information about the vApp Template lease. It includes the field below. When this section is
               included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        :param pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: vApp Template name in Catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] ova_path: Absolute or relative path to file to upload
        :param pulumi.Input[str] ovf_url: URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        :param pulumi.Input[int] upload_piece_size: Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        if capture_vapp is not None:
            pulumi.set(__self__, "capture_vapp", capture_vapp)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if ova_path is not None:
            pulumi.set(__self__, "ova_path", ova_path)
        if ovf_url is not None:
            pulumi.set(__self__, "ovf_url", ovf_url)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="captureVapp")
    def capture_vapp(self) -> Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']]:
        """
        A configuration block to create template from existing
        vApp (Standalone VM or vApp)
        """
        return pulumi.get(self, "capture_vapp")

    @capture_vapp.setter
    def capture_vapp(self, value: Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']]):
        pulumi.set(self, "capture_vapp", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def lease(self) -> Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']]:
        """
        The information about the vApp Template lease. It includes the field below. When this section is
        included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        """
        return pulumi.get(self, "lease")

    @lease.setter
    def lease(self, value: Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']]):
        pulumi.set(self, "lease", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vApp Template name in Catalog
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "ova_path")

    @ova_path.setter
    def ova_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ova_path", value)

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        """
        return pulumi.get(self, "ovf_url")

    @ovf_url.setter
    def ovf_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovf_url", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)


@pulumi.input_type
class _CatalogVappTemplateState:
    def __init__(__self__, *,
                 capture_vapp: Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lease: Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering CatalogVappTemplate resources.
        :param pulumi.Input['CatalogVappTemplateCaptureVappArgs'] capture_vapp: A configuration block to create template from existing
               vApp (Standalone VM or vApp)
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] catalog_item_id: Catalog Item ID
        :param pulumi.Input[str] created: Timestamp of when the vApp Template was created
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        :param pulumi.Input['CatalogVappTemplateLeaseArgs'] lease: The information about the vApp Template lease. It includes the field below. When this section is
               included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        :param pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: vApp Template name in Catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] ova_path: Absolute or relative path to file to upload
        :param pulumi.Input[str] ovf_url: URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        :param pulumi.Input[int] upload_piece_size: Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        :param pulumi.Input[str] vdc_id: The VDC ID to which this vApp Template belongs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: Set of VM names within the vApp template
        """
        if capture_vapp is not None:
            pulumi.set(__self__, "capture_vapp", capture_vapp)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_item_id is not None:
            pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if inherited_metadata is not None:
            pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if ova_path is not None:
            pulumi.set(__self__, "ova_path", ova_path)
        if ovf_url is not None:
            pulumi.set(__self__, "ovf_url", ovf_url)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)
        if vm_names is not None:
            pulumi.set(__self__, "vm_names", vm_names)

    @property
    @pulumi.getter(name="captureVapp")
    def capture_vapp(self) -> Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']]:
        """
        A configuration block to create template from existing
        vApp (Standalone VM or vApp)
        """
        return pulumi.get(self, "capture_vapp")

    @capture_vapp.setter
    def capture_vapp(self, value: Optional[pulumi.Input['CatalogVappTemplateCaptureVappArgs']]):
        pulumi.set(self, "capture_vapp", value)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog Item ID
        """
        return pulumi.get(self, "catalog_item_id")

    @catalog_item_id.setter
    def catalog_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_item_id", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the vApp Template was created
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        """
        return pulumi.get(self, "inherited_metadata")

    @inherited_metadata.setter
    def inherited_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "inherited_metadata", value)

    @property
    @pulumi.getter
    def lease(self) -> Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']]:
        """
        The information about the vApp Template lease. It includes the field below. When this section is
        included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        """
        return pulumi.get(self, "lease")

    @lease.setter
    def lease(self, value: Optional[pulumi.Input['CatalogVappTemplateLeaseArgs']]):
        pulumi.set(self, "lease", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vApp Template name in Catalog
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "ova_path")

    @ova_path.setter
    def ova_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ova_path", value)

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        """
        return pulumi.get(self, "ovf_url")

    @ovf_url.setter
    def ovf_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovf_url", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VDC ID to which this vApp Template belongs
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM names within the vApp template
        """
        return pulumi.get(self, "vm_names")

    @vm_names.setter
    def vm_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_names", value)


class CatalogVappTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capture_vapp: Optional[pulumi.Input[Union['CatalogVappTemplateCaptureVappArgs', 'CatalogVappTemplateCaptureVappArgsDict']]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lease: Optional[pulumi.Input[Union['CatalogVappTemplateLeaseArgs', 'CatalogVappTemplateLeaseArgsDict']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogVappTemplateMetadataEntryArgs', 'CatalogVappTemplateMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a CatalogVappTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CatalogVappTemplateCaptureVappArgs', 'CatalogVappTemplateCaptureVappArgsDict']] capture_vapp: A configuration block to create template from existing
               vApp (Standalone VM or vApp)
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Union['CatalogVappTemplateLeaseArgs', 'CatalogVappTemplateLeaseArgsDict']] lease: The information about the vApp Template lease. It includes the field below. When this section is
               included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogVappTemplateMetadataEntryArgs', 'CatalogVappTemplateMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: vApp Template name in Catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] ova_path: Absolute or relative path to file to upload
        :param pulumi.Input[str] ovf_url: URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        :param pulumi.Input[int] upload_piece_size: Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CatalogVappTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CatalogVappTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CatalogVappTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatalogVappTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capture_vapp: Optional[pulumi.Input[Union['CatalogVappTemplateCaptureVappArgs', 'CatalogVappTemplateCaptureVappArgsDict']]] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lease: Optional[pulumi.Input[Union['CatalogVappTemplateLeaseArgs', 'CatalogVappTemplateLeaseArgsDict']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogVappTemplateMetadataEntryArgs', 'CatalogVappTemplateMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatalogVappTemplateArgs.__new__(CatalogVappTemplateArgs)

            __props__.__dict__["capture_vapp"] = capture_vapp
            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["description"] = description
            __props__.__dict__["lease"] = lease
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["ova_path"] = ova_path
            __props__.__dict__["ovf_url"] = ovf_url
            __props__.__dict__["upload_piece_size"] = upload_piece_size
            __props__.__dict__["catalog_item_id"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["inherited_metadata"] = None
            __props__.__dict__["vdc_id"] = None
            __props__.__dict__["vm_names"] = None
        super(CatalogVappTemplate, __self__).__init__(
            'vcd:index/catalogVappTemplate:CatalogVappTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capture_vapp: Optional[pulumi.Input[Union['CatalogVappTemplateCaptureVappArgs', 'CatalogVappTemplateCaptureVappArgsDict']]] = None,
            catalog_id: Optional[pulumi.Input[str]] = None,
            catalog_item_id: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            lease: Optional[pulumi.Input[Union['CatalogVappTemplateLeaseArgs', 'CatalogVappTemplateLeaseArgsDict']]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CatalogVappTemplateMetadataEntryArgs', 'CatalogVappTemplateMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            ova_path: Optional[pulumi.Input[str]] = None,
            ovf_url: Optional[pulumi.Input[str]] = None,
            upload_piece_size: Optional[pulumi.Input[int]] = None,
            vdc_id: Optional[pulumi.Input[str]] = None,
            vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'CatalogVappTemplate':
        """
        Get an existing CatalogVappTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CatalogVappTemplateCaptureVappArgs', 'CatalogVappTemplateCaptureVappArgsDict']] capture_vapp: A configuration block to create template from existing
               vApp (Standalone VM or vApp)
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] catalog_item_id: Catalog Item ID
        :param pulumi.Input[str] created: Timestamp of when the vApp Template was created
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        :param pulumi.Input[Union['CatalogVappTemplateLeaseArgs', 'CatalogVappTemplateLeaseArgsDict']] lease: The information about the vApp Template lease. It includes the field below. When this section is
               included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        :param pulumi.Input[Sequence[pulumi.Input[Union['CatalogVappTemplateMetadataEntryArgs', 'CatalogVappTemplateMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: vApp Template name in Catalog
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] ova_path: Absolute or relative path to file to upload
        :param pulumi.Input[str] ovf_url: URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        :param pulumi.Input[int] upload_piece_size: Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        :param pulumi.Input[str] vdc_id: The VDC ID to which this vApp Template belongs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: Set of VM names within the vApp template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CatalogVappTemplateState.__new__(_CatalogVappTemplateState)

        __props__.__dict__["capture_vapp"] = capture_vapp
        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["catalog_item_id"] = catalog_item_id
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["inherited_metadata"] = inherited_metadata
        __props__.__dict__["lease"] = lease
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["ova_path"] = ova_path
        __props__.__dict__["ovf_url"] = ovf_url
        __props__.__dict__["upload_piece_size"] = upload_piece_size
        __props__.__dict__["vdc_id"] = vdc_id
        __props__.__dict__["vm_names"] = vm_names
        return CatalogVappTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="captureVapp")
    def capture_vapp(self) -> pulumi.Output[Optional['outputs.CatalogVappTemplateCaptureVapp']]:
        """
        A configuration block to create template from existing
        vApp (Standalone VM or vApp)
        """
        return pulumi.get(self, "capture_vapp")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[str]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> pulumi.Output[str]:
        """
        Catalog Item ID
        """
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the vApp Template was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        """
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter
    def lease(self) -> pulumi.Output['outputs.CatalogVappTemplateLease']:
        """
        The information about the vApp Template lease. It includes the field below. When this section is
        included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        """
        return pulumi.get(self, "lease")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.CatalogVappTemplateMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        vApp Template name in Catalog
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> pulumi.Output[Optional[str]]:
        """
        Absolute or relative path to file to upload
        """
        return pulumi.get(self, "ova_path")

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        """
        return pulumi.get(self, "ovf_url")

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> pulumi.Output[Optional[int]]:
        """
        Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        """
        return pulumi.get(self, "upload_piece_size")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Output[str]:
        """
        The VDC ID to which this vApp Template belongs
        """
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of VM names within the vApp template
        """
        return pulumi.get(self, "vm_names")

