# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NsxtEdgegatewayBgpNeighborArgs', 'NsxtEdgegatewayBgpNeighbor']

@pulumi.input_type
class NsxtEdgegatewayBgpNeighborArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 ip_address: pulumi.Input[str],
                 remote_as_number: pulumi.Input[str],
                 allow_as_in: Optional[pulumi.Input[bool]] = None,
                 bfd_dead_multiple: Optional[pulumi.Input[int]] = None,
                 bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 graceful_restart_mode: Optional[pulumi.Input[str]] = None,
                 hold_down_timer: Optional[pulumi.Input[int]] = None,
                 in_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 out_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 route_filtering: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegatewayBgpNeighbor resource.
        :param pulumi.Input[str] edge_gateway_id: The ID of the edge gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[str] ip_address: BGP Neighbor IP Address (IPv4 or IPv6)
        :param pulumi.Input[str] remote_as_number: BGP Neighbor Remote Autonomous System (AS) Number
        :param pulumi.Input[bool] allow_as_in: BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        :param pulumi.Input[int] bfd_dead_multiple: Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        :param pulumi.Input[bool] bfd_enabled: Should Bidirectional Forwarding Detection (BFD) be enabled
        :param pulumi.Input[int] bfd_interval: Time interval (in milliseconds) between heartbeat packets
        :param pulumi.Input[str] graceful_restart_mode: BGP Neighbor Graceful Restart Mode. One of:
               * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
               * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
               * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        :param pulumi.Input[int] hold_down_timer: Time interval (in seconds) before declaring a BGP peer dead
        :param pulumi.Input[str] in_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering incoming BGP routes
        :param pulumi.Input[int] keep_alive_timer: Time interval (in seconds) between sending keep-alive messages to a BGP peer
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] out_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        :param pulumi.Input[str] password: BGP Neighbor Password
        :param pulumi.Input[str] route_filtering: Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "remote_as_number", remote_as_number)
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if bfd_dead_multiple is not None:
            pulumi.set(__self__, "bfd_dead_multiple", bfd_dead_multiple)
        if bfd_enabled is not None:
            pulumi.set(__self__, "bfd_enabled", bfd_enabled)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if graceful_restart_mode is not None:
            pulumi.set(__self__, "graceful_restart_mode", graceful_restart_mode)
        if hold_down_timer is not None:
            pulumi.set(__self__, "hold_down_timer", hold_down_timer)
        if in_filter_ip_prefix_list_id is not None:
            pulumi.set(__self__, "in_filter_ip_prefix_list_id", in_filter_ip_prefix_list_id)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if out_filter_ip_prefix_list_id is not None:
            pulumi.set(__self__, "out_filter_ip_prefix_list_id", out_filter_ip_prefix_list_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if route_filtering is not None:
            pulumi.set(__self__, "route_filtering", route_filtering)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        The ID of the edge gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        """
        BGP Neighbor IP Address (IPv4 or IPv6)
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="remoteAsNumber")
    def remote_as_number(self) -> pulumi.Input[str]:
        """
        BGP Neighbor Remote Autonomous System (AS) Number
        """
        return pulumi.get(self, "remote_as_number")

    @remote_as_number.setter
    def remote_as_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_as_number", value)

    @property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[pulumi.Input[bool]]:
        """
        BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        """
        return pulumi.get(self, "allow_as_in")

    @allow_as_in.setter
    def allow_as_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_as_in", value)

    @property
    @pulumi.getter(name="bfdDeadMultiple")
    def bfd_dead_multiple(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        """
        return pulumi.get(self, "bfd_dead_multiple")

    @bfd_dead_multiple.setter
    def bfd_dead_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_dead_multiple", value)

    @property
    @pulumi.getter(name="bfdEnabled")
    def bfd_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Bidirectional Forwarding Detection (BFD) be enabled
        """
        return pulumi.get(self, "bfd_enabled")

    @bfd_enabled.setter
    def bfd_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_enabled", value)

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in milliseconds) between heartbeat packets
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval", value)

    @property
    @pulumi.getter(name="gracefulRestartMode")
    def graceful_restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor Graceful Restart Mode. One of:
        * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
        * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
        * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        """
        return pulumi.get(self, "graceful_restart_mode")

    @graceful_restart_mode.setter
    def graceful_restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_restart_mode", value)

    @property
    @pulumi.getter(name="holdDownTimer")
    def hold_down_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in seconds) before declaring a BGP peer dead
        """
        return pulumi.get(self, "hold_down_timer")

    @hold_down_timer.setter
    def hold_down_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_timer", value)

    @property
    @pulumi.getter(name="inFilterIpPrefixListId")
    def in_filter_ip_prefix_list_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the IP Prefix List to be used for filtering incoming BGP routes
        """
        return pulumi.get(self, "in_filter_ip_prefix_list_id")

    @in_filter_ip_prefix_list_id.setter
    def in_filter_ip_prefix_list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_filter_ip_prefix_list_id", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in seconds) between sending keep-alive messages to a BGP peer
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="outFilterIpPrefixListId")
    def out_filter_ip_prefix_list_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        """
        return pulumi.get(self, "out_filter_ip_prefix_list_id")

    @out_filter_ip_prefix_list_id.setter
    def out_filter_ip_prefix_list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "out_filter_ip_prefix_list_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor Password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="routeFiltering")
    def route_filtering(self) -> Optional[pulumi.Input[str]]:
        """
        Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        return pulumi.get(self, "route_filtering")

    @route_filtering.setter
    def route_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_filtering", value)


@pulumi.input_type
class _NsxtEdgegatewayBgpNeighborState:
    def __init__(__self__, *,
                 allow_as_in: Optional[pulumi.Input[bool]] = None,
                 bfd_dead_multiple: Optional[pulumi.Input[int]] = None,
                 bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 graceful_restart_mode: Optional[pulumi.Input[str]] = None,
                 hold_down_timer: Optional[pulumi.Input[int]] = None,
                 in_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 out_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 remote_as_number: Optional[pulumi.Input[str]] = None,
                 route_filtering: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegatewayBgpNeighbor resources.
        :param pulumi.Input[bool] allow_as_in: BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        :param pulumi.Input[int] bfd_dead_multiple: Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        :param pulumi.Input[bool] bfd_enabled: Should Bidirectional Forwarding Detection (BFD) be enabled
        :param pulumi.Input[int] bfd_interval: Time interval (in milliseconds) between heartbeat packets
        :param pulumi.Input[str] edge_gateway_id: The ID of the edge gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[str] graceful_restart_mode: BGP Neighbor Graceful Restart Mode. One of:
               * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
               * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
               * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        :param pulumi.Input[int] hold_down_timer: Time interval (in seconds) before declaring a BGP peer dead
        :param pulumi.Input[str] in_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering incoming BGP routes
        :param pulumi.Input[str] ip_address: BGP Neighbor IP Address (IPv4 or IPv6)
        :param pulumi.Input[int] keep_alive_timer: Time interval (in seconds) between sending keep-alive messages to a BGP peer
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] out_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        :param pulumi.Input[str] password: BGP Neighbor Password
        :param pulumi.Input[str] remote_as_number: BGP Neighbor Remote Autonomous System (AS) Number
        :param pulumi.Input[str] route_filtering: Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if bfd_dead_multiple is not None:
            pulumi.set(__self__, "bfd_dead_multiple", bfd_dead_multiple)
        if bfd_enabled is not None:
            pulumi.set(__self__, "bfd_enabled", bfd_enabled)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if graceful_restart_mode is not None:
            pulumi.set(__self__, "graceful_restart_mode", graceful_restart_mode)
        if hold_down_timer is not None:
            pulumi.set(__self__, "hold_down_timer", hold_down_timer)
        if in_filter_ip_prefix_list_id is not None:
            pulumi.set(__self__, "in_filter_ip_prefix_list_id", in_filter_ip_prefix_list_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if out_filter_ip_prefix_list_id is not None:
            pulumi.set(__self__, "out_filter_ip_prefix_list_id", out_filter_ip_prefix_list_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if remote_as_number is not None:
            pulumi.set(__self__, "remote_as_number", remote_as_number)
        if route_filtering is not None:
            pulumi.set(__self__, "route_filtering", route_filtering)

    @property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[pulumi.Input[bool]]:
        """
        BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        """
        return pulumi.get(self, "allow_as_in")

    @allow_as_in.setter
    def allow_as_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_as_in", value)

    @property
    @pulumi.getter(name="bfdDeadMultiple")
    def bfd_dead_multiple(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        """
        return pulumi.get(self, "bfd_dead_multiple")

    @bfd_dead_multiple.setter
    def bfd_dead_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_dead_multiple", value)

    @property
    @pulumi.getter(name="bfdEnabled")
    def bfd_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Bidirectional Forwarding Detection (BFD) be enabled
        """
        return pulumi.get(self, "bfd_enabled")

    @bfd_enabled.setter
    def bfd_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_enabled", value)

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in milliseconds) between heartbeat packets
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the edge gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="gracefulRestartMode")
    def graceful_restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor Graceful Restart Mode. One of:
        * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
        * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
        * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        """
        return pulumi.get(self, "graceful_restart_mode")

    @graceful_restart_mode.setter
    def graceful_restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_restart_mode", value)

    @property
    @pulumi.getter(name="holdDownTimer")
    def hold_down_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in seconds) before declaring a BGP peer dead
        """
        return pulumi.get(self, "hold_down_timer")

    @hold_down_timer.setter
    def hold_down_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_timer", value)

    @property
    @pulumi.getter(name="inFilterIpPrefixListId")
    def in_filter_ip_prefix_list_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the IP Prefix List to be used for filtering incoming BGP routes
        """
        return pulumi.get(self, "in_filter_ip_prefix_list_id")

    @in_filter_ip_prefix_list_id.setter
    def in_filter_ip_prefix_list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_filter_ip_prefix_list_id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor IP Address (IPv4 or IPv6)
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval (in seconds) between sending keep-alive messages to a BGP peer
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="outFilterIpPrefixListId")
    def out_filter_ip_prefix_list_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        """
        return pulumi.get(self, "out_filter_ip_prefix_list_id")

    @out_filter_ip_prefix_list_id.setter
    def out_filter_ip_prefix_list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "out_filter_ip_prefix_list_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor Password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="remoteAsNumber")
    def remote_as_number(self) -> Optional[pulumi.Input[str]]:
        """
        BGP Neighbor Remote Autonomous System (AS) Number
        """
        return pulumi.get(self, "remote_as_number")

    @remote_as_number.setter
    def remote_as_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_as_number", value)

    @property
    @pulumi.getter(name="routeFiltering")
    def route_filtering(self) -> Optional[pulumi.Input[str]]:
        """
        Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        return pulumi.get(self, "route_filtering")

    @route_filtering.setter
    def route_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_filtering", value)


class NsxtEdgegatewayBgpNeighbor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_as_in: Optional[pulumi.Input[bool]] = None,
                 bfd_dead_multiple: Optional[pulumi.Input[int]] = None,
                 bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 graceful_restart_mode: Optional[pulumi.Input[str]] = None,
                 hold_down_timer: Optional[pulumi.Input[int]] = None,
                 in_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 out_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 remote_as_number: Optional[pulumi.Input[str]] = None,
                 route_filtering: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegatewayBgpNeighbor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_as_in: BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        :param pulumi.Input[int] bfd_dead_multiple: Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        :param pulumi.Input[bool] bfd_enabled: Should Bidirectional Forwarding Detection (BFD) be enabled
        :param pulumi.Input[int] bfd_interval: Time interval (in milliseconds) between heartbeat packets
        :param pulumi.Input[str] edge_gateway_id: The ID of the edge gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[str] graceful_restart_mode: BGP Neighbor Graceful Restart Mode. One of:
               * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
               * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
               * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        :param pulumi.Input[int] hold_down_timer: Time interval (in seconds) before declaring a BGP peer dead
        :param pulumi.Input[str] in_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering incoming BGP routes
        :param pulumi.Input[str] ip_address: BGP Neighbor IP Address (IPv4 or IPv6)
        :param pulumi.Input[int] keep_alive_timer: Time interval (in seconds) between sending keep-alive messages to a BGP peer
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] out_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        :param pulumi.Input[str] password: BGP Neighbor Password
        :param pulumi.Input[str] remote_as_number: BGP Neighbor Remote Autonomous System (AS) Number
        :param pulumi.Input[str] route_filtering: Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayBgpNeighborArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegatewayBgpNeighbor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayBgpNeighborArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayBgpNeighborArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_as_in: Optional[pulumi.Input[bool]] = None,
                 bfd_dead_multiple: Optional[pulumi.Input[int]] = None,
                 bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 graceful_restart_mode: Optional[pulumi.Input[str]] = None,
                 hold_down_timer: Optional[pulumi.Input[int]] = None,
                 in_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 out_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 remote_as_number: Optional[pulumi.Input[str]] = None,
                 route_filtering: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayBgpNeighborArgs.__new__(NsxtEdgegatewayBgpNeighborArgs)

            __props__.__dict__["allow_as_in"] = allow_as_in
            __props__.__dict__["bfd_dead_multiple"] = bfd_dead_multiple
            __props__.__dict__["bfd_enabled"] = bfd_enabled
            __props__.__dict__["bfd_interval"] = bfd_interval
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["graceful_restart_mode"] = graceful_restart_mode
            __props__.__dict__["hold_down_timer"] = hold_down_timer
            __props__.__dict__["in_filter_ip_prefix_list_id"] = in_filter_ip_prefix_list_id
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["keep_alive_timer"] = keep_alive_timer
            __props__.__dict__["org"] = org
            __props__.__dict__["out_filter_ip_prefix_list_id"] = out_filter_ip_prefix_list_id
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if remote_as_number is None and not opts.urn:
                raise TypeError("Missing required property 'remote_as_number'")
            __props__.__dict__["remote_as_number"] = remote_as_number
            __props__.__dict__["route_filtering"] = route_filtering
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NsxtEdgegatewayBgpNeighbor, __self__).__init__(
            'vcd:index/nsxtEdgegatewayBgpNeighbor:NsxtEdgegatewayBgpNeighbor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_as_in: Optional[pulumi.Input[bool]] = None,
            bfd_dead_multiple: Optional[pulumi.Input[int]] = None,
            bfd_enabled: Optional[pulumi.Input[bool]] = None,
            bfd_interval: Optional[pulumi.Input[int]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            graceful_restart_mode: Optional[pulumi.Input[str]] = None,
            hold_down_timer: Optional[pulumi.Input[int]] = None,
            in_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            keep_alive_timer: Optional[pulumi.Input[int]] = None,
            org: Optional[pulumi.Input[str]] = None,
            out_filter_ip_prefix_list_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            remote_as_number: Optional[pulumi.Input[str]] = None,
            route_filtering: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegatewayBgpNeighbor':
        """
        Get an existing NsxtEdgegatewayBgpNeighbor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_as_in: BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        :param pulumi.Input[int] bfd_dead_multiple: Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        :param pulumi.Input[bool] bfd_enabled: Should Bidirectional Forwarding Detection (BFD) be enabled
        :param pulumi.Input[int] bfd_interval: Time interval (in milliseconds) between heartbeat packets
        :param pulumi.Input[str] edge_gateway_id: The ID of the edge gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[str] graceful_restart_mode: BGP Neighbor Graceful Restart Mode. One of:
               * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
               * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
               * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        :param pulumi.Input[int] hold_down_timer: Time interval (in seconds) before declaring a BGP peer dead
        :param pulumi.Input[str] in_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering incoming BGP routes
        :param pulumi.Input[str] ip_address: BGP Neighbor IP Address (IPv4 or IPv6)
        :param pulumi.Input[int] keep_alive_timer: Time interval (in seconds) between sending keep-alive messages to a BGP peer
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] out_filter_ip_prefix_list_id: The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        :param pulumi.Input[str] password: BGP Neighbor Password
        :param pulumi.Input[str] remote_as_number: BGP Neighbor Remote Autonomous System (AS) Number
        :param pulumi.Input[str] route_filtering: Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayBgpNeighborState.__new__(_NsxtEdgegatewayBgpNeighborState)

        __props__.__dict__["allow_as_in"] = allow_as_in
        __props__.__dict__["bfd_dead_multiple"] = bfd_dead_multiple
        __props__.__dict__["bfd_enabled"] = bfd_enabled
        __props__.__dict__["bfd_interval"] = bfd_interval
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["graceful_restart_mode"] = graceful_restart_mode
        __props__.__dict__["hold_down_timer"] = hold_down_timer
        __props__.__dict__["in_filter_ip_prefix_list_id"] = in_filter_ip_prefix_list_id
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["keep_alive_timer"] = keep_alive_timer
        __props__.__dict__["org"] = org
        __props__.__dict__["out_filter_ip_prefix_list_id"] = out_filter_ip_prefix_list_id
        __props__.__dict__["password"] = password
        __props__.__dict__["remote_as_number"] = remote_as_number
        __props__.__dict__["route_filtering"] = route_filtering
        return NsxtEdgegatewayBgpNeighbor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> pulumi.Output[bool]:
        """
        BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
        """
        return pulumi.get(self, "allow_as_in")

    @property
    @pulumi.getter(name="bfdDeadMultiple")
    def bfd_dead_multiple(self) -> pulumi.Output[int]:
        """
        Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
        """
        return pulumi.get(self, "bfd_dead_multiple")

    @property
    @pulumi.getter(name="bfdEnabled")
    def bfd_enabled(self) -> pulumi.Output[bool]:
        """
        Should Bidirectional Forwarding Detection (BFD) be enabled
        """
        return pulumi.get(self, "bfd_enabled")

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> pulumi.Output[int]:
        """
        Time interval (in milliseconds) between heartbeat packets
        """
        return pulumi.get(self, "bfd_interval")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        The ID of the edge gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter(name="gracefulRestartMode")
    def graceful_restart_mode(self) -> pulumi.Output[str]:
        """
        BGP Neighbor Graceful Restart Mode. One of:
        * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
        * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
        * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
        """
        return pulumi.get(self, "graceful_restart_mode")

    @property
    @pulumi.getter(name="holdDownTimer")
    def hold_down_timer(self) -> pulumi.Output[int]:
        """
        Time interval (in seconds) before declaring a BGP peer dead
        """
        return pulumi.get(self, "hold_down_timer")

    @property
    @pulumi.getter(name="inFilterIpPrefixListId")
    def in_filter_ip_prefix_list_id(self) -> pulumi.Output[str]:
        """
        The ID of the IP Prefix List to be used for filtering incoming BGP routes
        """
        return pulumi.get(self, "in_filter_ip_prefix_list_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        BGP Neighbor IP Address (IPv4 or IPv6)
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> pulumi.Output[int]:
        """
        Time interval (in seconds) between sending keep-alive messages to a BGP peer
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="outFilterIpPrefixListId")
    def out_filter_ip_prefix_list_id(self) -> pulumi.Output[str]:
        """
        The ID of the IP Prefix List to be used for filtering outgoing BGP routes
        """
        return pulumi.get(self, "out_filter_ip_prefix_list_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        BGP Neighbor Password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="remoteAsNumber")
    def remote_as_number(self) -> pulumi.Output[str]:
        """
        BGP Neighbor Remote Autonomous System (AS) Number
        """
        return pulumi.get(self, "remote_as_number")

    @property
    @pulumi.getter(name="routeFiltering")
    def route_filtering(self) -> pulumi.Output[str]:
        """
        Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
        """
        return pulumi.get(self, "route_filtering")

