# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbAppRuleArgs', 'LbAppRule']

@pulumi.input_type
class LbAppRuleArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 script: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbAppRule resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application rule is to be created
        :param pulumi.Input[str] script: The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        :param pulumi.Input[str] name: Application rule name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "script", script)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which the application rule is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def script(self) -> pulumi.Input[str]:
        """
        The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: pulumi.Input[str]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _LbAppRuleState:
    def __init__(__self__, *,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbAppRule resources.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application rule is to be created
        :param pulumi.Input[str] name: Application rule name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] script: The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which the application rule is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class LbAppRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LbAppRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application rule is to be created
        :param pulumi.Input[str] name: Application rule name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] script: The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbAppRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbAppRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbAppRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbAppRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbAppRuleArgs.__new__(LbAppRuleArgs)

            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if script is None and not opts.urn:
                raise TypeError("Missing required property 'script'")
            __props__.__dict__["script"] = script
            __props__.__dict__["vdc"] = vdc
        super(LbAppRule, __self__).__init__(
            'vcd:index/lbAppRule:LbAppRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            script: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'LbAppRule':
        """
        Get an existing LbAppRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application rule is to be created
        :param pulumi.Input[str] name: Application rule name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] script: The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbAppRuleState.__new__(_LbAppRuleState)

        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["script"] = script
        __props__.__dict__["vdc"] = vdc
        return LbAppRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which the application rule is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Application rule name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def script(self) -> pulumi.Output[str]:
        """
        The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

