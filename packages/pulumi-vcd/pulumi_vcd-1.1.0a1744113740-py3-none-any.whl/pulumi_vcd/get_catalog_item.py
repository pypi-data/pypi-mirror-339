# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogItemResult',
    'AwaitableGetCatalogItemResult',
    'get_catalog_item',
    'get_catalog_item_output',
]

@pulumi.output_type
class GetCatalogItemResult:
    """
    A collection of values returned by getCatalogItem.
    """
    def __init__(__self__, catalog=None, catalog_item_metadata=None, created=None, description=None, filter=None, id=None, metadata=None, metadata_entries=None, name=None, org=None):
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        pulumi.set(__self__, "catalog", catalog)
        if catalog_item_metadata and not isinstance(catalog_item_metadata, dict):
            raise TypeError("Expected argument 'catalog_item_metadata' to be a dict")
        pulumi.set(__self__, "catalog_item_metadata", catalog_item_metadata)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="catalogItemMetadata")
    def catalog_item_metadata(self) -> Mapping[str, str]:
        """
        (Deprecated) Use `metadata_entry` instead. Key value map of metadata assigned to the catalog item.
        """
        return pulumi.get(self, "catalog_item_metadata")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Catalog item description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetCatalogItemFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        """
        Key value map of metadata assigned to the associated vApp template.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetCatalogItemMetadataEntryResult']:
        """
        A set of metadata entries assigned to the catalog item. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")


class AwaitableGetCatalogItemResult(GetCatalogItemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogItemResult(
            catalog=self.catalog,
            catalog_item_metadata=self.catalog_item_metadata,
            created=self.created,
            description=self.description,
            filter=self.filter,
            id=self.id,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org)


def get_catalog_item(catalog: Optional[str] = None,
                     filter: Optional[Union['GetCatalogItemFilterArgs', 'GetCatalogItemFilterArgsDict']] = None,
                     name: Optional[str] = None,
                     org: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogItemResult:
    """
    > If you only need vApp Template features, you may use [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.

    Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_first_item = vcd.get_catalog_item(org="my-org",
        catalog="my-cat",
        name="my-first-item")
    my_second_item = vcd.CatalogItem("my-second-item",
        org=my_first_item.org,
        catalog=my_first_item.catalog,
        name="my-second-item",
        description=f"Belongs to {my_first_item.catalog}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5,
        metadata=my_first_item.metadata)
    ```

    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog: Catalog name
    :param Union['GetCatalogItemFilterArgs', 'GetCatalogItemFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Catalog Item name (optional when `filter` is used)
    :param str org: Org name
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalogItem:getCatalogItem', __args__, opts=opts, typ=GetCatalogItemResult).value

    return AwaitableGetCatalogItemResult(
        catalog=pulumi.get(__ret__, 'catalog'),
        catalog_item_metadata=pulumi.get(__ret__, 'catalog_item_metadata'),
        created=pulumi.get(__ret__, 'created'),
        description=pulumi.get(__ret__, 'description'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'))
def get_catalog_item_output(catalog: Optional[pulumi.Input[str]] = None,
                            filter: Optional[pulumi.Input[Optional[Union['GetCatalogItemFilterArgs', 'GetCatalogItemFilterArgsDict']]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            org: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCatalogItemResult]:
    """
    > If you only need vApp Template features, you may use [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.

    Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_first_item = vcd.get_catalog_item(org="my-org",
        catalog="my-cat",
        name="my-first-item")
    my_second_item = vcd.CatalogItem("my-second-item",
        org=my_first_item.org,
        catalog=my_first_item.catalog,
        name="my-second-item",
        description=f"Belongs to {my_first_item.catalog}",
        ova_path="/path/to/test_vapp_template.ova",
        upload_piece_size=5,
        metadata=my_first_item.metadata)
    ```

    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.

    ## Filter arguments

    (Supported in provider *v2.9+*)

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` - (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str catalog: Catalog name
    :param Union['GetCatalogItemFilterArgs', 'GetCatalogItemFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Catalog Item name (optional when `filter` is used)
    :param str org: Org name
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getCatalogItem:getCatalogItem', __args__, opts=opts, typ=GetCatalogItemResult)
    return __ret__.apply(lambda __response__: GetCatalogItemResult(
        catalog=pulumi.get(__response__, 'catalog'),
        catalog_item_metadata=pulumi.get(__response__, 'catalog_item_metadata'),
        created=pulumi.get(__response__, 'created'),
        description=pulumi.get(__response__, 'description'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org')))
