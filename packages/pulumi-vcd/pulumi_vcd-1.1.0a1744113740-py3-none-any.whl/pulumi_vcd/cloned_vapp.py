# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ClonedVappArgs', 'ClonedVapp']

@pulumi.input_type
class ClonedVappArgs:
    def __init__(__self__, *,
                 source_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 delete_source: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClonedVapp resource.
        :param pulumi.Input[str] source_id: The ID of the source to use.
        :param pulumi.Input[str] source_type: The type of the source to use: one of `template` or `vapp`.
        :param pulumi.Input[bool] delete_source: A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
               A source vApp can only be deleted if it is fully powered off.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_type", source_type)
        if delete_source is not None:
            pulumi.set(__self__, "delete_source", delete_source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Input[str]:
        """
        The ID of the source to use.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The type of the source to use: one of `template` or `vapp`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="deleteSource")
    def delete_source(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
        A source vApp can only be deleted if it is fully powered off.
        """
        return pulumi.get(self, "delete_source")

    @delete_source.setter
    def delete_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_source", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _ClonedVappState:
    def __init__(__self__, *,
                 delete_source: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_text: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ClonedVapp resources.
        :param pulumi.Input[bool] delete_source: A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
               A source vApp can only be deleted if it is fully powered off.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[str] href: (Computed) The vApp Hyper Reference.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`.
        :param pulumi.Input[str] source_id: The ID of the source to use.
        :param pulumi.Input[str] source_type: The type of the source to use: one of `template` or `vapp`.
        :param pulumi.Input[int] status: (Computed) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (Computed) The vApp status as text.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_lists: (Computed) The list of VM names included in this vApp, in alphabetic order.
        """
        if delete_source is not None:
            pulumi.set(__self__, "delete_source", delete_source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_lists is not None:
            pulumi.set(__self__, "vm_lists", vm_lists)

    @property
    @pulumi.getter(name="deleteSource")
    def delete_source(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
        A source vApp can only be deleted if it is fully powered off.
        """
        return pulumi.get(self, "delete_source")

    @delete_source.setter
    def delete_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_source", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The vApp Hyper Reference.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`.
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the source to use.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the source to use: one of `template` or `vapp`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        (Computed) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmLists")
    def vm_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Computed) The list of VM names included in this vApp, in alphabetic order.
        """
        return pulumi.get(self, "vm_lists")

    @vm_lists.setter
    def vm_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_lists", value)


class ClonedVapp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_source: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ClonedVapp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_source: A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
               A source vApp can only be deleted if it is fully powered off.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`.
        :param pulumi.Input[str] source_id: The ID of the source to use.
        :param pulumi.Input[str] source_type: The type of the source to use: one of `template` or `vapp`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClonedVappArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClonedVapp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClonedVappArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClonedVappArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_source: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClonedVappArgs.__new__(ClonedVappArgs)

            __props__.__dict__["delete_source"] = delete_source
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["power_on"] = power_on
            if source_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_id'")
            __props__.__dict__["source_id"] = source_id
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["href"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_text"] = None
            __props__.__dict__["vm_lists"] = None
        super(ClonedVapp, __self__).__init__(
            'vcd:index/clonedVapp:ClonedVapp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_source: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            power_on: Optional[pulumi.Input[bool]] = None,
            source_id: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_text: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ClonedVapp':
        """
        Get an existing ClonedVapp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_source: A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
               A source vApp can only be deleted if it is fully powered off.
        :param pulumi.Input[str] description: An optional description for the vApp, up to 256 characters.
        :param pulumi.Input[str] href: (Computed) The vApp Hyper Reference.
        :param pulumi.Input[str] name: A unique name for the vApp
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[bool] power_on: A boolean value stating if this vApp should be powered on. Default is `false`.
        :param pulumi.Input[str] source_id: The ID of the source to use.
        :param pulumi.Input[str] source_type: The type of the source to use: one of `template` or `vapp`.
        :param pulumi.Input[int] status: (Computed) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (Computed) The vApp status as text.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_lists: (Computed) The list of VM names included in this vApp, in alphabetic order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClonedVappState.__new__(_ClonedVappState)

        __props__.__dict__["delete_source"] = delete_source
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["power_on"] = power_on
        __props__.__dict__["source_id"] = source_id
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_text"] = status_text
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_lists"] = vm_lists
        return ClonedVapp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteSource")
    def delete_source(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
        A source vApp can only be deleted if it is fully powered off.
        """
        return pulumi.get(self, "delete_source")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description for the vApp, up to 256 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        (Computed) The vApp Hyper Reference.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the vApp
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value stating if this vApp should be powered on. Default is `false`.
        """
        return pulumi.get(self, "power_on")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Output[str]:
        """
        The ID of the source to use.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        The type of the source to use: one of `template` or `vapp`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        (Computed) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> pulumi.Output[str]:
        """
        (Computed) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmLists")
    def vm_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        (Computed) The list of VM names included in this vApp, in alphabetic order.
        """
        return pulumi.get(self, "vm_lists")

