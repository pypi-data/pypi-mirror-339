# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtAppPortProfileArgs', 'NsxtAppPortProfile']

@pulumi.input_type
class NsxtAppPortProfileArgs:
    def __init__(__self__, *,
                 app_ports: pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]],
                 scope: pulumi.Input[str],
                 context_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtAppPortProfile resource.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]] app_ports: At least one block of Application Port definition
               
               
               <a id="app-port"></a>
        :param pulumi.Input[str] scope: Application Port Profile scope - `PROVIDER`, `TENANT`
        :param pulumi.Input[str] context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
               and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        :param pulumi.Input[str] description: Application Port Profile description
        :param pulumi.Input[str] name: A unique name for Security Group
        :param pulumi.Input[str] nsxt_manager_id: Required only when `scope` is `PROVIDER`. Deprecated
               and replaced by `context_id`
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
               Deprecated and replaced by `context_id`
        """
        pulumi.set(__self__, "app_ports", app_ports)
        pulumi.set(__self__, "scope", scope)
        if context_id is not None:
            pulumi.set(__self__, "context_id", context_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsxt_manager_id is not None:
            warnings.warn("""Deprecated in favor of 'context_id'""", DeprecationWarning)
            pulumi.log.warn("""nsxt_manager_id is deprecated: Deprecated in favor of 'context_id'""")
        if nsxt_manager_id is not None:
            pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            warnings.warn("""Deprecated in favor of 'context_id'""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Deprecated in favor of 'context_id'""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="appPorts")
    def app_ports(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]]:
        """
        At least one block of Application Port definition


        <a id="app-port"></a>
        """
        return pulumi.get(self, "app_ports")

    @app_ports.setter
    def app_ports(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]]):
        pulumi.set(self, "app_ports", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        Application Port Profile scope - `PROVIDER`, `TENANT`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
        and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Application Port Profile description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for Security Group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nsxtManagerId")
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def nsxt_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required only when `scope` is `PROVIDER`. Deprecated
        and replaced by `context_id`
        """
        return pulumi.get(self, "nsxt_manager_id")

    @nsxt_manager_id.setter
    def nsxt_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_manager_id", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        Deprecated and replaced by `context_id`
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtAppPortProfileState:
    def __init__(__self__, *,
                 app_ports: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAppPortProfile resources.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]] app_ports: At least one block of Application Port definition
               
               
               <a id="app-port"></a>
        :param pulumi.Input[str] context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
               and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        :param pulumi.Input[str] description: Application Port Profile description
        :param pulumi.Input[str] name: A unique name for Security Group
        :param pulumi.Input[str] nsxt_manager_id: Required only when `scope` is `PROVIDER`. Deprecated
               and replaced by `context_id`
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] scope: Application Port Profile scope - `PROVIDER`, `TENANT`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
               Deprecated and replaced by `context_id`
        """
        if app_ports is not None:
            pulumi.set(__self__, "app_ports", app_ports)
        if context_id is not None:
            pulumi.set(__self__, "context_id", context_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsxt_manager_id is not None:
            warnings.warn("""Deprecated in favor of 'context_id'""", DeprecationWarning)
            pulumi.log.warn("""nsxt_manager_id is deprecated: Deprecated in favor of 'context_id'""")
        if nsxt_manager_id is not None:
            pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if vdc is not None:
            warnings.warn("""Deprecated in favor of 'context_id'""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Deprecated in favor of 'context_id'""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="appPorts")
    def app_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]]]:
        """
        At least one block of Application Port definition


        <a id="app-port"></a>
        """
        return pulumi.get(self, "app_ports")

    @app_ports.setter
    def app_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtAppPortProfileAppPortArgs']]]]):
        pulumi.set(self, "app_ports", value)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
        and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Application Port Profile description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for Security Group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nsxtManagerId")
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def nsxt_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required only when `scope` is `PROVIDER`. Deprecated
        and replaced by `context_id`
        """
        return pulumi.get(self, "nsxt_manager_id")

    @nsxt_manager_id.setter
    def nsxt_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_manager_id", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Application Port Profile scope - `PROVIDER`, `TENANT`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        Deprecated and replaced by `context_id`
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtAppPortProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAppPortProfileAppPortArgs', 'NsxtAppPortProfileAppPortArgsDict']]]]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAppPortProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAppPortProfileAppPortArgs', 'NsxtAppPortProfileAppPortArgsDict']]]] app_ports: At least one block of Application Port definition
               
               
               <a id="app-port"></a>
        :param pulumi.Input[str] context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
               and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        :param pulumi.Input[str] description: Application Port Profile description
        :param pulumi.Input[str] name: A unique name for Security Group
        :param pulumi.Input[str] nsxt_manager_id: Required only when `scope` is `PROVIDER`. Deprecated
               and replaced by `context_id`
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] scope: Application Port Profile scope - `PROVIDER`, `TENANT`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
               Deprecated and replaced by `context_id`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAppPortProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAppPortProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAppPortProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAppPortProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAppPortProfileAppPortArgs', 'NsxtAppPortProfileAppPortArgsDict']]]]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAppPortProfileArgs.__new__(NsxtAppPortProfileArgs)

            if app_ports is None and not opts.urn:
                raise TypeError("Missing required property 'app_ports'")
            __props__.__dict__["app_ports"] = app_ports
            __props__.__dict__["context_id"] = context_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["nsxt_manager_id"] = nsxt_manager_id
            __props__.__dict__["org"] = org
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["vdc"] = vdc
        super(NsxtAppPortProfile, __self__).__init__(
            'vcd:index/nsxtAppPortProfile:NsxtAppPortProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtAppPortProfileAppPortArgs', 'NsxtAppPortProfileAppPortArgsDict']]]]] = None,
            context_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nsxt_manager_id: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtAppPortProfile':
        """
        Get an existing NsxtAppPortProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtAppPortProfileAppPortArgs', 'NsxtAppPortProfileAppPortArgsDict']]]] app_ports: At least one block of Application Port definition
               
               
               <a id="app-port"></a>
        :param pulumi.Input[str] context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
               and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        :param pulumi.Input[str] description: Application Port Profile description
        :param pulumi.Input[str] name: A unique name for Security Group
        :param pulumi.Input[str] nsxt_manager_id: Required only when `scope` is `PROVIDER`. Deprecated
               and replaced by `context_id`
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] scope: Application Port Profile scope - `PROVIDER`, `TENANT`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
               Deprecated and replaced by `context_id`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAppPortProfileState.__new__(_NsxtAppPortProfileState)

        __props__.__dict__["app_ports"] = app_ports
        __props__.__dict__["context_id"] = context_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["nsxt_manager_id"] = nsxt_manager_id
        __props__.__dict__["org"] = org
        __props__.__dict__["scope"] = scope
        __props__.__dict__["vdc"] = vdc
        return NsxtAppPortProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appPorts")
    def app_ports(self) -> pulumi.Output[Sequence['outputs.NsxtAppPortProfileAppPort']]:
        """
        At least one block of Application Port definition


        <a id="app-port"></a>
        """
        return pulumi.get(self, "app_ports")

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> pulumi.Output[str]:
        """
        ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
        and `nsxt_manager_id`. It accepts VDC, VDC Group or NSX-T Manager ID.
        """
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Application Port Profile description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for Security Group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def nsxt_manager_id(self) -> pulumi.Output[str]:
        """
        Required only when `scope` is `PROVIDER`. Deprecated
        and replaced by `context_id`
        """
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        Application Port Profile scope - `PROVIDER`, `TENANT`
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level.
        Deprecated and replaced by `context_id`
        """
        return pulumi.get(self, "vdc")

