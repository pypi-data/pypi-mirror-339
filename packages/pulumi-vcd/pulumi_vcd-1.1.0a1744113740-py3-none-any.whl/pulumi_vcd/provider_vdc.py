# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProviderVdcArgs', 'ProviderVdc']

@pulumi.input_type
class ProviderVdcArgs:
    def __init__(__self__, *,
                 highest_supported_hardware_version: pulumi.Input[str],
                 resource_pool_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 storage_profile_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vcenter_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProviderVdc resource.
        :param pulumi.Input[str] highest_supported_hardware_version: The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_pool_ids: Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_names: Set of Storage Profile names used to create this provider VDC.
        :param pulumi.Input[str] vcenter_id: ID of the vCenter Server that provides the Resource Pools and Datastores.
        :param pulumi.Input[str] description: Description of the Provider VDC.
        :param pulumi.Input[bool] is_enabled: True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        :param pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]] metadata_entries: A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        :param pulumi.Input[str] name: Provider VDC name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_pool_ids: Set IDs of the Network Pools used by this Provider VDC.
        :param pulumi.Input[str] nsxt_manager_id: ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        """
        pulumi.set(__self__, "highest_supported_hardware_version", highest_supported_hardware_version)
        pulumi.set(__self__, "resource_pool_ids", resource_pool_ids)
        pulumi.set(__self__, "storage_profile_names", storage_profile_names)
        pulumi.set(__self__, "vcenter_id", vcenter_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_ids is not None:
            pulumi.set(__self__, "network_pool_ids", network_pool_ids)
        if nsxt_manager_id is not None:
            pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)

    @property
    @pulumi.getter(name="highestSupportedHardwareVersion")
    def highest_supported_hardware_version(self) -> pulumi.Input[str]:
        """
        The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        """
        return pulumi.get(self, "highest_supported_hardware_version")

    @highest_supported_hardware_version.setter
    def highest_supported_hardware_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "highest_supported_hardware_version", value)

    @property
    @pulumi.getter(name="resourcePoolIds")
    def resource_pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        """
        return pulumi.get(self, "resource_pool_ids")

    @resource_pool_ids.setter
    def resource_pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_pool_ids", value)

    @property
    @pulumi.getter(name="storageProfileNames")
    def storage_profile_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Set of Storage Profile names used to create this provider VDC.
        """
        return pulumi.get(self, "storage_profile_names")

    @storage_profile_names.setter
    def storage_profile_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "storage_profile_names", value)

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> pulumi.Input[str]:
        """
        ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        return pulumi.get(self, "vcenter_id")

    @vcenter_id.setter
    def vcenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Provider VDC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]]:
        """
        A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Provider VDC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolIds")
    def network_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set IDs of the Network Pools used by this Provider VDC.
        """
        return pulumi.get(self, "network_pool_ids")

    @network_pool_ids.setter
    def network_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_pool_ids", value)

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        """
        return pulumi.get(self, "nsxt_manager_id")

    @nsxt_manager_id.setter
    def nsxt_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_manager_id", value)


@pulumi.input_type
class _ProviderVdcState:
    def __init__(__self__, *,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compute_capacities: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcComputeCapacityArgs']]]] = None,
                 compute_provider_scope: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 highest_supported_hardware_version: Optional[pulumi.Input[str]] = None,
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 resource_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage_container_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_profile_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 universal_network_pool_id: Optional[pulumi.Input[str]] = None,
                 vcenter_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProviderVdc resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] capabilities: Set of virtual hardware versions supported by this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input['ProviderVdcComputeCapacityArgs']]] compute_capacities: An indicator of CPU and memory capacity. See Compute Capacity below for details.
        :param pulumi.Input[str] compute_provider_scope: Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        :param pulumi.Input[str] description: Description of the Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_network_ids: Set of IDs of External Networks.
        :param pulumi.Input[str] highest_supported_hardware_version: The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_ids: Set containing all the hosts which are connected to VC server.
        :param pulumi.Input[bool] is_enabled: True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        :param pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]] metadata_entries: A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        :param pulumi.Input[str] name: Provider VDC name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_pool_ids: Set IDs of the Network Pools used by this Provider VDC.
        :param pulumi.Input[str] nsxt_manager_id: ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_pool_ids: Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        :param pulumi.Input[int] status: Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_container_ids: Set of IDs of the vSphere datastores backing this provider VDC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_ids: Set of IDs to the Storage Profiles available to this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_names: Set of Storage Profile names used to create this provider VDC.
        :param pulumi.Input[str] universal_network_pool_id: ID of the universal network reference.
        :param pulumi.Input[str] vcenter_id: ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if compute_capacities is not None:
            pulumi.set(__self__, "compute_capacities", compute_capacities)
        if compute_provider_scope is not None:
            pulumi.set(__self__, "compute_provider_scope", compute_provider_scope)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_network_ids is not None:
            pulumi.set(__self__, "external_network_ids", external_network_ids)
        if highest_supported_hardware_version is not None:
            pulumi.set(__self__, "highest_supported_hardware_version", highest_supported_hardware_version)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_ids is not None:
            pulumi.set(__self__, "network_pool_ids", network_pool_ids)
        if nsxt_manager_id is not None:
            pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if resource_pool_ids is not None:
            pulumi.set(__self__, "resource_pool_ids", resource_pool_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_container_ids is not None:
            pulumi.set(__self__, "storage_container_ids", storage_container_ids)
        if storage_profile_ids is not None:
            pulumi.set(__self__, "storage_profile_ids", storage_profile_ids)
        if storage_profile_names is not None:
            pulumi.set(__self__, "storage_profile_names", storage_profile_names)
        if universal_network_pool_id is not None:
            pulumi.set(__self__, "universal_network_pool_id", universal_network_pool_id)
        if vcenter_id is not None:
            pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of virtual hardware versions supported by this Provider VDC.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter(name="computeCapacities")
    def compute_capacities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcComputeCapacityArgs']]]]:
        """
        An indicator of CPU and memory capacity. See Compute Capacity below for details.
        """
        return pulumi.get(self, "compute_capacities")

    @compute_capacities.setter
    def compute_capacities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcComputeCapacityArgs']]]]):
        pulumi.set(self, "compute_capacities", value)

    @property
    @pulumi.getter(name="computeProviderScope")
    def compute_provider_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        """
        return pulumi.get(self, "compute_provider_scope")

    @compute_provider_scope.setter
    def compute_provider_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_provider_scope", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Provider VDC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalNetworkIds")
    def external_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of IDs of External Networks.
        """
        return pulumi.get(self, "external_network_ids")

    @external_network_ids.setter
    def external_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_network_ids", value)

    @property
    @pulumi.getter(name="highestSupportedHardwareVersion")
    def highest_supported_hardware_version(self) -> Optional[pulumi.Input[str]]:
        """
        The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        """
        return pulumi.get(self, "highest_supported_hardware_version")

    @highest_supported_hardware_version.setter
    def highest_supported_hardware_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "highest_supported_hardware_version", value)

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set containing all the hosts which are connected to VC server.
        """
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_ids", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]]:
        """
        A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderVdcMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Provider VDC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolIds")
    def network_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set IDs of the Network Pools used by this Provider VDC.
        """
        return pulumi.get(self, "network_pool_ids")

    @network_pool_ids.setter
    def network_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_pool_ids", value)

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        """
        return pulumi.get(self, "nsxt_manager_id")

    @nsxt_manager_id.setter
    def nsxt_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_manager_id", value)

    @property
    @pulumi.getter(name="resourcePoolIds")
    def resource_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        """
        return pulumi.get(self, "resource_pool_ids")

    @resource_pool_ids.setter
    def resource_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_pool_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageContainerIds")
    def storage_container_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of IDs of the vSphere datastores backing this provider VDC
        """
        return pulumi.get(self, "storage_container_ids")

    @storage_container_ids.setter
    def storage_container_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_container_ids", value)

    @property
    @pulumi.getter(name="storageProfileIds")
    def storage_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of IDs to the Storage Profiles available to this Provider VDC.
        """
        return pulumi.get(self, "storage_profile_ids")

    @storage_profile_ids.setter
    def storage_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_profile_ids", value)

    @property
    @pulumi.getter(name="storageProfileNames")
    def storage_profile_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of Storage Profile names used to create this provider VDC.
        """
        return pulumi.get(self, "storage_profile_names")

    @storage_profile_names.setter
    def storage_profile_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_profile_names", value)

    @property
    @pulumi.getter(name="universalNetworkPoolId")
    def universal_network_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the universal network reference.
        """
        return pulumi.get(self, "universal_network_pool_id")

    @universal_network_pool_id.setter
    def universal_network_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "universal_network_pool_id", value)

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        return pulumi.get(self, "vcenter_id")

    @vcenter_id.setter
    def vcenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_id", value)


class ProviderVdc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 highest_supported_hardware_version: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcMetadataEntryArgs', 'ProviderVdcMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 resource_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_profile_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vcenter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ProviderVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the Provider VDC.
        :param pulumi.Input[str] highest_supported_hardware_version: The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        :param pulumi.Input[bool] is_enabled: True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcMetadataEntryArgs', 'ProviderVdcMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        :param pulumi.Input[str] name: Provider VDC name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_pool_ids: Set IDs of the Network Pools used by this Provider VDC.
        :param pulumi.Input[str] nsxt_manager_id: ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_pool_ids: Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_names: Set of Storage Profile names used to create this provider VDC.
        :param pulumi.Input[str] vcenter_id: ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderVdcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProviderVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderVdcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderVdcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 highest_supported_hardware_version: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcMetadataEntryArgs', 'ProviderVdcMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nsxt_manager_id: Optional[pulumi.Input[str]] = None,
                 resource_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_profile_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vcenter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderVdcArgs.__new__(ProviderVdcArgs)

            __props__.__dict__["description"] = description
            if highest_supported_hardware_version is None and not opts.urn:
                raise TypeError("Missing required property 'highest_supported_hardware_version'")
            __props__.__dict__["highest_supported_hardware_version"] = highest_supported_hardware_version
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["network_pool_ids"] = network_pool_ids
            __props__.__dict__["nsxt_manager_id"] = nsxt_manager_id
            if resource_pool_ids is None and not opts.urn:
                raise TypeError("Missing required property 'resource_pool_ids'")
            __props__.__dict__["resource_pool_ids"] = resource_pool_ids
            if storage_profile_names is None and not opts.urn:
                raise TypeError("Missing required property 'storage_profile_names'")
            __props__.__dict__["storage_profile_names"] = storage_profile_names
            if vcenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'vcenter_id'")
            __props__.__dict__["vcenter_id"] = vcenter_id
            __props__.__dict__["capabilities"] = None
            __props__.__dict__["compute_capacities"] = None
            __props__.__dict__["compute_provider_scope"] = None
            __props__.__dict__["external_network_ids"] = None
            __props__.__dict__["host_ids"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["storage_container_ids"] = None
            __props__.__dict__["storage_profile_ids"] = None
            __props__.__dict__["universal_network_pool_id"] = None
        super(ProviderVdc, __self__).__init__(
            'vcd:index/providerVdc:ProviderVdc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            compute_capacities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcComputeCapacityArgs', 'ProviderVdcComputeCapacityArgsDict']]]]] = None,
            compute_provider_scope: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            highest_supported_hardware_version: Optional[pulumi.Input[str]] = None,
            host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_enabled: Optional[pulumi.Input[bool]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcMetadataEntryArgs', 'ProviderVdcMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            nsxt_manager_id: Optional[pulumi.Input[str]] = None,
            resource_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            storage_container_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage_profile_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            universal_network_pool_id: Optional[pulumi.Input[str]] = None,
            vcenter_id: Optional[pulumi.Input[str]] = None) -> 'ProviderVdc':
        """
        Get an existing ProviderVdc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] capabilities: Set of virtual hardware versions supported by this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcComputeCapacityArgs', 'ProviderVdcComputeCapacityArgsDict']]]] compute_capacities: An indicator of CPU and memory capacity. See Compute Capacity below for details.
        :param pulumi.Input[str] compute_provider_scope: Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        :param pulumi.Input[str] description: Description of the Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_network_ids: Set of IDs of External Networks.
        :param pulumi.Input[str] highest_supported_hardware_version: The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_ids: Set containing all the hosts which are connected to VC server.
        :param pulumi.Input[bool] is_enabled: True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProviderVdcMetadataEntryArgs', 'ProviderVdcMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        :param pulumi.Input[str] name: Provider VDC name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_pool_ids: Set IDs of the Network Pools used by this Provider VDC.
        :param pulumi.Input[str] nsxt_manager_id: ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_pool_ids: Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        :param pulumi.Input[int] status: Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_container_ids: Set of IDs of the vSphere datastores backing this provider VDC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_ids: Set of IDs to the Storage Profiles available to this Provider VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_profile_names: Set of Storage Profile names used to create this provider VDC.
        :param pulumi.Input[str] universal_network_pool_id: ID of the universal network reference.
        :param pulumi.Input[str] vcenter_id: ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProviderVdcState.__new__(_ProviderVdcState)

        __props__.__dict__["capabilities"] = capabilities
        __props__.__dict__["compute_capacities"] = compute_capacities
        __props__.__dict__["compute_provider_scope"] = compute_provider_scope
        __props__.__dict__["description"] = description
        __props__.__dict__["external_network_ids"] = external_network_ids
        __props__.__dict__["highest_supported_hardware_version"] = highest_supported_hardware_version
        __props__.__dict__["host_ids"] = host_ids
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["network_pool_ids"] = network_pool_ids
        __props__.__dict__["nsxt_manager_id"] = nsxt_manager_id
        __props__.__dict__["resource_pool_ids"] = resource_pool_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_container_ids"] = storage_container_ids
        __props__.__dict__["storage_profile_ids"] = storage_profile_ids
        __props__.__dict__["storage_profile_names"] = storage_profile_names
        __props__.__dict__["universal_network_pool_id"] = universal_network_pool_id
        __props__.__dict__["vcenter_id"] = vcenter_id
        return ProviderVdc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def capabilities(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of virtual hardware versions supported by this Provider VDC.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="computeCapacities")
    def compute_capacities(self) -> pulumi.Output[Sequence['outputs.ProviderVdcComputeCapacity']]:
        """
        An indicator of CPU and memory capacity. See Compute Capacity below for details.
        """
        return pulumi.get(self, "compute_capacities")

    @property
    @pulumi.getter(name="computeProviderScope")
    def compute_provider_scope(self) -> pulumi.Output[str]:
        """
        Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        """
        return pulumi.get(self, "compute_provider_scope")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the Provider VDC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalNetworkIds")
    def external_network_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of IDs of External Networks.
        """
        return pulumi.get(self, "external_network_ids")

    @property
    @pulumi.getter(name="highestSupportedHardwareVersion")
    def highest_supported_hardware_version(self) -> pulumi.Output[str]:
        """
        The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        """
        return pulumi.get(self, "highest_supported_hardware_version")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set containing all the hosts which are connected to VC server.
        """
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Optional[Sequence['outputs.ProviderVdcMetadataEntry']]]:
        """
        A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Provider VDC name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolIds")
    def network_pool_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set IDs of the Network Pools used by this Provider VDC.
        """
        return pulumi.get(self, "network_pool_ids")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        """
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="resourcePoolIds")
    def resource_pool_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        """
        return pulumi.get(self, "resource_pool_ids")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageContainerIds")
    def storage_container_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of IDs of the vSphere datastores backing this provider VDC
        """
        return pulumi.get(self, "storage_container_ids")

    @property
    @pulumi.getter(name="storageProfileIds")
    def storage_profile_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of IDs to the Storage Profiles available to this Provider VDC.
        """
        return pulumi.get(self, "storage_profile_ids")

    @property
    @pulumi.getter(name="storageProfileNames")
    def storage_profile_names(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of Storage Profile names used to create this provider VDC.
        """
        return pulumi.get(self, "storage_profile_names")

    @property
    @pulumi.getter(name="universalNetworkPoolId")
    def universal_network_pool_id(self) -> pulumi.Output[str]:
        """
        ID of the universal network reference.
        """
        return pulumi.get(self, "universal_network_pool_id")

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> pulumi.Output[str]:
        """
        ID of the vCenter Server that provides the Resource Pools and Datastores.
        """
        return pulumi.get(self, "vcenter_id")

