# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmArgs', 'Vm']

@pulumi.input_type
class VmArgs:
    def __init__(__self__, *,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input['VmBootOptionsArgs']] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input['VmCustomizationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vm resource.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it
        :param pulumi.Input[str] boot_image: Media name to add as boot image.
        :param pulumi.Input[str] boot_image_id: The URN of the media to use as boot image.
        :param pulumi.Input['VmBootOptionsArgs'] boot_options: A block defining the boot options of a VM
        :param pulumi.Input[str] catalog_name: The catalog name in which to find the given vApp Template or media for boot_image
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine
        :param pulumi.Input[bool] consolidate_disks_on_create: Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
               VDCs
        :param pulumi.Input[str] copy_from_vm_id: Source VM that should be copied from
        :param pulumi.Input[int] cpu_cores: The number of cores per socket
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on.
        :param pulumi.Input[int] cpu_limit: The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
               the resource allocation is not unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM
        :param pulumi.Input['VmCustomizationArgs'] customization: Guest customization block
        :param pulumi.Input[str] description: The VM description
        :param pulumi.Input[bool] expose_hardware_virtualization: Expose hardware-assisted CPU virtualization to guest OS.
        :param pulumi.Input[str] firmware: Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
               by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key/value settings for guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on.
        :param pulumi.Input[int] memory_limit: The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
               when the resource allocation is not unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]] metadata_entries: Metadata entries for the given VM
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        :param pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]] networks: A block to define network interface. Multiple can be used.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in documentation.
        :param pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]] override_template_disks: A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
               and unit_number.
        :param pulumi.Input[str] placement_policy_id: VM placement policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Security tags to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]] set_extra_configs: A block to set extra configuration key-value pairs
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: The name of the vApp Template to use
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to - Required, unless it is a standalone VM
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        """
        if accept_all_eulas is not None:
            pulumi.set(__self__, "accept_all_eulas", accept_all_eulas)
        if boot_image is not None:
            warnings.warn("""Use `boot_image_id` instead""", DeprecationWarning)
            pulumi.log.warn("""boot_image is deprecated: Use `boot_image_id` instead""")
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if boot_image_id is not None:
            pulumi.set(__self__, "boot_image_id", boot_image_id)
        if boot_options is not None:
            pulumi.set(__self__, "boot_options", boot_options)
        if catalog_name is not None:
            warnings.warn("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""", DeprecationWarning)
            pulumi.log.warn("""catalog_name is deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if consolidate_disks_on_create is not None:
            pulumi.set(__self__, "consolidate_disks_on_create", consolidate_disks_on_create)
        if copy_from_vm_id is not None:
            pulumi.set(__self__, "copy_from_vm_id", copy_from_vm_id)
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if cpu_hot_add_enabled is not None:
            pulumi.set(__self__, "cpu_hot_add_enabled", cpu_hot_add_enabled)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_priority is not None:
            pulumi.set(__self__, "cpu_priority", cpu_priority)
        if cpu_reservation is not None:
            pulumi.set(__self__, "cpu_reservation", cpu_reservation)
        if cpu_shares is not None:
            pulumi.set(__self__, "cpu_shares", cpu_shares)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if customization is not None:
            pulumi.set(__self__, "customization", customization)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if expose_hardware_virtualization is not None:
            pulumi.set(__self__, "expose_hardware_virtualization", expose_hardware_virtualization)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_hot_add_enabled is not None:
            pulumi.set(__self__, "memory_hot_add_enabled", memory_hot_add_enabled)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_priority is not None:
            pulumi.set(__self__, "memory_priority", memory_priority)
        if memory_reservation is not None:
            pulumi.set(__self__, "memory_reservation", memory_reservation)
        if memory_shares is not None:
            pulumi.set(__self__, "memory_shares", memory_shares)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_dhcp_wait_seconds is not None:
            pulumi.set(__self__, "network_dhcp_wait_seconds", network_dhcp_wait_seconds)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if override_template_disks is not None:
            pulumi.set(__self__, "override_template_disks", override_template_disks)
        if placement_policy_id is not None:
            pulumi.set(__self__, "placement_policy_id", placement_policy_id)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if prevent_update_power_off is not None:
            pulumi.set(__self__, "prevent_update_power_off", prevent_update_power_off)
        if security_tags is not None:
            pulumi.set(__self__, "security_tags", security_tags)
        if set_extra_configs is not None:
            pulumi.set(__self__, "set_extra_configs", set_extra_configs)
        if sizing_policy_id is not None:
            pulumi.set(__self__, "sizing_policy_id", sizing_policy_id)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if template_name is not None:
            warnings.warn("""Use `vapp_template_id` instead""", DeprecationWarning)
            pulumi.log.warn("""template_name is deprecated: Use `vapp_template_id` instead""")
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vapp_template_id is not None:
            pulumi.set(__self__, "vapp_template_id", vapp_template_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_name_in_template is not None:
            pulumi.set(__self__, "vm_name_in_template", vm_name_in_template)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically accept EULA if OVA has it
        """
        return pulumi.get(self, "accept_all_eulas")

    @accept_all_eulas.setter
    def accept_all_eulas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_all_eulas", value)

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        """
        Media name to add as boot image.
        """
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the media to use as boot image.
        """
        return pulumi.get(self, "boot_image_id")

    @boot_image_id.setter
    def boot_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image_id", value)

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> Optional[pulumi.Input['VmBootOptionsArgs']]:
        """
        A block defining the boot options of a VM
        """
        return pulumi.get(self, "boot_options")

    @boot_options.setter
    def boot_options(self, value: Optional[pulumi.Input['VmBootOptionsArgs']]):
        pulumi.set(self, "boot_options", value)

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog name in which to find the given vApp Template or media for boot_image
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Computer name to assign to this virtual machine
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
        VDCs
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @consolidate_disks_on_create.setter
    def consolidate_disks_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consolidate_disks_on_create", value)

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source VM that should be copied from
        """
        return pulumi.get(self, "copy_from_vm_id")

    @copy_from_vm_id.setter
    def copy_from_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from_vm_id", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of cores per socket
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @cpu_hot_add_enabled.setter
    def cpu_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_add_enabled", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        the resource allocation is not unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @cpu_priority.setter
    def cpu_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_priority", value)

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "cpu_reservation")

    @cpu_reservation.setter
    def cpu_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_reservation", value)

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        """
        return pulumi.get(self, "cpu_shares")

    @cpu_shares.setter
    def cpu_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_shares", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The number of virtual CPUs to allocate to the VM
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def customization(self) -> Optional[pulumi.Input['VmCustomizationArgs']]:
        """
        Guest customization block
        """
        return pulumi.get(self, "customization")

    @customization.setter
    def customization(self, value: Optional[pulumi.Input['VmCustomizationArgs']]):
        pulumi.set(self, "customization", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The VM description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        Expose hardware-assisted CPU virtualization to guest OS.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @expose_hardware_virtualization.setter
    def expose_hardware_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose_hardware_virtualization", value)

    @property
    @pulumi.getter
    def firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
        by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        """
        return pulumi.get(self, "firmware")

    @firmware.setter
    def firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key/value settings for guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        """
        return pulumi.get(self, "hardware_version")

    @hardware_version.setter
    def hardware_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_version", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) to allocate to the VM
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @memory_hot_add_enabled.setter
    def memory_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory_hot_add_enabled", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        when the resource allocation is not unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @memory_priority.setter
    def memory_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_priority", value)

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @memory_reservation.setter
    def memory_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_reservation", value)

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        """
        return pulumi.get(self, "memory_shares")

    @memory_shares.setter
    def memory_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_shares", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]]:
        """
        Metadata entries for the given VM
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @network_dhcp_wait_seconds.setter
    def network_dhcp_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_dhcp_wait_seconds", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]]:
        """
        A block to define network interface. Multiple can be used.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating System type. Possible values can be found in documentation.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]]:
        """
        A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        and unit_number.
        """
        return pulumi.get(self, "override_template_disks")

    @override_template_disks.setter
    def override_template_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]]):
        pulumi.set(self, "override_template_disks", value)

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM placement policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "placement_policy_id")

    @placement_policy_id.setter
    def placement_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy_id", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this VM should be powered on
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @prevent_update_power_off.setter
    def prevent_update_power_off(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_update_power_off", value)

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security tags to assign to this VM
        """
        return pulumi.get(self, "security_tags")

    @security_tags.setter
    def security_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_tags", value)

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]]:
        """
        A block to set extra configuration key-value pairs
        """
        return pulumi.get(self, "set_extra_configs")

    @set_extra_configs.setter
    def set_extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]]):
        pulumi.set(self, "set_extra_configs", value)

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM sizing policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "sizing_policy_id")

    @sizing_policy_id.setter
    def sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing_policy_id", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The vApp this VM belongs to - Required, unless it is a standalone VM
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the vApp Template to use
        """
        return pulumi.get(self, "vapp_template_id")

    @vapp_template_id.setter
    def vapp_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_template_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        """
        return pulumi.get(self, "vm_name_in_template")

    @vm_name_in_template.setter
    def vm_name_in_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_in_template", value)


@pulumi.input_type
class _VmState:
    def __init__(__self__, *,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input['VmBootOptionsArgs']] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input['VmCustomizationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmExtraConfigArgs']]]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 imported: Optional[pulumi.Input[bool]] = None,
                 inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 internal_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmInternalDiskArgs']]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_text: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_id: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vm resources.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it
        :param pulumi.Input[str] boot_image: Media name to add as boot image.
        :param pulumi.Input[str] boot_image_id: The URN of the media to use as boot image.
        :param pulumi.Input['VmBootOptionsArgs'] boot_options: A block defining the boot options of a VM
        :param pulumi.Input[str] catalog_name: The catalog name in which to find the given vApp Template or media for boot_image
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine
        :param pulumi.Input[bool] consolidate_disks_on_create: Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
               VDCs
        :param pulumi.Input[str] copy_from_vm_id: Source VM that should be copied from
        :param pulumi.Input[int] cpu_cores: The number of cores per socket
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on.
        :param pulumi.Input[int] cpu_limit: The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
               the resource allocation is not unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM
        :param pulumi.Input['VmCustomizationArgs'] customization: Guest customization block
        :param pulumi.Input[str] description: The VM description
        :param pulumi.Input[bool] expose_hardware_virtualization: Expose hardware-assisted CPU virtualization to guest OS.
        :param pulumi.Input[Sequence[pulumi.Input['VmExtraConfigArgs']]] extra_configs: A block to retrieve extra configuration key-value pairs
        :param pulumi.Input[str] firmware: Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
               by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key/value settings for guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[bool] imported: Tells whether this resource has been imported
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        :param pulumi.Input[Sequence[pulumi.Input['VmInternalDiskArgs']]] internal_disks: A block will show internal disk details
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on.
        :param pulumi.Input[int] memory_limit: The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
               when the resource allocation is not unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]] metadata_entries: Metadata entries for the given VM
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        :param pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]] networks: A block to define network interface. Multiple can be used.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in documentation.
        :param pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]] override_template_disks: A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
               and unit_number.
        :param pulumi.Input[str] placement_policy_id: VM placement policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Security tags to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]] set_extra_configs: A block to set extra configuration key-value pairs
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[int] status: Shows the status code of the VM
        :param pulumi.Input[str] status_text: Shows the status of the VM
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: The name of the vApp Template to use
        :param pulumi.Input[str] vapp_id: ID of parent vApp
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to - Required, unless it is a standalone VM
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        :param pulumi.Input[str] vm_type: Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        """
        if accept_all_eulas is not None:
            pulumi.set(__self__, "accept_all_eulas", accept_all_eulas)
        if boot_image is not None:
            warnings.warn("""Use `boot_image_id` instead""", DeprecationWarning)
            pulumi.log.warn("""boot_image is deprecated: Use `boot_image_id` instead""")
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if boot_image_id is not None:
            pulumi.set(__self__, "boot_image_id", boot_image_id)
        if boot_options is not None:
            pulumi.set(__self__, "boot_options", boot_options)
        if catalog_name is not None:
            warnings.warn("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""", DeprecationWarning)
            pulumi.log.warn("""catalog_name is deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if consolidate_disks_on_create is not None:
            pulumi.set(__self__, "consolidate_disks_on_create", consolidate_disks_on_create)
        if copy_from_vm_id is not None:
            pulumi.set(__self__, "copy_from_vm_id", copy_from_vm_id)
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if cpu_hot_add_enabled is not None:
            pulumi.set(__self__, "cpu_hot_add_enabled", cpu_hot_add_enabled)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_priority is not None:
            pulumi.set(__self__, "cpu_priority", cpu_priority)
        if cpu_reservation is not None:
            pulumi.set(__self__, "cpu_reservation", cpu_reservation)
        if cpu_shares is not None:
            pulumi.set(__self__, "cpu_shares", cpu_shares)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if customization is not None:
            pulumi.set(__self__, "customization", customization)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if expose_hardware_virtualization is not None:
            pulumi.set(__self__, "expose_hardware_virtualization", expose_hardware_virtualization)
        if extra_configs is not None:
            pulumi.set(__self__, "extra_configs", extra_configs)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if imported is not None:
            pulumi.set(__self__, "imported", imported)
        if inherited_metadata is not None:
            pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if internal_disks is not None:
            pulumi.set(__self__, "internal_disks", internal_disks)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_hot_add_enabled is not None:
            pulumi.set(__self__, "memory_hot_add_enabled", memory_hot_add_enabled)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_priority is not None:
            pulumi.set(__self__, "memory_priority", memory_priority)
        if memory_reservation is not None:
            pulumi.set(__self__, "memory_reservation", memory_reservation)
        if memory_shares is not None:
            pulumi.set(__self__, "memory_shares", memory_shares)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_dhcp_wait_seconds is not None:
            pulumi.set(__self__, "network_dhcp_wait_seconds", network_dhcp_wait_seconds)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if override_template_disks is not None:
            pulumi.set(__self__, "override_template_disks", override_template_disks)
        if placement_policy_id is not None:
            pulumi.set(__self__, "placement_policy_id", placement_policy_id)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if prevent_update_power_off is not None:
            pulumi.set(__self__, "prevent_update_power_off", prevent_update_power_off)
        if security_tags is not None:
            pulumi.set(__self__, "security_tags", security_tags)
        if set_extra_configs is not None:
            pulumi.set(__self__, "set_extra_configs", set_extra_configs)
        if sizing_policy_id is not None:
            pulumi.set(__self__, "sizing_policy_id", sizing_policy_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if template_name is not None:
            warnings.warn("""Use `vapp_template_id` instead""", DeprecationWarning)
            pulumi.log.warn("""template_name is deprecated: Use `vapp_template_id` instead""")
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vapp_template_id is not None:
            pulumi.set(__self__, "vapp_template_id", vapp_template_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_name_in_template is not None:
            pulumi.set(__self__, "vm_name_in_template", vm_name_in_template)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically accept EULA if OVA has it
        """
        return pulumi.get(self, "accept_all_eulas")

    @accept_all_eulas.setter
    def accept_all_eulas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_all_eulas", value)

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        """
        Media name to add as boot image.
        """
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the media to use as boot image.
        """
        return pulumi.get(self, "boot_image_id")

    @boot_image_id.setter
    def boot_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image_id", value)

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> Optional[pulumi.Input['VmBootOptionsArgs']]:
        """
        A block defining the boot options of a VM
        """
        return pulumi.get(self, "boot_options")

    @boot_options.setter
    def boot_options(self, value: Optional[pulumi.Input['VmBootOptionsArgs']]):
        pulumi.set(self, "boot_options", value)

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog name in which to find the given vApp Template or media for boot_image
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Computer name to assign to this virtual machine
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
        VDCs
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @consolidate_disks_on_create.setter
    def consolidate_disks_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consolidate_disks_on_create", value)

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source VM that should be copied from
        """
        return pulumi.get(self, "copy_from_vm_id")

    @copy_from_vm_id.setter
    def copy_from_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from_vm_id", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of cores per socket
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @cpu_hot_add_enabled.setter
    def cpu_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_add_enabled", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        the resource allocation is not unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @cpu_priority.setter
    def cpu_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_priority", value)

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "cpu_reservation")

    @cpu_reservation.setter
    def cpu_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_reservation", value)

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        """
        return pulumi.get(self, "cpu_shares")

    @cpu_shares.setter
    def cpu_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_shares", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The number of virtual CPUs to allocate to the VM
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def customization(self) -> Optional[pulumi.Input['VmCustomizationArgs']]:
        """
        Guest customization block
        """
        return pulumi.get(self, "customization")

    @customization.setter
    def customization(self, value: Optional[pulumi.Input['VmCustomizationArgs']]):
        pulumi.set(self, "customization", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The VM description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        Expose hardware-assisted CPU virtualization to guest OS.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @expose_hardware_virtualization.setter
    def expose_hardware_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose_hardware_virtualization", value)

    @property
    @pulumi.getter(name="extraConfigs")
    def extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmExtraConfigArgs']]]]:
        """
        A block to retrieve extra configuration key-value pairs
        """
        return pulumi.get(self, "extra_configs")

    @extra_configs.setter
    def extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmExtraConfigArgs']]]]):
        pulumi.set(self, "extra_configs", value)

    @property
    @pulumi.getter
    def firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
        by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        """
        return pulumi.get(self, "firmware")

    @firmware.setter
    def firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key/value settings for guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        """
        return pulumi.get(self, "hardware_version")

    @hardware_version.setter
    def hardware_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_version", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        Tells whether this resource has been imported
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        """
        return pulumi.get(self, "inherited_metadata")

    @inherited_metadata.setter
    def inherited_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "inherited_metadata", value)

    @property
    @pulumi.getter(name="internalDisks")
    def internal_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmInternalDiskArgs']]]]:
        """
        A block will show internal disk details
        """
        return pulumi.get(self, "internal_disks")

    @internal_disks.setter
    def internal_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmInternalDiskArgs']]]]):
        pulumi.set(self, "internal_disks", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) to allocate to the VM
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @memory_hot_add_enabled.setter
    def memory_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory_hot_add_enabled", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        when the resource allocation is not unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @memory_priority.setter
    def memory_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_priority", value)

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @memory_reservation.setter
    def memory_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_reservation", value)

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        """
        return pulumi.get(self, "memory_shares")

    @memory_shares.setter
    def memory_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_shares", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]]:
        """
        Metadata entries for the given VM
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @network_dhcp_wait_seconds.setter
    def network_dhcp_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_dhcp_wait_seconds", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]]:
        """
        A block to define network interface. Multiple can be used.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating System type. Possible values can be found in documentation.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]]:
        """
        A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        and unit_number.
        """
        return pulumi.get(self, "override_template_disks")

    @override_template_disks.setter
    def override_template_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmOverrideTemplateDiskArgs']]]]):
        pulumi.set(self, "override_template_disks", value)

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM placement policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "placement_policy_id")

    @placement_policy_id.setter
    def placement_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy_id", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this VM should be powered on
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @prevent_update_power_off.setter
    def prevent_update_power_off(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_update_power_off", value)

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security tags to assign to this VM
        """
        return pulumi.get(self, "security_tags")

    @security_tags.setter
    def security_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_tags", value)

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]]:
        """
        A block to set extra configuration key-value pairs
        """
        return pulumi.get(self, "set_extra_configs")

    @set_extra_configs.setter
    def set_extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmSetExtraConfigArgs']]]]):
        pulumi.set(self, "set_extra_configs", value)

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM sizing policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "sizing_policy_id")

    @sizing_policy_id.setter
    def sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing_policy_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Shows the status code of the VM
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        Shows the status of the VM
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of parent vApp
        """
        return pulumi.get(self, "vapp_id")

    @vapp_id.setter
    def vapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_id", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The vApp this VM belongs to - Required, unless it is a standalone VM
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the vApp Template to use
        """
        return pulumi.get(self, "vapp_template_id")

    @vapp_template_id.setter
    def vapp_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_template_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        """
        return pulumi.get(self, "vm_name_in_template")

    @vm_name_in_template.setter
    def vm_name_in_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_in_template", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)


class Vm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input[Union['VmBootOptionsArgs', 'VmBootOptionsArgsDict']]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input[Union['VmCustomizationArgs', 'VmCustomizationArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmDiskArgs', 'VmDiskArgsDict']]]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmMetadataEntryArgs', 'VmMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkArgs', 'VmNetworkArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmOverrideTemplateDiskArgs', 'VmOverrideTemplateDiskArgsDict']]]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmSetExtraConfigArgs', 'VmSetExtraConfigArgsDict']]]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it
        :param pulumi.Input[str] boot_image: Media name to add as boot image.
        :param pulumi.Input[str] boot_image_id: The URN of the media to use as boot image.
        :param pulumi.Input[Union['VmBootOptionsArgs', 'VmBootOptionsArgsDict']] boot_options: A block defining the boot options of a VM
        :param pulumi.Input[str] catalog_name: The catalog name in which to find the given vApp Template or media for boot_image
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine
        :param pulumi.Input[bool] consolidate_disks_on_create: Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
               VDCs
        :param pulumi.Input[str] copy_from_vm_id: Source VM that should be copied from
        :param pulumi.Input[int] cpu_cores: The number of cores per socket
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on.
        :param pulumi.Input[int] cpu_limit: The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
               the resource allocation is not unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM
        :param pulumi.Input[Union['VmCustomizationArgs', 'VmCustomizationArgsDict']] customization: Guest customization block
        :param pulumi.Input[str] description: The VM description
        :param pulumi.Input[bool] expose_hardware_virtualization: Expose hardware-assisted CPU virtualization to guest OS.
        :param pulumi.Input[str] firmware: Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
               by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key/value settings for guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on.
        :param pulumi.Input[int] memory_limit: The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
               when the resource allocation is not unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmMetadataEntryArgs', 'VmMetadataEntryArgsDict']]]] metadata_entries: Metadata entries for the given VM
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkArgs', 'VmNetworkArgsDict']]]] networks: A block to define network interface. Multiple can be used.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in documentation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmOverrideTemplateDiskArgs', 'VmOverrideTemplateDiskArgsDict']]]] override_template_disks: A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
               and unit_number.
        :param pulumi.Input[str] placement_policy_id: VM placement policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Security tags to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmSetExtraConfigArgs', 'VmSetExtraConfigArgsDict']]]] set_extra_configs: A block to set extra configuration key-value pairs
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: The name of the vApp Template to use
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to - Required, unless it is a standalone VM
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VmArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input[Union['VmBootOptionsArgs', 'VmBootOptionsArgsDict']]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input[Union['VmCustomizationArgs', 'VmCustomizationArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmDiskArgs', 'VmDiskArgsDict']]]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmMetadataEntryArgs', 'VmMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkArgs', 'VmNetworkArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmOverrideTemplateDiskArgs', 'VmOverrideTemplateDiskArgsDict']]]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmSetExtraConfigArgs', 'VmSetExtraConfigArgsDict']]]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmArgs.__new__(VmArgs)

            __props__.__dict__["accept_all_eulas"] = accept_all_eulas
            __props__.__dict__["boot_image"] = boot_image
            __props__.__dict__["boot_image_id"] = boot_image_id
            __props__.__dict__["boot_options"] = boot_options
            __props__.__dict__["catalog_name"] = catalog_name
            __props__.__dict__["computer_name"] = computer_name
            __props__.__dict__["consolidate_disks_on_create"] = consolidate_disks_on_create
            __props__.__dict__["copy_from_vm_id"] = copy_from_vm_id
            __props__.__dict__["cpu_cores"] = cpu_cores
            __props__.__dict__["cpu_hot_add_enabled"] = cpu_hot_add_enabled
            __props__.__dict__["cpu_limit"] = cpu_limit
            __props__.__dict__["cpu_priority"] = cpu_priority
            __props__.__dict__["cpu_reservation"] = cpu_reservation
            __props__.__dict__["cpu_shares"] = cpu_shares
            __props__.__dict__["cpus"] = cpus
            __props__.__dict__["customization"] = customization
            __props__.__dict__["description"] = description
            __props__.__dict__["disks"] = disks
            __props__.__dict__["expose_hardware_virtualization"] = expose_hardware_virtualization
            __props__.__dict__["firmware"] = firmware
            __props__.__dict__["guest_properties"] = guest_properties
            __props__.__dict__["hardware_version"] = hardware_version
            __props__.__dict__["href"] = href
            __props__.__dict__["memory"] = memory
            __props__.__dict__["memory_hot_add_enabled"] = memory_hot_add_enabled
            __props__.__dict__["memory_limit"] = memory_limit
            __props__.__dict__["memory_priority"] = memory_priority
            __props__.__dict__["memory_reservation"] = memory_reservation
            __props__.__dict__["memory_shares"] = memory_shares
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["network_dhcp_wait_seconds"] = network_dhcp_wait_seconds
            __props__.__dict__["networks"] = networks
            __props__.__dict__["org"] = org
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["override_template_disks"] = override_template_disks
            __props__.__dict__["placement_policy_id"] = placement_policy_id
            __props__.__dict__["power_on"] = power_on
            __props__.__dict__["prevent_update_power_off"] = prevent_update_power_off
            __props__.__dict__["security_tags"] = security_tags
            __props__.__dict__["set_extra_configs"] = set_extra_configs
            __props__.__dict__["sizing_policy_id"] = sizing_policy_id
            __props__.__dict__["storage_profile"] = storage_profile
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["vapp_name"] = vapp_name
            __props__.__dict__["vapp_template_id"] = vapp_template_id
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["vm_name_in_template"] = vm_name_in_template
            __props__.__dict__["extra_configs"] = None
            __props__.__dict__["imported"] = None
            __props__.__dict__["inherited_metadata"] = None
            __props__.__dict__["internal_disks"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_text"] = None
            __props__.__dict__["vapp_id"] = None
            __props__.__dict__["vm_type"] = None
        super(Vm, __self__).__init__(
            'vcd:index/vm:Vm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_all_eulas: Optional[pulumi.Input[bool]] = None,
            boot_image: Optional[pulumi.Input[str]] = None,
            boot_image_id: Optional[pulumi.Input[str]] = None,
            boot_options: Optional[pulumi.Input[Union['VmBootOptionsArgs', 'VmBootOptionsArgsDict']]] = None,
            catalog_name: Optional[pulumi.Input[str]] = None,
            computer_name: Optional[pulumi.Input[str]] = None,
            consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
            copy_from_vm_id: Optional[pulumi.Input[str]] = None,
            cpu_cores: Optional[pulumi.Input[int]] = None,
            cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
            cpu_limit: Optional[pulumi.Input[int]] = None,
            cpu_priority: Optional[pulumi.Input[str]] = None,
            cpu_reservation: Optional[pulumi.Input[int]] = None,
            cpu_shares: Optional[pulumi.Input[int]] = None,
            cpus: Optional[pulumi.Input[int]] = None,
            customization: Optional[pulumi.Input[Union['VmCustomizationArgs', 'VmCustomizationArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmDiskArgs', 'VmDiskArgsDict']]]]] = None,
            expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
            extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmExtraConfigArgs', 'VmExtraConfigArgsDict']]]]] = None,
            firmware: Optional[pulumi.Input[str]] = None,
            guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            hardware_version: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            imported: Optional[pulumi.Input[bool]] = None,
            inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            internal_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmInternalDiskArgs', 'VmInternalDiskArgsDict']]]]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
            memory_limit: Optional[pulumi.Input[int]] = None,
            memory_priority: Optional[pulumi.Input[str]] = None,
            memory_reservation: Optional[pulumi.Input[int]] = None,
            memory_shares: Optional[pulumi.Input[int]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmMetadataEntryArgs', 'VmMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkArgs', 'VmNetworkArgsDict']]]]] = None,
            org: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmOverrideTemplateDiskArgs', 'VmOverrideTemplateDiskArgsDict']]]]] = None,
            placement_policy_id: Optional[pulumi.Input[str]] = None,
            power_on: Optional[pulumi.Input[bool]] = None,
            prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
            security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmSetExtraConfigArgs', 'VmSetExtraConfigArgsDict']]]]] = None,
            sizing_policy_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_text: Optional[pulumi.Input[str]] = None,
            storage_profile: Optional[pulumi.Input[str]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            vapp_id: Optional[pulumi.Input[str]] = None,
            vapp_name: Optional[pulumi.Input[str]] = None,
            vapp_template_id: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_name_in_template: Optional[pulumi.Input[str]] = None,
            vm_type: Optional[pulumi.Input[str]] = None) -> 'Vm':
        """
        Get an existing Vm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it
        :param pulumi.Input[str] boot_image: Media name to add as boot image.
        :param pulumi.Input[str] boot_image_id: The URN of the media to use as boot image.
        :param pulumi.Input[Union['VmBootOptionsArgs', 'VmBootOptionsArgsDict']] boot_options: A block defining the boot options of a VM
        :param pulumi.Input[str] catalog_name: The catalog name in which to find the given vApp Template or media for boot_image
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine
        :param pulumi.Input[bool] consolidate_disks_on_create: Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
               VDCs
        :param pulumi.Input[str] copy_from_vm_id: Source VM that should be copied from
        :param pulumi.Input[int] cpu_cores: The number of cores per socket
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on.
        :param pulumi.Input[int] cpu_limit: The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
               the resource allocation is not unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM
        :param pulumi.Input[Union['VmCustomizationArgs', 'VmCustomizationArgsDict']] customization: Guest customization block
        :param pulumi.Input[str] description: The VM description
        :param pulumi.Input[bool] expose_hardware_virtualization: Expose hardware-assisted CPU virtualization to guest OS.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmExtraConfigArgs', 'VmExtraConfigArgsDict']]]] extra_configs: A block to retrieve extra configuration key-value pairs
        :param pulumi.Input[str] firmware: Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
               by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key/value settings for guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[bool] imported: Tells whether this resource has been imported
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmInternalDiskArgs', 'VmInternalDiskArgsDict']]]] internal_disks: A block will show internal disk details
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on.
        :param pulumi.Input[int] memory_limit: The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
               when the resource allocation is not unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
               virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmMetadataEntryArgs', 'VmMetadataEntryArgsDict']]]] metadata_entries: Metadata entries for the given VM
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkArgs', 'VmNetworkArgsDict']]]] networks: A block to define network interface. Multiple can be used.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in documentation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmOverrideTemplateDiskArgs', 'VmOverrideTemplateDiskArgsDict']]]] override_template_disks: A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
               and unit_number.
        :param pulumi.Input[str] placement_policy_id: VM placement policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Security tags to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmSetExtraConfigArgs', 'VmSetExtraConfigArgsDict']]]] set_extra_configs: A block to set extra configuration key-value pairs
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. Has to be assigned to Org VDC.
        :param pulumi.Input[int] status: Shows the status code of the VM
        :param pulumi.Input[str] status_text: Shows the status of the VM
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: The name of the vApp Template to use
        :param pulumi.Input[str] vapp_id: ID of parent vApp
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to - Required, unless it is a standalone VM
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        :param pulumi.Input[str] vm_type: Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmState.__new__(_VmState)

        __props__.__dict__["accept_all_eulas"] = accept_all_eulas
        __props__.__dict__["boot_image"] = boot_image
        __props__.__dict__["boot_image_id"] = boot_image_id
        __props__.__dict__["boot_options"] = boot_options
        __props__.__dict__["catalog_name"] = catalog_name
        __props__.__dict__["computer_name"] = computer_name
        __props__.__dict__["consolidate_disks_on_create"] = consolidate_disks_on_create
        __props__.__dict__["copy_from_vm_id"] = copy_from_vm_id
        __props__.__dict__["cpu_cores"] = cpu_cores
        __props__.__dict__["cpu_hot_add_enabled"] = cpu_hot_add_enabled
        __props__.__dict__["cpu_limit"] = cpu_limit
        __props__.__dict__["cpu_priority"] = cpu_priority
        __props__.__dict__["cpu_reservation"] = cpu_reservation
        __props__.__dict__["cpu_shares"] = cpu_shares
        __props__.__dict__["cpus"] = cpus
        __props__.__dict__["customization"] = customization
        __props__.__dict__["description"] = description
        __props__.__dict__["disks"] = disks
        __props__.__dict__["expose_hardware_virtualization"] = expose_hardware_virtualization
        __props__.__dict__["extra_configs"] = extra_configs
        __props__.__dict__["firmware"] = firmware
        __props__.__dict__["guest_properties"] = guest_properties
        __props__.__dict__["hardware_version"] = hardware_version
        __props__.__dict__["href"] = href
        __props__.__dict__["imported"] = imported
        __props__.__dict__["inherited_metadata"] = inherited_metadata
        __props__.__dict__["internal_disks"] = internal_disks
        __props__.__dict__["memory"] = memory
        __props__.__dict__["memory_hot_add_enabled"] = memory_hot_add_enabled
        __props__.__dict__["memory_limit"] = memory_limit
        __props__.__dict__["memory_priority"] = memory_priority
        __props__.__dict__["memory_reservation"] = memory_reservation
        __props__.__dict__["memory_shares"] = memory_shares
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["network_dhcp_wait_seconds"] = network_dhcp_wait_seconds
        __props__.__dict__["networks"] = networks
        __props__.__dict__["org"] = org
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["override_template_disks"] = override_template_disks
        __props__.__dict__["placement_policy_id"] = placement_policy_id
        __props__.__dict__["power_on"] = power_on
        __props__.__dict__["prevent_update_power_off"] = prevent_update_power_off
        __props__.__dict__["security_tags"] = security_tags
        __props__.__dict__["set_extra_configs"] = set_extra_configs
        __props__.__dict__["sizing_policy_id"] = sizing_policy_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_text"] = status_text
        __props__.__dict__["storage_profile"] = storage_profile
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["vapp_id"] = vapp_id
        __props__.__dict__["vapp_name"] = vapp_name
        __props__.__dict__["vapp_template_id"] = vapp_template_id
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_name_in_template"] = vm_name_in_template
        __props__.__dict__["vm_type"] = vm_type
        return Vm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> pulumi.Output[Optional[bool]]:
        """
        Automatically accept EULA if OVA has it
        """
        return pulumi.get(self, "accept_all_eulas")

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> pulumi.Output[Optional[str]]:
        """
        Media name to add as boot image.
        """
        return pulumi.get(self, "boot_image")

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> pulumi.Output[Optional[str]]:
        """
        The URN of the media to use as boot image.
        """
        return pulumi.get(self, "boot_image_id")

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> pulumi.Output['outputs.VmBootOptions']:
        """
        A block defining the boot options of a VM
        """
        return pulumi.get(self, "boot_options")

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> pulumi.Output[Optional[str]]:
        """
        The catalog name in which to find the given vApp Template or media for boot_image
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> pulumi.Output[str]:
        """
        Computer name to assign to this virtual machine
        """
        return pulumi.get(self, "computer_name")

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> pulumi.Output[Optional[bool]]:
        """
        Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
        VDCs
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> pulumi.Output[Optional[str]]:
        """
        Source VM that should be copied from
        """
        return pulumi.get(self, "copy_from_vm_id")

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Output[int]:
        """
        The number of cores per socket
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> pulumi.Output[int]:
        """
        The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        the resource allocation is not unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> pulumi.Output[str]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> pulumi.Output[int]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "cpu_reservation")

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> pulumi.Output[int]:
        """
        Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        """
        return pulumi.get(self, "cpu_shares")

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Output[int]:
        """
        The number of virtual CPUs to allocate to the VM
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def customization(self) -> pulumi.Output['outputs.VmCustomization']:
        """
        Guest customization block
        """
        return pulumi.get(self, "customization")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The VM description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Optional[Sequence['outputs.VmDisk']]]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> pulumi.Output[Optional[bool]]:
        """
        Expose hardware-assisted CPU virtualization to guest OS.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @property
    @pulumi.getter(name="extraConfigs")
    def extra_configs(self) -> pulumi.Output[Sequence['outputs.VmExtraConfig']]:
        """
        A block to retrieve extra configuration key-value pairs
        """
        return pulumi.get(self, "extra_configs")

    @property
    @pulumi.getter
    def firmware(self) -> pulumi.Output[str]:
        """
        Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
        by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key/value settings for guest properties
        """
        return pulumi.get(self, "guest_properties")

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> pulumi.Output[str]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        """
        return pulumi.get(self, "hardware_version")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def imported(self) -> pulumi.Output[bool]:
        """
        Tells whether this resource has been imported
        """
        return pulumi.get(self, "imported")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        """
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter(name="internalDisks")
    def internal_disks(self) -> pulumi.Output[Sequence['outputs.VmInternalDisk']]:
        """
        A block will show internal disk details
        """
        return pulumi.get(self, "internal_disks")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        The amount of RAM (in MB) to allocate to the VM
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> pulumi.Output[int]:
        """
        The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        when the resource allocation is not unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> pulumi.Output[str]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> pulumi.Output[int]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> pulumi.Output[int]:
        """
        Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        """
        return pulumi.get(self, "memory_shares")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.VmMetadataEntry']]:
        """
        Metadata entries for the given VM
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.VmNetwork']]]:
        """
        A block to define network interface. Multiple can be used.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        Operating System type. Possible values can be found in documentation.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> pulumi.Output[Optional[Sequence['outputs.VmOverrideTemplateDisk']]]:
        """
        A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        and unit_number.
        """
        return pulumi.get(self, "override_template_disks")

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> pulumi.Output[str]:
        """
        VM placement policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "placement_policy_id")

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value stating if this VM should be powered on
        """
        return pulumi.get(self, "power_on")

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Security tags to assign to this VM
        """
        return pulumi.get(self, "security_tags")

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> pulumi.Output[Optional[Sequence['outputs.VmSetExtraConfig']]]:
        """
        A block to set extra configuration key-value pairs
        """
        return pulumi.get(self, "set_extra_configs")

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> pulumi.Output[str]:
        """
        VM sizing policy ID. Has to be assigned to Org VDC.
        """
        return pulumi.get(self, "sizing_policy_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Shows the status code of the VM
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> pulumi.Output[str]:
        """
        Shows the status of the VM
        """
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> pulumi.Output[str]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> pulumi.Output[str]:
        """
        ID of parent vApp
        """
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Output[str]:
        """
        The vApp this VM belongs to - Required, unless it is a standalone VM
        """
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        The URN of the vApp Template to use
        """
        return pulumi.get(self, "vapp_template_id")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        """
        return pulumi.get(self, "vm_name_in_template")

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> pulumi.Output[str]:
        """
        Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        """
        return pulumi.get(self, "vm_type")

