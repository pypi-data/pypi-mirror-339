# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVmPlacementPolicyResult',
    'AwaitableGetVmPlacementPolicyResult',
    'get_vm_placement_policy',
    'get_vm_placement_policy_output',
]

@pulumi.output_type
class GetVmPlacementPolicyResult:
    """
    A collection of values returned by getVmPlacementPolicy.
    """
    def __init__(__self__, description=None, id=None, logical_vm_group_ids=None, name=None, provider_vdc_id=None, vdc_id=None, vm_group_ids=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logical_vm_group_ids and not isinstance(logical_vm_group_ids, list):
            raise TypeError("Expected argument 'logical_vm_group_ids' to be a list")
        pulumi.set(__self__, "logical_vm_group_ids", logical_vm_group_ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_vdc_id and not isinstance(provider_vdc_id, str):
            raise TypeError("Expected argument 'provider_vdc_id' to be a str")
        pulumi.set(__self__, "provider_vdc_id", provider_vdc_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)
        if vm_group_ids and not isinstance(vm_group_ids, list):
            raise TypeError("Expected argument 'vm_group_ids' to be a list")
        pulumi.set(__self__, "vm_group_ids", vm_group_ids)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logicalVmGroupIds")
    def logical_vm_group_ids(self) -> Sequence[str]:
        """
        This attribute can't be retrieved if the data source is used by a tenant user when fetching by `vdc_id`.
        """
        return pulumi.get(self, "logical_vm_group_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerVdcId")
    def provider_vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "provider_vdc_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vmGroupIds")
    def vm_group_ids(self) -> Sequence[str]:
        """
        This attribute can't be retrieved if the data source is used by a tenant user when fetching by `vdc_id`.
        """
        return pulumi.get(self, "vm_group_ids")


class AwaitableGetVmPlacementPolicyResult(GetVmPlacementPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmPlacementPolicyResult(
            description=self.description,
            id=self.id,
            logical_vm_group_ids=self.logical_vm_group_ids,
            name=self.name,
            provider_vdc_id=self.provider_vdc_id,
            vdc_id=self.vdc_id,
            vm_group_ids=self.vm_group_ids)


def get_vm_placement_policy(name: Optional[str] = None,
                            provider_vdc_id: Optional[str] = None,
                            vdc_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmPlacementPolicyResult:
    """
    Provides a VMware Cloud Director VM Placement Policy data source. This can be used to read a VM Placement Policy.

    Supported in provider *v3.8+* and requires VCD 10.2+

    > **Note:** This resource can be used by both system administrators and tenant users.

    ## Example Usage

    ### System Administrators

    System administrators have full privileges to retrieve information of the Provider VDC to which the VM Placement Policy
    belongs. The way to fetch a VM Placement Policy in this case would be:

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="test",
        name="vdc-test")
    my_pvdc = vcd.get_provider_vdc(name=my_vdc.provider_vdc_name)
    tf_policy_name = vcd.get_vm_placement_policy(name="my-policy",
        provider_vdc_id=my_pvdc.id)
    pulumi.export("policyId", tf_policy_name.id)
    ```

    ### Tenant Users

    Tenant users don't have access to Provider VDC information so the only way to retrieve VM Placement Policies is to
    fetch them using the VDC information. The only constraint is that the desired VM Placement Policy **must be assigned
    to the VDC**.

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="test",
        name="vdc-test")
    tf_policy_name = vcd.get_vm_placement_policy(name="my-policy",
        vdc_id=my_vdc.id)
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name VM Placement Policy.
    :param str provider_vdc_id: The ID of the [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Placement Policy belongs.
    :param str vdc_id: The ID of the [VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) to which the VM Placement Policy is assigned.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['providerVdcId'] = provider_vdc_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmPlacementPolicy:getVmPlacementPolicy', __args__, opts=opts, typ=GetVmPlacementPolicyResult).value

    return AwaitableGetVmPlacementPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        logical_vm_group_ids=pulumi.get(__ret__, 'logical_vm_group_ids'),
        name=pulumi.get(__ret__, 'name'),
        provider_vdc_id=pulumi.get(__ret__, 'provider_vdc_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'),
        vm_group_ids=pulumi.get(__ret__, 'vm_group_ids'))
def get_vm_placement_policy_output(name: Optional[pulumi.Input[str]] = None,
                                   provider_vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmPlacementPolicyResult]:
    """
    Provides a VMware Cloud Director VM Placement Policy data source. This can be used to read a VM Placement Policy.

    Supported in provider *v3.8+* and requires VCD 10.2+

    > **Note:** This resource can be used by both system administrators and tenant users.

    ## Example Usage

    ### System Administrators

    System administrators have full privileges to retrieve information of the Provider VDC to which the VM Placement Policy
    belongs. The way to fetch a VM Placement Policy in this case would be:

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="test",
        name="vdc-test")
    my_pvdc = vcd.get_provider_vdc(name=my_vdc.provider_vdc_name)
    tf_policy_name = vcd.get_vm_placement_policy(name="my-policy",
        provider_vdc_id=my_pvdc.id)
    pulumi.export("policyId", tf_policy_name.id)
    ```

    ### Tenant Users

    Tenant users don't have access to Provider VDC information so the only way to retrieve VM Placement Policies is to
    fetch them using the VDC information. The only constraint is that the desired VM Placement Policy **must be assigned
    to the VDC**.

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="test",
        name="vdc-test")
    tf_policy_name = vcd.get_vm_placement_policy(name="my-policy",
        vdc_id=my_vdc.id)
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name VM Placement Policy.
    :param str provider_vdc_id: The ID of the [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Placement Policy belongs.
    :param str vdc_id: The ID of the [VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) to which the VM Placement Policy is assigned.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['providerVdcId'] = provider_vdc_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVmPlacementPolicy:getVmPlacementPolicy', __args__, opts=opts, typ=GetVmPlacementPolicyResult)
    return __ret__.apply(lambda __response__: GetVmPlacementPolicyResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        logical_vm_group_ids=pulumi.get(__response__, 'logical_vm_group_ids'),
        name=pulumi.get(__response__, 'name'),
        provider_vdc_id=pulumi.get(__response__, 'provider_vdc_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id'),
        vm_group_ids=pulumi.get(__response__, 'vm_group_ids')))
