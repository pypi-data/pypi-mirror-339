# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtEdgegatewayDnsResult',
    'AwaitableGetNsxtEdgegatewayDnsResult',
    'get_nsxt_edgegateway_dns',
    'get_nsxt_edgegateway_dns_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayDnsResult:
    """
    A collection of values returned by getNsxtEdgegatewayDns.
    """
    def __init__(__self__, conditional_forwarder_zones=None, default_forwarder_zones=None, edge_gateway_id=None, enabled=None, id=None, listener_ip=None, org=None, snat_rule_enabled=None, snat_rule_ip_address=None):
        if conditional_forwarder_zones and not isinstance(conditional_forwarder_zones, list):
            raise TypeError("Expected argument 'conditional_forwarder_zones' to be a list")
        pulumi.set(__self__, "conditional_forwarder_zones", conditional_forwarder_zones)
        if default_forwarder_zones and not isinstance(default_forwarder_zones, list):
            raise TypeError("Expected argument 'default_forwarder_zones' to be a list")
        pulumi.set(__self__, "default_forwarder_zones", default_forwarder_zones)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_ip and not isinstance(listener_ip, str):
            raise TypeError("Expected argument 'listener_ip' to be a str")
        pulumi.set(__self__, "listener_ip", listener_ip)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if snat_rule_enabled and not isinstance(snat_rule_enabled, bool):
            raise TypeError("Expected argument 'snat_rule_enabled' to be a bool")
        pulumi.set(__self__, "snat_rule_enabled", snat_rule_enabled)
        if snat_rule_ip_address and not isinstance(snat_rule_ip_address, str):
            raise TypeError("Expected argument 'snat_rule_ip_address' to be a str")
        pulumi.set(__self__, "snat_rule_ip_address", snat_rule_ip_address)

    @property
    @pulumi.getter(name="conditionalForwarderZones")
    def conditional_forwarder_zones(self) -> Sequence['outputs.GetNsxtEdgegatewayDnsConditionalForwarderZoneResult']:
        return pulumi.get(self, "conditional_forwarder_zones")

    @property
    @pulumi.getter(name="defaultForwarderZones")
    def default_forwarder_zones(self) -> Sequence['outputs.GetNsxtEdgegatewayDnsDefaultForwarderZoneResult']:
        return pulumi.get(self, "default_forwarder_zones")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> str:
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="snatRuleEnabled")
    def snat_rule_enabled(self) -> bool:
        return pulumi.get(self, "snat_rule_enabled")

    @property
    @pulumi.getter(name="snatRuleIpAddress")
    def snat_rule_ip_address(self) -> str:
        return pulumi.get(self, "snat_rule_ip_address")


class AwaitableGetNsxtEdgegatewayDnsResult(GetNsxtEdgegatewayDnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayDnsResult(
            conditional_forwarder_zones=self.conditional_forwarder_zones,
            default_forwarder_zones=self.default_forwarder_zones,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            listener_ip=self.listener_ip,
            org=self.org,
            snat_rule_enabled=self.snat_rule_enabled,
            snat_rule_ip_address=self.snat_rule_ip_address)


def get_nsxt_edgegateway_dns(edge_gateway_id: Optional[str] = None,
                             org: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayDnsResult:
    """
    Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.

    Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(name="existing-vdc")
    testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="server-testing")
    dns_service = vcd.get_nsxt_edgegateway_dns(org="datacloud",
        edge_gateway_id=testing.id)
    ```


    :param str edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
           Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str org: The name of organization to use, optional if defined at 
           provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns', __args__, opts=opts, typ=GetNsxtEdgegatewayDnsResult).value

    return AwaitableGetNsxtEdgegatewayDnsResult(
        conditional_forwarder_zones=pulumi.get(__ret__, 'conditional_forwarder_zones'),
        default_forwarder_zones=pulumi.get(__ret__, 'default_forwarder_zones'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        listener_ip=pulumi.get(__ret__, 'listener_ip'),
        org=pulumi.get(__ret__, 'org'),
        snat_rule_enabled=pulumi.get(__ret__, 'snat_rule_enabled'),
        snat_rule_ip_address=pulumi.get(__ret__, 'snat_rule_ip_address'))
def get_nsxt_edgegateway_dns_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                    org: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayDnsResult]:
    """
    Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.

    Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_org_vdc(name="existing-vdc")
    testing = vcd.get_nsxt_edgegateway(owner_id=existing.id,
        name="server-testing")
    dns_service = vcd.get_nsxt_edgegateway_dns(org="datacloud",
        edge_gateway_id=testing.id)
    ```


    :param str edge_gateway_id: The ID of the Edge Gateway (NSX-T only). 
           Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
    :param str org: The name of organization to use, optional if defined at 
           provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns', __args__, opts=opts, typ=GetNsxtEdgegatewayDnsResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayDnsResult(
        conditional_forwarder_zones=pulumi.get(__response__, 'conditional_forwarder_zones'),
        default_forwarder_zones=pulumi.get(__response__, 'default_forwarder_zones'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        listener_ip=pulumi.get(__response__, 'listener_ip'),
        org=pulumi.get(__response__, 'org'),
        snat_rule_enabled=pulumi.get(__response__, 'snat_rule_enabled'),
        snat_rule_ip_address=pulumi.get(__response__, 'snat_rule_ip_address')))
