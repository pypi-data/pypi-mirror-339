# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRdeResult',
    'AwaitableGetRdeResult',
    'get_rde',
    'get_rde_output',
]

@pulumi.output_type
class GetRdeResult:
    """
    A collection of values returned by getRde.
    """
    def __init__(__self__, entity=None, external_id=None, id=None, metadata_entries=None, name=None, org=None, org_id=None, owner_user_id=None, rde_type_id=None, state=None):
        if entity and not isinstance(entity, str):
            raise TypeError("Expected argument 'entity' to be a str")
        pulumi.set(__self__, "entity", entity)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner_user_id and not isinstance(owner_user_id, str):
            raise TypeError("Expected argument 'owner_user_id' to be a str")
        pulumi.set(__self__, "owner_user_id", owner_user_id)
        if rde_type_id and not isinstance(rde_type_id, str):
            raise TypeError("Expected argument 'rde_type_id' to be a str")
        pulumi.set(__self__, "rde_type_id", rde_type_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def entity(self) -> str:
        """
        The entity JSON.
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetRdeMetadataEntryResult']:
        """
        A set of metadata entries that belong to the RDE.
        Read the [resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde#metadata) documentation for the details of the sub-attributes.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ownerUserId")
    def owner_user_id(self) -> str:
        """
        The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        """
        return pulumi.get(self, "owner_user_id")

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> str:
        return pulumi.get(self, "rde_type_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        It can be `RESOLVED`, `RESOLUTION_ERROR` or `PRE_CREATED`.
        """
        return pulumi.get(self, "state")


class AwaitableGetRdeResult(GetRdeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRdeResult(
            entity=self.entity,
            external_id=self.external_id,
            id=self.id,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            org_id=self.org_id,
            owner_user_id=self.owner_user_id,
            rde_type_id=self.rde_type_id,
            state=self.state)


def get_rde(name: Optional[str] = None,
            org: Optional[str] = None,
            rde_type_id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRdeResult:
    """
    Provides the capability of reading an existing Runtime Defined Entity in VMware Cloud Director.

    > VCD allows to have multiple RDEs of the same [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) with
    the same name, meaning that the data source will not be able to fetch a RDE in this situation, as this data source
    can only retrieve **unique RDEs**.

    Supported in provider *v3.9+*


    :param str name: The name of the Runtime Defined Entity.
    :param str org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org) that owns the RDE, optional if defined at provider level.
    :param str rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) of the RDE to fetch.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['rdeTypeId'] = rde_type_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getRde:getRde', __args__, opts=opts, typ=GetRdeResult).value

    return AwaitableGetRdeResult(
        entity=pulumi.get(__ret__, 'entity'),
        external_id=pulumi.get(__ret__, 'external_id'),
        id=pulumi.get(__ret__, 'id'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        org_id=pulumi.get(__ret__, 'org_id'),
        owner_user_id=pulumi.get(__ret__, 'owner_user_id'),
        rde_type_id=pulumi.get(__ret__, 'rde_type_id'),
        state=pulumi.get(__ret__, 'state'))
def get_rde_output(name: Optional[pulumi.Input[str]] = None,
                   org: Optional[pulumi.Input[Optional[str]]] = None,
                   rde_type_id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRdeResult]:
    """
    Provides the capability of reading an existing Runtime Defined Entity in VMware Cloud Director.

    > VCD allows to have multiple RDEs of the same [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) with
    the same name, meaning that the data source will not be able to fetch a RDE in this situation, as this data source
    can only retrieve **unique RDEs**.

    Supported in provider *v3.9+*


    :param str name: The name of the Runtime Defined Entity.
    :param str org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org) that owns the RDE, optional if defined at provider level.
    :param str rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) of the RDE to fetch.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['rdeTypeId'] = rde_type_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getRde:getRde', __args__, opts=opts, typ=GetRdeResult)
    return __ret__.apply(lambda __response__: GetRdeResult(
        entity=pulumi.get(__response__, 'entity'),
        external_id=pulumi.get(__response__, 'external_id'),
        id=pulumi.get(__response__, 'id'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        org_id=pulumi.get(__response__, 'org_id'),
        owner_user_id=pulumi.get(__response__, 'owner_user_id'),
        rde_type_id=pulumi.get(__response__, 'rde_type_id'),
        state=pulumi.get(__response__, 'state')))
