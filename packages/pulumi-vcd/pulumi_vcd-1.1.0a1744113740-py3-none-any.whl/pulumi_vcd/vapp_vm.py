# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VappVmArgs', 'VappVm']

@pulumi.input_type
class VappVmArgs:
    def __init__(__self__, *,
                 vapp_name: pulumi.Input[str],
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input['VappVmBootOptionsArgs']] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input['VappVmCustomizationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VappVm resource.
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it. Default is `true`
        :param pulumi.Input[str] boot_image: Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[str] boot_image_id: Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
               Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input['VappVmBootOptionsArgs'] boot_options: A block to define boot options of the VM. See Boot Options
        :param pulumi.Input[str] catalog_name: Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine.
        :param pulumi.Input[bool] consolidate_disks_on_create: Performs disk consolidation during creation.
               The main use case is when one wants to grow template disk size using `override_template_disk` in
               fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
               Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
               storage performance.
        :param pulumi.Input[str] copy_from_vm_id: The ID of *an existing VM* to make a copy of it (it
               cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
               *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
               resource) and using different source/destination VDCs.
        :param pulumi.Input[int] cpu_cores: The number of cores per socket.
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        :param pulumi.Input[int] cpu_limit: The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure.
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        :param pulumi.Input['VappVmCustomizationArgs'] customization: A block to define for guest customization options. See Customization
        :param pulumi.Input[str] description: The VM description. Note: for VM from Template `description` is read only. Currently, this field has
               the description of the OVA used to create the VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]] disks: Independent disk attachment configuration. See Disk below for details.
        :param pulumi.Input[bool] expose_hardware_virtualization: Boolean for exposing full CPU virtualization to the
               guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
               translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        :param pulumi.Input[str] firmware: Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on. Default is `false`.
        :param pulumi.Input[int] memory_limit: The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (only valid
               for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
               is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
               * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
               does not require for the VM to use Edge Gateways DHCP service.
               * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
               relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
               until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
               Tools are not present on the VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]] networks: A block to define network interface. Multiple can be used. See Network and 
               example for usage details.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]] override_template_disks: Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        :param pulumi.Input[str] placement_policy_id: VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on. Default is `true`
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Set of security tags to be managed by the `VappVm` resource.
               To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
               This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]] set_extra_configs: Set of extra configuration key/values to be added or modified. See Extra Configuration
               
               > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
               should be used. Using both would cause a behavioral conflict.
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
               In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: Use `vapp_template_id` instead. The name of the vApp Template to use
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        """
        pulumi.set(__self__, "vapp_name", vapp_name)
        if accept_all_eulas is not None:
            pulumi.set(__self__, "accept_all_eulas", accept_all_eulas)
        if boot_image is not None:
            warnings.warn("""Use `boot_image_id` instead""", DeprecationWarning)
            pulumi.log.warn("""boot_image is deprecated: Use `boot_image_id` instead""")
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if boot_image_id is not None:
            pulumi.set(__self__, "boot_image_id", boot_image_id)
        if boot_options is not None:
            pulumi.set(__self__, "boot_options", boot_options)
        if catalog_name is not None:
            warnings.warn("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""", DeprecationWarning)
            pulumi.log.warn("""catalog_name is deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if consolidate_disks_on_create is not None:
            pulumi.set(__self__, "consolidate_disks_on_create", consolidate_disks_on_create)
        if copy_from_vm_id is not None:
            pulumi.set(__self__, "copy_from_vm_id", copy_from_vm_id)
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if cpu_hot_add_enabled is not None:
            pulumi.set(__self__, "cpu_hot_add_enabled", cpu_hot_add_enabled)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_priority is not None:
            pulumi.set(__self__, "cpu_priority", cpu_priority)
        if cpu_reservation is not None:
            pulumi.set(__self__, "cpu_reservation", cpu_reservation)
        if cpu_shares is not None:
            pulumi.set(__self__, "cpu_shares", cpu_shares)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if customization is not None:
            pulumi.set(__self__, "customization", customization)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if expose_hardware_virtualization is not None:
            pulumi.set(__self__, "expose_hardware_virtualization", expose_hardware_virtualization)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_hot_add_enabled is not None:
            pulumi.set(__self__, "memory_hot_add_enabled", memory_hot_add_enabled)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_priority is not None:
            pulumi.set(__self__, "memory_priority", memory_priority)
        if memory_reservation is not None:
            pulumi.set(__self__, "memory_reservation", memory_reservation)
        if memory_shares is not None:
            pulumi.set(__self__, "memory_shares", memory_shares)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_dhcp_wait_seconds is not None:
            pulumi.set(__self__, "network_dhcp_wait_seconds", network_dhcp_wait_seconds)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if override_template_disks is not None:
            pulumi.set(__self__, "override_template_disks", override_template_disks)
        if placement_policy_id is not None:
            pulumi.set(__self__, "placement_policy_id", placement_policy_id)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if prevent_update_power_off is not None:
            pulumi.set(__self__, "prevent_update_power_off", prevent_update_power_off)
        if security_tags is not None:
            pulumi.set(__self__, "security_tags", security_tags)
        if set_extra_configs is not None:
            pulumi.set(__self__, "set_extra_configs", set_extra_configs)
        if sizing_policy_id is not None:
            pulumi.set(__self__, "sizing_policy_id", sizing_policy_id)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if template_name is not None:
            warnings.warn("""Use `vapp_template_id` instead""", DeprecationWarning)
            pulumi.log.warn("""template_name is deprecated: Use `vapp_template_id` instead""")
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if vapp_template_id is not None:
            pulumi.set(__self__, "vapp_template_id", vapp_template_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_name_in_template is not None:
            pulumi.set(__self__, "vm_name_in_template", vm_name_in_template)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Input[str]:
        """
        The vApp this VM belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically accept EULA if OVA has it. Default is `true`
        """
        return pulumi.get(self, "accept_all_eulas")

    @accept_all_eulas.setter
    def accept_all_eulas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_all_eulas", value)

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        """
        Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
        Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image_id")

    @boot_image_id.setter
    def boot_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image_id", value)

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> Optional[pulumi.Input['VappVmBootOptionsArgs']]:
        """
        A block to define boot options of the VM. See Boot Options
        """
        return pulumi.get(self, "boot_options")

    @boot_options.setter
    def boot_options(self, value: Optional[pulumi.Input['VappVmBootOptionsArgs']]):
        pulumi.set(self, "boot_options", value)

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Computer name to assign to this virtual machine.
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Performs disk consolidation during creation.
        The main use case is when one wants to grow template disk size using `override_template_disk` in
        fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
        Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
        storage performance.
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @consolidate_disks_on_create.setter
    def consolidate_disks_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consolidate_disks_on_create", value)

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of *an existing VM* to make a copy of it (it
        cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
        *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
        resource) and using different source/destination VDCs.
        """
        return pulumi.get(self, "copy_from_vm_id")

    @copy_from_vm_id.setter
    def copy_from_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from_vm_id", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of cores per socket.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @cpu_hot_add_enabled.setter
    def cpu_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_add_enabled", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @cpu_priority.setter
    def cpu_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_priority", value)

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure.
        """
        return pulumi.get(self, "cpu_reservation")

    @cpu_reservation.setter
    def cpu_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_reservation", value)

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        """
        return pulumi.get(self, "cpu_shares")

    @cpu_shares.setter
    def cpu_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_shares", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def customization(self) -> Optional[pulumi.Input['VappVmCustomizationArgs']]:
        """
        A block to define for guest customization options. See Customization
        """
        return pulumi.get(self, "customization")

    @customization.setter
    def customization(self, value: Optional[pulumi.Input['VappVmCustomizationArgs']]):
        pulumi.set(self, "customization", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The VM description. Note: for VM from Template `description` is read only. Currently, this field has
        the description of the OVA used to create the VM.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]]:
        """
        Independent disk attachment configuration. See Disk below for details.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean for exposing full CPU virtualization to the
        guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
        translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @expose_hardware_virtualization.setter
    def expose_hardware_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose_hardware_virtualization", value)

    @property
    @pulumi.getter
    def firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        """
        return pulumi.get(self, "firmware")

    @firmware.setter
    def firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        """
        return pulumi.get(self, "hardware_version")

    @hardware_version.setter
    def hardware_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_version", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on. Default is `false`.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @memory_hot_add_enabled.setter
    def memory_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory_hot_add_enabled", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @memory_priority.setter
    def memory_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_priority", value)

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @memory_reservation.setter
    def memory_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_reservation", value)

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        """
        return pulumi.get(self, "memory_shares")

    @memory_shares.setter
    def memory_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_shares", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (only valid
        for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
        is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
        * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
        does not require for the VM to use Edge Gateways DHCP service.
        * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
        relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
        until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
        Tools are not present on the VM.
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @network_dhcp_wait_seconds.setter
    def network_dhcp_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_dhcp_wait_seconds", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]]:
        """
        A block to define network interface. Multiple can be used. See Network and 
        example for usage details.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]]:
        """
        Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        """
        return pulumi.get(self, "override_template_disks")

    @override_template_disks.setter
    def override_template_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]]):
        pulumi.set(self, "override_template_disks", value)

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "placement_policy_id")

    @placement_policy_id.setter
    def placement_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy_id", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this VM should be powered on. Default is `true`
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @prevent_update_power_off.setter
    def prevent_update_power_off(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_update_power_off", value)

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of security tags to be managed by the `VappVm` resource.
        To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
        This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        """
        return pulumi.get(self, "security_tags")

    @security_tags.setter
    def security_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_tags", value)

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]]:
        """
        Set of extra configuration key/values to be added or modified. See Extra Configuration

        > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
        should be used. Using both would cause a behavioral conflict.
        """
        return pulumi.get(self, "set_extra_configs")

    @set_extra_configs.setter
    def set_extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]]):
        pulumi.set(self, "set_extra_configs", value)

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
        In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "sizing_policy_id")

    @sizing_policy_id.setter
    def sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing_policy_id", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Use `vapp_template_id` instead. The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        """
        return pulumi.get(self, "vapp_template_id")

    @vapp_template_id.setter
    def vapp_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_template_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        """
        return pulumi.get(self, "vm_name_in_template")

    @vm_name_in_template.setter
    def vm_name_in_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_in_template", value)


@pulumi.input_type
class _VappVmState:
    def __init__(__self__, *,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input['VappVmBootOptionsArgs']] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input['VappVmCustomizationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmExtraConfigArgs']]]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 imported: Optional[pulumi.Input[bool]] = None,
                 inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 internal_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmInternalDiskArgs']]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_text: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_id: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VappVm resources.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it. Default is `true`
        :param pulumi.Input[str] boot_image: Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[str] boot_image_id: Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
               Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input['VappVmBootOptionsArgs'] boot_options: A block to define boot options of the VM. See Boot Options
        :param pulumi.Input[str] catalog_name: Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine.
        :param pulumi.Input[bool] consolidate_disks_on_create: Performs disk consolidation during creation.
               The main use case is when one wants to grow template disk size using `override_template_disk` in
               fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
               Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
               storage performance.
        :param pulumi.Input[str] copy_from_vm_id: The ID of *an existing VM* to make a copy of it (it
               cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
               *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
               resource) and using different source/destination VDCs.
        :param pulumi.Input[int] cpu_cores: The number of cores per socket.
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        :param pulumi.Input[int] cpu_limit: The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure.
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        :param pulumi.Input['VappVmCustomizationArgs'] customization: A block to define for guest customization options. See Customization
        :param pulumi.Input[str] description: The VM description. Note: for VM from Template `description` is read only. Currently, this field has
               the description of the OVA used to create the VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]] disks: Independent disk attachment configuration. See Disk below for details.
        :param pulumi.Input[bool] expose_hardware_virtualization: Boolean for exposing full CPU virtualization to the
               guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
               translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmExtraConfigArgs']]] extra_configs: (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
        :param pulumi.Input[str] firmware: Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[bool] imported: (*v3.13.+*) A true/false value telling whether the resource was imported.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
               details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
        :param pulumi.Input[Sequence[pulumi.Input['VappVmInternalDiskArgs']]] internal_disks: (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on. Default is `false`.
        :param pulumi.Input[int] memory_limit: The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (only valid
               for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
               is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
               * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
               does not require for the VM to use Edge Gateways DHCP service.
               * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
               relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
               until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
               Tools are not present on the VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]] networks: A block to define network interface. Multiple can be used. See Network and 
               example for usage details.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]] override_template_disks: Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        :param pulumi.Input[str] placement_policy_id: VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on. Default is `true`
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Set of security tags to be managed by the `VappVm` resource.
               To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
               This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        :param pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]] set_extra_configs: Set of extra configuration key/values to be added or modified. See Extra Configuration
               
               > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
               should be used. Using both would cause a behavioral conflict.
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
               In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[int] status: (*v3.8+*) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (*v3.8+*) The vApp status as text.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: Use `vapp_template_id` instead. The name of the vApp Template to use
        :param pulumi.Input[str] vapp_id: ID of parent vApp
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to.
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        :param pulumi.Input[str] vm_type: (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
        """
        if accept_all_eulas is not None:
            pulumi.set(__self__, "accept_all_eulas", accept_all_eulas)
        if boot_image is not None:
            warnings.warn("""Use `boot_image_id` instead""", DeprecationWarning)
            pulumi.log.warn("""boot_image is deprecated: Use `boot_image_id` instead""")
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if boot_image_id is not None:
            pulumi.set(__self__, "boot_image_id", boot_image_id)
        if boot_options is not None:
            pulumi.set(__self__, "boot_options", boot_options)
        if catalog_name is not None:
            warnings.warn("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""", DeprecationWarning)
            pulumi.log.warn("""catalog_name is deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if consolidate_disks_on_create is not None:
            pulumi.set(__self__, "consolidate_disks_on_create", consolidate_disks_on_create)
        if copy_from_vm_id is not None:
            pulumi.set(__self__, "copy_from_vm_id", copy_from_vm_id)
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if cpu_hot_add_enabled is not None:
            pulumi.set(__self__, "cpu_hot_add_enabled", cpu_hot_add_enabled)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_priority is not None:
            pulumi.set(__self__, "cpu_priority", cpu_priority)
        if cpu_reservation is not None:
            pulumi.set(__self__, "cpu_reservation", cpu_reservation)
        if cpu_shares is not None:
            pulumi.set(__self__, "cpu_shares", cpu_shares)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if customization is not None:
            pulumi.set(__self__, "customization", customization)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if expose_hardware_virtualization is not None:
            pulumi.set(__self__, "expose_hardware_virtualization", expose_hardware_virtualization)
        if extra_configs is not None:
            pulumi.set(__self__, "extra_configs", extra_configs)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if guest_properties is not None:
            pulumi.set(__self__, "guest_properties", guest_properties)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if imported is not None:
            pulumi.set(__self__, "imported", imported)
        if inherited_metadata is not None:
            pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if internal_disks is not None:
            pulumi.set(__self__, "internal_disks", internal_disks)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_hot_add_enabled is not None:
            pulumi.set(__self__, "memory_hot_add_enabled", memory_hot_add_enabled)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_priority is not None:
            pulumi.set(__self__, "memory_priority", memory_priority)
        if memory_reservation is not None:
            pulumi.set(__self__, "memory_reservation", memory_reservation)
        if memory_shares is not None:
            pulumi.set(__self__, "memory_shares", memory_shares)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_dhcp_wait_seconds is not None:
            pulumi.set(__self__, "network_dhcp_wait_seconds", network_dhcp_wait_seconds)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if override_template_disks is not None:
            pulumi.set(__self__, "override_template_disks", override_template_disks)
        if placement_policy_id is not None:
            pulumi.set(__self__, "placement_policy_id", placement_policy_id)
        if power_on is not None:
            pulumi.set(__self__, "power_on", power_on)
        if prevent_update_power_off is not None:
            pulumi.set(__self__, "prevent_update_power_off", prevent_update_power_off)
        if security_tags is not None:
            pulumi.set(__self__, "security_tags", security_tags)
        if set_extra_configs is not None:
            pulumi.set(__self__, "set_extra_configs", set_extra_configs)
        if sizing_policy_id is not None:
            pulumi.set(__self__, "sizing_policy_id", sizing_policy_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if template_name is not None:
            warnings.warn("""Use `vapp_template_id` instead""", DeprecationWarning)
            pulumi.log.warn("""template_name is deprecated: Use `vapp_template_id` instead""")
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vapp_template_id is not None:
            pulumi.set(__self__, "vapp_template_id", vapp_template_id)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_name_in_template is not None:
            pulumi.set(__self__, "vm_name_in_template", vm_name_in_template)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically accept EULA if OVA has it. Default is `true`
        """
        return pulumi.get(self, "accept_all_eulas")

    @accept_all_eulas.setter
    def accept_all_eulas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_all_eulas", value)

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        """
        Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
        Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image_id")

    @boot_image_id.setter
    def boot_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image_id", value)

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> Optional[pulumi.Input['VappVmBootOptionsArgs']]:
        """
        A block to define boot options of the VM. See Boot Options
        """
        return pulumi.get(self, "boot_options")

    @boot_options.setter
    def boot_options(self, value: Optional[pulumi.Input['VappVmBootOptionsArgs']]):
        pulumi.set(self, "boot_options", value)

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Computer name to assign to this virtual machine.
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Performs disk consolidation during creation.
        The main use case is when one wants to grow template disk size using `override_template_disk` in
        fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
        Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
        storage performance.
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @consolidate_disks_on_create.setter
    def consolidate_disks_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consolidate_disks_on_create", value)

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of *an existing VM* to make a copy of it (it
        cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
        *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
        resource) and using different source/destination VDCs.
        """
        return pulumi.get(self, "copy_from_vm_id")

    @copy_from_vm_id.setter
    def copy_from_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from_vm_id", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of cores per socket.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @cpu_hot_add_enabled.setter
    def cpu_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_add_enabled", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @cpu_priority.setter
    def cpu_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_priority", value)

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure.
        """
        return pulumi.get(self, "cpu_reservation")

    @cpu_reservation.setter
    def cpu_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_reservation", value)

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        """
        return pulumi.get(self, "cpu_shares")

    @cpu_shares.setter
    def cpu_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_shares", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def customization(self) -> Optional[pulumi.Input['VappVmCustomizationArgs']]:
        """
        A block to define for guest customization options. See Customization
        """
        return pulumi.get(self, "customization")

    @customization.setter
    def customization(self, value: Optional[pulumi.Input['VappVmCustomizationArgs']]):
        pulumi.set(self, "customization", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The VM description. Note: for VM from Template `description` is read only. Currently, this field has
        the description of the OVA used to create the VM.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]]:
        """
        Independent disk attachment configuration. See Disk below for details.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean for exposing full CPU virtualization to the
        guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
        translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @expose_hardware_virtualization.setter
    def expose_hardware_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose_hardware_virtualization", value)

    @property
    @pulumi.getter(name="extraConfigs")
    def extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmExtraConfigArgs']]]]:
        """
        (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
        """
        return pulumi.get(self, "extra_configs")

    @extra_configs.setter
    def extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmExtraConfigArgs']]]]):
        pulumi.set(self, "extra_configs", value)

    @property
    @pulumi.getter
    def firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        """
        return pulumi.get(self, "firmware")

    @firmware.setter
    def firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware", value)

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key value map of guest properties
        """
        return pulumi.get(self, "guest_properties")

    @guest_properties.setter
    def guest_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "guest_properties", value)

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        """
        return pulumi.get(self, "hardware_version")

    @hardware_version.setter
    def hardware_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_version", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        (*v3.13.+*) A true/false value telling whether the resource was imported.
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
        """
        return pulumi.get(self, "inherited_metadata")

    @inherited_metadata.setter
    def inherited_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "inherited_metadata", value)

    @property
    @pulumi.getter(name="internalDisks")
    def internal_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmInternalDiskArgs']]]]:
        """
        (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
        """
        return pulumi.get(self, "internal_disks")

    @internal_disks.setter
    def internal_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmInternalDiskArgs']]]]):
        pulumi.set(self, "internal_disks", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on. Default is `false`.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @memory_hot_add_enabled.setter
    def memory_hot_add_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory_hot_add_enabled", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @memory_priority.setter
    def memory_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_priority", value)

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @memory_reservation.setter
    def memory_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_reservation", value)

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> Optional[pulumi.Input[int]]:
        """
        Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        """
        return pulumi.get(self, "memory_shares")

    @memory_shares.setter
    def memory_shares(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_shares", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (only valid
        for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
        is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
        * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
        does not require for the VM to use Edge Gateways DHCP service.
        * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
        relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
        until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
        Tools are not present on the VM.
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @network_dhcp_wait_seconds.setter
    def network_dhcp_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_dhcp_wait_seconds", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]]:
        """
        A block to define network interface. Multiple can be used. See Network and 
        example for usage details.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]]:
        """
        Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        """
        return pulumi.get(self, "override_template_disks")

    @override_template_disks.setter
    def override_template_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmOverrideTemplateDiskArgs']]]]):
        pulumi.set(self, "override_template_disks", value)

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "placement_policy_id")

    @placement_policy_id.setter
    def placement_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy_id", value)

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value stating if this VM should be powered on. Default is `true`
        """
        return pulumi.get(self, "power_on")

    @power_on.setter
    def power_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "power_on", value)

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @prevent_update_power_off.setter
    def prevent_update_power_off(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_update_power_off", value)

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of security tags to be managed by the `VappVm` resource.
        To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
        This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        """
        return pulumi.get(self, "security_tags")

    @security_tags.setter
    def security_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_tags", value)

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]]:
        """
        Set of extra configuration key/values to be added or modified. See Extra Configuration

        > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
        should be used. Using both would cause a behavioral conflict.
        """
        return pulumi.get(self, "set_extra_configs")

    @set_extra_configs.setter
    def set_extra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VappVmSetExtraConfigArgs']]]]):
        pulumi.set(self, "set_extra_configs", value)

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
        In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "sizing_policy_id")

    @sizing_policy_id.setter
    def sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing_policy_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        (*v3.8+*) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        (*v3.8+*) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Use `vapp_template_id` instead. The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of parent vApp
        """
        return pulumi.get(self, "vapp_id")

    @vapp_id.setter
    def vapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_id", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        """
        The vApp this VM belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        """
        return pulumi.get(self, "vapp_template_id")

    @vapp_template_id.setter
    def vapp_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_template_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        """
        return pulumi.get(self, "vm_name_in_template")

    @vm_name_in_template.setter
    def vm_name_in_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_in_template", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)


class VappVm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input[Union['VappVmBootOptionsArgs', 'VappVmBootOptionsArgsDict']]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input[Union['VappVmCustomizationArgs', 'VappVmCustomizationArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmDiskArgs', 'VappVmDiskArgsDict']]]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmMetadataEntryArgs', 'VappVmMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmNetworkArgs', 'VappVmNetworkArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmOverrideTemplateDiskArgs', 'VappVmOverrideTemplateDiskArgsDict']]]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmSetExtraConfigArgs', 'VappVmSetExtraConfigArgsDict']]]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VappVm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it. Default is `true`
        :param pulumi.Input[str] boot_image: Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[str] boot_image_id: Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
               Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[Union['VappVmBootOptionsArgs', 'VappVmBootOptionsArgsDict']] boot_options: A block to define boot options of the VM. See Boot Options
        :param pulumi.Input[str] catalog_name: Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine.
        :param pulumi.Input[bool] consolidate_disks_on_create: Performs disk consolidation during creation.
               The main use case is when one wants to grow template disk size using `override_template_disk` in
               fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
               Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
               storage performance.
        :param pulumi.Input[str] copy_from_vm_id: The ID of *an existing VM* to make a copy of it (it
               cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
               *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
               resource) and using different source/destination VDCs.
        :param pulumi.Input[int] cpu_cores: The number of cores per socket.
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        :param pulumi.Input[int] cpu_limit: The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure.
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        :param pulumi.Input[Union['VappVmCustomizationArgs', 'VappVmCustomizationArgsDict']] customization: A block to define for guest customization options. See Customization
        :param pulumi.Input[str] description: The VM description. Note: for VM from Template `description` is read only. Currently, this field has
               the description of the OVA used to create the VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmDiskArgs', 'VappVmDiskArgsDict']]]] disks: Independent disk attachment configuration. See Disk below for details.
        :param pulumi.Input[bool] expose_hardware_virtualization: Boolean for exposing full CPU virtualization to the
               guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
               translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        :param pulumi.Input[str] firmware: Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on. Default is `false`.
        :param pulumi.Input[int] memory_limit: The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmMetadataEntryArgs', 'VappVmMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (only valid
               for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
               is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
               * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
               does not require for the VM to use Edge Gateways DHCP service.
               * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
               relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
               until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
               Tools are not present on the VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmNetworkArgs', 'VappVmNetworkArgsDict']]]] networks: A block to define network interface. Multiple can be used. See Network and 
               example for usage details.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmOverrideTemplateDiskArgs', 'VappVmOverrideTemplateDiskArgsDict']]]] override_template_disks: Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        :param pulumi.Input[str] placement_policy_id: VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on. Default is `true`
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Set of security tags to be managed by the `VappVm` resource.
               To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
               This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmSetExtraConfigArgs', 'VappVmSetExtraConfigArgsDict']]]] set_extra_configs: Set of extra configuration key/values to be added or modified. See Extra Configuration
               
               > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
               should be used. Using both would cause a behavioral conflict.
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
               In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: Use `vapp_template_id` instead. The name of the vApp Template to use
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to.
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VappVmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VappVm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VappVmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VappVmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_all_eulas: Optional[pulumi.Input[bool]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_image_id: Optional[pulumi.Input[str]] = None,
                 boot_options: Optional[pulumi.Input[Union['VappVmBootOptionsArgs', 'VappVmBootOptionsArgsDict']]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
                 copy_from_vm_id: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 cpu_priority: Optional[pulumi.Input[str]] = None,
                 cpu_reservation: Optional[pulumi.Input[int]] = None,
                 cpu_shares: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 customization: Optional[pulumi.Input[Union['VappVmCustomizationArgs', 'VappVmCustomizationArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmDiskArgs', 'VappVmDiskArgsDict']]]]] = None,
                 expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
                 firmware: Optional[pulumi.Input[str]] = None,
                 guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hardware_version: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 memory_priority: Optional[pulumi.Input[str]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 memory_shares: Optional[pulumi.Input[int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmMetadataEntryArgs', 'VappVmMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmNetworkArgs', 'VappVmNetworkArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmOverrideTemplateDiskArgs', 'VappVmOverrideTemplateDiskArgsDict']]]]] = None,
                 placement_policy_id: Optional[pulumi.Input[str]] = None,
                 power_on: Optional[pulumi.Input[bool]] = None,
                 prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
                 security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmSetExtraConfigArgs', 'VappVmSetExtraConfigArgsDict']]]]] = None,
                 sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vapp_template_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_name_in_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VappVmArgs.__new__(VappVmArgs)

            __props__.__dict__["accept_all_eulas"] = accept_all_eulas
            __props__.__dict__["boot_image"] = boot_image
            __props__.__dict__["boot_image_id"] = boot_image_id
            __props__.__dict__["boot_options"] = boot_options
            __props__.__dict__["catalog_name"] = catalog_name
            __props__.__dict__["computer_name"] = computer_name
            __props__.__dict__["consolidate_disks_on_create"] = consolidate_disks_on_create
            __props__.__dict__["copy_from_vm_id"] = copy_from_vm_id
            __props__.__dict__["cpu_cores"] = cpu_cores
            __props__.__dict__["cpu_hot_add_enabled"] = cpu_hot_add_enabled
            __props__.__dict__["cpu_limit"] = cpu_limit
            __props__.__dict__["cpu_priority"] = cpu_priority
            __props__.__dict__["cpu_reservation"] = cpu_reservation
            __props__.__dict__["cpu_shares"] = cpu_shares
            __props__.__dict__["cpus"] = cpus
            __props__.__dict__["customization"] = customization
            __props__.__dict__["description"] = description
            __props__.__dict__["disks"] = disks
            __props__.__dict__["expose_hardware_virtualization"] = expose_hardware_virtualization
            __props__.__dict__["firmware"] = firmware
            __props__.__dict__["guest_properties"] = guest_properties
            __props__.__dict__["hardware_version"] = hardware_version
            __props__.__dict__["href"] = href
            __props__.__dict__["memory"] = memory
            __props__.__dict__["memory_hot_add_enabled"] = memory_hot_add_enabled
            __props__.__dict__["memory_limit"] = memory_limit
            __props__.__dict__["memory_priority"] = memory_priority
            __props__.__dict__["memory_reservation"] = memory_reservation
            __props__.__dict__["memory_shares"] = memory_shares
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["network_dhcp_wait_seconds"] = network_dhcp_wait_seconds
            __props__.__dict__["networks"] = networks
            __props__.__dict__["org"] = org
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["override_template_disks"] = override_template_disks
            __props__.__dict__["placement_policy_id"] = placement_policy_id
            __props__.__dict__["power_on"] = power_on
            __props__.__dict__["prevent_update_power_off"] = prevent_update_power_off
            __props__.__dict__["security_tags"] = security_tags
            __props__.__dict__["set_extra_configs"] = set_extra_configs
            __props__.__dict__["sizing_policy_id"] = sizing_policy_id
            __props__.__dict__["storage_profile"] = storage_profile
            __props__.__dict__["template_name"] = template_name
            if vapp_name is None and not opts.urn:
                raise TypeError("Missing required property 'vapp_name'")
            __props__.__dict__["vapp_name"] = vapp_name
            __props__.__dict__["vapp_template_id"] = vapp_template_id
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["vm_name_in_template"] = vm_name_in_template
            __props__.__dict__["extra_configs"] = None
            __props__.__dict__["imported"] = None
            __props__.__dict__["inherited_metadata"] = None
            __props__.__dict__["internal_disks"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_text"] = None
            __props__.__dict__["vapp_id"] = None
            __props__.__dict__["vm_type"] = None
        super(VappVm, __self__).__init__(
            'vcd:index/vappVm:VappVm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_all_eulas: Optional[pulumi.Input[bool]] = None,
            boot_image: Optional[pulumi.Input[str]] = None,
            boot_image_id: Optional[pulumi.Input[str]] = None,
            boot_options: Optional[pulumi.Input[Union['VappVmBootOptionsArgs', 'VappVmBootOptionsArgsDict']]] = None,
            catalog_name: Optional[pulumi.Input[str]] = None,
            computer_name: Optional[pulumi.Input[str]] = None,
            consolidate_disks_on_create: Optional[pulumi.Input[bool]] = None,
            copy_from_vm_id: Optional[pulumi.Input[str]] = None,
            cpu_cores: Optional[pulumi.Input[int]] = None,
            cpu_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
            cpu_limit: Optional[pulumi.Input[int]] = None,
            cpu_priority: Optional[pulumi.Input[str]] = None,
            cpu_reservation: Optional[pulumi.Input[int]] = None,
            cpu_shares: Optional[pulumi.Input[int]] = None,
            cpus: Optional[pulumi.Input[int]] = None,
            customization: Optional[pulumi.Input[Union['VappVmCustomizationArgs', 'VappVmCustomizationArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmDiskArgs', 'VappVmDiskArgsDict']]]]] = None,
            expose_hardware_virtualization: Optional[pulumi.Input[bool]] = None,
            extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmExtraConfigArgs', 'VappVmExtraConfigArgsDict']]]]] = None,
            firmware: Optional[pulumi.Input[str]] = None,
            guest_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            hardware_version: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            imported: Optional[pulumi.Input[bool]] = None,
            inherited_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            internal_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmInternalDiskArgs', 'VappVmInternalDiskArgsDict']]]]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            memory_hot_add_enabled: Optional[pulumi.Input[bool]] = None,
            memory_limit: Optional[pulumi.Input[int]] = None,
            memory_priority: Optional[pulumi.Input[str]] = None,
            memory_reservation: Optional[pulumi.Input[int]] = None,
            memory_shares: Optional[pulumi.Input[int]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmMetadataEntryArgs', 'VappVmMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_dhcp_wait_seconds: Optional[pulumi.Input[int]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmNetworkArgs', 'VappVmNetworkArgsDict']]]]] = None,
            org: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            override_template_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmOverrideTemplateDiskArgs', 'VappVmOverrideTemplateDiskArgsDict']]]]] = None,
            placement_policy_id: Optional[pulumi.Input[str]] = None,
            power_on: Optional[pulumi.Input[bool]] = None,
            prevent_update_power_off: Optional[pulumi.Input[bool]] = None,
            security_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            set_extra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VappVmSetExtraConfigArgs', 'VappVmSetExtraConfigArgsDict']]]]] = None,
            sizing_policy_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_text: Optional[pulumi.Input[str]] = None,
            storage_profile: Optional[pulumi.Input[str]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            vapp_id: Optional[pulumi.Input[str]] = None,
            vapp_name: Optional[pulumi.Input[str]] = None,
            vapp_template_id: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_name_in_template: Optional[pulumi.Input[str]] = None,
            vm_type: Optional[pulumi.Input[str]] = None) -> 'VappVm':
        """
        Get an existing VappVm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_all_eulas: Automatically accept EULA if OVA has it. Default is `true`
        :param pulumi.Input[str] boot_image: Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[str] boot_image_id: Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
               Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        :param pulumi.Input[Union['VappVmBootOptionsArgs', 'VappVmBootOptionsArgsDict']] boot_options: A block to define boot options of the VM. See Boot Options
        :param pulumi.Input[str] catalog_name: Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        :param pulumi.Input[str] computer_name: Computer name to assign to this virtual machine.
        :param pulumi.Input[bool] consolidate_disks_on_create: Performs disk consolidation during creation.
               The main use case is when one wants to grow template disk size using `override_template_disk` in
               fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
               Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
               storage performance.
        :param pulumi.Input[str] copy_from_vm_id: The ID of *an existing VM* to make a copy of it (it
               cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
               *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
               resource) and using different source/destination VDCs.
        :param pulumi.Input[int] cpu_cores: The number of cores per socket.
        :param pulumi.Input[bool] cpu_hot_add_enabled: True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        :param pulumi.Input[int] cpu_limit: The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] cpu_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] cpu_reservation: The amount of MHz reservation on the underlying virtualization infrastructure.
        :param pulumi.Input[int] cpu_shares: Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        :param pulumi.Input[int] cpus: The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        :param pulumi.Input[Union['VappVmCustomizationArgs', 'VappVmCustomizationArgsDict']] customization: A block to define for guest customization options. See Customization
        :param pulumi.Input[str] description: The VM description. Note: for VM from Template `description` is read only. Currently, this field has
               the description of the OVA used to create the VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmDiskArgs', 'VappVmDiskArgsDict']]]] disks: Independent disk attachment configuration. See Disk below for details.
        :param pulumi.Input[bool] expose_hardware_virtualization: Boolean for exposing full CPU virtualization to the
               guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
               translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmExtraConfigArgs', 'VappVmExtraConfigArgsDict']]]] extra_configs: (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
        :param pulumi.Input[str] firmware: Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] guest_properties: Key value map of guest properties
        :param pulumi.Input[str] hardware_version: Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        :param pulumi.Input[str] href: VM Hyper Reference
        :param pulumi.Input[bool] imported: (*v3.13.+*) A true/false value telling whether the resource was imported.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inherited_metadata: (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
               details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmInternalDiskArgs', 'VappVmInternalDiskArgsDict']]]] internal_disks: (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
        :param pulumi.Input[int] memory: The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        :param pulumi.Input[bool] memory_hot_add_enabled: True if the virtual machine supports addition of memory while powered on. Default is `false`.
        :param pulumi.Input[int] memory_limit: The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        :param pulumi.Input[str] memory_priority: Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        :param pulumi.Input[int] memory_reservation: The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        :param pulumi.Input[int] memory_shares: Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmMetadataEntryArgs', 'VappVmMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A name for the VM, unique within the vApp
        :param pulumi.Input[int] network_dhcp_wait_seconds: Optional number of seconds to try and wait for DHCP IP (only valid
               for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
               is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
               * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
               does not require for the VM to use Edge Gateways DHCP service.
               * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
               relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
               until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
               Tools are not present on the VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmNetworkArgs', 'VappVmNetworkArgsDict']]]] networks: A block to define network interface. Multiple can be used. See Network and 
               example for usage details.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] os_type: Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmOverrideTemplateDiskArgs', 'VappVmOverrideTemplateDiskArgsDict']]]] override_template_disks: Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        :param pulumi.Input[str] placement_policy_id: VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[bool] power_on: A boolean value stating if this VM should be powered on. Default is `true`
        :param pulumi.Input[bool] prevent_update_power_off: True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_tags: Set of security tags to be managed by the `VappVm` resource.
               To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
               This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VappVmSetExtraConfigArgs', 'VappVmSetExtraConfigArgsDict']]]] set_extra_configs: Set of extra configuration key/values to be added or modified. See Extra Configuration
               
               > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
               should be used. Using both would cause a behavioral conflict.
        :param pulumi.Input[str] sizing_policy_id: VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
               using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
               In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
               if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        :param pulumi.Input[int] status: (*v3.8+*) The vApp status as a numeric code.
        :param pulumi.Input[str] status_text: (*v3.8+*) The vApp status as text.
        :param pulumi.Input[str] storage_profile: Storage profile to override the default one
        :param pulumi.Input[str] template_name: Use `vapp_template_id` instead. The name of the vApp Template to use
        :param pulumi.Input[str] vapp_id: ID of parent vApp
        :param pulumi.Input[str] vapp_name: The vApp this VM belongs to.
        :param pulumi.Input[str] vapp_template_id: The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[str] vm_name_in_template: The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        :param pulumi.Input[str] vm_type: (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VappVmState.__new__(_VappVmState)

        __props__.__dict__["accept_all_eulas"] = accept_all_eulas
        __props__.__dict__["boot_image"] = boot_image
        __props__.__dict__["boot_image_id"] = boot_image_id
        __props__.__dict__["boot_options"] = boot_options
        __props__.__dict__["catalog_name"] = catalog_name
        __props__.__dict__["computer_name"] = computer_name
        __props__.__dict__["consolidate_disks_on_create"] = consolidate_disks_on_create
        __props__.__dict__["copy_from_vm_id"] = copy_from_vm_id
        __props__.__dict__["cpu_cores"] = cpu_cores
        __props__.__dict__["cpu_hot_add_enabled"] = cpu_hot_add_enabled
        __props__.__dict__["cpu_limit"] = cpu_limit
        __props__.__dict__["cpu_priority"] = cpu_priority
        __props__.__dict__["cpu_reservation"] = cpu_reservation
        __props__.__dict__["cpu_shares"] = cpu_shares
        __props__.__dict__["cpus"] = cpus
        __props__.__dict__["customization"] = customization
        __props__.__dict__["description"] = description
        __props__.__dict__["disks"] = disks
        __props__.__dict__["expose_hardware_virtualization"] = expose_hardware_virtualization
        __props__.__dict__["extra_configs"] = extra_configs
        __props__.__dict__["firmware"] = firmware
        __props__.__dict__["guest_properties"] = guest_properties
        __props__.__dict__["hardware_version"] = hardware_version
        __props__.__dict__["href"] = href
        __props__.__dict__["imported"] = imported
        __props__.__dict__["inherited_metadata"] = inherited_metadata
        __props__.__dict__["internal_disks"] = internal_disks
        __props__.__dict__["memory"] = memory
        __props__.__dict__["memory_hot_add_enabled"] = memory_hot_add_enabled
        __props__.__dict__["memory_limit"] = memory_limit
        __props__.__dict__["memory_priority"] = memory_priority
        __props__.__dict__["memory_reservation"] = memory_reservation
        __props__.__dict__["memory_shares"] = memory_shares
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["network_dhcp_wait_seconds"] = network_dhcp_wait_seconds
        __props__.__dict__["networks"] = networks
        __props__.__dict__["org"] = org
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["override_template_disks"] = override_template_disks
        __props__.__dict__["placement_policy_id"] = placement_policy_id
        __props__.__dict__["power_on"] = power_on
        __props__.__dict__["prevent_update_power_off"] = prevent_update_power_off
        __props__.__dict__["security_tags"] = security_tags
        __props__.__dict__["set_extra_configs"] = set_extra_configs
        __props__.__dict__["sizing_policy_id"] = sizing_policy_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_text"] = status_text
        __props__.__dict__["storage_profile"] = storage_profile
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["vapp_id"] = vapp_id
        __props__.__dict__["vapp_name"] = vapp_name
        __props__.__dict__["vapp_template_id"] = vapp_template_id
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_name_in_template"] = vm_name_in_template
        __props__.__dict__["vm_type"] = vm_type
        return VappVm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptAllEulas")
    def accept_all_eulas(self) -> pulumi.Output[Optional[bool]]:
        """
        Automatically accept EULA if OVA has it. Default is `true`
        """
        return pulumi.get(self, "accept_all_eulas")

    @property
    @pulumi.getter(name="bootImage")
    @_utilities.deprecated("""Use `boot_image_id` instead""")
    def boot_image(self) -> pulumi.Output[Optional[str]]:
        """
        Use `boot_image_id` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image")

    @property
    @pulumi.getter(name="bootImageId")
    def boot_image_id(self) -> pulumi.Output[Optional[str]]:
        """
        Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
        Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
        """
        return pulumi.get(self, "boot_image_id")

    @property
    @pulumi.getter(name="bootOptions")
    def boot_options(self) -> pulumi.Output['outputs.VappVmBootOptions']:
        """
        A block to define boot options of the VM. See Boot Options
        """
        return pulumi.get(self, "boot_options")

    @property
    @pulumi.getter(name="catalogName")
    @_utilities.deprecated("""You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name""")
    def catalog_name(self) -> pulumi.Output[Optional[str]]:
        """
        Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vapp_template_id` or `boot_image_id` instead. The catalog name in which to find the given vApp Template or media for `boot_image`.
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> pulumi.Output[str]:
        """
        Computer name to assign to this virtual machine.
        """
        return pulumi.get(self, "computer_name")

    @property
    @pulumi.getter(name="consolidateDisksOnCreate")
    def consolidate_disks_on_create(self) -> pulumi.Output[Optional[bool]]:
        """
        Performs disk consolidation during creation.
        The main use case is when one wants to grow template disk size using `override_template_disk` in
        fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
        Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
        storage performance.
        """
        return pulumi.get(self, "consolidate_disks_on_create")

    @property
    @pulumi.getter(name="copyFromVmId")
    def copy_from_vm_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of *an existing VM* to make a copy of it (it
        cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
        *Note:* `sizing_policy_id` must be specified when creating a standalone VM (using `Vm`
        resource) and using different source/destination VDCs.
        """
        return pulumi.get(self, "copy_from_vm_id")

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Output[int]:
        """
        The number of cores per socket.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="cpuHotAddEnabled")
    def cpu_hot_add_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
        """
        return pulumi.get(self, "cpu_hot_add_enabled")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> pulumi.Output[int]:
        """
        The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="cpuPriority")
    def cpu_priority(self) -> pulumi.Output[str]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "cpu_priority")

    @property
    @pulumi.getter(name="cpuReservation")
    def cpu_reservation(self) -> pulumi.Output[int]:
        """
        The amount of MHz reservation on the underlying virtualization infrastructure.
        """
        return pulumi.get(self, "cpu_reservation")

    @property
    @pulumi.getter(name="cpuShares")
    def cpu_shares(self) -> pulumi.Output[int]:
        """
        Custom priority for the resource in MHz. This is a read-only, unless the `cpu_priority` is "CUSTOM"
        """
        return pulumi.get(self, "cpu_shares")

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Output[int]:
        """
        The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpu_hot_add_enabled` is true, then cpus will be increased without VM power off.
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def customization(self) -> pulumi.Output['outputs.VappVmCustomization']:
        """
        A block to define for guest customization options. See Customization
        """
        return pulumi.get(self, "customization")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The VM description. Note: for VM from Template `description` is read only. Currently, this field has
        the description of the OVA used to create the VM.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Optional[Sequence['outputs.VappVmDisk']]]:
        """
        Independent disk attachment configuration. See Disk below for details.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="exposeHardwareVirtualization")
    def expose_hardware_virtualization(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean for exposing full CPU virtualization to the
        guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
        translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
        """
        return pulumi.get(self, "expose_hardware_virtualization")

    @property
    @pulumi.getter(name="extraConfigs")
    def extra_configs(self) -> pulumi.Output[Sequence['outputs.VappVmExtraConfig']]:
        """
        (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
        """
        return pulumi.get(self, "extra_configs")

    @property
    @pulumi.getter
    def firmware(self) -> pulumi.Output[str]:
        """
        Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key value map of guest properties
        """
        return pulumi.get(self, "guest_properties")

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> pulumi.Output[str]:
        """
        Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
        """
        return pulumi.get(self, "hardware_version")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        VM Hyper Reference
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def imported(self) -> pulumi.Output[bool]:
        """
        (*v3.13.+*) A true/false value telling whether the resource was imported.
        """
        return pulumi.get(self, "imported")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
        """
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter(name="internalDisks")
    def internal_disks(self) -> pulumi.Output[Sequence['outputs.VappVmInternalDisk']]:
        """
        (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
        """
        return pulumi.get(self, "internal_disks")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        The amount of RAM (in MB) to allocate to the VM. If `memory_hot_add_enabled` is true, then memory will be increased without VM power off
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="memoryHotAddEnabled")
    def memory_hot_add_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the virtual machine supports addition of memory while powered on. Default is `false`.
        """
        return pulumi.get(self, "memory_hot_add_enabled")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> pulumi.Output[int]:
        """
        The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="memoryPriority")
    def memory_priority(self) -> pulumi.Output[str]:
        """
        Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
        """
        return pulumi.get(self, "memory_priority")

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> pulumi.Output[int]:
        """
        The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        """
        return pulumi.get(self, "memory_reservation")

    @property
    @pulumi.getter(name="memoryShares")
    def memory_shares(self) -> pulumi.Output[int]:
        """
        Custom priority for the resource in MB. This is a read-only, unless the `memory_priority` is "CUSTOM"
        """
        return pulumi.get(self, "memory_shares")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this VM
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.VappVmMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for the VM, unique within the vApp
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkDhcpWaitSeconds")
    def network_dhcp_wait_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Optional number of seconds to try and wait for DHCP IP (only valid
        for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
        is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
        * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
        does not require for the VM to use Edge Gateways DHCP service.
        * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
        relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
        until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
        Tools are not present on the VM.
        """
        return pulumi.get(self, "network_dhcp_wait_seconds")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.VappVmNetwork']]]:
        """
        A block to define network interface. Multiple can be used. See Network and 
        example for usage details.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="overrideTemplateDisks")
    def override_template_disks(self) -> pulumi.Output[Optional[Sequence['outputs.VappVmOverrideTemplateDisk']]]:
        """
        Allows to update internal disk in template before first VM boot. Disk is matched by `bus_type`, `bus_number` and `unit_number`. See Override template Disk below for details.
        """
        return pulumi.get(self, "override_template_disks")

    @property
    @pulumi.getter(name="placementPolicyId")
    def placement_policy_id(self) -> pulumi.Output[str]:
        """
        VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "placement_policy_id")

    @property
    @pulumi.getter(name="powerOn")
    def power_on(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value stating if this VM should be powered on. Default is `true`
        """
        return pulumi.get(self, "power_on")

    @property
    @pulumi.getter(name="preventUpdatePowerOff")
    def prevent_update_power_off(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the update of resource should fail when virtual machine power off needed. Default is `false`.
        """
        return pulumi.get(self, "prevent_update_power_off")

    @property
    @pulumi.getter(name="securityTags")
    def security_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of security tags to be managed by the `VappVm` resource.
        To remove `security_tags` you must set `security_tags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
        This is to be consistent with existing security tags that were created by the `vcd_security_tags` resource.
        """
        return pulumi.get(self, "security_tags")

    @property
    @pulumi.getter(name="setExtraConfigs")
    def set_extra_configs(self) -> pulumi.Output[Optional[Sequence['outputs.VappVmSetExtraConfig']]]:
        """
        Set of extra configuration key/values to be added or modified. See Extra Configuration

        > **Note:** Only one of `security_tags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
        should be used. Using both would cause a behavioral conflict.
        """
        return pulumi.get(self, "set_extra_configs")

    @property
    @pulumi.getter(name="sizingPolicyId")
    def sizing_policy_id(self) -> pulumi.Output[str]:
        """
        VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
        using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
        In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
        if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
        """
        return pulumi.get(self, "sizing_policy_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        (*v3.8+*) The vApp status as a numeric code.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> pulumi.Output[str]:
        """
        (*v3.8+*) The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> pulumi.Output[str]:
        """
        Storage profile to override the default one
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="templateName")
    @_utilities.deprecated("""Use `vapp_template_id` instead""")
    def template_name(self) -> pulumi.Output[Optional[str]]:
        """
        Use `vapp_template_id` instead. The name of the vApp Template to use
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> pulumi.Output[str]:
        """
        ID of parent vApp
        """
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> pulumi.Output[str]:
        """
        The vApp this VM belongs to.
        """
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vappTemplateId")
    def vapp_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
        """
        return pulumi.get(self, "vapp_template_id")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmNameInTemplate")
    def vm_name_in_template(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
        """
        return pulumi.get(self, "vm_name_in_template")

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> pulumi.Output[str]:
        """
        (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
        """
        return pulumi.get(self, "vm_type")

