# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMultisiteOrgDataResult',
    'AwaitableGetMultisiteOrgDataResult',
    'get_multisite_org_data',
    'get_multisite_org_data_output',
]

@pulumi.output_type
class GetMultisiteOrgDataResult:
    """
    A collection of values returned by getMultisiteOrgData.
    """
    def __init__(__self__, association_data=None, associations=None, download_to_file=None, id=None, number_of_associations=None, org_id=None):
        if association_data and not isinstance(association_data, str):
            raise TypeError("Expected argument 'association_data' to be a str")
        pulumi.set(__self__, "association_data", association_data)
        if associations and not isinstance(associations, list):
            raise TypeError("Expected argument 'associations' to be a list")
        pulumi.set(__self__, "associations", associations)
        if download_to_file and not isinstance(download_to_file, str):
            raise TypeError("Expected argument 'download_to_file' to be a str")
        pulumi.set(__self__, "download_to_file", download_to_file)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if number_of_associations and not isinstance(number_of_associations, int):
            raise TypeError("Expected argument 'number_of_associations' to be a int")
        pulumi.set(__self__, "number_of_associations", number_of_associations)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="associationData")
    def association_data(self) -> str:
        """
        The data needed to associate this Org to another one. Contains the same data that would be saved into
        the file defined in `download_to_file`.
        """
        return pulumi.get(self, "association_data")

    @property
    @pulumi.getter
    def associations(self) -> Sequence[str]:
        """
        An alphabetically sorted list of current associations.
        """
        return pulumi.get(self, "associations")

    @property
    @pulumi.getter(name="downloadToFile")
    def download_to_file(self) -> Optional[str]:
        return pulumi.get(self, "download_to_file")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="numberOfAssociations")
    def number_of_associations(self) -> int:
        """
        The number of current associations with other Orgs.
        """
        return pulumi.get(self, "number_of_associations")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


class AwaitableGetMultisiteOrgDataResult(GetMultisiteOrgDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMultisiteOrgDataResult(
            association_data=self.association_data,
            associations=self.associations,
            download_to_file=self.download_to_file,
            id=self.id,
            number_of_associations=self.number_of_associations,
            org_id=self.org_id)


def get_multisite_org_data(download_to_file: Optional[str] = None,
                           org_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMultisiteOrgDataResult:
    """
    Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.

    Supported in provider *v3.13+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    current_org = vcd.get_multisite_org_data(org_id=my_org.id,
        download_to_file="filename.xml")
    ```

    ## More information

    See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
    of association workflows.


    :param str download_to_file: Name of the file that will contain the data needed to associate this Org to another one, 
           either on the same VCD or in a different one.
           Contains the same data returned in `association_data`.
    :param str org_id: The ID of the organization for which we need to collect the data.
    """
    __args__ = dict()
    __args__['downloadToFile'] = download_to_file
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getMultisiteOrgData:getMultisiteOrgData', __args__, opts=opts, typ=GetMultisiteOrgDataResult).value

    return AwaitableGetMultisiteOrgDataResult(
        association_data=pulumi.get(__ret__, 'association_data'),
        associations=pulumi.get(__ret__, 'associations'),
        download_to_file=pulumi.get(__ret__, 'download_to_file'),
        id=pulumi.get(__ret__, 'id'),
        number_of_associations=pulumi.get(__ret__, 'number_of_associations'),
        org_id=pulumi.get(__ret__, 'org_id'))
def get_multisite_org_data_output(download_to_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  org_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMultisiteOrgDataResult]:
    """
    Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.

    Supported in provider *v3.13+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    current_org = vcd.get_multisite_org_data(org_id=my_org.id,
        download_to_file="filename.xml")
    ```

    ## More information

    See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
    of association workflows.


    :param str download_to_file: Name of the file that will contain the data needed to associate this Org to another one, 
           either on the same VCD or in a different one.
           Contains the same data returned in `association_data`.
    :param str org_id: The ID of the organization for which we need to collect the data.
    """
    __args__ = dict()
    __args__['downloadToFile'] = download_to_file
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getMultisiteOrgData:getMultisiteOrgData', __args__, opts=opts, typ=GetMultisiteOrgDataResult)
    return __ret__.apply(lambda __response__: GetMultisiteOrgDataResult(
        association_data=pulumi.get(__response__, 'association_data'),
        associations=pulumi.get(__response__, 'associations'),
        download_to_file=pulumi.get(__response__, 'download_to_file'),
        id=pulumi.get(__response__, 'id'),
        number_of_associations=pulumi.get(__response__, 'number_of_associations'),
        org_id=pulumi.get(__response__, 'org_id')))
