# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgOidcArgs', 'OrgOidc']

@pulumi.input_type
class OrgOidcArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 org_id: pulumi.Input[str],
                 access_token_endpoint: Optional[pulumi.Input[str]] = None,
                 claims_mapping: Optional[pulumi.Input['OrgOidcClaimsMappingArgs']] = None,
                 issuer_id: Optional[pulumi.Input[str]] = None,
                 key_expire_duration_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_endpoint: Optional[pulumi.Input[str]] = None,
                 key_refresh_period_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_strategy: Optional[pulumi.Input[str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]] = None,
                 max_clock_skew_seconds: Optional[pulumi.Input[int]] = None,
                 prefer_id_token: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ui_button_label: Optional[pulumi.Input[str]] = None,
                 user_authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 userinfo_endpoint: Optional[pulumi.Input[str]] = None,
                 wellknown_endpoint: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgOidc resource.
        :param pulumi.Input[str] client_id: Client ID to use with the OIDC provider
        :param pulumi.Input[str] client_secret: Client Secret to use with the OIDC provider
        :param pulumi.Input[bool] enabled: Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        :param pulumi.Input[str] org_id: ID of the Organization that will have the OpenID Connect settings configured. There must be only one
               resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        :param pulumi.Input[str] access_token_endpoint: The endpoint to use for access tokens.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input['OrgOidcClaimsMappingArgs'] claims_mapping: A single configuration block that specifies the claim mappings to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the claims given by `wellknown_endpoint`. The supported claims are:
        :param pulumi.Input[str] issuer_id: The issuer ID for the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[int] key_expire_duration_hours: Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
               You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
               Maximum value is `24`
        :param pulumi.Input[str] key_refresh_endpoint: Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
               If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        :param pulumi.Input[int] key_refresh_period_hours: Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        :param pulumi.Input[str] key_refresh_strategy: Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
               The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        :param pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]] keys: One or more configuration blocks that specify the keys to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the keys given by `wellknown_endpoint`. Each key requires the following:
        :param pulumi.Input[int] max_clock_skew_seconds: The maximum clock skew is the maximum allowable time difference between the client and server.
               This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        :param pulumi.Input[bool] prefer_id_token: If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
               The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
               VMware Cloud Director can fetch and consume claims from both sources
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
               the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
               overrides the obtained scopes
        :param pulumi.Input[str] ui_button_label: Customizes the label of the UI button of the login screen
        :param pulumi.Input[str] user_authorization_endpoint: The endpoint to use for authorization.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] userinfo_endpoint: The endpoint to use for User Info.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] wellknown_endpoint: This endpoint retrieves the OIDC provider configuration and automatically sets
               the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
               `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
               can be overridden by setting them explicitly in HCL code
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "org_id", org_id)
        if access_token_endpoint is not None:
            pulumi.set(__self__, "access_token_endpoint", access_token_endpoint)
        if claims_mapping is not None:
            pulumi.set(__self__, "claims_mapping", claims_mapping)
        if issuer_id is not None:
            pulumi.set(__self__, "issuer_id", issuer_id)
        if key_expire_duration_hours is not None:
            pulumi.set(__self__, "key_expire_duration_hours", key_expire_duration_hours)
        if key_refresh_endpoint is not None:
            pulumi.set(__self__, "key_refresh_endpoint", key_refresh_endpoint)
        if key_refresh_period_hours is not None:
            pulumi.set(__self__, "key_refresh_period_hours", key_refresh_period_hours)
        if key_refresh_strategy is not None:
            pulumi.set(__self__, "key_refresh_strategy", key_refresh_strategy)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_clock_skew_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_seconds", max_clock_skew_seconds)
        if prefer_id_token is not None:
            pulumi.set(__self__, "prefer_id_token", prefer_id_token)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if ui_button_label is not None:
            pulumi.set(__self__, "ui_button_label", ui_button_label)
        if user_authorization_endpoint is not None:
            pulumi.set(__self__, "user_authorization_endpoint", user_authorization_endpoint)
        if userinfo_endpoint is not None:
            pulumi.set(__self__, "userinfo_endpoint", userinfo_endpoint)
        if wellknown_endpoint is not None:
            pulumi.set(__self__, "wellknown_endpoint", wellknown_endpoint)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Client ID to use with the OIDC provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        Client Secret to use with the OIDC provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="accessTokenEndpoint")
    def access_token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for access tokens.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "access_token_endpoint")

    @access_token_endpoint.setter
    def access_token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_endpoint", value)

    @property
    @pulumi.getter(name="claimsMapping")
    def claims_mapping(self) -> Optional[pulumi.Input['OrgOidcClaimsMappingArgs']]:
        """
        A single configuration block that specifies the claim mappings to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the claims given by `wellknown_endpoint`. The supported claims are:
        """
        return pulumi.get(self, "claims_mapping")

    @claims_mapping.setter
    def claims_mapping(self, value: Optional[pulumi.Input['OrgOidcClaimsMappingArgs']]):
        pulumi.set(self, "claims_mapping", value)

    @property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The issuer ID for the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_id", value)

    @property
    @pulumi.getter(name="keyExpireDurationHours")
    def key_expire_duration_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        Maximum value is `24`
        """
        return pulumi.get(self, "key_expire_duration_hours")

    @key_expire_duration_hours.setter
    def key_expire_duration_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_expire_duration_hours", value)

    @property
    @pulumi.getter(name="keyRefreshEndpoint")
    def key_refresh_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        """
        return pulumi.get(self, "key_refresh_endpoint")

    @key_refresh_endpoint.setter
    def key_refresh_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_refresh_endpoint", value)

    @property
    @pulumi.getter(name="keyRefreshPeriodHours")
    def key_refresh_period_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        """
        return pulumi.get(self, "key_refresh_period_hours")

    @key_refresh_period_hours.setter
    def key_refresh_period_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_refresh_period_hours", value)

    @property
    @pulumi.getter(name="keyRefreshStrategy")
    def key_refresh_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        """
        return pulumi.get(self, "key_refresh_strategy")

    @key_refresh_strategy.setter
    def key_refresh_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_refresh_strategy", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]]:
        """
        One or more configuration blocks that specify the keys to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the keys given by `wellknown_endpoint`. Each key requires the following:
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxClockSkewSeconds")
    def max_clock_skew_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum clock skew is the maximum allowable time difference between the client and server.
        This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        """
        return pulumi.get(self, "max_clock_skew_seconds")

    @max_clock_skew_seconds.setter
    def max_clock_skew_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clock_skew_seconds", value)

    @property
    @pulumi.getter(name="preferIdToken")
    def prefer_id_token(self) -> Optional[pulumi.Input[bool]]:
        """
        If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        VMware Cloud Director can fetch and consume claims from both sources
        """
        return pulumi.get(self, "prefer_id_token")

    @prefer_id_token.setter
    def prefer_id_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer_id_token", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        overrides the obtained scopes
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="uiButtonLabel")
    def ui_button_label(self) -> Optional[pulumi.Input[str]]:
        """
        Customizes the label of the UI button of the login screen
        """
        return pulumi.get(self, "ui_button_label")

    @ui_button_label.setter
    def ui_button_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ui_button_label", value)

    @property
    @pulumi.getter(name="userAuthorizationEndpoint")
    def user_authorization_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for authorization.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "user_authorization_endpoint")

    @user_authorization_endpoint.setter
    def user_authorization_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_authorization_endpoint", value)

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for User Info.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "userinfo_endpoint")

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userinfo_endpoint", value)

    @property
    @pulumi.getter(name="wellknownEndpoint")
    def wellknown_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        This endpoint retrieves the OIDC provider configuration and automatically sets
        the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        can be overridden by setting them explicitly in HCL code
        """
        return pulumi.get(self, "wellknown_endpoint")

    @wellknown_endpoint.setter
    def wellknown_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wellknown_endpoint", value)


@pulumi.input_type
class _OrgOidcState:
    def __init__(__self__, *,
                 access_token_endpoint: Optional[pulumi.Input[str]] = None,
                 claims_mapping: Optional[pulumi.Input['OrgOidcClaimsMappingArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 issuer_id: Optional[pulumi.Input[str]] = None,
                 key_expire_duration_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_endpoint: Optional[pulumi.Input[str]] = None,
                 key_refresh_period_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_strategy: Optional[pulumi.Input[str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]] = None,
                 max_clock_skew_seconds: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 prefer_id_token: Optional[pulumi.Input[bool]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ui_button_label: Optional[pulumi.Input[str]] = None,
                 user_authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 userinfo_endpoint: Optional[pulumi.Input[str]] = None,
                 wellknown_endpoint: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgOidc resources.
        :param pulumi.Input[str] access_token_endpoint: The endpoint to use for access tokens.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input['OrgOidcClaimsMappingArgs'] claims_mapping: A single configuration block that specifies the claim mappings to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the claims given by `wellknown_endpoint`. The supported claims are:
        :param pulumi.Input[str] client_id: Client ID to use with the OIDC provider
        :param pulumi.Input[str] client_secret: Client Secret to use with the OIDC provider
        :param pulumi.Input[bool] enabled: Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        :param pulumi.Input[str] issuer_id: The issuer ID for the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[int] key_expire_duration_hours: Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
               You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
               Maximum value is `24`
        :param pulumi.Input[str] key_refresh_endpoint: Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
               If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        :param pulumi.Input[int] key_refresh_period_hours: Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        :param pulumi.Input[str] key_refresh_strategy: Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
               The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        :param pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]] keys: One or more configuration blocks that specify the keys to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the keys given by `wellknown_endpoint`. Each key requires the following:
        :param pulumi.Input[int] max_clock_skew_seconds: The maximum clock skew is the maximum allowable time difference between the client and server.
               This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        :param pulumi.Input[str] org_id: ID of the Organization that will have the OpenID Connect settings configured. There must be only one
               resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        :param pulumi.Input[bool] prefer_id_token: If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
               The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
               VMware Cloud Director can fetch and consume claims from both sources
        :param pulumi.Input[str] redirect_uri: The client configuration redirect URI used to create a client application registration with an identity provider
               that complies with the OpenID Connect standard
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
               the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
               overrides the obtained scopes
        :param pulumi.Input[str] ui_button_label: Customizes the label of the UI button of the login screen
        :param pulumi.Input[str] user_authorization_endpoint: The endpoint to use for authorization.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] userinfo_endpoint: The endpoint to use for User Info.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] wellknown_endpoint: This endpoint retrieves the OIDC provider configuration and automatically sets
               the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
               `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
               can be overridden by setting them explicitly in HCL code
        """
        if access_token_endpoint is not None:
            pulumi.set(__self__, "access_token_endpoint", access_token_endpoint)
        if claims_mapping is not None:
            pulumi.set(__self__, "claims_mapping", claims_mapping)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if issuer_id is not None:
            pulumi.set(__self__, "issuer_id", issuer_id)
        if key_expire_duration_hours is not None:
            pulumi.set(__self__, "key_expire_duration_hours", key_expire_duration_hours)
        if key_refresh_endpoint is not None:
            pulumi.set(__self__, "key_refresh_endpoint", key_refresh_endpoint)
        if key_refresh_period_hours is not None:
            pulumi.set(__self__, "key_refresh_period_hours", key_refresh_period_hours)
        if key_refresh_strategy is not None:
            pulumi.set(__self__, "key_refresh_strategy", key_refresh_strategy)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_clock_skew_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_seconds", max_clock_skew_seconds)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if prefer_id_token is not None:
            pulumi.set(__self__, "prefer_id_token", prefer_id_token)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if ui_button_label is not None:
            pulumi.set(__self__, "ui_button_label", ui_button_label)
        if user_authorization_endpoint is not None:
            pulumi.set(__self__, "user_authorization_endpoint", user_authorization_endpoint)
        if userinfo_endpoint is not None:
            pulumi.set(__self__, "userinfo_endpoint", userinfo_endpoint)
        if wellknown_endpoint is not None:
            pulumi.set(__self__, "wellknown_endpoint", wellknown_endpoint)

    @property
    @pulumi.getter(name="accessTokenEndpoint")
    def access_token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for access tokens.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "access_token_endpoint")

    @access_token_endpoint.setter
    def access_token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_endpoint", value)

    @property
    @pulumi.getter(name="claimsMapping")
    def claims_mapping(self) -> Optional[pulumi.Input['OrgOidcClaimsMappingArgs']]:
        """
        A single configuration block that specifies the claim mappings to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the claims given by `wellknown_endpoint`. The supported claims are:
        """
        return pulumi.get(self, "claims_mapping")

    @claims_mapping.setter
    def claims_mapping(self, value: Optional[pulumi.Input['OrgOidcClaimsMappingArgs']]):
        pulumi.set(self, "claims_mapping", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID to use with the OIDC provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client Secret to use with the OIDC provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The issuer ID for the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "issuer_id")

    @issuer_id.setter
    def issuer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_id", value)

    @property
    @pulumi.getter(name="keyExpireDurationHours")
    def key_expire_duration_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        Maximum value is `24`
        """
        return pulumi.get(self, "key_expire_duration_hours")

    @key_expire_duration_hours.setter
    def key_expire_duration_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_expire_duration_hours", value)

    @property
    @pulumi.getter(name="keyRefreshEndpoint")
    def key_refresh_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        """
        return pulumi.get(self, "key_refresh_endpoint")

    @key_refresh_endpoint.setter
    def key_refresh_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_refresh_endpoint", value)

    @property
    @pulumi.getter(name="keyRefreshPeriodHours")
    def key_refresh_period_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        """
        return pulumi.get(self, "key_refresh_period_hours")

    @key_refresh_period_hours.setter
    def key_refresh_period_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_refresh_period_hours", value)

    @property
    @pulumi.getter(name="keyRefreshStrategy")
    def key_refresh_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        """
        return pulumi.get(self, "key_refresh_strategy")

    @key_refresh_strategy.setter
    def key_refresh_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_refresh_strategy", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]]:
        """
        One or more configuration blocks that specify the keys to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the keys given by `wellknown_endpoint`. Each key requires the following:
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgOidcKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxClockSkewSeconds")
    def max_clock_skew_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum clock skew is the maximum allowable time difference between the client and server.
        This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        """
        return pulumi.get(self, "max_clock_skew_seconds")

    @max_clock_skew_seconds.setter
    def max_clock_skew_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clock_skew_seconds", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="preferIdToken")
    def prefer_id_token(self) -> Optional[pulumi.Input[bool]]:
        """
        If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        VMware Cloud Director can fetch and consume claims from both sources
        """
        return pulumi.get(self, "prefer_id_token")

    @prefer_id_token.setter
    def prefer_id_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer_id_token", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The client configuration redirect URI used to create a client application registration with an identity provider
        that complies with the OpenID Connect standard
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        overrides the obtained scopes
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="uiButtonLabel")
    def ui_button_label(self) -> Optional[pulumi.Input[str]]:
        """
        Customizes the label of the UI button of the login screen
        """
        return pulumi.get(self, "ui_button_label")

    @ui_button_label.setter
    def ui_button_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ui_button_label", value)

    @property
    @pulumi.getter(name="userAuthorizationEndpoint")
    def user_authorization_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for authorization.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "user_authorization_endpoint")

    @user_authorization_endpoint.setter
    def user_authorization_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_authorization_endpoint", value)

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to use for User Info.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "userinfo_endpoint")

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userinfo_endpoint", value)

    @property
    @pulumi.getter(name="wellknownEndpoint")
    def wellknown_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        This endpoint retrieves the OIDC provider configuration and automatically sets
        the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        can be overridden by setting them explicitly in HCL code
        """
        return pulumi.get(self, "wellknown_endpoint")

    @wellknown_endpoint.setter
    def wellknown_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wellknown_endpoint", value)


class OrgOidc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_endpoint: Optional[pulumi.Input[str]] = None,
                 claims_mapping: Optional[pulumi.Input[Union['OrgOidcClaimsMappingArgs', 'OrgOidcClaimsMappingArgsDict']]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 issuer_id: Optional[pulumi.Input[str]] = None,
                 key_expire_duration_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_endpoint: Optional[pulumi.Input[str]] = None,
                 key_refresh_period_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_strategy: Optional[pulumi.Input[str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgOidcKeyArgs', 'OrgOidcKeyArgsDict']]]]] = None,
                 max_clock_skew_seconds: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 prefer_id_token: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ui_button_label: Optional[pulumi.Input[str]] = None,
                 user_authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 userinfo_endpoint: Optional[pulumi.Input[str]] = None,
                 wellknown_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OrgOidc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token_endpoint: The endpoint to use for access tokens.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[Union['OrgOidcClaimsMappingArgs', 'OrgOidcClaimsMappingArgsDict']] claims_mapping: A single configuration block that specifies the claim mappings to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the claims given by `wellknown_endpoint`. The supported claims are:
        :param pulumi.Input[str] client_id: Client ID to use with the OIDC provider
        :param pulumi.Input[str] client_secret: Client Secret to use with the OIDC provider
        :param pulumi.Input[bool] enabled: Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        :param pulumi.Input[str] issuer_id: The issuer ID for the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[int] key_expire_duration_hours: Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
               You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
               Maximum value is `24`
        :param pulumi.Input[str] key_refresh_endpoint: Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
               If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        :param pulumi.Input[int] key_refresh_period_hours: Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        :param pulumi.Input[str] key_refresh_strategy: Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
               The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgOidcKeyArgs', 'OrgOidcKeyArgsDict']]]] keys: One or more configuration blocks that specify the keys to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the keys given by `wellknown_endpoint`. Each key requires the following:
        :param pulumi.Input[int] max_clock_skew_seconds: The maximum clock skew is the maximum allowable time difference between the client and server.
               This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        :param pulumi.Input[str] org_id: ID of the Organization that will have the OpenID Connect settings configured. There must be only one
               resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        :param pulumi.Input[bool] prefer_id_token: If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
               The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
               VMware Cloud Director can fetch and consume claims from both sources
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
               the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
               overrides the obtained scopes
        :param pulumi.Input[str] ui_button_label: Customizes the label of the UI button of the login screen
        :param pulumi.Input[str] user_authorization_endpoint: The endpoint to use for authorization.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] userinfo_endpoint: The endpoint to use for User Info.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] wellknown_endpoint: This endpoint retrieves the OIDC provider configuration and automatically sets
               the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
               `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
               can be overridden by setting them explicitly in HCL code
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgOidcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgOidc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgOidcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgOidcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_endpoint: Optional[pulumi.Input[str]] = None,
                 claims_mapping: Optional[pulumi.Input[Union['OrgOidcClaimsMappingArgs', 'OrgOidcClaimsMappingArgsDict']]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 issuer_id: Optional[pulumi.Input[str]] = None,
                 key_expire_duration_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_endpoint: Optional[pulumi.Input[str]] = None,
                 key_refresh_period_hours: Optional[pulumi.Input[int]] = None,
                 key_refresh_strategy: Optional[pulumi.Input[str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgOidcKeyArgs', 'OrgOidcKeyArgsDict']]]]] = None,
                 max_clock_skew_seconds: Optional[pulumi.Input[int]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 prefer_id_token: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ui_button_label: Optional[pulumi.Input[str]] = None,
                 user_authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 userinfo_endpoint: Optional[pulumi.Input[str]] = None,
                 wellknown_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgOidcArgs.__new__(OrgOidcArgs)

            __props__.__dict__["access_token_endpoint"] = access_token_endpoint
            __props__.__dict__["claims_mapping"] = claims_mapping
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["issuer_id"] = issuer_id
            __props__.__dict__["key_expire_duration_hours"] = key_expire_duration_hours
            __props__.__dict__["key_refresh_endpoint"] = key_refresh_endpoint
            __props__.__dict__["key_refresh_period_hours"] = key_refresh_period_hours
            __props__.__dict__["key_refresh_strategy"] = key_refresh_strategy
            __props__.__dict__["keys"] = keys
            __props__.__dict__["max_clock_skew_seconds"] = max_clock_skew_seconds
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["prefer_id_token"] = prefer_id_token
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["ui_button_label"] = ui_button_label
            __props__.__dict__["user_authorization_endpoint"] = user_authorization_endpoint
            __props__.__dict__["userinfo_endpoint"] = userinfo_endpoint
            __props__.__dict__["wellknown_endpoint"] = wellknown_endpoint
            __props__.__dict__["redirect_uri"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(OrgOidc, __self__).__init__(
            'vcd:index/orgOidc:OrgOidc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token_endpoint: Optional[pulumi.Input[str]] = None,
            claims_mapping: Optional[pulumi.Input[Union['OrgOidcClaimsMappingArgs', 'OrgOidcClaimsMappingArgsDict']]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            issuer_id: Optional[pulumi.Input[str]] = None,
            key_expire_duration_hours: Optional[pulumi.Input[int]] = None,
            key_refresh_endpoint: Optional[pulumi.Input[str]] = None,
            key_refresh_period_hours: Optional[pulumi.Input[int]] = None,
            key_refresh_strategy: Optional[pulumi.Input[str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OrgOidcKeyArgs', 'OrgOidcKeyArgsDict']]]]] = None,
            max_clock_skew_seconds: Optional[pulumi.Input[int]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            prefer_id_token: Optional[pulumi.Input[bool]] = None,
            redirect_uri: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ui_button_label: Optional[pulumi.Input[str]] = None,
            user_authorization_endpoint: Optional[pulumi.Input[str]] = None,
            userinfo_endpoint: Optional[pulumi.Input[str]] = None,
            wellknown_endpoint: Optional[pulumi.Input[str]] = None) -> 'OrgOidc':
        """
        Get an existing OrgOidc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token_endpoint: The endpoint to use for access tokens.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[Union['OrgOidcClaimsMappingArgs', 'OrgOidcClaimsMappingArgsDict']] claims_mapping: A single configuration block that specifies the claim mappings to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the claims given by `wellknown_endpoint`. The supported claims are:
        :param pulumi.Input[str] client_id: Client ID to use with the OIDC provider
        :param pulumi.Input[str] client_secret: Client Secret to use with the OIDC provider
        :param pulumi.Input[bool] enabled: Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        :param pulumi.Input[str] issuer_id: The issuer ID for the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[int] key_expire_duration_hours: Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
               You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
               Maximum value is `24`
        :param pulumi.Input[str] key_refresh_endpoint: Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
               If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        :param pulumi.Input[int] key_refresh_period_hours: Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        :param pulumi.Input[str] key_refresh_strategy: Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
               The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgOidcKeyArgs', 'OrgOidcKeyArgsDict']]]] keys: One or more configuration blocks that specify the keys to use with the OIDC provider.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
               to override the keys given by `wellknown_endpoint`. Each key requires the following:
        :param pulumi.Input[int] max_clock_skew_seconds: The maximum clock skew is the maximum allowable time difference between the client and server.
               This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        :param pulumi.Input[str] org_id: ID of the Organization that will have the OpenID Connect settings configured. There must be only one
               resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        :param pulumi.Input[bool] prefer_id_token: If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
               The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
               VMware Cloud Director can fetch and consume claims from both sources
        :param pulumi.Input[str] redirect_uri: The client configuration redirect URI used to create a client application registration with an identity provider
               that complies with the OpenID Connect standard
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
               the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
               overrides the obtained scopes
        :param pulumi.Input[str] ui_button_label: Customizes the label of the UI button of the login screen
        :param pulumi.Input[str] user_authorization_endpoint: The endpoint to use for authorization.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] userinfo_endpoint: The endpoint to use for User Info.
               If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
               This allows users to override the configuration given by `wellknown_endpoint`
        :param pulumi.Input[str] wellknown_endpoint: This endpoint retrieves the OIDC provider configuration and automatically sets
               the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
               `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
               can be overridden by setting them explicitly in HCL code
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgOidcState.__new__(_OrgOidcState)

        __props__.__dict__["access_token_endpoint"] = access_token_endpoint
        __props__.__dict__["claims_mapping"] = claims_mapping
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["issuer_id"] = issuer_id
        __props__.__dict__["key_expire_duration_hours"] = key_expire_duration_hours
        __props__.__dict__["key_refresh_endpoint"] = key_refresh_endpoint
        __props__.__dict__["key_refresh_period_hours"] = key_refresh_period_hours
        __props__.__dict__["key_refresh_strategy"] = key_refresh_strategy
        __props__.__dict__["keys"] = keys
        __props__.__dict__["max_clock_skew_seconds"] = max_clock_skew_seconds
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["prefer_id_token"] = prefer_id_token
        __props__.__dict__["redirect_uri"] = redirect_uri
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["ui_button_label"] = ui_button_label
        __props__.__dict__["user_authorization_endpoint"] = user_authorization_endpoint
        __props__.__dict__["userinfo_endpoint"] = userinfo_endpoint
        __props__.__dict__["wellknown_endpoint"] = wellknown_endpoint
        return OrgOidc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessTokenEndpoint")
    def access_token_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint to use for access tokens.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "access_token_endpoint")

    @property
    @pulumi.getter(name="claimsMapping")
    def claims_mapping(self) -> pulumi.Output['outputs.OrgOidcClaimsMapping']:
        """
        A single configuration block that specifies the claim mappings to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the claims given by `wellknown_endpoint`. The supported claims are:
        """
        return pulumi.get(self, "claims_mapping")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        Client ID to use with the OIDC provider
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        Client Secret to use with the OIDC provider
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="issuerId")
    def issuer_id(self) -> pulumi.Output[str]:
        """
        The issuer ID for the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "issuer_id")

    @property
    @pulumi.getter(name="keyExpireDurationHours")
    def key_expire_duration_hours(self) -> pulumi.Output[Optional[int]]:
        """
        Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        Maximum value is `24`
        """
        return pulumi.get(self, "key_expire_duration_hours")

    @property
    @pulumi.getter(name="keyRefreshEndpoint")
    def key_refresh_endpoint(self) -> pulumi.Output[str]:
        """
        Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        """
        return pulumi.get(self, "key_refresh_endpoint")

    @property
    @pulumi.getter(name="keyRefreshPeriodHours")
    def key_refresh_period_hours(self) -> pulumi.Output[Optional[int]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        """
        return pulumi.get(self, "key_refresh_period_hours")

    @property
    @pulumi.getter(name="keyRefreshStrategy")
    def key_refresh_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        """
        return pulumi.get(self, "key_refresh_strategy")

    @property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Sequence['outputs.OrgOidcKey']]:
        """
        One or more configuration blocks that specify the keys to use with the OIDC provider.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        to override the keys given by `wellknown_endpoint`. Each key requires the following:
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxClockSkewSeconds")
    def max_clock_skew_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum clock skew is the maximum allowable time difference between the client and server.
        This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        """
        return pulumi.get(self, "max_clock_skew_seconds")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        resource `OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="preferIdToken")
    def prefer_id_token(self) -> pulumi.Output[Optional[bool]]:
        """
        If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        VMware Cloud Director can fetch and consume claims from both sources
        """
        return pulumi.get(self, "prefer_id_token")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> pulumi.Output[str]:
        """
        The client configuration redirect URI used to create a client application registration with an identity provider
        that complies with the OpenID Connect standard
        """
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        overrides the obtained scopes
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="uiButtonLabel")
    def ui_button_label(self) -> pulumi.Output[Optional[str]]:
        """
        Customizes the label of the UI button of the login screen
        """
        return pulumi.get(self, "ui_button_label")

    @property
    @pulumi.getter(name="userAuthorizationEndpoint")
    def user_authorization_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint to use for authorization.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "user_authorization_endpoint")

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint to use for User Info.
        If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        This allows users to override the configuration given by `wellknown_endpoint`
        """
        return pulumi.get(self, "userinfo_endpoint")

    @property
    @pulumi.getter(name="wellknownEndpoint")
    def wellknown_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        This endpoint retrieves the OIDC provider configuration and automatically sets
        the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        can be overridden by setting them explicitly in HCL code
        """
        return pulumi.get(self, "wellknown_endpoint")

