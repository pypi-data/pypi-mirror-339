# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSolutionAddOnInstancePublishResult',
    'AwaitableGetSolutionAddOnInstancePublishResult',
    'get_solution_add_on_instance_publish',
    'get_solution_add_on_instance_publish_output',
]

@pulumi.output_type
class GetSolutionAddOnInstancePublishResult:
    """
    A collection of values returned by getSolutionAddOnInstancePublish.
    """
    def __init__(__self__, add_on_instance_id=None, add_on_instance_name=None, id=None, org_ids=None, publish_to_all_tenants=None, rde_state=None):
        if add_on_instance_id and not isinstance(add_on_instance_id, str):
            raise TypeError("Expected argument 'add_on_instance_id' to be a str")
        pulumi.set(__self__, "add_on_instance_id", add_on_instance_id)
        if add_on_instance_name and not isinstance(add_on_instance_name, str):
            raise TypeError("Expected argument 'add_on_instance_name' to be a str")
        pulumi.set(__self__, "add_on_instance_name", add_on_instance_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_ids and not isinstance(org_ids, list):
            raise TypeError("Expected argument 'org_ids' to be a list")
        pulumi.set(__self__, "org_ids", org_ids)
        if publish_to_all_tenants and not isinstance(publish_to_all_tenants, bool):
            raise TypeError("Expected argument 'publish_to_all_tenants' to be a bool")
        pulumi.set(__self__, "publish_to_all_tenants", publish_to_all_tenants)
        if rde_state and not isinstance(rde_state, str):
            raise TypeError("Expected argument 'rde_state' to be a str")
        pulumi.set(__self__, "rde_state", rde_state)

    @property
    @pulumi.getter(name="addOnInstanceId")
    def add_on_instance_id(self) -> str:
        return pulumi.get(self, "add_on_instance_id")

    @property
    @pulumi.getter(name="addOnInstanceName")
    def add_on_instance_name(self) -> str:
        return pulumi.get(self, "add_on_instance_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orgIds")
    def org_ids(self) -> Sequence[str]:
        return pulumi.get(self, "org_ids")

    @property
    @pulumi.getter(name="publishToAllTenants")
    def publish_to_all_tenants(self) -> bool:
        return pulumi.get(self, "publish_to_all_tenants")

    @property
    @pulumi.getter(name="rdeState")
    def rde_state(self) -> str:
        return pulumi.get(self, "rde_state")


class AwaitableGetSolutionAddOnInstancePublishResult(GetSolutionAddOnInstancePublishResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSolutionAddOnInstancePublishResult(
            add_on_instance_id=self.add_on_instance_id,
            add_on_instance_name=self.add_on_instance_name,
            id=self.id,
            org_ids=self.org_ids,
            publish_to_all_tenants=self.publish_to_all_tenants,
            rde_state=self.rde_state)


def get_solution_add_on_instance_publish(add_on_instance_name: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSolutionAddOnInstancePublishResult:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read publishing configuration of Solution Add-On Instances in Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    public = vcd.get_solution_add_on_instance_publish(add_on_instance_name="MyDseInstanceName")
    ```


    :param str add_on_instance_name: The name of Solution Add-On Instance
    """
    __args__ = dict()
    __args__['addOnInstanceName'] = add_on_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSolutionAddOnInstancePublish:getSolutionAddOnInstancePublish', __args__, opts=opts, typ=GetSolutionAddOnInstancePublishResult).value

    return AwaitableGetSolutionAddOnInstancePublishResult(
        add_on_instance_id=pulumi.get(__ret__, 'add_on_instance_id'),
        add_on_instance_name=pulumi.get(__ret__, 'add_on_instance_name'),
        id=pulumi.get(__ret__, 'id'),
        org_ids=pulumi.get(__ret__, 'org_ids'),
        publish_to_all_tenants=pulumi.get(__ret__, 'publish_to_all_tenants'),
        rde_state=pulumi.get(__ret__, 'rde_state'))
def get_solution_add_on_instance_publish_output(add_on_instance_name: Optional[pulumi.Input[str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSolutionAddOnInstancePublishResult]:
    """
    Supported in provider *v3.13+* and VCD 10.4.1+.

    Provides a data source to read publishing configuration of Solution Add-On Instances in Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    public = vcd.get_solution_add_on_instance_publish(add_on_instance_name="MyDseInstanceName")
    ```


    :param str add_on_instance_name: The name of Solution Add-On Instance
    """
    __args__ = dict()
    __args__['addOnInstanceName'] = add_on_instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getSolutionAddOnInstancePublish:getSolutionAddOnInstancePublish', __args__, opts=opts, typ=GetSolutionAddOnInstancePublishResult)
    return __ret__.apply(lambda __response__: GetSolutionAddOnInstancePublishResult(
        add_on_instance_id=pulumi.get(__response__, 'add_on_instance_id'),
        add_on_instance_name=pulumi.get(__response__, 'add_on_instance_name'),
        id=pulumi.get(__response__, 'id'),
        org_ids=pulumi.get(__response__, 'org_ids'),
        publish_to_all_tenants=pulumi.get(__response__, 'publish_to_all_tenants'),
        rde_state=pulumi.get(__response__, 'rde_state')))
