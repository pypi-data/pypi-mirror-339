# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVersionResult',
    'AwaitableGetVersionResult',
    'get_version',
    'get_version_output',
]

@pulumi.output_type
class GetVersionResult:
    """
    A collection of values returned by getVersion.
    """
    def __init__(__self__, api_version=None, condition=None, fail_if_not_match=None, id=None, matches_condition=None, vcd_version=None):
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if condition and not isinstance(condition, str):
            raise TypeError("Expected argument 'condition' to be a str")
        pulumi.set(__self__, "condition", condition)
        if fail_if_not_match and not isinstance(fail_if_not_match, bool):
            raise TypeError("Expected argument 'fail_if_not_match' to be a bool")
        pulumi.set(__self__, "fail_if_not_match", fail_if_not_match)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matches_condition and not isinstance(matches_condition, bool):
            raise TypeError("Expected argument 'matches_condition' to be a bool")
        pulumi.set(__self__, "matches_condition", matches_condition)
        if vcd_version and not isinstance(vcd_version, str):
            raise TypeError("Expected argument 'vcd_version' to be a str")
        pulumi.set(__self__, "vcd_version", vcd_version)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The maximum supported API version
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="failIfNotMatch")
    def fail_if_not_match(self) -> Optional[bool]:
        return pulumi.get(self, "fail_if_not_match")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchesCondition")
    def matches_condition(self) -> bool:
        """
        It is true if the VCD version matches the constraint set in `condition`
        """
        return pulumi.get(self, "matches_condition")

    @property
    @pulumi.getter(name="vcdVersion")
    def vcd_version(self) -> str:
        """
        The VCD version
        """
        return pulumi.get(self, "vcd_version")


class AwaitableGetVersionResult(GetVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVersionResult(
            api_version=self.api_version,
            condition=self.condition,
            fail_if_not_match=self.fail_if_not_match,
            id=self.id,
            matches_condition=self.matches_condition,
            vcd_version=self.vcd_version)


def get_version(condition: Optional[str] = None,
                fail_if_not_match: Optional[bool] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVersionResult:
    """
    Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
    perform some optional checks with version constraints.

    Supported in provider *v3.12+*. Requires System Administrator privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    # This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
    eq1051 = vcd.get_version(condition="= 10.5.1",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
    gte1042 = vcd.get_version(condition=">= 10.4.2",
        fail_if_not_match=False)
    pulumi.export("isGte1042", gte1042.matches_condition)
    # This data source will assert that the VCD version is less than 10.5.0
    lt1050 = vcd.get_version(condition="< 10.5.0",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is 10.5.X
    is105 = vcd.get_version(condition="~> 10.5",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is not 10.5.1
    not1051 = vcd.get_version(condition="!= 10.5.1",
        fail_if_not_match=True)
    ```


    :param str condition: A version constraint to check against the VCD version
    :param bool fail_if_not_match: Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['failIfNotMatch'] = fail_if_not_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVersion:getVersion', __args__, opts=opts, typ=GetVersionResult).value

    return AwaitableGetVersionResult(
        api_version=pulumi.get(__ret__, 'api_version'),
        condition=pulumi.get(__ret__, 'condition'),
        fail_if_not_match=pulumi.get(__ret__, 'fail_if_not_match'),
        id=pulumi.get(__ret__, 'id'),
        matches_condition=pulumi.get(__ret__, 'matches_condition'),
        vcd_version=pulumi.get(__ret__, 'vcd_version'))
def get_version_output(condition: Optional[pulumi.Input[Optional[str]]] = None,
                       fail_if_not_match: Optional[pulumi.Input[Optional[bool]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVersionResult]:
    """
    Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
    perform some optional checks with version constraints.

    Supported in provider *v3.12+*. Requires System Administrator privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    # This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
    eq1051 = vcd.get_version(condition="= 10.5.1",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
    gte1042 = vcd.get_version(condition=">= 10.4.2",
        fail_if_not_match=False)
    pulumi.export("isGte1042", gte1042.matches_condition)
    # This data source will assert that the VCD version is less than 10.5.0
    lt1050 = vcd.get_version(condition="< 10.5.0",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is 10.5.X
    is105 = vcd.get_version(condition="~> 10.5",
        fail_if_not_match=True)
    # This data source will assert that the VCD version is not 10.5.1
    not1051 = vcd.get_version(condition="!= 10.5.1",
        fail_if_not_match=True)
    ```


    :param str condition: A version constraint to check against the VCD version
    :param bool fail_if_not_match: Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
    """
    __args__ = dict()
    __args__['condition'] = condition
    __args__['failIfNotMatch'] = fail_if_not_match
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVersion:getVersion', __args__, opts=opts, typ=GetVersionResult)
    return __ret__.apply(lambda __response__: GetVersionResult(
        api_version=pulumi.get(__response__, 'api_version'),
        condition=pulumi.get(__response__, 'condition'),
        fail_if_not_match=pulumi.get(__response__, 'fail_if_not_match'),
        id=pulumi.get(__response__, 'id'),
        matches_condition=pulumi.get(__response__, 'matches_condition'),
        vcd_version=pulumi.get(__response__, 'vcd_version')))
