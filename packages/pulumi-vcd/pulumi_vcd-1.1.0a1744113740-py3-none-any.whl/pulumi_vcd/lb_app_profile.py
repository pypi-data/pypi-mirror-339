# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbAppProfileArgs', 'LbAppProfile']

@pulumi.input_type
class LbAppProfileArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 type: pulumi.Input[str],
                 cookie_mode: Optional[pulumi.Input[str]] = None,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 enable_pool_side_ssl: Optional[pulumi.Input[bool]] = None,
                 enable_ssl_passthrough: Optional[pulumi.Input[bool]] = None,
                 expiration: Optional[pulumi.Input[int]] = None,
                 http_redirect_url: Optional[pulumi.Input[str]] = None,
                 insert_x_forwarded_http_header: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 persistence_mechanism: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbAppProfile resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application profile is to be created
        :param pulumi.Input[str] type: Protocol type used to send requests to the server. One of `tcp`, `udp`,
               `http`, or `https`
        :param pulumi.Input[str] cookie_mode: The mode by which the cookie should be inserted. One of 'insert', 
               'prefix', or 'appsession'
        :param pulumi.Input[str] cookie_name: Used to uniquely identify the session the first time a client accesses
               the site. The load balancer refers to this cookie when connecting subsequent requests in the
               session, so that they all go to the same virtual server. Only applies for
               `persistence_mechanism` 'cookie'
        :param pulumi.Input[bool] enable_pool_side_ssl: Enable to define the certificate, CAs, or CRLs used to
               authenticate the load balancer from the server side. **Note:** This resource does not currently
               support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
               make it fully work certificates must be currently attached manually.
        :param pulumi.Input[bool] enable_ssl_passthrough: Enable SSL authentication to be passed through to the
               virtual server. Otherwise SSL authentication takes place at the destination address
        :param pulumi.Input[int] expiration: Length of time in seconds that persistence stays in effect
        :param pulumi.Input[str] http_redirect_url: The URL to which traffic that arrives at the destination address
               should be redirected. Only applies for types `http` and `https`
        :param pulumi.Input[bool] insert_x_forwarded_http_header: Enables 'X-Forwarded-For' header for identifying
               the originating IP address of a client connecting to a Web server through the load balancer.
               Only applies for types `http` and `https`
        :param pulumi.Input[str] name: Application profile name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] persistence_mechanism: Persistence mechanism for the profile. One of 'cookie',
               'ssl-sessionid', 'sourceip'
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "type", type)
        if cookie_mode is not None:
            pulumi.set(__self__, "cookie_mode", cookie_mode)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enable_pool_side_ssl is not None:
            pulumi.set(__self__, "enable_pool_side_ssl", enable_pool_side_ssl)
        if enable_ssl_passthrough is not None:
            pulumi.set(__self__, "enable_ssl_passthrough", enable_ssl_passthrough)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if http_redirect_url is not None:
            pulumi.set(__self__, "http_redirect_url", http_redirect_url)
        if insert_x_forwarded_http_header is not None:
            pulumi.set(__self__, "insert_x_forwarded_http_header", insert_x_forwarded_http_header)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if persistence_mechanism is not None:
            pulumi.set(__self__, "persistence_mechanism", persistence_mechanism)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which the application profile is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Protocol type used to send requests to the server. One of `tcp`, `udp`,
        `http`, or `https`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cookieMode")
    def cookie_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode by which the cookie should be inserted. One of 'insert', 
        'prefix', or 'appsession'
        """
        return pulumi.get(self, "cookie_mode")

    @cookie_mode.setter
    def cookie_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_mode", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to uniquely identify the session the first time a client accesses
        the site. The load balancer refers to this cookie when connecting subsequent requests in the
        session, so that they all go to the same virtual server. Only applies for
        `persistence_mechanism` 'cookie'
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="enablePoolSideSsl")
    def enable_pool_side_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to define the certificate, CAs, or CRLs used to
        authenticate the load balancer from the server side. **Note:** This resource does not currently
        support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
        make it fully work certificates must be currently attached manually.
        """
        return pulumi.get(self, "enable_pool_side_ssl")

    @enable_pool_side_ssl.setter
    def enable_pool_side_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pool_side_ssl", value)

    @property
    @pulumi.getter(name="enableSslPassthrough")
    def enable_ssl_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SSL authentication to be passed through to the
        virtual server. Otherwise SSL authentication takes place at the destination address
        """
        return pulumi.get(self, "enable_ssl_passthrough")

    @enable_ssl_passthrough.setter
    def enable_ssl_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ssl_passthrough", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Length of time in seconds that persistence stays in effect
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter(name="httpRedirectUrl")
    def http_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which traffic that arrives at the destination address
        should be redirected. Only applies for types `http` and `https`
        """
        return pulumi.get(self, "http_redirect_url")

    @http_redirect_url.setter
    def http_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect_url", value)

    @property
    @pulumi.getter(name="insertXForwardedHttpHeader")
    def insert_x_forwarded_http_header(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables 'X-Forwarded-For' header for identifying
        the originating IP address of a client connecting to a Web server through the load balancer.
        Only applies for types `http` and `https`
        """
        return pulumi.get(self, "insert_x_forwarded_http_header")

    @insert_x_forwarded_http_header.setter
    def insert_x_forwarded_http_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insert_x_forwarded_http_header", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application profile name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="persistenceMechanism")
    def persistence_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        Persistence mechanism for the profile. One of 'cookie',
        'ssl-sessionid', 'sourceip'
        """
        return pulumi.get(self, "persistence_mechanism")

    @persistence_mechanism.setter
    def persistence_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence_mechanism", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _LbAppProfileState:
    def __init__(__self__, *,
                 cookie_mode: Optional[pulumi.Input[str]] = None,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_pool_side_ssl: Optional[pulumi.Input[bool]] = None,
                 enable_ssl_passthrough: Optional[pulumi.Input[bool]] = None,
                 expiration: Optional[pulumi.Input[int]] = None,
                 http_redirect_url: Optional[pulumi.Input[str]] = None,
                 insert_x_forwarded_http_header: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 persistence_mechanism: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbAppProfile resources.
        :param pulumi.Input[str] cookie_mode: The mode by which the cookie should be inserted. One of 'insert', 
               'prefix', or 'appsession'
        :param pulumi.Input[str] cookie_name: Used to uniquely identify the session the first time a client accesses
               the site. The load balancer refers to this cookie when connecting subsequent requests in the
               session, so that they all go to the same virtual server. Only applies for
               `persistence_mechanism` 'cookie'
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application profile is to be created
        :param pulumi.Input[bool] enable_pool_side_ssl: Enable to define the certificate, CAs, or CRLs used to
               authenticate the load balancer from the server side. **Note:** This resource does not currently
               support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
               make it fully work certificates must be currently attached manually.
        :param pulumi.Input[bool] enable_ssl_passthrough: Enable SSL authentication to be passed through to the
               virtual server. Otherwise SSL authentication takes place at the destination address
        :param pulumi.Input[int] expiration: Length of time in seconds that persistence stays in effect
        :param pulumi.Input[str] http_redirect_url: The URL to which traffic that arrives at the destination address
               should be redirected. Only applies for types `http` and `https`
        :param pulumi.Input[bool] insert_x_forwarded_http_header: Enables 'X-Forwarded-For' header for identifying
               the originating IP address of a client connecting to a Web server through the load balancer.
               Only applies for types `http` and `https`
        :param pulumi.Input[str] name: Application profile name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] persistence_mechanism: Persistence mechanism for the profile. One of 'cookie',
               'ssl-sessionid', 'sourceip'
        :param pulumi.Input[str] type: Protocol type used to send requests to the server. One of `tcp`, `udp`,
               `http`, or `https`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if cookie_mode is not None:
            pulumi.set(__self__, "cookie_mode", cookie_mode)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enable_pool_side_ssl is not None:
            pulumi.set(__self__, "enable_pool_side_ssl", enable_pool_side_ssl)
        if enable_ssl_passthrough is not None:
            pulumi.set(__self__, "enable_ssl_passthrough", enable_ssl_passthrough)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if http_redirect_url is not None:
            pulumi.set(__self__, "http_redirect_url", http_redirect_url)
        if insert_x_forwarded_http_header is not None:
            pulumi.set(__self__, "insert_x_forwarded_http_header", insert_x_forwarded_http_header)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if persistence_mechanism is not None:
            pulumi.set(__self__, "persistence_mechanism", persistence_mechanism)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="cookieMode")
    def cookie_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode by which the cookie should be inserted. One of 'insert', 
        'prefix', or 'appsession'
        """
        return pulumi.get(self, "cookie_mode")

    @cookie_mode.setter
    def cookie_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_mode", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to uniquely identify the session the first time a client accesses
        the site. The load balancer refers to this cookie when connecting subsequent requests in the
        session, so that they all go to the same virtual server. Only applies for
        `persistence_mechanism` 'cookie'
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which the application profile is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="enablePoolSideSsl")
    def enable_pool_side_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to define the certificate, CAs, or CRLs used to
        authenticate the load balancer from the server side. **Note:** This resource does not currently
        support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
        make it fully work certificates must be currently attached manually.
        """
        return pulumi.get(self, "enable_pool_side_ssl")

    @enable_pool_side_ssl.setter
    def enable_pool_side_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pool_side_ssl", value)

    @property
    @pulumi.getter(name="enableSslPassthrough")
    def enable_ssl_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SSL authentication to be passed through to the
        virtual server. Otherwise SSL authentication takes place at the destination address
        """
        return pulumi.get(self, "enable_ssl_passthrough")

    @enable_ssl_passthrough.setter
    def enable_ssl_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ssl_passthrough", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Length of time in seconds that persistence stays in effect
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter(name="httpRedirectUrl")
    def http_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which traffic that arrives at the destination address
        should be redirected. Only applies for types `http` and `https`
        """
        return pulumi.get(self, "http_redirect_url")

    @http_redirect_url.setter
    def http_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect_url", value)

    @property
    @pulumi.getter(name="insertXForwardedHttpHeader")
    def insert_x_forwarded_http_header(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables 'X-Forwarded-For' header for identifying
        the originating IP address of a client connecting to a Web server through the load balancer.
        Only applies for types `http` and `https`
        """
        return pulumi.get(self, "insert_x_forwarded_http_header")

    @insert_x_forwarded_http_header.setter
    def insert_x_forwarded_http_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insert_x_forwarded_http_header", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application profile name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="persistenceMechanism")
    def persistence_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        Persistence mechanism for the profile. One of 'cookie',
        'ssl-sessionid', 'sourceip'
        """
        return pulumi.get(self, "persistence_mechanism")

    @persistence_mechanism.setter
    def persistence_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence_mechanism", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type used to send requests to the server. One of `tcp`, `udp`,
        `http`, or `https`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class LbAppProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cookie_mode: Optional[pulumi.Input[str]] = None,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_pool_side_ssl: Optional[pulumi.Input[bool]] = None,
                 enable_ssl_passthrough: Optional[pulumi.Input[bool]] = None,
                 expiration: Optional[pulumi.Input[int]] = None,
                 http_redirect_url: Optional[pulumi.Input[str]] = None,
                 insert_x_forwarded_http_header: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 persistence_mechanism: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LbAppProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cookie_mode: The mode by which the cookie should be inserted. One of 'insert', 
               'prefix', or 'appsession'
        :param pulumi.Input[str] cookie_name: Used to uniquely identify the session the first time a client accesses
               the site. The load balancer refers to this cookie when connecting subsequent requests in the
               session, so that they all go to the same virtual server. Only applies for
               `persistence_mechanism` 'cookie'
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application profile is to be created
        :param pulumi.Input[bool] enable_pool_side_ssl: Enable to define the certificate, CAs, or CRLs used to
               authenticate the load balancer from the server side. **Note:** This resource does not currently
               support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
               make it fully work certificates must be currently attached manually.
        :param pulumi.Input[bool] enable_ssl_passthrough: Enable SSL authentication to be passed through to the
               virtual server. Otherwise SSL authentication takes place at the destination address
        :param pulumi.Input[int] expiration: Length of time in seconds that persistence stays in effect
        :param pulumi.Input[str] http_redirect_url: The URL to which traffic that arrives at the destination address
               should be redirected. Only applies for types `http` and `https`
        :param pulumi.Input[bool] insert_x_forwarded_http_header: Enables 'X-Forwarded-For' header for identifying
               the originating IP address of a client connecting to a Web server through the load balancer.
               Only applies for types `http` and `https`
        :param pulumi.Input[str] name: Application profile name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] persistence_mechanism: Persistence mechanism for the profile. One of 'cookie',
               'ssl-sessionid', 'sourceip'
        :param pulumi.Input[str] type: Protocol type used to send requests to the server. One of `tcp`, `udp`,
               `http`, or `https`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbAppProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbAppProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbAppProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbAppProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cookie_mode: Optional[pulumi.Input[str]] = None,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enable_pool_side_ssl: Optional[pulumi.Input[bool]] = None,
                 enable_ssl_passthrough: Optional[pulumi.Input[bool]] = None,
                 expiration: Optional[pulumi.Input[int]] = None,
                 http_redirect_url: Optional[pulumi.Input[str]] = None,
                 insert_x_forwarded_http_header: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 persistence_mechanism: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbAppProfileArgs.__new__(LbAppProfileArgs)

            __props__.__dict__["cookie_mode"] = cookie_mode
            __props__.__dict__["cookie_name"] = cookie_name
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["enable_pool_side_ssl"] = enable_pool_side_ssl
            __props__.__dict__["enable_ssl_passthrough"] = enable_ssl_passthrough
            __props__.__dict__["expiration"] = expiration
            __props__.__dict__["http_redirect_url"] = http_redirect_url
            __props__.__dict__["insert_x_forwarded_http_header"] = insert_x_forwarded_http_header
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["persistence_mechanism"] = persistence_mechanism
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vdc"] = vdc
        super(LbAppProfile, __self__).__init__(
            'vcd:index/lbAppProfile:LbAppProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cookie_mode: Optional[pulumi.Input[str]] = None,
            cookie_name: Optional[pulumi.Input[str]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            enable_pool_side_ssl: Optional[pulumi.Input[bool]] = None,
            enable_ssl_passthrough: Optional[pulumi.Input[bool]] = None,
            expiration: Optional[pulumi.Input[int]] = None,
            http_redirect_url: Optional[pulumi.Input[str]] = None,
            insert_x_forwarded_http_header: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            persistence_mechanism: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'LbAppProfile':
        """
        Get an existing LbAppProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cookie_mode: The mode by which the cookie should be inserted. One of 'insert', 
               'prefix', or 'appsession'
        :param pulumi.Input[str] cookie_name: Used to uniquely identify the session the first time a client accesses
               the site. The load balancer refers to this cookie when connecting subsequent requests in the
               session, so that they all go to the same virtual server. Only applies for
               `persistence_mechanism` 'cookie'
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the application profile is to be created
        :param pulumi.Input[bool] enable_pool_side_ssl: Enable to define the certificate, CAs, or CRLs used to
               authenticate the load balancer from the server side. **Note:** This resource does not currently
               support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
               make it fully work certificates must be currently attached manually.
        :param pulumi.Input[bool] enable_ssl_passthrough: Enable SSL authentication to be passed through to the
               virtual server. Otherwise SSL authentication takes place at the destination address
        :param pulumi.Input[int] expiration: Length of time in seconds that persistence stays in effect
        :param pulumi.Input[str] http_redirect_url: The URL to which traffic that arrives at the destination address
               should be redirected. Only applies for types `http` and `https`
        :param pulumi.Input[bool] insert_x_forwarded_http_header: Enables 'X-Forwarded-For' header for identifying
               the originating IP address of a client connecting to a Web server through the load balancer.
               Only applies for types `http` and `https`
        :param pulumi.Input[str] name: Application profile name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] persistence_mechanism: Persistence mechanism for the profile. One of 'cookie',
               'ssl-sessionid', 'sourceip'
        :param pulumi.Input[str] type: Protocol type used to send requests to the server. One of `tcp`, `udp`,
               `http`, or `https`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbAppProfileState.__new__(_LbAppProfileState)

        __props__.__dict__["cookie_mode"] = cookie_mode
        __props__.__dict__["cookie_name"] = cookie_name
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["enable_pool_side_ssl"] = enable_pool_side_ssl
        __props__.__dict__["enable_ssl_passthrough"] = enable_ssl_passthrough
        __props__.__dict__["expiration"] = expiration
        __props__.__dict__["http_redirect_url"] = http_redirect_url
        __props__.__dict__["insert_x_forwarded_http_header"] = insert_x_forwarded_http_header
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["persistence_mechanism"] = persistence_mechanism
        __props__.__dict__["type"] = type
        __props__.__dict__["vdc"] = vdc
        return LbAppProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cookieMode")
    def cookie_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The mode by which the cookie should be inserted. One of 'insert', 
        'prefix', or 'appsession'
        """
        return pulumi.get(self, "cookie_mode")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> pulumi.Output[Optional[str]]:
        """
        Used to uniquely identify the session the first time a client accesses
        the site. The load balancer refers to this cookie when connecting subsequent requests in the
        session, so that they all go to the same virtual server. Only applies for
        `persistence_mechanism` 'cookie'
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which the application profile is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter(name="enablePoolSideSsl")
    def enable_pool_side_ssl(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable to define the certificate, CAs, or CRLs used to
        authenticate the load balancer from the server side. **Note:** This resource does not currently
        support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
        make it fully work certificates must be currently attached manually.
        """
        return pulumi.get(self, "enable_pool_side_ssl")

    @property
    @pulumi.getter(name="enableSslPassthrough")
    def enable_ssl_passthrough(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SSL authentication to be passed through to the
        virtual server. Otherwise SSL authentication takes place at the destination address
        """
        return pulumi.get(self, "enable_ssl_passthrough")

    @property
    @pulumi.getter
    def expiration(self) -> pulumi.Output[Optional[int]]:
        """
        Length of time in seconds that persistence stays in effect
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="httpRedirectUrl")
    def http_redirect_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL to which traffic that arrives at the destination address
        should be redirected. Only applies for types `http` and `https`
        """
        return pulumi.get(self, "http_redirect_url")

    @property
    @pulumi.getter(name="insertXForwardedHttpHeader")
    def insert_x_forwarded_http_header(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables 'X-Forwarded-For' header for identifying
        the originating IP address of a client connecting to a Web server through the load balancer.
        Only applies for types `http` and `https`
        """
        return pulumi.get(self, "insert_x_forwarded_http_header")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Application profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="persistenceMechanism")
    def persistence_mechanism(self) -> pulumi.Output[Optional[str]]:
        """
        Persistence mechanism for the profile. One of 'cookie',
        'ssl-sessionid', 'sourceip'
        """
        return pulumi.get(self, "persistence_mechanism")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Protocol type used to send requests to the server. One of `tcp`, `udp`,
        `http`, or `https`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

