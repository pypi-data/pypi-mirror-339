# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtTier0RouterInterfaceResult',
    'AwaitableGetNsxtTier0RouterInterfaceResult',
    'get_nsxt_tier0_router_interface',
    'get_nsxt_tier0_router_interface_output',
]

@pulumi.output_type
class GetNsxtTier0RouterInterfaceResult:
    """
    A collection of values returned by getNsxtTier0RouterInterface.
    """
    def __init__(__self__, description=None, external_network_id=None, id=None, name=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_network_id and not isinstance(external_network_id, str):
            raise TypeError("Expected argument 'external_network_id' to be a str")
        pulumi.set(__self__, "external_network_id", external_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Tier-0 Router Interface in NSX-T.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> str:
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of Tier-0 Router Interface in NSX-T. One of `EXTERNAL`, `SERVICE` or `LOOPBACK`
        """
        return pulumi.get(self, "type")


class AwaitableGetNsxtTier0RouterInterfaceResult(GetNsxtTier0RouterInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtTier0RouterInterfaceResult(
            description=self.description,
            external_network_id=self.external_network_id,
            id=self.id,
            name=self.name,
            type=self.type)


def get_nsxt_tier0_router_interface(external_network_id: Optional[str] = None,
                                    name: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtTier0RouterInterfaceResult:
    """
    Supported in provider *v3.14+* and VCD 10.5+ with NSX-T IP Spaces.

    Provides a data source to read NSX-T Tier-0 Router Interface that can be associated with IP Space
    Uplink.


    :param str external_network_id: The ID of Provider Gateway. Can be looked up using
           [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2) data
           source.
    :param str name: The name of organization to which the edge gateway belongs. Optional if
           defined at provider level.
    """
    __args__ = dict()
    __args__['externalNetworkId'] = external_network_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtTier0RouterInterface:getNsxtTier0RouterInterface', __args__, opts=opts, typ=GetNsxtTier0RouterInterfaceResult).value

    return AwaitableGetNsxtTier0RouterInterfaceResult(
        description=pulumi.get(__ret__, 'description'),
        external_network_id=pulumi.get(__ret__, 'external_network_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))
def get_nsxt_tier0_router_interface_output(external_network_id: Optional[pulumi.Input[str]] = None,
                                           name: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtTier0RouterInterfaceResult]:
    """
    Supported in provider *v3.14+* and VCD 10.5+ with NSX-T IP Spaces.

    Provides a data source to read NSX-T Tier-0 Router Interface that can be associated with IP Space
    Uplink.


    :param str external_network_id: The ID of Provider Gateway. Can be looked up using
           [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2) data
           source.
    :param str name: The name of organization to which the edge gateway belongs. Optional if
           defined at provider level.
    """
    __args__ = dict()
    __args__['externalNetworkId'] = external_network_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtTier0RouterInterface:getNsxtTier0RouterInterface', __args__, opts=opts, typ=GetNsxtTier0RouterInterfaceResult)
    return __ret__.apply(lambda __response__: GetNsxtTier0RouterInterfaceResult(
        description=pulumi.get(__response__, 'description'),
        external_network_id=pulumi.get(__response__, 'external_network_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type')))
