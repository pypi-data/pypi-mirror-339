# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgGroupArgs', 'OrgGroup']

@pulumi.input_type
class OrgGroupArgs:
    def __init__(__self__, *,
                 provider_type: pulumi.Input[str],
                 role: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgGroup resource.
        :param pulumi.Input[str] provider_type: Identity provider type for this this group. One of `SAML`, `OAUTH` or
               `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
               match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        :param pulumi.Input[str] role: The role of the group. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[str] description: The description of Organization group
        :param pulumi.Input[str] name: A unique name for the group.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "role", role)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Input[str]:
        """
        Identity provider type for this this group. One of `SAML`, `OAUTH` or
        `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of Organization group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


@pulumi.input_type
class _OrgGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering OrgGroup resources.
        :param pulumi.Input[str] description: The description of Organization group
        :param pulumi.Input[str] name: A unique name for the group.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] provider_type: Identity provider type for this this group. One of `SAML`, `OAUTH` or
               `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
               match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        :param pulumi.Input[str] role: The role of the group. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_names: The set of user names that belong to this group. It's only populated if the users
               are created after the group (with `depends_on` the given group).
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_names is not None:
            pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of Organization group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider type for this this group. One of `SAML`, `OAUTH` or
        `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user names that belong to this group. It's only populated if the users
        are created after the group (with `depends_on` the given group).
        """
        return pulumi.get(self, "user_names")

    @user_names.setter
    def user_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_names", value)


class OrgGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OrgGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of Organization group
        :param pulumi.Input[str] name: A unique name for the group.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] provider_type: Identity provider type for this this group. One of `SAML`, `OAUTH` or
               `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
               match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        :param pulumi.Input[str] role: The role of the group. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgGroupArgs.__new__(OrgGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if provider_type is None and not opts.urn:
                raise TypeError("Missing required property 'provider_type'")
            __props__.__dict__["provider_type"] = provider_type
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["user_names"] = None
        super(OrgGroup, __self__).__init__(
            'vcd:index/orgGroup:OrgGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            provider_type: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            user_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'OrgGroup':
        """
        Get an existing OrgGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of Organization group
        :param pulumi.Input[str] name: A unique name for the group.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] provider_type: Identity provider type for this this group. One of `SAML`, `OAUTH` or
               `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
               match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        :param pulumi.Input[str] role: The role of the group. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_names: The set of user names that belong to this group. It's only populated if the users
               are created after the group (with `depends_on` the given group).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgGroupState.__new__(_OrgGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["role"] = role
        __props__.__dict__["user_names"] = user_names
        return OrgGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of Organization group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[str]:
        """
        Identity provider type for this this group. One of `SAML`, `OAUTH` or
        `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> pulumi.Output[Sequence[str]]:
        """
        The set of user names that belong to this group. It's only populated if the users
        are created after the group (with `depends_on` the given group).
        """
        return pulumi.get(self, "user_names")

