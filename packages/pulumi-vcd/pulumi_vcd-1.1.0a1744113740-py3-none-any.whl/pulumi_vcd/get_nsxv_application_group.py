# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxvApplicationGroupResult',
    'AwaitableGetNsxvApplicationGroupResult',
    'get_nsxv_application_group',
    'get_nsxv_application_group_output',
]

@pulumi.output_type
class GetNsxvApplicationGroupResult:
    """
    A collection of values returned by getNsxvApplicationGroup.
    """
    def __init__(__self__, applications=None, id=None, name=None, vdc_id=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetNsxvApplicationGroupApplicationResult']:
        """
        The list of the applications belonging to this group. For each one we get the following:
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the application groups
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the application
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> str:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxvApplicationGroupResult(GetNsxvApplicationGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvApplicationGroupResult(
            applications=self.applications,
            id=self.id,
            name=self.name,
            vdc_id=self.vdc_id)


def get_nsxv_application_group(name: Optional[str] = None,
                               vdc_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvApplicationGroupResult:
    """
    Provides a VMware Cloud Director NSX-V Distributed Firewall data source used to read an existing application group.

    Supported in provider *v3.9+*


    :param str name: The name of the application group
    :param str vdc_id: The ID of VDC to use
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxvApplicationGroup:getNsxvApplicationGroup', __args__, opts=opts, typ=GetNsxvApplicationGroupResult).value

    return AwaitableGetNsxvApplicationGroupResult(
        applications=pulumi.get(__ret__, 'applications'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxv_application_group_output(name: Optional[pulumi.Input[str]] = None,
                                      vdc_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxvApplicationGroupResult]:
    """
    Provides a VMware Cloud Director NSX-V Distributed Firewall data source used to read an existing application group.

    Supported in provider *v3.9+*


    :param str name: The name of the application group
    :param str vdc_id: The ID of VDC to use
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxvApplicationGroup:getNsxvApplicationGroup', __args__, opts=opts, typ=GetNsxvApplicationGroupResult)
    return __ret__.apply(lambda __response__: GetNsxvApplicationGroupResult(
        applications=pulumi.get(__response__, 'applications'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
