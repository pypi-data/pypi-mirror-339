# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SecurityTagArgs', 'SecurityTag']

@pulumi.input_type
class SecurityTagArgs:
    def __init__(__self__, *,
                 vm_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityTag resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: List of VM IDs that the security tags is going to be tied to
        :param pulumi.Input[str] name: The name of the security tag.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        pulumi.set(__self__, "vm_ids", vm_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of VM IDs that the security tags is going to be tied to
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vm_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the security tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


@pulumi.input_type
class _SecurityTagState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SecurityTag resources.
        :param pulumi.Input[str] name: The name of the security tag.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: List of VM IDs that the security tags is going to be tied to
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the security tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of VM IDs that the security tags is going to be tied to
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_ids", value)


class SecurityTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a VMware Cloud Director Security Tag resource. This can be
        used to assign security tag to VMs.

        Supported in provider *v3.7+* and requires VCD 10.3.0+

        > **Note:** Only one of `SecurityTag` resource or [`security_tags` attribute from `VappVm`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vapp_vm)
        should be used. Using both would cause a behavioral conflict.

        > **Note:** This resource requires either system or org administrator privileges.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_tag = vcd.SecurityTag("my_tag",
            name="test-tag",
            vm_ids=[
                my_vm_one["id"],
                my_vm_two["id"],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the security tag.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: List of VM IDs that the security tags is going to be tied to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a VMware Cloud Director Security Tag resource. This can be
        used to assign security tag to VMs.

        Supported in provider *v3.7+* and requires VCD 10.3.0+

        > **Note:** Only one of `SecurityTag` resource or [`security_tags` attribute from `VappVm`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vapp_vm)
        should be used. Using both would cause a behavioral conflict.

        > **Note:** This resource requires either system or org administrator privileges.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        my_tag = vcd.SecurityTag("my_tag",
            name="test-tag",
            vm_ids=[
                my_vm_one["id"],
                my_vm_two["id"],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param SecurityTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityTagArgs.__new__(SecurityTagArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if vm_ids is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ids'")
            __props__.__dict__["vm_ids"] = vm_ids
        super(SecurityTag, __self__).__init__(
            'vcd:index/securityTag:SecurityTag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SecurityTag':
        """
        Get an existing SecurityTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the security tag.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: List of VM IDs that the security tags is going to be tied to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityTagState.__new__(_SecurityTagState)

        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["vm_ids"] = vm_ids
        return SecurityTag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the security tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of VM IDs that the security tags is going to be tied to
        """
        return pulumi.get(self, "vm_ids")

