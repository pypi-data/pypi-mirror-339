# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtAppPortProfileResult',
    'AwaitableGetNsxtAppPortProfileResult',
    'get_nsxt_app_port_profile',
    'get_nsxt_app_port_profile_output',
]

@pulumi.output_type
class GetNsxtAppPortProfileResult:
    """
    A collection of values returned by getNsxtAppPortProfile.
    """
    def __init__(__self__, app_ports=None, context_id=None, description=None, id=None, name=None, nsxt_manager_id=None, org=None, scope=None, vdc=None):
        if app_ports and not isinstance(app_ports, list):
            raise TypeError("Expected argument 'app_ports' to be a list")
        pulumi.set(__self__, "app_ports", app_ports)
        if context_id and not isinstance(context_id, str):
            raise TypeError("Expected argument 'context_id' to be a str")
        pulumi.set(__self__, "context_id", context_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="appPorts")
    def app_ports(self) -> Sequence['outputs.GetNsxtAppPortProfileAppPortResult']:
        return pulumi.get(self, "app_ports")

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> str:
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def nsxt_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated in favor of 'context_id'""")
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtAppPortProfileResult(GetNsxtAppPortProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAppPortProfileResult(
            app_ports=self.app_ports,
            context_id=self.context_id,
            description=self.description,
            id=self.id,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            org=self.org,
            scope=self.scope,
            vdc=self.vdc)


def get_nsxt_app_port_profile(context_id: Optional[str] = None,
                              name: Optional[str] = None,
                              nsxt_manager_id: Optional[str] = None,
                              org: Optional[str] = None,
                              scope: Optional[str] = None,
                              vdc: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAppPortProfileResult:
    """
    Supported in provider *v3.3+* and VCD 10.1+ with NSX-T backed VDCs.

    Provides a data source to read NSX-T Application Port Profiles. Application Port Profiles include a
    combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT
    services on the Edge Gateway.

    ## Example Usage

    ### 1 (Find An Application Port Profile Defined By Provider)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    custom = vcd.get_nsxt_app_port_profile(org="System",
        context_id=first["id"],
        name="WINS",
        scope="PROVIDER")
    ```

    ### 2 (Find An Application Port Profile Defined By Tenant In A VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    g1 = vcd.get_vdc_group(org="myOrg",
        name="myVDC")
    custom = vcd.get_nsxt_app_port_profile(org="my-org",
        context_id=g1.id,
        name="SSH-custom",
        scope="TENANT")
    ```

    ### 3 (Find A System Defined Application Port Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vdc1 = vcd.get_org_vdc(org="myOrg",
        name="myVDC")
    custom = vcd.get_nsxt_app_port_profile(context_id=vdc1.id,
        scope="SYSTEM",
        name="SSH")
    ```


    :param str context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated field `vdc`. Required if using more than one NSX-T Manager.
    :param str name: Unique name of existing Security Group.
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organisations.
    :param str scope: `SYSTEM`, `PROVIDER`, or `TENANT`.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
           Deprecated and replaced by `context_id`
    """
    __args__ = dict()
    __args__['contextId'] = context_id
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['org'] = org
    __args__['scope'] = scope
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile', __args__, opts=opts, typ=GetNsxtAppPortProfileResult).value

    return AwaitableGetNsxtAppPortProfileResult(
        app_ports=pulumi.get(__ret__, 'app_ports'),
        context_id=pulumi.get(__ret__, 'context_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        org=pulumi.get(__ret__, 'org'),
        scope=pulumi.get(__ret__, 'scope'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_nsxt_app_port_profile_output(context_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     name: Optional[pulumi.Input[str]] = None,
                                     nsxt_manager_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     org: Optional[pulumi.Input[Optional[str]]] = None,
                                     scope: Optional[pulumi.Input[str]] = None,
                                     vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtAppPortProfileResult]:
    """
    Supported in provider *v3.3+* and VCD 10.1+ with NSX-T backed VDCs.

    Provides a data source to read NSX-T Application Port Profiles. Application Port Profiles include a
    combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT
    services on the Edge Gateway.

    ## Example Usage

    ### 1 (Find An Application Port Profile Defined By Provider)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    custom = vcd.get_nsxt_app_port_profile(org="System",
        context_id=first["id"],
        name="WINS",
        scope="PROVIDER")
    ```

    ### 2 (Find An Application Port Profile Defined By Tenant In A VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    g1 = vcd.get_vdc_group(org="myOrg",
        name="myVDC")
    custom = vcd.get_nsxt_app_port_profile(org="my-org",
        context_id=g1.id,
        name="SSH-custom",
        scope="TENANT")
    ```

    ### 3 (Find A System Defined Application Port Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vdc1 = vcd.get_org_vdc(org="myOrg",
        name="myVDC")
    custom = vcd.get_nsxt_app_port_profile(context_id=vdc1.id,
        scope="SYSTEM",
        name="SSH")
    ```


    :param str context_id: ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated field `vdc`. Required if using more than one NSX-T Manager.
    :param str name: Unique name of existing Security Group.
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organisations.
    :param str scope: `SYSTEM`, `PROVIDER`, or `TENANT`.
    :param str vdc: The name of VDC to use, optional if defined at provider level.
           Deprecated and replaced by `context_id`
    """
    __args__ = dict()
    __args__['contextId'] = context_id
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['org'] = org
    __args__['scope'] = scope
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile', __args__, opts=opts, typ=GetNsxtAppPortProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtAppPortProfileResult(
        app_ports=pulumi.get(__response__, 'app_ports'),
        context_id=pulumi.get(__response__, 'context_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        org=pulumi.get(__response__, 'org'),
        scope=pulumi.get(__response__, 'scope'),
        vdc=pulumi.get(__response__, 'vdc')))
