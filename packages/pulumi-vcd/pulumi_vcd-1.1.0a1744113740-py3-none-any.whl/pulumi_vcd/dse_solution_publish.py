# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DseSolutionPublishArgs', 'DseSolutionPublish']

@pulumi.input_type
class DseSolutionPublishArgs:
    def __init__(__self__, *,
                 data_solution_id: pulumi.Input[str],
                 org_id: pulumi.Input[str],
                 confluent_license_key: Optional[pulumi.Input[str]] = None,
                 confluent_license_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DseSolutionPublish resource.
        :param pulumi.Input[str] data_solution_id: ID of Data Solution
        :param pulumi.Input[str] org_id: Organization ID
        :param pulumi.Input[str] confluent_license_key: Required for `Confluent Platform` Data Solution if . One of
               `confluent_license_type` is set to `With License`.
        :param pulumi.Input[str] confluent_license_type: Required for `Confluent Platform` Data Solution. One of
               `With License`, `No License`.
        """
        pulumi.set(__self__, "data_solution_id", data_solution_id)
        pulumi.set(__self__, "org_id", org_id)
        if confluent_license_key is not None:
            pulumi.set(__self__, "confluent_license_key", confluent_license_key)
        if confluent_license_type is not None:
            pulumi.set(__self__, "confluent_license_type", confluent_license_type)

    @property
    @pulumi.getter(name="dataSolutionId")
    def data_solution_id(self) -> pulumi.Input[str]:
        """
        ID of Data Solution
        """
        return pulumi.get(self, "data_solution_id")

    @data_solution_id.setter
    def data_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_solution_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        Organization ID
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="confluentLicenseKey")
    def confluent_license_key(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `Confluent Platform` Data Solution if . One of
        `confluent_license_type` is set to `With License`.
        """
        return pulumi.get(self, "confluent_license_key")

    @confluent_license_key.setter
    def confluent_license_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confluent_license_key", value)

    @property
    @pulumi.getter(name="confluentLicenseType")
    def confluent_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `Confluent Platform` Data Solution. One of
        `With License`, `No License`.
        """
        return pulumi.get(self, "confluent_license_type")

    @confluent_license_type.setter
    def confluent_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confluent_license_type", value)


@pulumi.input_type
class _DseSolutionPublishState:
    def __init__(__self__, *,
                 confluent_license_key: Optional[pulumi.Input[str]] = None,
                 confluent_license_type: Optional[pulumi.Input[str]] = None,
                 data_solution_id: Optional[pulumi.Input[str]] = None,
                 ds_org_config_id: Optional[pulumi.Input[str]] = None,
                 dso_acl_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 template_acl_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DseSolutionPublish resources.
        :param pulumi.Input[str] confluent_license_key: Required for `Confluent Platform` Data Solution if . One of
               `confluent_license_type` is set to `With License`.
        :param pulumi.Input[str] confluent_license_type: Required for `Confluent Platform` Data Solution. One of
               `With License`, `No License`.
        :param pulumi.Input[str] data_solution_id: ID of Data Solution
        :param pulumi.Input[str] ds_org_config_id: Data Solution Org Configuration ID (only available for `Confluent Platform`
               which has additional licensing configuration)
        :param pulumi.Input[str] dso_acl_id: Data Solutions Operator ACL ID
        :param pulumi.Input[str] org_id: Organization ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] template_acl_ids: A set of Data Solution Instance Template ACL IDs
        """
        if confluent_license_key is not None:
            pulumi.set(__self__, "confluent_license_key", confluent_license_key)
        if confluent_license_type is not None:
            pulumi.set(__self__, "confluent_license_type", confluent_license_type)
        if data_solution_id is not None:
            pulumi.set(__self__, "data_solution_id", data_solution_id)
        if ds_org_config_id is not None:
            pulumi.set(__self__, "ds_org_config_id", ds_org_config_id)
        if dso_acl_id is not None:
            pulumi.set(__self__, "dso_acl_id", dso_acl_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if template_acl_ids is not None:
            pulumi.set(__self__, "template_acl_ids", template_acl_ids)

    @property
    @pulumi.getter(name="confluentLicenseKey")
    def confluent_license_key(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `Confluent Platform` Data Solution if . One of
        `confluent_license_type` is set to `With License`.
        """
        return pulumi.get(self, "confluent_license_key")

    @confluent_license_key.setter
    def confluent_license_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confluent_license_key", value)

    @property
    @pulumi.getter(name="confluentLicenseType")
    def confluent_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `Confluent Platform` Data Solution. One of
        `With License`, `No License`.
        """
        return pulumi.get(self, "confluent_license_type")

    @confluent_license_type.setter
    def confluent_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confluent_license_type", value)

    @property
    @pulumi.getter(name="dataSolutionId")
    def data_solution_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of Data Solution
        """
        return pulumi.get(self, "data_solution_id")

    @data_solution_id.setter
    def data_solution_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_solution_id", value)

    @property
    @pulumi.getter(name="dsOrgConfigId")
    def ds_org_config_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data Solution Org Configuration ID (only available for `Confluent Platform`
        which has additional licensing configuration)
        """
        return pulumi.get(self, "ds_org_config_id")

    @ds_org_config_id.setter
    def ds_org_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ds_org_config_id", value)

    @property
    @pulumi.getter(name="dsoAclId")
    def dso_acl_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data Solutions Operator ACL ID
        """
        return pulumi.get(self, "dso_acl_id")

    @dso_acl_id.setter
    def dso_acl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dso_acl_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Organization ID
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="templateAclIds")
    def template_acl_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Data Solution Instance Template ACL IDs
        """
        return pulumi.get(self, "template_acl_ids")

    @template_acl_ids.setter
    def template_acl_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "template_acl_ids", value)


class DseSolutionPublish(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confluent_license_key: Optional[pulumi.Input[str]] = None,
                 confluent_license_type: Optional[pulumi.Input[str]] = None,
                 data_solution_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DseSolutionPublish resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] confluent_license_key: Required for `Confluent Platform` Data Solution if . One of
               `confluent_license_type` is set to `With License`.
        :param pulumi.Input[str] confluent_license_type: Required for `Confluent Platform` Data Solution. One of
               `With License`, `No License`.
        :param pulumi.Input[str] data_solution_id: ID of Data Solution
        :param pulumi.Input[str] org_id: Organization ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DseSolutionPublishArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DseSolutionPublish resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DseSolutionPublishArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DseSolutionPublishArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confluent_license_key: Optional[pulumi.Input[str]] = None,
                 confluent_license_type: Optional[pulumi.Input[str]] = None,
                 data_solution_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DseSolutionPublishArgs.__new__(DseSolutionPublishArgs)

            __props__.__dict__["confluent_license_key"] = confluent_license_key
            __props__.__dict__["confluent_license_type"] = confluent_license_type
            if data_solution_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_solution_id'")
            __props__.__dict__["data_solution_id"] = data_solution_id
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["ds_org_config_id"] = None
            __props__.__dict__["dso_acl_id"] = None
            __props__.__dict__["template_acl_ids"] = None
        super(DseSolutionPublish, __self__).__init__(
            'vcd:index/dseSolutionPublish:DseSolutionPublish',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            confluent_license_key: Optional[pulumi.Input[str]] = None,
            confluent_license_type: Optional[pulumi.Input[str]] = None,
            data_solution_id: Optional[pulumi.Input[str]] = None,
            ds_org_config_id: Optional[pulumi.Input[str]] = None,
            dso_acl_id: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            template_acl_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'DseSolutionPublish':
        """
        Get an existing DseSolutionPublish resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] confluent_license_key: Required for `Confluent Platform` Data Solution if . One of
               `confluent_license_type` is set to `With License`.
        :param pulumi.Input[str] confluent_license_type: Required for `Confluent Platform` Data Solution. One of
               `With License`, `No License`.
        :param pulumi.Input[str] data_solution_id: ID of Data Solution
        :param pulumi.Input[str] ds_org_config_id: Data Solution Org Configuration ID (only available for `Confluent Platform`
               which has additional licensing configuration)
        :param pulumi.Input[str] dso_acl_id: Data Solutions Operator ACL ID
        :param pulumi.Input[str] org_id: Organization ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] template_acl_ids: A set of Data Solution Instance Template ACL IDs
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DseSolutionPublishState.__new__(_DseSolutionPublishState)

        __props__.__dict__["confluent_license_key"] = confluent_license_key
        __props__.__dict__["confluent_license_type"] = confluent_license_type
        __props__.__dict__["data_solution_id"] = data_solution_id
        __props__.__dict__["ds_org_config_id"] = ds_org_config_id
        __props__.__dict__["dso_acl_id"] = dso_acl_id
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["template_acl_ids"] = template_acl_ids
        return DseSolutionPublish(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="confluentLicenseKey")
    def confluent_license_key(self) -> pulumi.Output[Optional[str]]:
        """
        Required for `Confluent Platform` Data Solution if . One of
        `confluent_license_type` is set to `With License`.
        """
        return pulumi.get(self, "confluent_license_key")

    @property
    @pulumi.getter(name="confluentLicenseType")
    def confluent_license_type(self) -> pulumi.Output[Optional[str]]:
        """
        Required for `Confluent Platform` Data Solution. One of
        `With License`, `No License`.
        """
        return pulumi.get(self, "confluent_license_type")

    @property
    @pulumi.getter(name="dataSolutionId")
    def data_solution_id(self) -> pulumi.Output[str]:
        """
        ID of Data Solution
        """
        return pulumi.get(self, "data_solution_id")

    @property
    @pulumi.getter(name="dsOrgConfigId")
    def ds_org_config_id(self) -> pulumi.Output[str]:
        """
        Data Solution Org Configuration ID (only available for `Confluent Platform`
        which has additional licensing configuration)
        """
        return pulumi.get(self, "ds_org_config_id")

    @property
    @pulumi.getter(name="dsoAclId")
    def dso_acl_id(self) -> pulumi.Output[str]:
        """
        Data Solutions Operator ACL ID
        """
        return pulumi.get(self, "dso_acl_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        Organization ID
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="templateAclIds")
    def template_acl_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of Data Solution Instance Template ACL IDs
        """
        return pulumi.get(self, "template_acl_ids")

