# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkRoutedV2Result',
    'AwaitableGetNetworkRoutedV2Result',
    'get_network_routed_v2',
    'get_network_routed_v2_output',
]

@pulumi.output_type
class GetNetworkRoutedV2Result:
    """
    A collection of values returned by getNetworkRoutedV2.
    """
    def __init__(__self__, description=None, dns1=None, dns2=None, dns_suffix=None, dual_stack_enabled=None, edge_gateway_id=None, filter=None, gateway=None, guest_vlan_allowed=None, id=None, interface_type=None, metadata=None, metadata_entries=None, name=None, org=None, owner_id=None, prefix_length=None, route_advertisement_enabled=None, secondary_gateway=None, secondary_prefix_length=None, secondary_static_ip_pools=None, static_ip_pools=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns1 and not isinstance(dns1, str):
            raise TypeError("Expected argument 'dns1' to be a str")
        pulumi.set(__self__, "dns1", dns1)
        if dns2 and not isinstance(dns2, str):
            raise TypeError("Expected argument 'dns2' to be a str")
        pulumi.set(__self__, "dns2", dns2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dual_stack_enabled and not isinstance(dual_stack_enabled, bool):
            raise TypeError("Expected argument 'dual_stack_enabled' to be a bool")
        pulumi.set(__self__, "dual_stack_enabled", dual_stack_enabled)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if guest_vlan_allowed and not isinstance(guest_vlan_allowed, bool):
            raise TypeError("Expected argument 'guest_vlan_allowed' to be a bool")
        pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if prefix_length and not isinstance(prefix_length, int):
            raise TypeError("Expected argument 'prefix_length' to be a int")
        pulumi.set(__self__, "prefix_length", prefix_length)
        if route_advertisement_enabled and not isinstance(route_advertisement_enabled, bool):
            raise TypeError("Expected argument 'route_advertisement_enabled' to be a bool")
        pulumi.set(__self__, "route_advertisement_enabled", route_advertisement_enabled)
        if secondary_gateway and not isinstance(secondary_gateway, str):
            raise TypeError("Expected argument 'secondary_gateway' to be a str")
        pulumi.set(__self__, "secondary_gateway", secondary_gateway)
        if secondary_prefix_length and not isinstance(secondary_prefix_length, str):
            raise TypeError("Expected argument 'secondary_prefix_length' to be a str")
        pulumi.set(__self__, "secondary_prefix_length", secondary_prefix_length)
        if secondary_static_ip_pools and not isinstance(secondary_static_ip_pools, list):
            raise TypeError("Expected argument 'secondary_static_ip_pools' to be a list")
        pulumi.set(__self__, "secondary_static_ip_pools", secondary_static_ip_pools)
        if static_ip_pools and not isinstance(static_ip_pools, list):
            raise TypeError("Expected argument 'static_ip_pools' to be a list")
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> bool:
        return pulumi.get(self, "dual_stack_enabled")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetNetworkRoutedV2FilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> bool:
        return pulumi.get(self, "guest_vlan_allowed")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> str:
        return pulumi.get(self, "interface_type")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetNetworkRoutedV2MetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        Parent VDC or VDC Group ID.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="routeAdvertisementEnabled")
    def route_advertisement_enabled(self) -> bool:
        return pulumi.get(self, "route_advertisement_enabled")

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> str:
        return pulumi.get(self, "secondary_gateway")

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> str:
        return pulumi.get(self, "secondary_prefix_length")

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> Sequence['outputs.GetNetworkRoutedV2SecondaryStaticIpPoolResult']:
        return pulumi.get(self, "secondary_static_ip_pools")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetNetworkRoutedV2StaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated in favor of `edge_gateway_id`. Routed networks will inherit VDC from parent Edge Gateway.""")
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNetworkRoutedV2Result(GetNetworkRoutedV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkRoutedV2Result(
            description=self.description,
            dns1=self.dns1,
            dns2=self.dns2,
            dns_suffix=self.dns_suffix,
            dual_stack_enabled=self.dual_stack_enabled,
            edge_gateway_id=self.edge_gateway_id,
            filter=self.filter,
            gateway=self.gateway,
            guest_vlan_allowed=self.guest_vlan_allowed,
            id=self.id,
            interface_type=self.interface_type,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            owner_id=self.owner_id,
            prefix_length=self.prefix_length,
            route_advertisement_enabled=self.route_advertisement_enabled,
            secondary_gateway=self.secondary_gateway,
            secondary_prefix_length=self.secondary_prefix_length,
            secondary_static_ip_pools=self.secondary_static_ip_pools,
            static_ip_pools=self.static_ip_pools,
            vdc=self.vdc)


def get_network_routed_v2(edge_gateway_id: Optional[str] = None,
                          filter: Optional[Union['GetNetworkRoutedV2FilterArgs', 'GetNetworkRoutedV2FilterArgsDict']] = None,
                          name: Optional[str] = None,
                          org: Optional[str] = None,
                          vdc: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkRoutedV2Result:
    """
    Provides a VMware Cloud Director Org VDC routed Network data source to read data or reference  existing network
    (backed by NSX-T or NSX-V).

    Supported in provider *v3.2+* for both NSX-T and NSX-V VDCs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_edgegateway(org="my-org",
        name="main-edge")
    net = vcd.get_network_routed_v2(org="my-org",
        edge_gateway_id=main.id,
        name="my-net")
    ```

    ## Filter arguments

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `ip` - (Optional) matches the IP of the resource using a regular expression.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str edge_gateway_id: Replaces `vdc` field and helps to identify exact Org
           Network
    :param Union['GetNetworkRoutedV2FilterArgs', 'GetNetworkRoutedV2FilterArgsDict'] filter: Retrieves the data source using one or more filter parameters. **Note**
           filters do not support searching for networks in VDC Groups.
    :param str name: A unique name for the network (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level. **Deprecated**
           in favor of `edge_gateway_id` field.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNetworkRoutedV2:getNetworkRoutedV2', __args__, opts=opts, typ=GetNetworkRoutedV2Result).value

    return AwaitableGetNetworkRoutedV2Result(
        description=pulumi.get(__ret__, 'description'),
        dns1=pulumi.get(__ret__, 'dns1'),
        dns2=pulumi.get(__ret__, 'dns2'),
        dns_suffix=pulumi.get(__ret__, 'dns_suffix'),
        dual_stack_enabled=pulumi.get(__ret__, 'dual_stack_enabled'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        filter=pulumi.get(__ret__, 'filter'),
        gateway=pulumi.get(__ret__, 'gateway'),
        guest_vlan_allowed=pulumi.get(__ret__, 'guest_vlan_allowed'),
        id=pulumi.get(__ret__, 'id'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        prefix_length=pulumi.get(__ret__, 'prefix_length'),
        route_advertisement_enabled=pulumi.get(__ret__, 'route_advertisement_enabled'),
        secondary_gateway=pulumi.get(__ret__, 'secondary_gateway'),
        secondary_prefix_length=pulumi.get(__ret__, 'secondary_prefix_length'),
        secondary_static_ip_pools=pulumi.get(__ret__, 'secondary_static_ip_pools'),
        static_ip_pools=pulumi.get(__ret__, 'static_ip_pools'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_network_routed_v2_output(edge_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 filter: Optional[pulumi.Input[Optional[Union['GetNetworkRoutedV2FilterArgs', 'GetNetworkRoutedV2FilterArgsDict']]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 org: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkRoutedV2Result]:
    """
    Provides a VMware Cloud Director Org VDC routed Network data source to read data or reference  existing network
    (backed by NSX-T or NSX-V).

    Supported in provider *v3.2+* for both NSX-T and NSX-V VDCs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_edgegateway(org="my-org",
        name="main-edge")
    net = vcd.get_network_routed_v2(org="my-org",
        edge_gateway_id=main.id,
        name="my-net")
    ```

    ## Filter arguments

    * `name_regex` - (Optional) matches the name using a regular expression.
    * `ip` - (Optional) matches the IP of the resource using a regular expression.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param str edge_gateway_id: Replaces `vdc` field and helps to identify exact Org
           Network
    :param Union['GetNetworkRoutedV2FilterArgs', 'GetNetworkRoutedV2FilterArgsDict'] filter: Retrieves the data source using one or more filter parameters. **Note**
           filters do not support searching for networks in VDC Groups.
    :param str name: A unique name for the network (optional when `filter` is used)
    :param str org: The name of organization to use, optional if defined at provider level
    :param str vdc: The name of VDC to use, optional if defined at provider level. **Deprecated**
           in favor of `edge_gateway_id` field.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNetworkRoutedV2:getNetworkRoutedV2', __args__, opts=opts, typ=GetNetworkRoutedV2Result)
    return __ret__.apply(lambda __response__: GetNetworkRoutedV2Result(
        description=pulumi.get(__response__, 'description'),
        dns1=pulumi.get(__response__, 'dns1'),
        dns2=pulumi.get(__response__, 'dns2'),
        dns_suffix=pulumi.get(__response__, 'dns_suffix'),
        dual_stack_enabled=pulumi.get(__response__, 'dual_stack_enabled'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        filter=pulumi.get(__response__, 'filter'),
        gateway=pulumi.get(__response__, 'gateway'),
        guest_vlan_allowed=pulumi.get(__response__, 'guest_vlan_allowed'),
        id=pulumi.get(__response__, 'id'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        prefix_length=pulumi.get(__response__, 'prefix_length'),
        route_advertisement_enabled=pulumi.get(__response__, 'route_advertisement_enabled'),
        secondary_gateway=pulumi.get(__response__, 'secondary_gateway'),
        secondary_prefix_length=pulumi.get(__response__, 'secondary_prefix_length'),
        secondary_static_ip_pools=pulumi.get(__response__, 'secondary_static_ip_pools'),
        static_ip_pools=pulumi.get(__response__, 'static_ip_pools'),
        vdc=pulumi.get(__response__, 'vdc')))
