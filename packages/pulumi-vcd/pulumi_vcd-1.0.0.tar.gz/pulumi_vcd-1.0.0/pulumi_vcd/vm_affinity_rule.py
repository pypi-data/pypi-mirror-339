# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VmAffinityRuleArgs', 'VmAffinityRule']

@pulumi.input_type
class VmAffinityRuleArgs:
    def __init__(__self__, *,
                 polarity: pulumi.Input[str],
                 vm_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VmAffinityRule resource.
        :param pulumi.Input[str] polarity: One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
               need to change polarity, we need to remove the rule and create a new one.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        :param pulumi.Input[bool] enabled: True if this affinity rule is enabled. The default is `true`
        :param pulumi.Input[str] name: The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
               the rule (as data source or when importing) only if it is unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[bool] required: True if this affinity rule is required. When a rule is mandatory, a host failover will not 
               power on the VM if doing so would violate the rule. The default is `true`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "polarity", polarity)
        pulumi.set(__self__, "vm_ids", vm_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def polarity(self) -> pulumi.Input[str]:
        """
        One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
        need to change polarity, we need to remove the rule and create a new one.
        """
        return pulumi.get(self, "polarity")

    @polarity.setter
    def polarity(self, value: pulumi.Input[str]):
        pulumi.set(self, "polarity", value)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vm_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this affinity rule is enabled. The default is `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
        the rule (as data source or when importing) only if it is unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this affinity rule is required. When a rule is mandatory, a host failover will not 
        power on the VM if doing so would violate the rule. The default is `true`
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _VmAffinityRuleState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 polarity: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering VmAffinityRule resources.
        :param pulumi.Input[bool] enabled: True if this affinity rule is enabled. The default is `true`
        :param pulumi.Input[str] name: The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
               the rule (as data source or when importing) only if it is unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[str] polarity: One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
               need to change polarity, we need to remove the rule and create a new one.
        :param pulumi.Input[bool] required: True if this affinity rule is required. When a rule is mandatory, a host failover will not 
               power on the VM if doing so would violate the rule. The default is `true`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if polarity is not None:
            pulumi.set(__self__, "polarity", polarity)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this affinity rule is enabled. The default is `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
        the rule (as data source or when importing) only if it is unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def polarity(self) -> Optional[pulumi.Input[str]]:
        """
        One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
        need to change polarity, we need to remove the rule and create a new one.
        """
        return pulumi.get(self, "polarity")

    @polarity.setter
    def polarity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polarity", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this affinity rule is required. When a rule is mandatory, a host failover will not 
        power on the VM if doing so would violate the rule. The default is `true`
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_ids", value)


class VmAffinityRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 polarity: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a VmAffinityRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: True if this affinity rule is enabled. The default is `true`
        :param pulumi.Input[str] name: The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
               the rule (as data source or when importing) only if it is unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[str] polarity: One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
               need to change polarity, we need to remove the rule and create a new one.
        :param pulumi.Input[bool] required: True if this affinity rule is required. When a rule is mandatory, a host failover will not 
               power on the VM if doing so would violate the rule. The default is `true`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmAffinityRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmAffinityRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmAffinityRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmAffinityRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 polarity: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmAffinityRuleArgs.__new__(VmAffinityRuleArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if polarity is None and not opts.urn:
                raise TypeError("Missing required property 'polarity'")
            __props__.__dict__["polarity"] = polarity
            __props__.__dict__["required"] = required
            __props__.__dict__["vdc"] = vdc
            if vm_ids is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ids'")
            __props__.__dict__["vm_ids"] = vm_ids
        super(VmAffinityRule, __self__).__init__(
            'vcd:index/vmAffinityRule:VmAffinityRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            polarity: Optional[pulumi.Input[str]] = None,
            required: Optional[pulumi.Input[bool]] = None,
            vdc: Optional[pulumi.Input[str]] = None,
            vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'VmAffinityRule':
        """
        Get an existing VmAffinityRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: True if this affinity rule is enabled. The default is `true`
        :param pulumi.Input[str] name: The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
               the rule (as data source or when importing) only if it is unique.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        :param pulumi.Input[str] polarity: One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
               need to change polarity, we need to remove the rule and create a new one.
        :param pulumi.Input[bool] required: True if this affinity rule is required. When a rule is mandatory, a host failover will not 
               power on the VM if doing so would violate the rule. The default is `true`
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_ids: A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmAffinityRuleState.__new__(_VmAffinityRuleState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["polarity"] = polarity
        __props__.__dict__["required"] = required
        __props__.__dict__["vdc"] = vdc
        __props__.__dict__["vm_ids"] = vm_ids
        return VmAffinityRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this affinity rule is enabled. The default is `true`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
        the rule (as data source or when importing) only if it is unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def polarity(self) -> pulumi.Output[str]:
        """
        One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
        need to change polarity, we need to remove the rule and create a new one.
        """
        return pulumi.get(self, "polarity")

    @property
    @pulumi.getter
    def required(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this affinity rule is required. When a rule is mandatory, a host failover will not 
        power on the VM if doing so would violate the rule. The default is `true`
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        """
        return pulumi.get(self, "vm_ids")

