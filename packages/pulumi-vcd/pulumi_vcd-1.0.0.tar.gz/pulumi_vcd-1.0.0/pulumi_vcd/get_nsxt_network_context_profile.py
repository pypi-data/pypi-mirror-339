# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtNetworkContextProfileResult',
    'AwaitableGetNsxtNetworkContextProfileResult',
    'get_nsxt_network_context_profile',
    'get_nsxt_network_context_profile_output',
]

@pulumi.output_type
class GetNsxtNetworkContextProfileResult:
    """
    A collection of values returned by getNsxtNetworkContextProfile.
    """
    def __init__(__self__, context_id=None, id=None, name=None, scope=None):
        if context_id and not isinstance(context_id, str):
            raise TypeError("Expected argument 'context_id' to be a str")
        pulumi.set(__self__, "context_id", context_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> str:
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


class AwaitableGetNsxtNetworkContextProfileResult(GetNsxtNetworkContextProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtNetworkContextProfileResult(
            context_id=self.context_id,
            id=self.id,
            name=self.name,
            scope=self.scope)


def get_nsxt_network_context_profile(context_id: Optional[str] = None,
                                     name: Optional[str] = None,
                                     scope: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtNetworkContextProfileResult:
    """
    Provides a data source for NSX-T Network Context Profile lookup to later be used in Distributed
    Firewall.

    ## Example Usage

    ### SYSTEM Scope Network Context Profile Lookup In A VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_vdc_group(org="my-org",
        name="main-vdc-group")
    cp1 = vcd.get_nsxt_network_context_profile(context_id=existing.id,
        name="CTRXICA",
        scope="SYSTEM")
    ```

    ### SYSTEM Profile Lookup In An NSX-T Manager)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_manager(name="first-nsxt-manager")
    p = vcd.get_nsxt_network_context_profile(context_id=main.id,
        name="CTRXICA",
        scope="SYSTEM")
    ```


    :param str context_id: Context ID specifies the context for Network Context Profile look up.
           This ID can be one of `VDC Group ID` (data source `VdcGroup`), `Org VDC ID` (data source
           `OrgVdc`), or `NSX-T Manager ID` (data source `get_nsxt_manager`)
    :param str name: Name of Network Context Profile
    :param str scope: Can be one of `SYSTEM`, `TENANT`, `PROVIDER`. (default `SYSTEM`)
    """
    __args__ = dict()
    __args__['contextId'] = context_id
    __args__['name'] = name
    __args__['scope'] = scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtNetworkContextProfile:getNsxtNetworkContextProfile', __args__, opts=opts, typ=GetNsxtNetworkContextProfileResult).value

    return AwaitableGetNsxtNetworkContextProfileResult(
        context_id=pulumi.get(__ret__, 'context_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        scope=pulumi.get(__ret__, 'scope'))
def get_nsxt_network_context_profile_output(context_id: Optional[pulumi.Input[str]] = None,
                                            name: Optional[pulumi.Input[str]] = None,
                                            scope: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtNetworkContextProfileResult]:
    """
    Provides a data source for NSX-T Network Context Profile lookup to later be used in Distributed
    Firewall.

    ## Example Usage

    ### SYSTEM Scope Network Context Profile Lookup In A VDC Group)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing = vcd.get_vdc_group(org="my-org",
        name="main-vdc-group")
    cp1 = vcd.get_nsxt_network_context_profile(context_id=existing.id,
        name="CTRXICA",
        scope="SYSTEM")
    ```

    ### SYSTEM Profile Lookup In An NSX-T Manager)
    ```python
    import pulumi
    import pulumi_vcd as vcd

    main = vcd.get_nsxt_manager(name="first-nsxt-manager")
    p = vcd.get_nsxt_network_context_profile(context_id=main.id,
        name="CTRXICA",
        scope="SYSTEM")
    ```


    :param str context_id: Context ID specifies the context for Network Context Profile look up.
           This ID can be one of `VDC Group ID` (data source `VdcGroup`), `Org VDC ID` (data source
           `OrgVdc`), or `NSX-T Manager ID` (data source `get_nsxt_manager`)
    :param str name: Name of Network Context Profile
    :param str scope: Can be one of `SYSTEM`, `TENANT`, `PROVIDER`. (default `SYSTEM`)
    """
    __args__ = dict()
    __args__['contextId'] = context_id
    __args__['name'] = name
    __args__['scope'] = scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtNetworkContextProfile:getNsxtNetworkContextProfile', __args__, opts=opts, typ=GetNsxtNetworkContextProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtNetworkContextProfileResult(
        context_id=pulumi.get(__response__, 'context_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        scope=pulumi.get(__response__, 'scope')))
