# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxvFirewallRuleArgs', 'NsxvFirewallRule']

@pulumi.input_type
class NsxvFirewallRuleArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['NsxvFirewallRuleDestinationArgs'],
                 edge_gateway: pulumi.Input[str],
                 services: pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]],
                 source: pulumi.Input['NsxvFirewallRuleSourceArgs'],
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxvFirewallRule resource.
        :param pulumi.Input['NsxvFirewallRuleDestinationArgs'] destination: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the firewall rule.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]] services: One or more blocks to define protocol and port details. Use multiple blocks
               if you want to define multiple port/protocol combinations for the same rule. See
               Service and example for usage details.
               
               
               <a id="endpoint"></a>
        :param pulumi.Input['NsxvFirewallRuleSourceArgs'] source: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] above_rule_id: This can be used to alter default rule placement order. By default
               every rule is appended to the end of firewall rule list. When a value of another rule is set - this
               rule will be placed above the specified rule.
        :param pulumi.Input[str] action: Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] name: Free text name. Can be duplicate.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "source", source)
        if above_rule_id is not None:
            pulumi.set(__self__, "above_rule_id", above_rule_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['NsxvFirewallRuleDestinationArgs']:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['NsxvFirewallRuleDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which to apply the firewall rule.
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]]:
        """
        One or more blocks to define protocol and port details. Use multiple blocks
        if you want to define multiple port/protocol combinations for the same rule. See
        Service and example for usage details.


        <a id="endpoint"></a>
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['NsxvFirewallRuleSourceArgs']:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['NsxvFirewallRuleSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        This can be used to alter default rule placement order. By default
        every rule is appended to the end of firewall rule list. When a value of another rule is set - this
        rule will be placed above the specified rule.
        """
        return pulumi.get(self, "above_rule_id")

    @above_rule_id.setter
    def above_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "above_rule_id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free text name. Can be duplicate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[int]]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxvFirewallRuleState:
    def __init__(__self__, *,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input['NsxvFirewallRuleDestinationArgs']] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]]] = None,
                 source: Optional[pulumi.Input['NsxvFirewallRuleSourceArgs']] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxvFirewallRule resources.
        :param pulumi.Input[str] above_rule_id: This can be used to alter default rule placement order. By default
               every rule is appended to the end of firewall rule list. When a value of another rule is set - this
               rule will be placed above the specified rule.
        :param pulumi.Input[str] action: Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        :param pulumi.Input['NsxvFirewallRuleDestinationArgs'] destination: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the firewall rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] name: Free text name. Can be duplicate.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]] services: One or more blocks to define protocol and port details. Use multiple blocks
               if you want to define multiple port/protocol combinations for the same rule. See
               Service and example for usage details.
               
               
               <a id="endpoint"></a>
        :param pulumi.Input['NsxvFirewallRuleSourceArgs'] source: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        if above_rule_id is not None:
            pulumi.set(__self__, "above_rule_id", above_rule_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        This can be used to alter default rule placement order. By default
        every rule is appended to the end of firewall rule list. When a value of another rule is set - this
        rule will be placed above the specified rule.
        """
        return pulumi.get(self, "above_rule_id")

    @above_rule_id.setter
    def above_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "above_rule_id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['NsxvFirewallRuleDestinationArgs']]:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['NsxvFirewallRuleDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which to apply the firewall rule.
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free text name. Can be duplicate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[int]]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]]]:
        """
        One or more blocks to define protocol and port details. Use multiple blocks
        if you want to define multiple port/protocol combinations for the same rule. See
        Service and example for usage details.


        <a id="endpoint"></a>
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvFirewallRuleServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['NsxvFirewallRuleSourceArgs']]:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['NsxvFirewallRuleSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxvFirewallRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[Union['NsxvFirewallRuleDestinationArgs', 'NsxvFirewallRuleDestinationArgsDict']]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvFirewallRuleServiceArgs', 'NsxvFirewallRuleServiceArgsDict']]]]] = None,
                 source: Optional[pulumi.Input[Union['NsxvFirewallRuleSourceArgs', 'NsxvFirewallRuleSourceArgsDict']]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxvFirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] above_rule_id: This can be used to alter default rule placement order. By default
               every rule is appended to the end of firewall rule list. When a value of another rule is set - this
               rule will be placed above the specified rule.
        :param pulumi.Input[str] action: Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        :param pulumi.Input[Union['NsxvFirewallRuleDestinationArgs', 'NsxvFirewallRuleDestinationArgsDict']] destination: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the firewall rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] name: Free text name. Can be duplicate.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxvFirewallRuleServiceArgs', 'NsxvFirewallRuleServiceArgsDict']]]] services: One or more blocks to define protocol and port details. Use multiple blocks
               if you want to define multiple port/protocol combinations for the same rule. See
               Service and example for usage details.
               
               
               <a id="endpoint"></a>
        :param pulumi.Input[Union['NsxvFirewallRuleSourceArgs', 'NsxvFirewallRuleSourceArgsDict']] source: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxvFirewallRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxvFirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxvFirewallRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxvFirewallRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 above_rule_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[Union['NsxvFirewallRuleDestinationArgs', 'NsxvFirewallRuleDestinationArgsDict']]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logging_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[int]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvFirewallRuleServiceArgs', 'NsxvFirewallRuleServiceArgsDict']]]]] = None,
                 source: Optional[pulumi.Input[Union['NsxvFirewallRuleSourceArgs', 'NsxvFirewallRuleSourceArgsDict']]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxvFirewallRuleArgs.__new__(NsxvFirewallRuleArgs)

            __props__.__dict__["above_rule_id"] = above_rule_id
            __props__.__dict__["action"] = action
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["logging_enabled"] = logging_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["rule_tag"] = rule_tag
            __props__.__dict__["rule_type"] = rule_type
            if services is None and not opts.urn:
                raise TypeError("Missing required property 'services'")
            __props__.__dict__["services"] = services
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["vdc"] = vdc
        super(NsxvFirewallRule, __self__).__init__(
            'vcd:index/nsxvFirewallRule:NsxvFirewallRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            above_rule_id: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[Union['NsxvFirewallRuleDestinationArgs', 'NsxvFirewallRuleDestinationArgsDict']]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            logging_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            rule_tag: Optional[pulumi.Input[int]] = None,
            rule_type: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvFirewallRuleServiceArgs', 'NsxvFirewallRuleServiceArgsDict']]]]] = None,
            source: Optional[pulumi.Input[Union['NsxvFirewallRuleSourceArgs', 'NsxvFirewallRuleSourceArgsDict']]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxvFirewallRule':
        """
        Get an existing NsxvFirewallRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] above_rule_id: This can be used to alter default rule placement order. By default
               every rule is appended to the end of firewall rule list. When a value of another rule is set - this
               rule will be placed above the specified rule.
        :param pulumi.Input[str] action: Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        :param pulumi.Input[Union['NsxvFirewallRuleDestinationArgs', 'NsxvFirewallRuleDestinationArgsDict']] destination: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the firewall rule.
        :param pulumi.Input[bool] enabled: Defines if the rule is enabaled. Default `true`.
        :param pulumi.Input[bool] logging_enabled: Defines if the logging for this rule is enabaled. Default `false`.
        :param pulumi.Input[str] name: Free text name. Can be duplicate.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[int] rule_tag: This can be used to specify user-controlled rule tag. If not specified,
               it will report rule ID after creation. Must be between 65537-131072.
        :param pulumi.Input[str] rule_type: Possible values - `user`, `internal_high`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxvFirewallRuleServiceArgs', 'NsxvFirewallRuleServiceArgsDict']]]] services: One or more blocks to define protocol and port details. Use multiple blocks
               if you want to define multiple port/protocol combinations for the same rule. See
               Service and example for usage details.
               
               
               <a id="endpoint"></a>
        :param pulumi.Input[Union['NsxvFirewallRuleSourceArgs', 'NsxvFirewallRuleSourceArgsDict']] source: Exactly one block to define source criteria for firewall. See
               Endpoint and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxvFirewallRuleState.__new__(_NsxvFirewallRuleState)

        __props__.__dict__["above_rule_id"] = above_rule_id
        __props__.__dict__["action"] = action
        __props__.__dict__["destination"] = destination
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["logging_enabled"] = logging_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["rule_tag"] = rule_tag
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["services"] = services
        __props__.__dict__["source"] = source
        __props__.__dict__["vdc"] = vdc
        return NsxvFirewallRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aboveRuleId")
    def above_rule_id(self) -> pulumi.Output[Optional[str]]:
        """
        This can be used to alter default rule placement order. By default
        every rule is appended to the end of firewall rule list. When a value of another rule is set - this
        rule will be placed above the specified rule.
        """
        return pulumi.get(self, "above_rule_id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        Defines if the rule is set to `accept` or `deny` traffic. Default `accept`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output['outputs.NsxvFirewallRuleDestination']:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which to apply the firewall rule.
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the rule is enabaled. Default `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if the logging for this rule is enabaled. Default `false`.
        """
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Free text name. Can be duplicate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> pulumi.Output[int]:
        """
        This can be used to specify user-controlled rule tag. If not specified,
        it will report rule ID after creation. Must be between 65537-131072.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[str]:
        """
        Possible values - `user`, `internal_high`.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Sequence['outputs.NsxvFirewallRuleService']]:
        """
        One or more blocks to define protocol and port details. Use multiple blocks
        if you want to define multiple port/protocol combinations for the same rule. See
        Service and example for usage details.


        <a id="endpoint"></a>
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.NsxvFirewallRuleSource']:
        """
        Exactly one block to define source criteria for firewall. See
        Endpoint and example for usage details.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level.
        """
        return pulumi.get(self, "vdc")

