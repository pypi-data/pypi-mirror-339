# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNetworkPoolResult',
    'AwaitableGetNetworkPoolResult',
    'get_network_pool',
    'get_network_pool_output',
]

@pulumi.output_type
class GetNetworkPoolResult:
    """
    A collection of values returned by getNetworkPool.
    """
    def __init__(__self__, backings=None, description=None, id=None, name=None, network_provider_id=None, network_provider_name=None, network_provider_type=None, promiscuous_mode=None, status=None, total_backings_count=None, type=None, used_backings_count=None):
        if backings and not isinstance(backings, list):
            raise TypeError("Expected argument 'backings' to be a list")
        pulumi.set(__self__, "backings", backings)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_provider_id and not isinstance(network_provider_id, str):
            raise TypeError("Expected argument 'network_provider_id' to be a str")
        pulumi.set(__self__, "network_provider_id", network_provider_id)
        if network_provider_name and not isinstance(network_provider_name, str):
            raise TypeError("Expected argument 'network_provider_name' to be a str")
        pulumi.set(__self__, "network_provider_name", network_provider_name)
        if network_provider_type and not isinstance(network_provider_type, str):
            raise TypeError("Expected argument 'network_provider_type' to be a str")
        pulumi.set(__self__, "network_provider_type", network_provider_type)
        if promiscuous_mode and not isinstance(promiscuous_mode, bool):
            raise TypeError("Expected argument 'promiscuous_mode' to be a bool")
        pulumi.set(__self__, "promiscuous_mode", promiscuous_mode)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_backings_count and not isinstance(total_backings_count, int):
            raise TypeError("Expected argument 'total_backings_count' to be a int")
        pulumi.set(__self__, "total_backings_count", total_backings_count)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if used_backings_count and not isinstance(used_backings_count, int):
            raise TypeError("Expected argument 'used_backings_count' to be a int")
        pulumi.set(__self__, "used_backings_count", used_backings_count)

    @property
    @pulumi.getter
    def backings(self) -> Sequence['outputs.GetNetworkPoolBackingResult']:
        return pulumi.get(self, "backings")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkProviderId")
    def network_provider_id(self) -> str:
        return pulumi.get(self, "network_provider_id")

    @property
    @pulumi.getter(name="networkProviderName")
    def network_provider_name(self) -> str:
        return pulumi.get(self, "network_provider_name")

    @property
    @pulumi.getter(name="networkProviderType")
    def network_provider_type(self) -> str:
        return pulumi.get(self, "network_provider_type")

    @property
    @pulumi.getter(name="promiscuousMode")
    def promiscuous_mode(self) -> bool:
        return pulumi.get(self, "promiscuous_mode")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalBackingsCount")
    def total_backings_count(self) -> int:
        return pulumi.get(self, "total_backings_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBackingsCount")
    def used_backings_count(self) -> int:
        return pulumi.get(self, "used_backings_count")


class AwaitableGetNetworkPoolResult(GetNetworkPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkPoolResult(
            backings=self.backings,
            description=self.description,
            id=self.id,
            name=self.name,
            network_provider_id=self.network_provider_id,
            network_provider_name=self.network_provider_name,
            network_provider_type=self.network_provider_type,
            promiscuous_mode=self.promiscuous_mode,
            status=self.status,
            total_backings_count=self.total_backings_count,
            type=self.type,
            used_backings_count=self.used_backings_count)


def get_network_pool(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkPoolResult:
    """
    Provides a data source for a network pool attached to a VCD.

    Supported in provider *v3.10+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    np1 = vcd.get_network_pool(name="NSX-T Overlay 1")
    ```


    :param str name: network pool name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNetworkPool:getNetworkPool', __args__, opts=opts, typ=GetNetworkPoolResult).value

    return AwaitableGetNetworkPoolResult(
        backings=pulumi.get(__ret__, 'backings'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_provider_id=pulumi.get(__ret__, 'network_provider_id'),
        network_provider_name=pulumi.get(__ret__, 'network_provider_name'),
        network_provider_type=pulumi.get(__ret__, 'network_provider_type'),
        promiscuous_mode=pulumi.get(__ret__, 'promiscuous_mode'),
        status=pulumi.get(__ret__, 'status'),
        total_backings_count=pulumi.get(__ret__, 'total_backings_count'),
        type=pulumi.get(__ret__, 'type'),
        used_backings_count=pulumi.get(__ret__, 'used_backings_count'))
def get_network_pool_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkPoolResult]:
    """
    Provides a data source for a network pool attached to a VCD.

    Supported in provider *v3.10+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    np1 = vcd.get_network_pool(name="NSX-T Overlay 1")
    ```


    :param str name: network pool name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNetworkPool:getNetworkPool', __args__, opts=opts, typ=GetNetworkPoolResult)
    return __ret__.apply(lambda __response__: GetNetworkPoolResult(
        backings=pulumi.get(__response__, 'backings'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_provider_id=pulumi.get(__response__, 'network_provider_id'),
        network_provider_name=pulumi.get(__response__, 'network_provider_name'),
        network_provider_type=pulumi.get(__response__, 'network_provider_type'),
        promiscuous_mode=pulumi.get(__response__, 'promiscuous_mode'),
        status=pulumi.get(__response__, 'status'),
        total_backings_count=pulumi.get(__response__, 'total_backings_count'),
        type=pulumi.get(__response__, 'type'),
        used_backings_count=pulumi.get(__response__, 'used_backings_count')))
