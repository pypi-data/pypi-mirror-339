# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVappResult',
    'AwaitableGetVappResult',
    'get_vapp',
    'get_vapp_output',
]

@pulumi.output_type
class GetVappResult:
    """
    A collection of values returned by getVapp.
    """
    def __init__(__self__, description=None, guest_properties=None, href=None, id=None, inherited_metadata=None, leases=None, metadata=None, metadata_entries=None, name=None, org=None, status=None, status_text=None, vapp_network_names=None, vapp_org_network_names=None, vdc=None, vm_names=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if guest_properties and not isinstance(guest_properties, dict):
            raise TypeError("Expected argument 'guest_properties' to be a dict")
        pulumi.set(__self__, "guest_properties", guest_properties)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inherited_metadata and not isinstance(inherited_metadata, dict):
            raise TypeError("Expected argument 'inherited_metadata' to be a dict")
        pulumi.set(__self__, "inherited_metadata", inherited_metadata)
        if leases and not isinstance(leases, list):
            raise TypeError("Expected argument 'leases' to be a list")
        pulumi.set(__self__, "leases", leases)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if status_text and not isinstance(status_text, str):
            raise TypeError("Expected argument 'status_text' to be a str")
        pulumi.set(__self__, "status_text", status_text)
        if vapp_network_names and not isinstance(vapp_network_names, list):
            raise TypeError("Expected argument 'vapp_network_names' to be a list")
        pulumi.set(__self__, "vapp_network_names", vapp_network_names)
        if vapp_org_network_names and not isinstance(vapp_org_network_names, list):
            raise TypeError("Expected argument 'vapp_org_network_names' to be a list")
        pulumi.set(__self__, "vapp_org_network_names", vapp_org_network_names)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)
        if vm_names and not isinstance(vm_names, list):
            raise TypeError("Expected argument 'vm_names' to be a list")
        pulumi.set(__self__, "vm_names", vm_names)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description for the vApp
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Mapping[str, str]:
        """
        Key value map of vApp guest properties.
        """
        return pulumi.get(self, "guest_properties")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The vApp Hyper Reference
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritedMetadata")
    def inherited_metadata(self) -> Mapping[str, str]:
        """
        (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        """
        return pulumi.get(self, "inherited_metadata")

    @property
    @pulumi.getter
    def leases(self) -> Sequence['outputs.GetVappLeaseResult']:
        """
        (*v3.5+*) - The information about the vApp lease. It includes the following fields:
        """
        return pulumi.get(self, "leases")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        """
        (Deprecated) Use `metadata_entry` instead. Key value map of metadata assigned to this vApp. Key and value can be any string.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetVappMetadataEntryResult']:
        """
        A set of metadata entries assigned to this vApp. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The vApp status as a numeric code
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> str:
        """
        The vApp status as text.
        """
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter(name="vappNetworkNames")
    def vapp_network_names(self) -> Sequence[str]:
        """
        (*3.13.0+*) A list of vApp network names included in this vApp
        """
        return pulumi.get(self, "vapp_network_names")

    @property
    @pulumi.getter(name="vappOrgNetworkNames")
    def vapp_org_network_names(self) -> Sequence[str]:
        """
        (*v3.13.0+*) A list of vApp Org network names included in this vApp
        """
        return pulumi.get(self, "vapp_org_network_names")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> Sequence[str]:
        """
        (*v3.13.0+*) A list of VM names included in this vApp
        """
        return pulumi.get(self, "vm_names")


class AwaitableGetVappResult(GetVappResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVappResult(
            description=self.description,
            guest_properties=self.guest_properties,
            href=self.href,
            id=self.id,
            inherited_metadata=self.inherited_metadata,
            leases=self.leases,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            status=self.status,
            status_text=self.status_text,
            vapp_network_names=self.vapp_network_names,
            vapp_org_network_names=self.vapp_org_network_names,
            vdc=self.vdc,
            vm_names=self.vm_names)


def get_vapp(name: Optional[str] = None,
             org: Optional[str] = None,
             vdc: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVappResult:
    """
    Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    test_tf = vcd.get_vapp(name="test-tf",
        org="tf",
        vdc="vdc-tf")
    pulumi.export("id", test_tf.id)
    pulumi.export("name", test_tf.name)
    pulumi.export("description", test_tf.description)
    pulumi.export("href", test_tf.href)
    pulumi.export("statusText", test_tf.status_text)
    ```

    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.


    :param str name: A unique name for the vApp
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVapp:getVapp', __args__, opts=opts, typ=GetVappResult).value

    return AwaitableGetVappResult(
        description=pulumi.get(__ret__, 'description'),
        guest_properties=pulumi.get(__ret__, 'guest_properties'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        inherited_metadata=pulumi.get(__ret__, 'inherited_metadata'),
        leases=pulumi.get(__ret__, 'leases'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        status=pulumi.get(__ret__, 'status'),
        status_text=pulumi.get(__ret__, 'status_text'),
        vapp_network_names=pulumi.get(__ret__, 'vapp_network_names'),
        vapp_org_network_names=pulumi.get(__ret__, 'vapp_org_network_names'),
        vdc=pulumi.get(__ret__, 'vdc'),
        vm_names=pulumi.get(__ret__, 'vm_names'))
def get_vapp_output(name: Optional[pulumi.Input[str]] = None,
                    org: Optional[pulumi.Input[Optional[str]]] = None,
                    vdc: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVappResult]:
    """
    Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    test_tf = vcd.get_vapp(name="test-tf",
        org="tf",
        vdc="vdc-tf")
    pulumi.export("id", test_tf.id)
    pulumi.export("name", test_tf.name)
    pulumi.export("description", test_tf.description)
    pulumi.export("href", test_tf.href)
    pulumi.export("statusText", test_tf.status_text)
    ```

    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.


    :param str name: A unique name for the vApp
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVapp:getVapp', __args__, opts=opts, typ=GetVappResult)
    return __ret__.apply(lambda __response__: GetVappResult(
        description=pulumi.get(__response__, 'description'),
        guest_properties=pulumi.get(__response__, 'guest_properties'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        inherited_metadata=pulumi.get(__response__, 'inherited_metadata'),
        leases=pulumi.get(__response__, 'leases'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        status=pulumi.get(__response__, 'status'),
        status_text=pulumi.get(__response__, 'status_text'),
        vapp_network_names=pulumi.get(__response__, 'vapp_network_names'),
        vapp_org_network_names=pulumi.get(__response__, 'vapp_org_network_names'),
        vdc=pulumi.get(__response__, 'vdc'),
        vm_names=pulumi.get(__response__, 'vm_names')))
