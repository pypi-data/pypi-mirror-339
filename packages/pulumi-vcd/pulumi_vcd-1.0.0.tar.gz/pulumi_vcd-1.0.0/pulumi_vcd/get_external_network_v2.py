# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetExternalNetworkV2Result',
    'AwaitableGetExternalNetworkV2Result',
    'get_external_network_v2',
    'get_external_network_v2_output',
]

@pulumi.output_type
class GetExternalNetworkV2Result:
    """
    A collection of values returned by getExternalNetworkV2.
    """
    def __init__(__self__, dedicated_org_id=None, description=None, id=None, ip_scopes=None, name=None, nat_and_firewall_service_intention=None, nsxt_networks=None, route_advertisement_intention=None, use_ip_spaces=None, vsphere_networks=None):
        if dedicated_org_id and not isinstance(dedicated_org_id, str):
            raise TypeError("Expected argument 'dedicated_org_id' to be a str")
        pulumi.set(__self__, "dedicated_org_id", dedicated_org_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_scopes and not isinstance(ip_scopes, list):
            raise TypeError("Expected argument 'ip_scopes' to be a list")
        pulumi.set(__self__, "ip_scopes", ip_scopes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat_and_firewall_service_intention and not isinstance(nat_and_firewall_service_intention, str):
            raise TypeError("Expected argument 'nat_and_firewall_service_intention' to be a str")
        pulumi.set(__self__, "nat_and_firewall_service_intention", nat_and_firewall_service_intention)
        if nsxt_networks and not isinstance(nsxt_networks, list):
            raise TypeError("Expected argument 'nsxt_networks' to be a list")
        pulumi.set(__self__, "nsxt_networks", nsxt_networks)
        if route_advertisement_intention and not isinstance(route_advertisement_intention, str):
            raise TypeError("Expected argument 'route_advertisement_intention' to be a str")
        pulumi.set(__self__, "route_advertisement_intention", route_advertisement_intention)
        if use_ip_spaces and not isinstance(use_ip_spaces, bool):
            raise TypeError("Expected argument 'use_ip_spaces' to be a bool")
        pulumi.set(__self__, "use_ip_spaces", use_ip_spaces)
        if vsphere_networks and not isinstance(vsphere_networks, list):
            raise TypeError("Expected argument 'vsphere_networks' to be a list")
        pulumi.set(__self__, "vsphere_networks", vsphere_networks)

    @property
    @pulumi.getter(name="dedicatedOrgId")
    def dedicated_org_id(self) -> str:
        return pulumi.get(self, "dedicated_org_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> Sequence['outputs.GetExternalNetworkV2IpScopeResult']:
        return pulumi.get(self, "ip_scopes")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natAndFirewallServiceIntention")
    def nat_and_firewall_service_intention(self) -> str:
        return pulumi.get(self, "nat_and_firewall_service_intention")

    @property
    @pulumi.getter(name="nsxtNetworks")
    def nsxt_networks(self) -> Sequence['outputs.GetExternalNetworkV2NsxtNetworkResult']:
        return pulumi.get(self, "nsxt_networks")

    @property
    @pulumi.getter(name="routeAdvertisementIntention")
    def route_advertisement_intention(self) -> str:
        return pulumi.get(self, "route_advertisement_intention")

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> bool:
        return pulumi.get(self, "use_ip_spaces")

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> Sequence['outputs.GetExternalNetworkV2VsphereNetworkResult']:
        return pulumi.get(self, "vsphere_networks")


class AwaitableGetExternalNetworkV2Result(GetExternalNetworkV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalNetworkV2Result(
            dedicated_org_id=self.dedicated_org_id,
            description=self.description,
            id=self.id,
            ip_scopes=self.ip_scopes,
            name=self.name,
            nat_and_firewall_service_intention=self.nat_and_firewall_service_intention,
            nsxt_networks=self.nsxt_networks,
            route_advertisement_intention=self.route_advertisement_intention,
            use_ip_spaces=self.use_ip_spaces,
            vsphere_networks=self.vsphere_networks)


def get_external_network_v2(name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalNetworkV2Result:
    """
    Provides a VMware Cloud Director External Network data source (version 2). New version of this data source uses new VCD
    API and is capable of handling NSX-T backed external networks as well as port group backed ones.

    > **Note:** This resource uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.0+*. It supports both NSX-T and NSX-V backed networks (NSX-T *3.0+* requires VCD *10.1.1+*)

    Supported in provider *v3.0+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ext_net = vcd.get_external_network_v2(name="my-nsxt-net")
    ```


    :param str name: external network name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getExternalNetworkV2:getExternalNetworkV2', __args__, opts=opts, typ=GetExternalNetworkV2Result).value

    return AwaitableGetExternalNetworkV2Result(
        dedicated_org_id=pulumi.get(__ret__, 'dedicated_org_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ip_scopes=pulumi.get(__ret__, 'ip_scopes'),
        name=pulumi.get(__ret__, 'name'),
        nat_and_firewall_service_intention=pulumi.get(__ret__, 'nat_and_firewall_service_intention'),
        nsxt_networks=pulumi.get(__ret__, 'nsxt_networks'),
        route_advertisement_intention=pulumi.get(__ret__, 'route_advertisement_intention'),
        use_ip_spaces=pulumi.get(__ret__, 'use_ip_spaces'),
        vsphere_networks=pulumi.get(__ret__, 'vsphere_networks'))
def get_external_network_v2_output(name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetExternalNetworkV2Result]:
    """
    Provides a VMware Cloud Director External Network data source (version 2). New version of this data source uses new VCD
    API and is capable of handling NSX-T backed external networks as well as port group backed ones.

    > **Note:** This resource uses new VMware Cloud Director
    [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
    requires at least VCD *10.0+*. It supports both NSX-T and NSX-V backed networks (NSX-T *3.0+* requires VCD *10.1.1+*)

    Supported in provider *v3.0+*.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    ext_net = vcd.get_external_network_v2(name="my-nsxt-net")
    ```


    :param str name: external network name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getExternalNetworkV2:getExternalNetworkV2', __args__, opts=opts, typ=GetExternalNetworkV2Result)
    return __ret__.apply(lambda __response__: GetExternalNetworkV2Result(
        dedicated_org_id=pulumi.get(__response__, 'dedicated_org_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ip_scopes=pulumi.get(__response__, 'ip_scopes'),
        name=pulumi.get(__response__, 'name'),
        nat_and_firewall_service_intention=pulumi.get(__response__, 'nat_and_firewall_service_intention'),
        nsxt_networks=pulumi.get(__response__, 'nsxt_networks'),
        route_advertisement_intention=pulumi.get(__response__, 'route_advertisement_intention'),
        use_ip_spaces=pulumi.get(__response__, 'use_ip_spaces'),
        vsphere_networks=pulumi.get(__response__, 'vsphere_networks')))
