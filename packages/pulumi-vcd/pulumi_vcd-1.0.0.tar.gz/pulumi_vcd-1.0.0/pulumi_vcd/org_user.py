# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgUserArgs', 'OrgUser']

@pulumi.input_type
class OrgUserArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 instant_messaging: Optional[pulumi.Input[str]] = None,
                 is_external: Optional[pulumi.Input[bool]] = None,
                 is_group_role: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_file: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 take_ownership: Optional[pulumi.Input[bool]] = None,
                 telephone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgUser resource.
        :param pulumi.Input[str] role: The role of the user. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[int] deployed_vm_quota: Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[str] description: An optional description of the user.
        :param pulumi.Input[str] email_address: The Org User email address. Needs to be a properly formatted email address.
        :param pulumi.Input[bool] enabled: True if the user is enabled and can log in. The default is `true`.
        :param pulumi.Input[str] full_name: The full name of the user.
        :param pulumi.Input[str] instant_messaging: The Org User instant messaging.
        :param pulumi.Input[bool] is_external: If the user account is going to be imported from an external resource, like an LDAP.
               In this case, `password` nor `password_file` are not required. Defaults to `false`.
        :param pulumi.Input[bool] is_group_role: True if this user has a group role. The default is `false`.
        :param pulumi.Input[bool] is_locked: If the user account has been locked due to too many invalid login attempts, the value will 
               change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        :param pulumi.Input[str] name: A unique name for the user.
        :param pulumi.Input[str] org: The name of organization to which the user belongs. Optional if defined at provider level. If we 
               want to create a user at provider level, use "System" as org name.
        :param pulumi.Input[str] password: The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
               creation unless is_external is true.
        :param pulumi.Input[str] password_file: Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
               is_external is true.
        :param pulumi.Input[str] provider_type: Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
               is `INTEGRATED`.
        :param pulumi.Input[int] stored_vm_quota: Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[bool] take_ownership: Take ownership of user's objects on deletion.
        :param pulumi.Input[str] telephone: The Org User telephone number.
        """
        pulumi.set(__self__, "role", role)
        if deployed_vm_quota is not None:
            pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if instant_messaging is not None:
            pulumi.set(__self__, "instant_messaging", instant_messaging)
        if is_external is not None:
            pulumi.set(__self__, "is_external", is_external)
        if is_group_role is not None:
            pulumi.set(__self__, "is_group_role", is_group_role)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_file is not None:
            pulumi.set(__self__, "password_file", password_file)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if stored_vm_quota is not None:
            pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if take_ownership is not None:
            pulumi.set(__self__, "take_ownership", take_ownership)
        if telephone is not None:
            pulumi.set(__self__, "telephone", telephone)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "deployed_vm_quota")

    @deployed_vm_quota.setter
    def deployed_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deployed_vm_quota", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User email address. Needs to be a properly formatted email address.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the user is enabled and can log in. The default is `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The full name of the user.
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="instantMessaging")
    def instant_messaging(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User instant messaging.
        """
        return pulumi.get(self, "instant_messaging")

    @instant_messaging.setter
    def instant_messaging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instant_messaging", value)

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user account is going to be imported from an external resource, like an LDAP.
        In this case, `password` nor `password_file` are not required. Defaults to `false`.
        """
        return pulumi.get(self, "is_external")

    @is_external.setter
    def is_external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_external", value)

    @property
    @pulumi.getter(name="isGroupRole")
    def is_group_role(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this user has a group role. The default is `false`.
        """
        return pulumi.get(self, "is_group_role")

    @is_group_role.setter
    def is_group_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_group_role", value)

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user account has been locked due to too many invalid login attempts, the value will 
        change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        """
        return pulumi.get(self, "is_locked")

    @is_locked.setter
    def is_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the user belongs. Optional if defined at provider level. If we 
        want to create a user at provider level, use "System" as org name.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        creation unless is_external is true.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordFile")
    def password_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        is_external is true.
        """
        return pulumi.get(self, "password_file")

    @password_file.setter
    def password_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_file", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        is `INTEGRATED`.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "stored_vm_quota")

    @stored_vm_quota.setter
    def stored_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stored_vm_quota", value)

    @property
    @pulumi.getter(name="takeOwnership")
    def take_ownership(self) -> Optional[pulumi.Input[bool]]:
        """
        Take ownership of user's objects on deletion.
        """
        return pulumi.get(self, "take_ownership")

    @take_ownership.setter
    def take_ownership(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_ownership", value)

    @property
    @pulumi.getter
    def telephone(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User telephone number.
        """
        return pulumi.get(self, "telephone")

    @telephone.setter
    def telephone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telephone", value)


@pulumi.input_type
class _OrgUserState:
    def __init__(__self__, *,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instant_messaging: Optional[pulumi.Input[str]] = None,
                 is_external: Optional[pulumi.Input[bool]] = None,
                 is_group_role: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_file: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 take_ownership: Optional[pulumi.Input[bool]] = None,
                 telephone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgUser resources.
        :param pulumi.Input[int] deployed_vm_quota: Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[str] description: An optional description of the user.
        :param pulumi.Input[str] email_address: The Org User email address. Needs to be a properly formatted email address.
        :param pulumi.Input[bool] enabled: True if the user is enabled and can log in. The default is `true`.
        :param pulumi.Input[str] full_name: The full name of the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_names: The set of group names to which this user belongs. It's only populated if the users
               are created after the group (with this user having a `depends_on` of the given group).
        :param pulumi.Input[str] instant_messaging: The Org User instant messaging.
        :param pulumi.Input[bool] is_external: If the user account is going to be imported from an external resource, like an LDAP.
               In this case, `password` nor `password_file` are not required. Defaults to `false`.
        :param pulumi.Input[bool] is_group_role: True if this user has a group role. The default is `false`.
        :param pulumi.Input[bool] is_locked: If the user account has been locked due to too many invalid login attempts, the value will 
               change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        :param pulumi.Input[str] name: A unique name for the user.
        :param pulumi.Input[str] org: The name of organization to which the user belongs. Optional if defined at provider level. If we 
               want to create a user at provider level, use "System" as org name.
        :param pulumi.Input[str] password: The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
               creation unless is_external is true.
        :param pulumi.Input[str] password_file: Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
               is_external is true.
        :param pulumi.Input[str] provider_type: Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
               is `INTEGRATED`.
        :param pulumi.Input[str] role: The role of the user. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[int] stored_vm_quota: Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[bool] take_ownership: Take ownership of user's objects on deletion.
        :param pulumi.Input[str] telephone: The Org User telephone number.
        """
        if deployed_vm_quota is not None:
            pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if group_names is not None:
            pulumi.set(__self__, "group_names", group_names)
        if instant_messaging is not None:
            pulumi.set(__self__, "instant_messaging", instant_messaging)
        if is_external is not None:
            pulumi.set(__self__, "is_external", is_external)
        if is_group_role is not None:
            pulumi.set(__self__, "is_group_role", is_group_role)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_file is not None:
            pulumi.set(__self__, "password_file", password_file)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if stored_vm_quota is not None:
            pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if take_ownership is not None:
            pulumi.set(__self__, "take_ownership", take_ownership)
        if telephone is not None:
            pulumi.set(__self__, "telephone", telephone)

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "deployed_vm_quota")

    @deployed_vm_quota.setter
    def deployed_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deployed_vm_quota", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User email address. Needs to be a properly formatted email address.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the user is enabled and can log in. The default is `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The full name of the user.
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of group names to which this user belongs. It's only populated if the users
        are created after the group (with this user having a `depends_on` of the given group).
        """
        return pulumi.get(self, "group_names")

    @group_names.setter
    def group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_names", value)

    @property
    @pulumi.getter(name="instantMessaging")
    def instant_messaging(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User instant messaging.
        """
        return pulumi.get(self, "instant_messaging")

    @instant_messaging.setter
    def instant_messaging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instant_messaging", value)

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user account is going to be imported from an external resource, like an LDAP.
        In this case, `password` nor `password_file` are not required. Defaults to `false`.
        """
        return pulumi.get(self, "is_external")

    @is_external.setter
    def is_external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_external", value)

    @property
    @pulumi.getter(name="isGroupRole")
    def is_group_role(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this user has a group role. The default is `false`.
        """
        return pulumi.get(self, "is_group_role")

    @is_group_role.setter
    def is_group_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_group_role", value)

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user account has been locked due to too many invalid login attempts, the value will 
        change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        """
        return pulumi.get(self, "is_locked")

    @is_locked.setter
    def is_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the user belongs. Optional if defined at provider level. If we 
        want to create a user at provider level, use "System" as org name.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        creation unless is_external is true.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordFile")
    def password_file(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        is_external is true.
        """
        return pulumi.get(self, "password_file")

    @password_file.setter
    def password_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_file", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        is `INTEGRATED`.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "stored_vm_quota")

    @stored_vm_quota.setter
    def stored_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stored_vm_quota", value)

    @property
    @pulumi.getter(name="takeOwnership")
    def take_ownership(self) -> Optional[pulumi.Input[bool]]:
        """
        Take ownership of user's objects on deletion.
        """
        return pulumi.get(self, "take_ownership")

    @take_ownership.setter
    def take_ownership(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_ownership", value)

    @property
    @pulumi.getter
    def telephone(self) -> Optional[pulumi.Input[str]]:
        """
        The Org User telephone number.
        """
        return pulumi.get(self, "telephone")

    @telephone.setter
    def telephone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telephone", value)


class OrgUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 instant_messaging: Optional[pulumi.Input[str]] = None,
                 is_external: Optional[pulumi.Input[bool]] = None,
                 is_group_role: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_file: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 take_ownership: Optional[pulumi.Input[bool]] = None,
                 telephone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OrgUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] deployed_vm_quota: Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[str] description: An optional description of the user.
        :param pulumi.Input[str] email_address: The Org User email address. Needs to be a properly formatted email address.
        :param pulumi.Input[bool] enabled: True if the user is enabled and can log in. The default is `true`.
        :param pulumi.Input[str] full_name: The full name of the user.
        :param pulumi.Input[str] instant_messaging: The Org User instant messaging.
        :param pulumi.Input[bool] is_external: If the user account is going to be imported from an external resource, like an LDAP.
               In this case, `password` nor `password_file` are not required. Defaults to `false`.
        :param pulumi.Input[bool] is_group_role: True if this user has a group role. The default is `false`.
        :param pulumi.Input[bool] is_locked: If the user account has been locked due to too many invalid login attempts, the value will 
               change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        :param pulumi.Input[str] name: A unique name for the user.
        :param pulumi.Input[str] org: The name of organization to which the user belongs. Optional if defined at provider level. If we 
               want to create a user at provider level, use "System" as org name.
        :param pulumi.Input[str] password: The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
               creation unless is_external is true.
        :param pulumi.Input[str] password_file: Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
               is_external is true.
        :param pulumi.Input[str] provider_type: Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
               is `INTEGRATED`.
        :param pulumi.Input[str] role: The role of the user. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[int] stored_vm_quota: Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[bool] take_ownership: Take ownership of user's objects on deletion.
        :param pulumi.Input[str] telephone: The Org User telephone number.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 instant_messaging: Optional[pulumi.Input[str]] = None,
                 is_external: Optional[pulumi.Input[bool]] = None,
                 is_group_role: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_file: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 take_ownership: Optional[pulumi.Input[bool]] = None,
                 telephone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgUserArgs.__new__(OrgUserArgs)

            __props__.__dict__["deployed_vm_quota"] = deployed_vm_quota
            __props__.__dict__["description"] = description
            __props__.__dict__["email_address"] = email_address
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["instant_messaging"] = instant_messaging
            __props__.__dict__["is_external"] = is_external
            __props__.__dict__["is_group_role"] = is_group_role
            __props__.__dict__["is_locked"] = is_locked
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["password_file"] = password_file
            __props__.__dict__["provider_type"] = provider_type
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["stored_vm_quota"] = stored_vm_quota
            __props__.__dict__["take_ownership"] = take_ownership
            __props__.__dict__["telephone"] = telephone
            __props__.__dict__["group_names"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(OrgUser, __self__).__init__(
            'vcd:index/orgUser:OrgUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            deployed_vm_quota: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            email_address: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            full_name: Optional[pulumi.Input[str]] = None,
            group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instant_messaging: Optional[pulumi.Input[str]] = None,
            is_external: Optional[pulumi.Input[bool]] = None,
            is_group_role: Optional[pulumi.Input[bool]] = None,
            is_locked: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_file: Optional[pulumi.Input[str]] = None,
            provider_type: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            stored_vm_quota: Optional[pulumi.Input[int]] = None,
            take_ownership: Optional[pulumi.Input[bool]] = None,
            telephone: Optional[pulumi.Input[str]] = None) -> 'OrgUser':
        """
        Get an existing OrgUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] deployed_vm_quota: Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[str] description: An optional description of the user.
        :param pulumi.Input[str] email_address: The Org User email address. Needs to be a properly formatted email address.
        :param pulumi.Input[bool] enabled: True if the user is enabled and can log in. The default is `true`.
        :param pulumi.Input[str] full_name: The full name of the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_names: The set of group names to which this user belongs. It's only populated if the users
               are created after the group (with this user having a `depends_on` of the given group).
        :param pulumi.Input[str] instant_messaging: The Org User instant messaging.
        :param pulumi.Input[bool] is_external: If the user account is going to be imported from an external resource, like an LDAP.
               In this case, `password` nor `password_file` are not required. Defaults to `false`.
        :param pulumi.Input[bool] is_group_role: True if this user has a group role. The default is `false`.
        :param pulumi.Input[bool] is_locked: If the user account has been locked due to too many invalid login attempts, the value will 
               change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        :param pulumi.Input[str] name: A unique name for the user.
        :param pulumi.Input[str] org: The name of organization to which the user belongs. Optional if defined at provider level. If we 
               want to create a user at provider level, use "System" as org name.
        :param pulumi.Input[str] password: The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
               creation unless is_external is true.
        :param pulumi.Input[str] password_file: Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
               is_external is true.
        :param pulumi.Input[str] provider_type: Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
               is `INTEGRATED`.
        :param pulumi.Input[str] role: The role of the user. Role names can be retrieved from the organization. Both built-in roles and
               custom built can be used. The roles normally available are:
               * `Organization Administrator`
               * `Catalog Author`
               * `vApp Author`
               * `vApp User`
               * `Console Access Only`
               * `Defer to Identity Provider`
        :param pulumi.Input[int] stored_vm_quota: Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
               The default is 0.
        :param pulumi.Input[bool] take_ownership: Take ownership of user's objects on deletion.
        :param pulumi.Input[str] telephone: The Org User telephone number.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgUserState.__new__(_OrgUserState)

        __props__.__dict__["deployed_vm_quota"] = deployed_vm_quota
        __props__.__dict__["description"] = description
        __props__.__dict__["email_address"] = email_address
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["group_names"] = group_names
        __props__.__dict__["instant_messaging"] = instant_messaging
        __props__.__dict__["is_external"] = is_external
        __props__.__dict__["is_group_role"] = is_group_role
        __props__.__dict__["is_locked"] = is_locked
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["password"] = password
        __props__.__dict__["password_file"] = password_file
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["role"] = role
        __props__.__dict__["stored_vm_quota"] = stored_vm_quota
        __props__.__dict__["take_ownership"] = take_ownership
        __props__.__dict__["telephone"] = telephone
        return OrgUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> pulumi.Output[int]:
        """
        Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "deployed_vm_quota")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> pulumi.Output[str]:
        """
        The Org User email address. Needs to be a properly formatted email address.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the user is enabled and can log in. The default is `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[str]:
        """
        The full name of the user.
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> pulumi.Output[Sequence[str]]:
        """
        The set of group names to which this user belongs. It's only populated if the users
        are created after the group (with this user having a `depends_on` of the given group).
        """
        return pulumi.get(self, "group_names")

    @property
    @pulumi.getter(name="instantMessaging")
    def instant_messaging(self) -> pulumi.Output[str]:
        """
        The Org User instant messaging.
        """
        return pulumi.get(self, "instant_messaging")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> pulumi.Output[Optional[bool]]:
        """
        If the user account is going to be imported from an external resource, like an LDAP.
        In this case, `password` nor `password_file` are not required. Defaults to `false`.
        """
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="isGroupRole")
    def is_group_role(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this user has a group role. The default is `false`.
        """
        return pulumi.get(self, "is_group_role")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> pulumi.Output[Optional[bool]]:
        """
        If the user account has been locked due to too many invalid login attempts, the value will 
        change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to which the user belongs. Optional if defined at provider level. If we 
        want to create a user at provider level, use "System" as org name.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        creation unless is_external is true.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordFile")
    def password_file(self) -> pulumi.Output[Optional[str]]:
        """
        Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        is_external is true.
        """
        return pulumi.get(self, "password_file")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[Optional[str]]:
        """
        Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        is `INTEGRATED`.
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        custom built can be used. The roles normally available are:
        * `Organization Administrator`
        * `Catalog Author`
        * `vApp Author`
        * `vApp User`
        * `Console Access Only`
        * `Defer to Identity Provider`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> pulumi.Output[int]:
        """
        Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        The default is 0.
        """
        return pulumi.get(self, "stored_vm_quota")

    @property
    @pulumi.getter(name="takeOwnership")
    def take_ownership(self) -> pulumi.Output[Optional[bool]]:
        """
        Take ownership of user's objects on deletion.
        """
        return pulumi.get(self, "take_ownership")

    @property
    @pulumi.getter
    def telephone(self) -> pulumi.Output[str]:
        """
        The Org User telephone number.
        """
        return pulumi.get(self, "telephone")

