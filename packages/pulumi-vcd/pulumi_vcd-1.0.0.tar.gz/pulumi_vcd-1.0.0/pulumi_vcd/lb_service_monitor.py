# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbServiceMonitorArgs', 'LbServiceMonitor']

@pulumi.input_type
class LbServiceMonitorArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 type: pulumi.Input[str],
                 expected: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbServiceMonitor resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the service monitor is to be created
        :param pulumi.Input[str] type: Select the way in which you want to send the health check request to the server — `http`, `https`, 
               `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        :param pulumi.Input[str] expected: For types `http` and `https`. String that the monitor expects to match in the status line of 
               the HTTP or HTTPS response (for example, `HTTP/1.1`)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extension: A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
               **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        :param pulumi.Input[int] interval: Interval in seconds at which a server is to be monitored using the specified Method.
               Defaults to 10
        :param pulumi.Input[int] max_retries: Number of times the specified monitoring Method must fail sequentially before the server is
               declared down. Defaults to 3
        :param pulumi.Input[str] method: For types `http` and `https`. Select http method to be used to detect server status. One of
               OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        :param pulumi.Input[str] name: Service Monitor name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] receive: For types `http`,  `https`, and `udp`. The string to be matched in the response content.
               **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        :param pulumi.Input[str] send: For types `http`,  `https`, and `udp`. The data to be sent.
        :param pulumi.Input[int] timeout: Maximum time in seconds within which a response from the server must be received. Defaults to 15
        :param pulumi.Input[str] url: For types `http` and `https`. URL to be used in the server status request
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "type", type)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if send is not None:
            pulumi.set(__self__, "send", send)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which the service monitor is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Select the way in which you want to send the health check request to the server — `http`, `https`, 
        `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def expected(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. String that the monitor expects to match in the status line of 
        the HTTP or HTTPS response (for example, `HTTP/1.1`)
        """
        return pulumi.get(self, "expected")

    @expected.setter
    def expected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
        **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in seconds at which a server is to be monitored using the specified Method.
        Defaults to 10
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times the specified monitoring Method must fail sequentially before the server is
        declared down. Defaults to 3
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. Select http method to be used to detect server status. One of
        OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service Monitor name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def receive(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http`,  `https`, and `udp`. The string to be matched in the response content.
        **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        """
        return pulumi.get(self, "receive")

    @receive.setter
    def receive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http`,  `https`, and `udp`. The data to be sent.
        """
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time in seconds within which a response from the server must be received. Defaults to 15
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. URL to be used in the server status request
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _LbServiceMonitorState:
    def __init__(__self__, *,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 expected: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbServiceMonitor resources.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the service monitor is to be created
        :param pulumi.Input[str] expected: For types `http` and `https`. String that the monitor expects to match in the status line of 
               the HTTP or HTTPS response (for example, `HTTP/1.1`)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extension: A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
               **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        :param pulumi.Input[int] interval: Interval in seconds at which a server is to be monitored using the specified Method.
               Defaults to 10
        :param pulumi.Input[int] max_retries: Number of times the specified monitoring Method must fail sequentially before the server is
               declared down. Defaults to 3
        :param pulumi.Input[str] method: For types `http` and `https`. Select http method to be used to detect server status. One of
               OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        :param pulumi.Input[str] name: Service Monitor name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] receive: For types `http`,  `https`, and `udp`. The string to be matched in the response content.
               **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        :param pulumi.Input[str] send: For types `http`,  `https`, and `udp`. The data to be sent.
        :param pulumi.Input[int] timeout: Maximum time in seconds within which a response from the server must be received. Defaults to 15
        :param pulumi.Input[str] type: Select the way in which you want to send the health check request to the server — `http`, `https`, 
               `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        :param pulumi.Input[str] url: For types `http` and `https`. URL to be used in the server status request
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if send is not None:
            pulumi.set(__self__, "send", send)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which the service monitor is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter
    def expected(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. String that the monitor expects to match in the status line of 
        the HTTP or HTTPS response (for example, `HTTP/1.1`)
        """
        return pulumi.get(self, "expected")

    @expected.setter
    def expected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
        **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in seconds at which a server is to be monitored using the specified Method.
        Defaults to 10
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times the specified monitoring Method must fail sequentially before the server is
        declared down. Defaults to 3
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. Select http method to be used to detect server status. One of
        OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service Monitor name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def receive(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http`,  `https`, and `udp`. The string to be matched in the response content.
        **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        """
        return pulumi.get(self, "receive")

    @receive.setter
    def receive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http`,  `https`, and `udp`. The data to be sent.
        """
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time in seconds within which a response from the server must be received. Defaults to 15
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Select the way in which you want to send the health check request to the server — `http`, `https`, 
        `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        For types `http` and `https`. URL to be used in the server status request
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class LbServiceMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 expected: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LbServiceMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the service monitor is to be created
        :param pulumi.Input[str] expected: For types `http` and `https`. String that the monitor expects to match in the status line of 
               the HTTP or HTTPS response (for example, `HTTP/1.1`)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extension: A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
               **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        :param pulumi.Input[int] interval: Interval in seconds at which a server is to be monitored using the specified Method.
               Defaults to 10
        :param pulumi.Input[int] max_retries: Number of times the specified monitoring Method must fail sequentially before the server is
               declared down. Defaults to 3
        :param pulumi.Input[str] method: For types `http` and `https`. Select http method to be used to detect server status. One of
               OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        :param pulumi.Input[str] name: Service Monitor name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] receive: For types `http`,  `https`, and `udp`. The string to be matched in the response content.
               **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        :param pulumi.Input[str] send: For types `http`,  `https`, and `udp`. The data to be sent.
        :param pulumi.Input[int] timeout: Maximum time in seconds within which a response from the server must be received. Defaults to 15
        :param pulumi.Input[str] type: Select the way in which you want to send the health check request to the server — `http`, `https`, 
               `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        :param pulumi.Input[str] url: For types `http` and `https`. URL to be used in the server status request
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbServiceMonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbServiceMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbServiceMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbServiceMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 expected: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbServiceMonitorArgs.__new__(LbServiceMonitorArgs)

            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            __props__.__dict__["expected"] = expected
            __props__.__dict__["extension"] = extension
            __props__.__dict__["interval"] = interval
            __props__.__dict__["max_retries"] = max_retries
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["receive"] = receive
            __props__.__dict__["send"] = send
            __props__.__dict__["timeout"] = timeout
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["vdc"] = vdc
        super(LbServiceMonitor, __self__).__init__(
            'vcd:index/lbServiceMonitor:LbServiceMonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            expected: Optional[pulumi.Input[str]] = None,
            extension: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            max_retries: Optional[pulumi.Input[int]] = None,
            method: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            receive: Optional[pulumi.Input[str]] = None,
            send: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'LbServiceMonitor':
        """
        Get an existing LbServiceMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which the service monitor is to be created
        :param pulumi.Input[str] expected: For types `http` and `https`. String that the monitor expects to match in the status line of 
               the HTTP or HTTPS response (for example, `HTTP/1.1`)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extension: A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
               **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        :param pulumi.Input[int] interval: Interval in seconds at which a server is to be monitored using the specified Method.
               Defaults to 10
        :param pulumi.Input[int] max_retries: Number of times the specified monitoring Method must fail sequentially before the server is
               declared down. Defaults to 3
        :param pulumi.Input[str] method: For types `http` and `https`. Select http method to be used to detect server status. One of
               OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        :param pulumi.Input[str] name: Service Monitor name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] receive: For types `http`,  `https`, and `udp`. The string to be matched in the response content.
               **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        :param pulumi.Input[str] send: For types `http`,  `https`, and `udp`. The data to be sent.
        :param pulumi.Input[int] timeout: Maximum time in seconds within which a response from the server must be received. Defaults to 15
        :param pulumi.Input[str] type: Select the way in which you want to send the health check request to the server — `http`, `https`, 
               `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        :param pulumi.Input[str] url: For types `http` and `https`. URL to be used in the server status request
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbServiceMonitorState.__new__(_LbServiceMonitorState)

        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["expected"] = expected
        __props__.__dict__["extension"] = extension
        __props__.__dict__["interval"] = interval
        __props__.__dict__["max_retries"] = max_retries
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["receive"] = receive
        __props__.__dict__["send"] = send
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["vdc"] = vdc
        return LbServiceMonitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which the service monitor is to be created
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def expected(self) -> pulumi.Output[Optional[str]]:
        """
        For types `http` and `https`. String that the monitor expects to match in the status line of 
        the HTTP or HTTPS response (for example, `HTTP/1.1`)
        """
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter
    def extension(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of advanced monitor parameters as key=value pairs (i.e. `max-age=SECONDS`, `invert-regex`)
        **Note**: When you need a value of `key` only format just set value to empty string (i.e. `linespan = ""`)
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[int]]:
        """
        Interval in seconds at which a server is to be monitored using the specified Method.
        Defaults to 10
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[Optional[int]]:
        """
        Number of times the specified monitoring Method must fail sequentially before the server is
        declared down. Defaults to 3
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[Optional[str]]:
        """
        For types `http` and `https`. Select http method to be used to detect server status. One of
        OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Service Monitor name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def receive(self) -> pulumi.Output[Optional[str]]:
        """
        For types `http`,  `https`, and `udp`. The string to be matched in the response content.
        **Note**: When `expected` is not matched, the monitor does not try to match the Receive content
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> pulumi.Output[Optional[str]]:
        """
        For types `http`,  `https`, and `udp`. The data to be sent.
        """
        return pulumi.get(self, "send")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum time in seconds within which a response from the server must be received. Defaults to 15
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Select the way in which you want to send the health check request to the server — `http`, `https`, 
        `tcp`, `icmp`, or `udp`. Depending on the type selected, the remaining attributes are allowed or not
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        For types `http` and `https`. URL to be used in the server status request
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

