# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtNetworkDhcpArgs', 'NsxtNetworkDhcp']

@pulumi.input_type
class NsxtNetworkDhcpArgs:
    def __init__(__self__, *,
                 org_network_id: pulumi.Input[str],
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 listener_ip_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtNetworkDhcp resource.
        :param pulumi.Input[str] org_network_id: ID of parent Org VDC Routed network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: The DNS server IPs to be assigned by this
               DHCP service. Maximum two values.
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum value is 60s
               and maximum is 4294967295s (~ 49 days).
        :param pulumi.Input[str] listener_ip_address: IP address of DHCP server in network. Must match
               subnet. **Only** used when `mode=NETWORK`.
        :param pulumi.Input[str] mode: One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
               * `EDGE` can be used with Routed Org VDC networks.
               * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
               `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
               * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
               NSX-T Edge Gateway.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]] pools: One or more blocks to define DHCP pool ranges. Must not be set when
               `mode=RELAY`. See Pools and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "org_network_id", org_network_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if listener_ip_address is not None:
            pulumi.set(__self__, "listener_ip_address", listener_ip_address)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if vdc is not None:
            warnings.warn("""Org network will be looked up based on 'org_network_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Org network will be looked up based on 'org_network_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> pulumi.Input[str]:
        """
        ID of parent Org VDC Routed network.
        """
        return pulumi.get(self, "org_network_id")

    @org_network_id.setter
    def org_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_network_id", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The DNS server IPs to be assigned by this
        DHCP service. Maximum two values.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        Lease time in seconds. Minimum value is 60s
        and maximum is 4294967295s (~ 49 days).
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="listenerIpAddress")
    def listener_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of DHCP server in network. Must match
        subnet. **Only** used when `mode=NETWORK`.
        """
        return pulumi.get(self, "listener_ip_address")

    @listener_ip_address.setter
    def listener_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip_address", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
        * `EDGE` can be used with Routed Org VDC networks.
        * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
        `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
        * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
        NSX-T Edge Gateway.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]]:
        """
        One or more blocks to define DHCP pool ranges. Must not be set when
        `mode=RELAY`. See Pools and example for usage details.
        """
        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]]):
        pulumi.set(self, "pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Org network will be looked up based on 'org_network_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtNetworkDhcpState:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 listener_ip_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtNetworkDhcp resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: The DNS server IPs to be assigned by this
               DHCP service. Maximum two values.
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum value is 60s
               and maximum is 4294967295s (~ 49 days).
        :param pulumi.Input[str] listener_ip_address: IP address of DHCP server in network. Must match
               subnet. **Only** used when `mode=NETWORK`.
        :param pulumi.Input[str] mode: One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
               * `EDGE` can be used with Routed Org VDC networks.
               * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
               `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
               * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
               NSX-T Edge Gateway.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_id: ID of parent Org VDC Routed network.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]] pools: One or more blocks to define DHCP pool ranges. Must not be set when
               `mode=RELAY`. See Pools and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if listener_ip_address is not None:
            pulumi.set(__self__, "listener_ip_address", listener_ip_address)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_network_id is not None:
            pulumi.set(__self__, "org_network_id", org_network_id)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if vdc is not None:
            warnings.warn("""Org network will be looked up based on 'org_network_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Org network will be looked up based on 'org_network_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The DNS server IPs to be assigned by this
        DHCP service. Maximum two values.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        Lease time in seconds. Minimum value is 60s
        and maximum is 4294967295s (~ 49 days).
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="listenerIpAddress")
    def listener_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of DHCP server in network. Must match
        subnet. **Only** used when `mode=NETWORK`.
        """
        return pulumi.get(self, "listener_ip_address")

    @listener_ip_address.setter
    def listener_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip_address", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
        * `EDGE` can be used with Routed Org VDC networks.
        * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
        `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
        * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
        NSX-T Edge Gateway.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of parent Org VDC Routed network.
        """
        return pulumi.get(self, "org_network_id")

    @org_network_id.setter
    def org_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_network_id", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]]:
        """
        One or more blocks to define DHCP pool ranges. Must not be set when
        `mode=RELAY`. See Pools and example for usage details.
        """
        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtNetworkDhcpPoolArgs']]]]):
        pulumi.set(self, "pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Org network will be looked up based on 'org_network_id' field""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtNetworkDhcp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 listener_ip_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkDhcpPoolArgs', 'NsxtNetworkDhcpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtNetworkDhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: The DNS server IPs to be assigned by this
               DHCP service. Maximum two values.
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum value is 60s
               and maximum is 4294967295s (~ 49 days).
        :param pulumi.Input[str] listener_ip_address: IP address of DHCP server in network. Must match
               subnet. **Only** used when `mode=NETWORK`.
        :param pulumi.Input[str] mode: One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
               * `EDGE` can be used with Routed Org VDC networks.
               * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
               `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
               * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
               NSX-T Edge Gateway.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_id: ID of parent Org VDC Routed network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkDhcpPoolArgs', 'NsxtNetworkDhcpPoolArgsDict']]]] pools: One or more blocks to define DHCP pool ranges. Must not be set when
               `mode=RELAY`. See Pools and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtNetworkDhcpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtNetworkDhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtNetworkDhcpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtNetworkDhcpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 listener_ip_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_network_id: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkDhcpPoolArgs', 'NsxtNetworkDhcpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtNetworkDhcpArgs.__new__(NsxtNetworkDhcpArgs)

            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["lease_time"] = lease_time
            __props__.__dict__["listener_ip_address"] = listener_ip_address
            __props__.__dict__["mode"] = mode
            __props__.__dict__["org"] = org
            if org_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_network_id'")
            __props__.__dict__["org_network_id"] = org_network_id
            __props__.__dict__["pools"] = pools
            __props__.__dict__["vdc"] = vdc
        super(NsxtNetworkDhcp, __self__).__init__(
            'vcd:index/nsxtNetworkDhcp:NsxtNetworkDhcp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            lease_time: Optional[pulumi.Input[int]] = None,
            listener_ip_address: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            org_network_id: Optional[pulumi.Input[str]] = None,
            pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkDhcpPoolArgs', 'NsxtNetworkDhcpPoolArgsDict']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtNetworkDhcp':
        """
        Get an existing NsxtNetworkDhcp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: The DNS server IPs to be assigned by this
               DHCP service. Maximum two values.
        :param pulumi.Input[int] lease_time: Lease time in seconds. Minimum value is 60s
               and maximum is 4294967295s (~ 49 days).
        :param pulumi.Input[str] listener_ip_address: IP address of DHCP server in network. Must match
               subnet. **Only** used when `mode=NETWORK`.
        :param pulumi.Input[str] mode: One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
               * `EDGE` can be used with Routed Org VDC networks.
               * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
               `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
               * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
               NSX-T Edge Gateway.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[str] org_network_id: ID of parent Org VDC Routed network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtNetworkDhcpPoolArgs', 'NsxtNetworkDhcpPoolArgsDict']]]] pools: One or more blocks to define DHCP pool ranges. Must not be set when
               `mode=RELAY`. See Pools and example for usage details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtNetworkDhcpState.__new__(_NsxtNetworkDhcpState)

        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["listener_ip_address"] = listener_ip_address
        __props__.__dict__["mode"] = mode
        __props__.__dict__["org"] = org
        __props__.__dict__["org_network_id"] = org_network_id
        __props__.__dict__["pools"] = pools
        __props__.__dict__["vdc"] = vdc
        return NsxtNetworkDhcp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The DNS server IPs to be assigned by this
        DHCP service. Maximum two values.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[int]:
        """
        Lease time in seconds. Minimum value is 60s
        and maximum is 4294967295s (~ 49 days).
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="listenerIpAddress")
    def listener_ip_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP address of DHCP server in network. Must match
        subnet. **Only** used when `mode=NETWORK`.
        """
        return pulumi.get(self, "listener_ip_address")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        One of `EDGE`, `NETWORK` or `RELAY`. Default is `EDGE`
        * `EDGE` can be used with Routed Org VDC networks.
        * `NETWORK` can be used for Isolated and Routed Org VDC networks. It requires
        `listener_ip_address` to be set and Edge Cluster must be assigned to VDC.
        * `RELAY` can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
        NSX-T Edge Gateway.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkId")
    def org_network_id(self) -> pulumi.Output[str]:
        """
        ID of parent Org VDC Routed network.
        """
        return pulumi.get(self, "org_network_id")

    @property
    @pulumi.getter
    def pools(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtNetworkDhcpPool']]]:
        """
        One or more blocks to define DHCP pool ranges. Must not be set when
        `mode=RELAY`. See Pools and example for usage details.
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Org network will be looked up based on 'org_network_id' field""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

