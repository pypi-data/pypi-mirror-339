# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpSpaceArgs', 'IpSpace']

@pulumi.input_type
class IpSpaceArgs:
    def __init__(__self__, *,
                 internal_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 default_firewall_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_no_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_scope: Optional[pulumi.Input[str]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]] = None,
                 ip_range_quota: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 route_advertisement_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a IpSpace resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_scopes: The internal scope of an IP space is a list of CIDR notations that
               defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        :param pulumi.Input[str] type: One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
               * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
               provider* through a quota-based system.
               * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
               tenant space, but as a service provider, you don't want to expose it to organizations in your
               environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
               * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
               only one organization that is specified during the space creation. For this organization, IP
               consumption is unlimited.
        :param pulumi.Input[bool] default_firewall_rule_creation_enabled: Defines whether
               default firewall rule creation should be enabled
        :param pulumi.Input[bool] default_no_snat_rule_creation_enabled: Defines whether NO SNAT
               rule creation should be enabled
        :param pulumi.Input[bool] default_snat_rule_creation_enabled: Defines whether SNAT rule
               creation should be enabled
               
               <a id="ipspace-ip-range"></a>
        :param pulumi.Input[str] description: Description of IP Space
        :param pulumi.Input[str] external_scope: The external scope defines the total span of IP addresses to which the IP
               space has access, for example the internet or a WAN.
        :param pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]] ip_prefixes: One or more IP prefixes (blocks) ip_prefix
        :param pulumi.Input[str] ip_range_quota: If you entered at least one IP Range
               (ip_range), enter a number of floating IP addresses to allocate individually.
               `-1` is unlimited, while `0` means that no IPs can be allocated.
        :param pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]] ip_ranges: One or more ip_range for floating IP address
               allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        :param pulumi.Input[str] name: A name for IP Space
        :param pulumi.Input[str] org_id: Required for `PRIVATE` type
        :param pulumi.Input[bool] route_advertisement_enabled: Toggle on the route advertisement option to
               enable advertising networks with IP prefixes from this IP space (default `false`)
        """
        pulumi.set(__self__, "internal_scopes", internal_scopes)
        pulumi.set(__self__, "type", type)
        if default_firewall_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_firewall_rule_creation_enabled", default_firewall_rule_creation_enabled)
        if default_no_snat_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_no_snat_rule_creation_enabled", default_no_snat_rule_creation_enabled)
        if default_snat_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_snat_rule_creation_enabled", default_snat_rule_creation_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_scope is not None:
            pulumi.set(__self__, "external_scope", external_scope)
        if ip_prefixes is not None:
            pulumi.set(__self__, "ip_prefixes", ip_prefixes)
        if ip_range_quota is not None:
            pulumi.set(__self__, "ip_range_quota", ip_range_quota)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if route_advertisement_enabled is not None:
            pulumi.set(__self__, "route_advertisement_enabled", route_advertisement_enabled)

    @property
    @pulumi.getter(name="internalScopes")
    def internal_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The internal scope of an IP space is a list of CIDR notations that
        defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        """
        return pulumi.get(self, "internal_scopes")

    @internal_scopes.setter
    def internal_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "internal_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
        * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
        provider* through a quota-based system.
        * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
        tenant space, but as a service provider, you don't want to expose it to organizations in your
        environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
        * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
        only one organization that is specified during the space creation. For this organization, IP
        consumption is unlimited.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultFirewallRuleCreationEnabled")
    def default_firewall_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether
        default firewall rule creation should be enabled
        """
        return pulumi.get(self, "default_firewall_rule_creation_enabled")

    @default_firewall_rule_creation_enabled.setter
    def default_firewall_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_firewall_rule_creation_enabled", value)

    @property
    @pulumi.getter(name="defaultNoSnatRuleCreationEnabled")
    def default_no_snat_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether NO SNAT
        rule creation should be enabled
        """
        return pulumi.get(self, "default_no_snat_rule_creation_enabled")

    @default_no_snat_rule_creation_enabled.setter
    def default_no_snat_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_no_snat_rule_creation_enabled", value)

    @property
    @pulumi.getter(name="defaultSnatRuleCreationEnabled")
    def default_snat_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether SNAT rule
        creation should be enabled

        <a id="ipspace-ip-range"></a>
        """
        return pulumi.get(self, "default_snat_rule_creation_enabled")

    @default_snat_rule_creation_enabled.setter
    def default_snat_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_snat_rule_creation_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of IP Space
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalScope")
    def external_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The external scope defines the total span of IP addresses to which the IP
        space has access, for example the internet or a WAN.
        """
        return pulumi.get(self, "external_scope")

    @external_scope.setter
    def external_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_scope", value)

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]]:
        """
        One or more IP prefixes (blocks) ip_prefix
        """
        return pulumi.get(self, "ip_prefixes")

    @ip_prefixes.setter
    def ip_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]]):
        pulumi.set(self, "ip_prefixes", value)

    @property
    @pulumi.getter(name="ipRangeQuota")
    def ip_range_quota(self) -> Optional[pulumi.Input[str]]:
        """
        If you entered at least one IP Range
        (ip_range), enter a number of floating IP addresses to allocate individually.
        `-1` is unlimited, while `0` means that no IPs can be allocated.
        """
        return pulumi.get(self, "ip_range_quota")

    @ip_range_quota.setter
    def ip_range_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_quota", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]]:
        """
        One or more ip_range for floating IP address
        allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for IP Space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `PRIVATE` type
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="routeAdvertisementEnabled")
    def route_advertisement_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle on the route advertisement option to
        enable advertising networks with IP prefixes from this IP space (default `false`)
        """
        return pulumi.get(self, "route_advertisement_enabled")

    @route_advertisement_enabled.setter
    def route_advertisement_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "route_advertisement_enabled", value)


@pulumi.input_type
class _IpSpaceState:
    def __init__(__self__, *,
                 default_firewall_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_no_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_scope: Optional[pulumi.Input[str]] = None,
                 internal_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]] = None,
                 ip_range_quota: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 route_advertisement_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpSpace resources.
        :param pulumi.Input[bool] default_firewall_rule_creation_enabled: Defines whether
               default firewall rule creation should be enabled
        :param pulumi.Input[bool] default_no_snat_rule_creation_enabled: Defines whether NO SNAT
               rule creation should be enabled
        :param pulumi.Input[bool] default_snat_rule_creation_enabled: Defines whether SNAT rule
               creation should be enabled
               
               <a id="ipspace-ip-range"></a>
        :param pulumi.Input[str] description: Description of IP Space
        :param pulumi.Input[str] external_scope: The external scope defines the total span of IP addresses to which the IP
               space has access, for example the internet or a WAN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_scopes: The internal scope of an IP space is a list of CIDR notations that
               defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        :param pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]] ip_prefixes: One or more IP prefixes (blocks) ip_prefix
        :param pulumi.Input[str] ip_range_quota: If you entered at least one IP Range
               (ip_range), enter a number of floating IP addresses to allocate individually.
               `-1` is unlimited, while `0` means that no IPs can be allocated.
        :param pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]] ip_ranges: One or more ip_range for floating IP address
               allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        :param pulumi.Input[str] name: A name for IP Space
        :param pulumi.Input[str] org_id: Required for `PRIVATE` type
        :param pulumi.Input[bool] route_advertisement_enabled: Toggle on the route advertisement option to
               enable advertising networks with IP prefixes from this IP space (default `false`)
        :param pulumi.Input[str] type: One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
               * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
               provider* through a quota-based system.
               * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
               tenant space, but as a service provider, you don't want to expose it to organizations in your
               environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
               * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
               only one organization that is specified during the space creation. For this organization, IP
               consumption is unlimited.
        """
        if default_firewall_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_firewall_rule_creation_enabled", default_firewall_rule_creation_enabled)
        if default_no_snat_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_no_snat_rule_creation_enabled", default_no_snat_rule_creation_enabled)
        if default_snat_rule_creation_enabled is not None:
            pulumi.set(__self__, "default_snat_rule_creation_enabled", default_snat_rule_creation_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_scope is not None:
            pulumi.set(__self__, "external_scope", external_scope)
        if internal_scopes is not None:
            pulumi.set(__self__, "internal_scopes", internal_scopes)
        if ip_prefixes is not None:
            pulumi.set(__self__, "ip_prefixes", ip_prefixes)
        if ip_range_quota is not None:
            pulumi.set(__self__, "ip_range_quota", ip_range_quota)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if route_advertisement_enabled is not None:
            pulumi.set(__self__, "route_advertisement_enabled", route_advertisement_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultFirewallRuleCreationEnabled")
    def default_firewall_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether
        default firewall rule creation should be enabled
        """
        return pulumi.get(self, "default_firewall_rule_creation_enabled")

    @default_firewall_rule_creation_enabled.setter
    def default_firewall_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_firewall_rule_creation_enabled", value)

    @property
    @pulumi.getter(name="defaultNoSnatRuleCreationEnabled")
    def default_no_snat_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether NO SNAT
        rule creation should be enabled
        """
        return pulumi.get(self, "default_no_snat_rule_creation_enabled")

    @default_no_snat_rule_creation_enabled.setter
    def default_no_snat_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_no_snat_rule_creation_enabled", value)

    @property
    @pulumi.getter(name="defaultSnatRuleCreationEnabled")
    def default_snat_rule_creation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether SNAT rule
        creation should be enabled

        <a id="ipspace-ip-range"></a>
        """
        return pulumi.get(self, "default_snat_rule_creation_enabled")

    @default_snat_rule_creation_enabled.setter
    def default_snat_rule_creation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_snat_rule_creation_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of IP Space
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalScope")
    def external_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The external scope defines the total span of IP addresses to which the IP
        space has access, for example the internet or a WAN.
        """
        return pulumi.get(self, "external_scope")

    @external_scope.setter
    def external_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_scope", value)

    @property
    @pulumi.getter(name="internalScopes")
    def internal_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The internal scope of an IP space is a list of CIDR notations that
        defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        """
        return pulumi.get(self, "internal_scopes")

    @internal_scopes.setter
    def internal_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_scopes", value)

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]]:
        """
        One or more IP prefixes (blocks) ip_prefix
        """
        return pulumi.get(self, "ip_prefixes")

    @ip_prefixes.setter
    def ip_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpPrefixArgs']]]]):
        pulumi.set(self, "ip_prefixes", value)

    @property
    @pulumi.getter(name="ipRangeQuota")
    def ip_range_quota(self) -> Optional[pulumi.Input[str]]:
        """
        If you entered at least one IP Range
        (ip_range), enter a number of floating IP addresses to allocate individually.
        `-1` is unlimited, while `0` means that no IPs can be allocated.
        """
        return pulumi.get(self, "ip_range_quota")

    @ip_range_quota.setter
    def ip_range_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_quota", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]]:
        """
        One or more ip_range for floating IP address
        allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSpaceIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for IP Space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required for `PRIVATE` type
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="routeAdvertisementEnabled")
    def route_advertisement_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle on the route advertisement option to
        enable advertising networks with IP prefixes from this IP space (default `false`)
        """
        return pulumi.get(self, "route_advertisement_enabled")

    @route_advertisement_enabled.setter
    def route_advertisement_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "route_advertisement_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
        * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
        provider* through a quota-based system.
        * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
        tenant space, but as a service provider, you don't want to expose it to organizations in your
        environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
        * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
        only one organization that is specified during the space creation. For this organization, IP
        consumption is unlimited.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class IpSpace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_firewall_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_no_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_scope: Optional[pulumi.Input[str]] = None,
                 internal_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpPrefixArgs', 'IpSpaceIpPrefixArgsDict']]]]] = None,
                 ip_range_quota: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpRangeArgs', 'IpSpaceIpRangeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 route_advertisement_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IpSpace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_firewall_rule_creation_enabled: Defines whether
               default firewall rule creation should be enabled
        :param pulumi.Input[bool] default_no_snat_rule_creation_enabled: Defines whether NO SNAT
               rule creation should be enabled
        :param pulumi.Input[bool] default_snat_rule_creation_enabled: Defines whether SNAT rule
               creation should be enabled
               
               <a id="ipspace-ip-range"></a>
        :param pulumi.Input[str] description: Description of IP Space
        :param pulumi.Input[str] external_scope: The external scope defines the total span of IP addresses to which the IP
               space has access, for example the internet or a WAN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_scopes: The internal scope of an IP space is a list of CIDR notations that
               defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpPrefixArgs', 'IpSpaceIpPrefixArgsDict']]]] ip_prefixes: One or more IP prefixes (blocks) ip_prefix
        :param pulumi.Input[str] ip_range_quota: If you entered at least one IP Range
               (ip_range), enter a number of floating IP addresses to allocate individually.
               `-1` is unlimited, while `0` means that no IPs can be allocated.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpRangeArgs', 'IpSpaceIpRangeArgsDict']]]] ip_ranges: One or more ip_range for floating IP address
               allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        :param pulumi.Input[str] name: A name for IP Space
        :param pulumi.Input[str] org_id: Required for `PRIVATE` type
        :param pulumi.Input[bool] route_advertisement_enabled: Toggle on the route advertisement option to
               enable advertising networks with IP prefixes from this IP space (default `false`)
        :param pulumi.Input[str] type: One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
               * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
               provider* through a quota-based system.
               * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
               tenant space, but as a service provider, you don't want to expose it to organizations in your
               environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
               * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
               only one organization that is specified during the space creation. For this organization, IP
               consumption is unlimited.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpSpaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IpSpace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IpSpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpSpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_firewall_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_no_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 default_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_scope: Optional[pulumi.Input[str]] = None,
                 internal_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpPrefixArgs', 'IpSpaceIpPrefixArgsDict']]]]] = None,
                 ip_range_quota: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpRangeArgs', 'IpSpaceIpRangeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 route_advertisement_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpSpaceArgs.__new__(IpSpaceArgs)

            __props__.__dict__["default_firewall_rule_creation_enabled"] = default_firewall_rule_creation_enabled
            __props__.__dict__["default_no_snat_rule_creation_enabled"] = default_no_snat_rule_creation_enabled
            __props__.__dict__["default_snat_rule_creation_enabled"] = default_snat_rule_creation_enabled
            __props__.__dict__["description"] = description
            __props__.__dict__["external_scope"] = external_scope
            if internal_scopes is None and not opts.urn:
                raise TypeError("Missing required property 'internal_scopes'")
            __props__.__dict__["internal_scopes"] = internal_scopes
            __props__.__dict__["ip_prefixes"] = ip_prefixes
            __props__.__dict__["ip_range_quota"] = ip_range_quota
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["name"] = name
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["route_advertisement_enabled"] = route_advertisement_enabled
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(IpSpace, __self__).__init__(
            'vcd:index/ipSpace:IpSpace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_firewall_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
            default_no_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
            default_snat_rule_creation_enabled: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_scope: Optional[pulumi.Input[str]] = None,
            internal_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpPrefixArgs', 'IpSpaceIpPrefixArgsDict']]]]] = None,
            ip_range_quota: Optional[pulumi.Input[str]] = None,
            ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpRangeArgs', 'IpSpaceIpRangeArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            route_advertisement_enabled: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'IpSpace':
        """
        Get an existing IpSpace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_firewall_rule_creation_enabled: Defines whether
               default firewall rule creation should be enabled
        :param pulumi.Input[bool] default_no_snat_rule_creation_enabled: Defines whether NO SNAT
               rule creation should be enabled
        :param pulumi.Input[bool] default_snat_rule_creation_enabled: Defines whether SNAT rule
               creation should be enabled
               
               <a id="ipspace-ip-range"></a>
        :param pulumi.Input[str] description: Description of IP Space
        :param pulumi.Input[str] external_scope: The external scope defines the total span of IP addresses to which the IP
               space has access, for example the internet or a WAN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_scopes: The internal scope of an IP space is a list of CIDR notations that
               defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpPrefixArgs', 'IpSpaceIpPrefixArgsDict']]]] ip_prefixes: One or more IP prefixes (blocks) ip_prefix
        :param pulumi.Input[str] ip_range_quota: If you entered at least one IP Range
               (ip_range), enter a number of floating IP addresses to allocate individually.
               `-1` is unlimited, while `0` means that no IPs can be allocated.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpSpaceIpRangeArgs', 'IpSpaceIpRangeArgsDict']]]] ip_ranges: One or more ip_range for floating IP address
               allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        :param pulumi.Input[str] name: A name for IP Space
        :param pulumi.Input[str] org_id: Required for `PRIVATE` type
        :param pulumi.Input[bool] route_advertisement_enabled: Toggle on the route advertisement option to
               enable advertising networks with IP prefixes from this IP space (default `false`)
        :param pulumi.Input[str] type: One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
               * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
               provider* through a quota-based system.
               * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
               tenant space, but as a service provider, you don't want to expose it to organizations in your
               environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
               * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
               only one organization that is specified during the space creation. For this organization, IP
               consumption is unlimited.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpSpaceState.__new__(_IpSpaceState)

        __props__.__dict__["default_firewall_rule_creation_enabled"] = default_firewall_rule_creation_enabled
        __props__.__dict__["default_no_snat_rule_creation_enabled"] = default_no_snat_rule_creation_enabled
        __props__.__dict__["default_snat_rule_creation_enabled"] = default_snat_rule_creation_enabled
        __props__.__dict__["description"] = description
        __props__.__dict__["external_scope"] = external_scope
        __props__.__dict__["internal_scopes"] = internal_scopes
        __props__.__dict__["ip_prefixes"] = ip_prefixes
        __props__.__dict__["ip_range_quota"] = ip_range_quota
        __props__.__dict__["ip_ranges"] = ip_ranges
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["route_advertisement_enabled"] = route_advertisement_enabled
        __props__.__dict__["type"] = type
        return IpSpace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultFirewallRuleCreationEnabled")
    def default_firewall_rule_creation_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines whether
        default firewall rule creation should be enabled
        """
        return pulumi.get(self, "default_firewall_rule_creation_enabled")

    @property
    @pulumi.getter(name="defaultNoSnatRuleCreationEnabled")
    def default_no_snat_rule_creation_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines whether NO SNAT
        rule creation should be enabled
        """
        return pulumi.get(self, "default_no_snat_rule_creation_enabled")

    @property
    @pulumi.getter(name="defaultSnatRuleCreationEnabled")
    def default_snat_rule_creation_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines whether SNAT rule
        creation should be enabled

        <a id="ipspace-ip-range"></a>
        """
        return pulumi.get(self, "default_snat_rule_creation_enabled")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of IP Space
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalScope")
    def external_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The external scope defines the total span of IP addresses to which the IP
        space has access, for example the internet or a WAN.
        """
        return pulumi.get(self, "external_scope")

    @property
    @pulumi.getter(name="internalScopes")
    def internal_scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        The internal scope of an IP space is a list of CIDR notations that
        defines the exact span of IP addresses in which all ranges and blocks must be contained in.
        """
        return pulumi.get(self, "internal_scopes")

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> pulumi.Output[Optional[Sequence['outputs.IpSpaceIpPrefix']]]:
        """
        One or more IP prefixes (blocks) ip_prefix
        """
        return pulumi.get(self, "ip_prefixes")

    @property
    @pulumi.getter(name="ipRangeQuota")
    def ip_range_quota(self) -> pulumi.Output[str]:
        """
        If you entered at least one IP Range
        (ip_range), enter a number of floating IP addresses to allocate individually.
        `-1` is unlimited, while `0` means that no IPs can be allocated.
        """
        return pulumi.get(self, "ip_range_quota")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.IpSpaceIpRange']]]:
        """
        One or more ip_range for floating IP address
        allocation. (Floating IP addresses are just IP addresses taken from the defined range)
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for IP Space
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[Optional[str]]:
        """
        Required for `PRIVATE` type
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="routeAdvertisementEnabled")
    def route_advertisement_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Toggle on the route advertisement option to
        enable advertising networks with IP prefixes from this IP space (default `false`)
        """
        return pulumi.get(self, "route_advertisement_enabled")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
        * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
        provider* through a quota-based system.
        * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
        tenant space, but as a service provider, you don't want to expose it to organizations in your
        environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
        * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
        only one organization that is specified during the space creation. For this organization, IP
        consumption is unlimited.
        """
        return pulumi.get(self, "type")

