# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPortgroupResult',
    'AwaitableGetPortgroupResult',
    'get_portgroup',
    'get_portgroup_output',
]

@pulumi.output_type
class GetPortgroupResult:
    """
    A collection of values returned by getPortgroup.
    """
    def __init__(__self__, id=None, name=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetPortgroupResult(GetPortgroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortgroupResult(
            id=self.id,
            name=self.name,
            type=self.type)


def get_portgroup(name: Optional[str] = None,
                  type: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortgroupResult:
    """
    Provides a data source for available vCenter Port Groups.

    Supported in provider *v3.0+*

    ## Example Usage

    ### VSwitch Port Group

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first_pg_vswitch = vcd.get_portgroup(name="pg-name",
        type="NETWORK")
    ```

    ### Distributed Port Group

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first_pg_dvswitch = vcd.get_portgroup(name="pg-name",
        type="DV_PORTGROUP")
    ```


    :param str name: Organization VDC name
    :param str type: `NETWORK` for vSwitch port group or `DV_PORTGROUP` for distributed port group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getPortgroup:getPortgroup', __args__, opts=opts, typ=GetPortgroupResult).value

    return AwaitableGetPortgroupResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))
def get_portgroup_output(name: Optional[pulumi.Input[str]] = None,
                         type: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPortgroupResult]:
    """
    Provides a data source for available vCenter Port Groups.

    Supported in provider *v3.0+*

    ## Example Usage

    ### VSwitch Port Group

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first_pg_vswitch = vcd.get_portgroup(name="pg-name",
        type="NETWORK")
    ```

    ### Distributed Port Group

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first_pg_dvswitch = vcd.get_portgroup(name="pg-name",
        type="DV_PORTGROUP")
    ```


    :param str name: Organization VDC name
    :param str type: `NETWORK` for vSwitch port group or `DV_PORTGROUP` for distributed port group.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getPortgroup:getPortgroup', __args__, opts=opts, typ=GetPortgroupResult)
    return __ret__.apply(lambda __response__: GetPortgroupResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type')))
