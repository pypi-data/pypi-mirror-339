# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRdeTypeResult',
    'AwaitableGetRdeTypeResult',
    'get_rde_type',
    'get_rde_type_output',
]

@pulumi.output_type
class GetRdeTypeResult:
    """
    A collection of values returned by getRdeType.
    """
    def __init__(__self__, description=None, external_id=None, hooks=None, id=None, inherited_version=None, interface_ids=None, name=None, nss=None, readonly=None, schema=None, vendor=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if hooks and not isinstance(hooks, list):
            raise TypeError("Expected argument 'hooks' to be a list")
        pulumi.set(__self__, "hooks", hooks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inherited_version and not isinstance(inherited_version, str):
            raise TypeError("Expected argument 'inherited_version' to be a str")
        pulumi.set(__self__, "inherited_version", inherited_version)
        if interface_ids and not isinstance(interface_ids, list):
            raise TypeError("Expected argument 'interface_ids' to be a list")
        pulumi.set(__self__, "interface_ids", interface_ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nss and not isinstance(nss, str):
            raise TypeError("Expected argument 'nss' to be a str")
        pulumi.set(__self__, "nss", nss)
        if readonly and not isinstance(readonly, bool):
            raise TypeError("Expected argument 'readonly' to be a bool")
        pulumi.set(__self__, "readonly", readonly)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def hooks(self) -> Sequence['outputs.GetRdeTypeHookResult']:
        return pulumi.get(self, "hooks")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritedVersion")
    def inherited_version(self) -> str:
        return pulumi.get(self, "inherited_version")

    @property
    @pulumi.getter(name="interfaceIds")
    def interface_ids(self) -> Sequence[str]:
        return pulumi.get(self, "interface_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nss(self) -> str:
        return pulumi.get(self, "nss")

    @property
    @pulumi.getter
    def readonly(self) -> bool:
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetRdeTypeResult(GetRdeTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRdeTypeResult(
            description=self.description,
            external_id=self.external_id,
            hooks=self.hooks,
            id=self.id,
            inherited_version=self.inherited_version,
            interface_ids=self.interface_ids,
            name=self.name,
            nss=self.nss,
            readonly=self.readonly,
            schema=self.schema,
            vendor=self.vendor,
            version=self.version)


def get_rde_type(nss: Optional[str] = None,
                 vendor: Optional[str] = None,
                 version: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRdeTypeResult:
    """
    Provides the capability of fetching an existing Runtime Defined Entity Type from VMware Cloud Director.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rde_type = vcd.get_rde_type(vendor="bigcorp",
        nss="tech",
        version="1.2.3")
    pulumi.export("type-name", my_rde_type.name)
    pulumi.export("type-id", my_rde_type.id)
    ```


    :param str nss: A unique namespace associated with the Runtime Defined Entity Type.
    :param str vendor: The vendor of the Runtime Defined Entity Type.
    :param str version: The version of the Runtime Defined Entity Type. Must follow [semantic versioning](https://semver.org/) syntax.
    """
    __args__ = dict()
    __args__['nss'] = nss
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getRdeType:getRdeType', __args__, opts=opts, typ=GetRdeTypeResult).value

    return AwaitableGetRdeTypeResult(
        description=pulumi.get(__ret__, 'description'),
        external_id=pulumi.get(__ret__, 'external_id'),
        hooks=pulumi.get(__ret__, 'hooks'),
        id=pulumi.get(__ret__, 'id'),
        inherited_version=pulumi.get(__ret__, 'inherited_version'),
        interface_ids=pulumi.get(__ret__, 'interface_ids'),
        name=pulumi.get(__ret__, 'name'),
        nss=pulumi.get(__ret__, 'nss'),
        readonly=pulumi.get(__ret__, 'readonly'),
        schema=pulumi.get(__ret__, 'schema'),
        vendor=pulumi.get(__ret__, 'vendor'),
        version=pulumi.get(__ret__, 'version'))
def get_rde_type_output(nss: Optional[pulumi.Input[str]] = None,
                        vendor: Optional[pulumi.Input[str]] = None,
                        version: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRdeTypeResult]:
    """
    Provides the capability of fetching an existing Runtime Defined Entity Type from VMware Cloud Director.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_rde_type = vcd.get_rde_type(vendor="bigcorp",
        nss="tech",
        version="1.2.3")
    pulumi.export("type-name", my_rde_type.name)
    pulumi.export("type-id", my_rde_type.id)
    ```


    :param str nss: A unique namespace associated with the Runtime Defined Entity Type.
    :param str vendor: The vendor of the Runtime Defined Entity Type.
    :param str version: The version of the Runtime Defined Entity Type. Must follow [semantic versioning](https://semver.org/) syntax.
    """
    __args__ = dict()
    __args__['nss'] = nss
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getRdeType:getRdeType', __args__, opts=opts, typ=GetRdeTypeResult)
    return __ret__.apply(lambda __response__: GetRdeTypeResult(
        description=pulumi.get(__response__, 'description'),
        external_id=pulumi.get(__response__, 'external_id'),
        hooks=pulumi.get(__response__, 'hooks'),
        id=pulumi.get(__response__, 'id'),
        inherited_version=pulumi.get(__response__, 'inherited_version'),
        interface_ids=pulumi.get(__response__, 'interface_ids'),
        name=pulumi.get(__response__, 'name'),
        nss=pulumi.get(__response__, 'nss'),
        readonly=pulumi.get(__response__, 'readonly'),
        schema=pulumi.get(__response__, 'schema'),
        vendor=pulumi.get(__response__, 'vendor'),
        version=pulumi.get(__response__, 'version')))
