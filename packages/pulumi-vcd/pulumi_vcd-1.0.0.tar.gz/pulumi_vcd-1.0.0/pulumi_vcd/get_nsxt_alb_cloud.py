# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtAlbCloudResult',
    'AwaitableGetNsxtAlbCloudResult',
    'get_nsxt_alb_cloud',
    'get_nsxt_alb_cloud_output',
]

@pulumi.output_type
class GetNsxtAlbCloudResult:
    """
    A collection of values returned by getNsxtAlbCloud.
    """
    def __init__(__self__, controller_id=None, description=None, health_message=None, health_status=None, id=None, importable_cloud_id=None, name=None, network_pool_id=None, network_pool_name=None):
        if controller_id and not isinstance(controller_id, str):
            raise TypeError("Expected argument 'controller_id' to be a str")
        pulumi.set(__self__, "controller_id", controller_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if health_message and not isinstance(health_message, str):
            raise TypeError("Expected argument 'health_message' to be a str")
        pulumi.set(__self__, "health_message", health_message)
        if health_status and not isinstance(health_status, str):
            raise TypeError("Expected argument 'health_status' to be a str")
        pulumi.set(__self__, "health_status", health_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if importable_cloud_id and not isinstance(importable_cloud_id, str):
            raise TypeError("Expected argument 'importable_cloud_id' to be a str")
        pulumi.set(__self__, "importable_cloud_id", importable_cloud_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_pool_id and not isinstance(network_pool_id, str):
            raise TypeError("Expected argument 'network_pool_id' to be a str")
        pulumi.set(__self__, "network_pool_id", network_pool_id)
        if network_pool_name and not isinstance(network_pool_name, str):
            raise TypeError("Expected argument 'network_pool_name' to be a str")
        pulumi.set(__self__, "network_pool_name", network_pool_name)

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> str:
        return pulumi.get(self, "controller_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> str:
        return pulumi.get(self, "health_message")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importableCloudId")
    def importable_cloud_id(self) -> str:
        return pulumi.get(self, "importable_cloud_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> str:
        return pulumi.get(self, "network_pool_id")

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> str:
        return pulumi.get(self, "network_pool_name")


class AwaitableGetNsxtAlbCloudResult(GetNsxtAlbCloudResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbCloudResult(
            controller_id=self.controller_id,
            description=self.description,
            health_message=self.health_message,
            health_status=self.health_status,
            id=self.id,
            importable_cloud_id=self.importable_cloud_id,
            name=self.name,
            network_pool_id=self.network_pool_id,
            network_pool_name=self.network_pool_name)


def get_nsxt_alb_cloud(name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbCloudResult:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to manage ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that
    consists of an NSX-T Manager and an NSX-T Data Center transport zone.

    > Only `System Administrator` can use this data source.

    > VCD 10.3.0 has a caching bug which prevents listing importable clouds immediately (retrieved using
    [`get_nsxt_alb_importable_cloud`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_alb_importable_cloud)) after ALB
    Controller is created. This data should be available 15 minutes after the Controller is created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_alb_cloud(name="cloud-one")
    ```


    :param str name: Name of ALB Cloud
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbCloud:getNsxtAlbCloud', __args__, opts=opts, typ=GetNsxtAlbCloudResult).value

    return AwaitableGetNsxtAlbCloudResult(
        controller_id=pulumi.get(__ret__, 'controller_id'),
        description=pulumi.get(__ret__, 'description'),
        health_message=pulumi.get(__ret__, 'health_message'),
        health_status=pulumi.get(__ret__, 'health_status'),
        id=pulumi.get(__ret__, 'id'),
        importable_cloud_id=pulumi.get(__ret__, 'importable_cloud_id'),
        name=pulumi.get(__ret__, 'name'),
        network_pool_id=pulumi.get(__ret__, 'network_pool_id'),
        network_pool_name=pulumi.get(__ret__, 'network_pool_name'))
def get_nsxt_alb_cloud_output(name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtAlbCloudResult]:
    """
    Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.

    Provides a data source to manage ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that
    consists of an NSX-T Manager and an NSX-T Data Center transport zone.

    > Only `System Administrator` can use this data source.

    > VCD 10.3.0 has a caching bug which prevents listing importable clouds immediately (retrieved using
    [`get_nsxt_alb_importable_cloud`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_alb_importable_cloud)) after ALB
    Controller is created. This data should be available 15 minutes after the Controller is created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    first = vcd.get_nsxt_alb_cloud(name="cloud-one")
    ```


    :param str name: Name of ALB Cloud
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtAlbCloud:getNsxtAlbCloud', __args__, opts=opts, typ=GetNsxtAlbCloudResult)
    return __ret__.apply(lambda __response__: GetNsxtAlbCloudResult(
        controller_id=pulumi.get(__response__, 'controller_id'),
        description=pulumi.get(__response__, 'description'),
        health_message=pulumi.get(__response__, 'health_message'),
        health_status=pulumi.get(__response__, 'health_status'),
        id=pulumi.get(__response__, 'id'),
        importable_cloud_id=pulumi.get(__response__, 'importable_cloud_id'),
        name=pulumi.get(__response__, 'name'),
        network_pool_id=pulumi.get(__response__, 'network_pool_id'),
        network_pool_name=pulumi.get(__response__, 'network_pool_name')))
