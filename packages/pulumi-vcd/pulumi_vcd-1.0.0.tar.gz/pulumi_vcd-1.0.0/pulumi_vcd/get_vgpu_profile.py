# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVgpuProfileResult',
    'AwaitableGetVgpuProfileResult',
    'get_vgpu_profile',
    'get_vgpu_profile_output',
]

@pulumi.output_type
class GetVgpuProfileResult:
    """
    A collection of values returned by getVgpuProfile.
    """
    def __init__(__self__, id=None, instructions=None, name=None, tenant_facing_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instructions and not isinstance(instructions, str):
            raise TypeError("Expected argument 'instructions' to be a str")
        pulumi.set(__self__, "instructions", instructions)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tenant_facing_name and not isinstance(tenant_facing_name, str):
            raise TypeError("Expected argument 'tenant_facing_name' to be a str")
        pulumi.set(__self__, "tenant_facing_name", tenant_facing_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the vGPU profile.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instructions(self) -> str:
        """
        Instructions for the vGPU profile.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tenantFacingName")
    def tenant_facing_name(self) -> str:
        """
        Tenant facing name of the vGPU profile.
        """
        return pulumi.get(self, "tenant_facing_name")


class AwaitableGetVgpuProfileResult(GetVgpuProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVgpuProfileResult(
            id=self.id,
            instructions=self.instructions,
            name=self.name,
            tenant_facing_name=self.tenant_facing_name)


def get_vgpu_profile(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVgpuProfileResult:
    """
    Supported in provider *3.11* and VCD *10.4.0+*.

    > **Note:** This data source requires system administrator privileges.

    Provides a datasource to read vGPU profiles in VMware Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    profile_name = vcd.get_vgpu_profile(name="my-profile")
    pulumi.export("profileId", profile_name.id)
    ```


    :param str name: The name of the vGPU profile.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVgpuProfile:getVgpuProfile', __args__, opts=opts, typ=GetVgpuProfileResult).value

    return AwaitableGetVgpuProfileResult(
        id=pulumi.get(__ret__, 'id'),
        instructions=pulumi.get(__ret__, 'instructions'),
        name=pulumi.get(__ret__, 'name'),
        tenant_facing_name=pulumi.get(__ret__, 'tenant_facing_name'))
def get_vgpu_profile_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVgpuProfileResult]:
    """
    Supported in provider *3.11* and VCD *10.4.0+*.

    > **Note:** This data source requires system administrator privileges.

    Provides a datasource to read vGPU profiles in VMware Cloud Director.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    profile_name = vcd.get_vgpu_profile(name="my-profile")
    pulumi.export("profileId", profile_name.id)
    ```


    :param str name: The name of the vGPU profile.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVgpuProfile:getVgpuProfile', __args__, opts=opts, typ=GetVgpuProfileResult)
    return __ret__.apply(lambda __response__: GetVgpuProfileResult(
        id=pulumi.get(__response__, 'id'),
        instructions=pulumi.get(__response__, 'instructions'),
        name=pulumi.get(__response__, 'name'),
        tenant_facing_name=pulumi.get(__response__, 'tenant_facing_name')))
