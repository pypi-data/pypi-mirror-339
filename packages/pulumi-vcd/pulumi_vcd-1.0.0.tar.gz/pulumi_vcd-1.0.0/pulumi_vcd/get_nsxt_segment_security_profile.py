# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtSegmentSecurityProfileResult',
    'AwaitableGetNsxtSegmentSecurityProfileResult',
    'get_nsxt_segment_security_profile',
    'get_nsxt_segment_security_profile_output',
]

@pulumi.output_type
class GetNsxtSegmentSecurityProfileResult:
    """
    A collection of values returned by getNsxtSegmentSecurityProfile.
    """
    def __init__(__self__, bpdu_filter_allow_lists=None, description=None, id=None, is_bpdu_filter_enabled=None, is_dhcp_v4_client_block_enabled=None, is_dhcp_v4_server_block_enabled=None, is_dhcp_v6_client_block_enabled=None, is_dhcp_v6_server_block_enabled=None, is_non_ip_traffic_block_enabled=None, is_ra_guard_enabled=None, is_rate_limitting_enabled=None, name=None, nsxt_manager_id=None, rx_broadcast_limit=None, rx_multicast_limit=None, tx_broadcast_limit=None, tx_multicast_limit=None, vdc_group_id=None, vdc_id=None):
        if bpdu_filter_allow_lists and not isinstance(bpdu_filter_allow_lists, list):
            raise TypeError("Expected argument 'bpdu_filter_allow_lists' to be a list")
        pulumi.set(__self__, "bpdu_filter_allow_lists", bpdu_filter_allow_lists)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_bpdu_filter_enabled and not isinstance(is_bpdu_filter_enabled, bool):
            raise TypeError("Expected argument 'is_bpdu_filter_enabled' to be a bool")
        pulumi.set(__self__, "is_bpdu_filter_enabled", is_bpdu_filter_enabled)
        if is_dhcp_v4_client_block_enabled and not isinstance(is_dhcp_v4_client_block_enabled, bool):
            raise TypeError("Expected argument 'is_dhcp_v4_client_block_enabled' to be a bool")
        pulumi.set(__self__, "is_dhcp_v4_client_block_enabled", is_dhcp_v4_client_block_enabled)
        if is_dhcp_v4_server_block_enabled and not isinstance(is_dhcp_v4_server_block_enabled, bool):
            raise TypeError("Expected argument 'is_dhcp_v4_server_block_enabled' to be a bool")
        pulumi.set(__self__, "is_dhcp_v4_server_block_enabled", is_dhcp_v4_server_block_enabled)
        if is_dhcp_v6_client_block_enabled and not isinstance(is_dhcp_v6_client_block_enabled, bool):
            raise TypeError("Expected argument 'is_dhcp_v6_client_block_enabled' to be a bool")
        pulumi.set(__self__, "is_dhcp_v6_client_block_enabled", is_dhcp_v6_client_block_enabled)
        if is_dhcp_v6_server_block_enabled and not isinstance(is_dhcp_v6_server_block_enabled, bool):
            raise TypeError("Expected argument 'is_dhcp_v6_server_block_enabled' to be a bool")
        pulumi.set(__self__, "is_dhcp_v6_server_block_enabled", is_dhcp_v6_server_block_enabled)
        if is_non_ip_traffic_block_enabled and not isinstance(is_non_ip_traffic_block_enabled, bool):
            raise TypeError("Expected argument 'is_non_ip_traffic_block_enabled' to be a bool")
        pulumi.set(__self__, "is_non_ip_traffic_block_enabled", is_non_ip_traffic_block_enabled)
        if is_ra_guard_enabled and not isinstance(is_ra_guard_enabled, bool):
            raise TypeError("Expected argument 'is_ra_guard_enabled' to be a bool")
        pulumi.set(__self__, "is_ra_guard_enabled", is_ra_guard_enabled)
        if is_rate_limitting_enabled and not isinstance(is_rate_limitting_enabled, bool):
            raise TypeError("Expected argument 'is_rate_limitting_enabled' to be a bool")
        pulumi.set(__self__, "is_rate_limitting_enabled", is_rate_limitting_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if rx_broadcast_limit and not isinstance(rx_broadcast_limit, int):
            raise TypeError("Expected argument 'rx_broadcast_limit' to be a int")
        pulumi.set(__self__, "rx_broadcast_limit", rx_broadcast_limit)
        if rx_multicast_limit and not isinstance(rx_multicast_limit, int):
            raise TypeError("Expected argument 'rx_multicast_limit' to be a int")
        pulumi.set(__self__, "rx_multicast_limit", rx_multicast_limit)
        if tx_broadcast_limit and not isinstance(tx_broadcast_limit, int):
            raise TypeError("Expected argument 'tx_broadcast_limit' to be a int")
        pulumi.set(__self__, "tx_broadcast_limit", tx_broadcast_limit)
        if tx_multicast_limit and not isinstance(tx_multicast_limit, int):
            raise TypeError("Expected argument 'tx_multicast_limit' to be a int")
        pulumi.set(__self__, "tx_multicast_limit", tx_multicast_limit)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter(name="bpduFilterAllowLists")
    def bpdu_filter_allow_lists(self) -> Optional[Sequence[str]]:
        """
        Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
        """
        return pulumi.get(self, "bpdu_filter_allow_lists")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of Segment Security Profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBpduFilterEnabled")
    def is_bpdu_filter_enabled(self) -> bool:
        """
        Defines whether BPDU filter is enabled.
        """
        return pulumi.get(self, "is_bpdu_filter_enabled")

    @property
    @pulumi.getter(name="isDhcpV4ClientBlockEnabled")
    def is_dhcp_v4_client_block_enabled(self) -> bool:
        """
        Defines whether DHCP Client block IPv4 is enabled. This filters DHCP Client IPv4 traffic.
        """
        return pulumi.get(self, "is_dhcp_v4_client_block_enabled")

    @property
    @pulumi.getter(name="isDhcpV4ServerBlockEnabled")
    def is_dhcp_v4_server_block_enabled(self) -> bool:
        """
        Defines whether DHCP Server block IPv4 is enabled. This filters DHCP Server IPv4 traffic.
        """
        return pulumi.get(self, "is_dhcp_v4_server_block_enabled")

    @property
    @pulumi.getter(name="isDhcpV6ClientBlockEnabled")
    def is_dhcp_v6_client_block_enabled(self) -> bool:
        """
        Defines whether DHCP Client block IPv6 is enabled. This filters DHCP Client IPv6 traffic.
        """
        return pulumi.get(self, "is_dhcp_v6_client_block_enabled")

    @property
    @pulumi.getter(name="isDhcpV6ServerBlockEnabled")
    def is_dhcp_v6_server_block_enabled(self) -> bool:
        """
        Defines whether DHCP Server block IPv6 is enabled. This filters DHCP Server IPv6 traffic.
        """
        return pulumi.get(self, "is_dhcp_v6_server_block_enabled")

    @property
    @pulumi.getter(name="isNonIpTrafficBlockEnabled")
    def is_non_ip_traffic_block_enabled(self) -> bool:
        """
        Defines whether non IP traffic block is enabled. If true, it blocks all traffic except IP/(G)ARP/BPDU.
        """
        return pulumi.get(self, "is_non_ip_traffic_block_enabled")

    @property
    @pulumi.getter(name="isRaGuardEnabled")
    def is_ra_guard_enabled(self) -> bool:
        """
        Defines whether Router Advertisement Guard is enabled. This filters DHCP Server IPv6 traffic.
        """
        return pulumi.get(self, "is_ra_guard_enabled")

    @property
    @pulumi.getter(name="isRateLimittingEnabled")
    def is_rate_limitting_enabled(self) -> bool:
        """
        Defines whether Rate Limiting is enabled.
        """
        return pulumi.get(self, "is_rate_limitting_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="rxBroadcastLimit")
    def rx_broadcast_limit(self) -> int:
        """
        Incoming broadcast traffic limit in packets per second.
        """
        return pulumi.get(self, "rx_broadcast_limit")

    @property
    @pulumi.getter(name="rxMulticastLimit")
    def rx_multicast_limit(self) -> int:
        """
        Incoming multicast traffic limit in packets per second.
        """
        return pulumi.get(self, "rx_multicast_limit")

    @property
    @pulumi.getter(name="txBroadcastLimit")
    def tx_broadcast_limit(self) -> int:
        """
        Outgoing broadcast traffic limit in packets per second.
        """
        return pulumi.get(self, "tx_broadcast_limit")

    @property
    @pulumi.getter(name="txMulticastLimit")
    def tx_multicast_limit(self) -> int:
        """
        Outgoing multicast traffic limit in packets per second.
        """
        return pulumi.get(self, "tx_multicast_limit")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtSegmentSecurityProfileResult(GetNsxtSegmentSecurityProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtSegmentSecurityProfileResult(
            bpdu_filter_allow_lists=self.bpdu_filter_allow_lists,
            description=self.description,
            id=self.id,
            is_bpdu_filter_enabled=self.is_bpdu_filter_enabled,
            is_dhcp_v4_client_block_enabled=self.is_dhcp_v4_client_block_enabled,
            is_dhcp_v4_server_block_enabled=self.is_dhcp_v4_server_block_enabled,
            is_dhcp_v6_client_block_enabled=self.is_dhcp_v6_client_block_enabled,
            is_dhcp_v6_server_block_enabled=self.is_dhcp_v6_server_block_enabled,
            is_non_ip_traffic_block_enabled=self.is_non_ip_traffic_block_enabled,
            is_ra_guard_enabled=self.is_ra_guard_enabled,
            is_rate_limitting_enabled=self.is_rate_limitting_enabled,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            rx_broadcast_limit=self.rx_broadcast_limit,
            rx_multicast_limit=self.rx_multicast_limit,
            tx_broadcast_limit=self.tx_broadcast_limit,
            tx_multicast_limit=self.tx_multicast_limit,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_segment_security_profile(bpdu_filter_allow_lists: Optional[Sequence[str]] = None,
                                      name: Optional[str] = None,
                                      nsxt_manager_id: Optional[str] = None,
                                      vdc_group_id: Optional[str] = None,
                                      vdc_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtSegmentSecurityProfileResult:
    """
    Provides a VMware Cloud Director NSX-T Segment Security Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### Segment Security Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_security_profile(name="segment-security-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param Sequence[str] bpdu_filter_allow_lists: Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['bpduFilterAllowLists'] = bpdu_filter_allow_lists
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtSegmentSecurityProfile:getNsxtSegmentSecurityProfile', __args__, opts=opts, typ=GetNsxtSegmentSecurityProfileResult).value

    return AwaitableGetNsxtSegmentSecurityProfileResult(
        bpdu_filter_allow_lists=pulumi.get(__ret__, 'bpdu_filter_allow_lists'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_bpdu_filter_enabled=pulumi.get(__ret__, 'is_bpdu_filter_enabled'),
        is_dhcp_v4_client_block_enabled=pulumi.get(__ret__, 'is_dhcp_v4_client_block_enabled'),
        is_dhcp_v4_server_block_enabled=pulumi.get(__ret__, 'is_dhcp_v4_server_block_enabled'),
        is_dhcp_v6_client_block_enabled=pulumi.get(__ret__, 'is_dhcp_v6_client_block_enabled'),
        is_dhcp_v6_server_block_enabled=pulumi.get(__ret__, 'is_dhcp_v6_server_block_enabled'),
        is_non_ip_traffic_block_enabled=pulumi.get(__ret__, 'is_non_ip_traffic_block_enabled'),
        is_ra_guard_enabled=pulumi.get(__ret__, 'is_ra_guard_enabled'),
        is_rate_limitting_enabled=pulumi.get(__ret__, 'is_rate_limitting_enabled'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        rx_broadcast_limit=pulumi.get(__ret__, 'rx_broadcast_limit'),
        rx_multicast_limit=pulumi.get(__ret__, 'rx_multicast_limit'),
        tx_broadcast_limit=pulumi.get(__ret__, 'tx_broadcast_limit'),
        tx_multicast_limit=pulumi.get(__ret__, 'tx_multicast_limit'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxt_segment_security_profile_output(bpdu_filter_allow_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                             name: Optional[pulumi.Input[str]] = None,
                                             nsxt_manager_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtSegmentSecurityProfileResult]:
    """
    Provides a VMware Cloud Director NSX-T Segment Security Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### Segment Security Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_security_profile(name="segment-security-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param Sequence[str] bpdu_filter_allow_lists: Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['bpduFilterAllowLists'] = bpdu_filter_allow_lists
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtSegmentSecurityProfile:getNsxtSegmentSecurityProfile', __args__, opts=opts, typ=GetNsxtSegmentSecurityProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtSegmentSecurityProfileResult(
        bpdu_filter_allow_lists=pulumi.get(__response__, 'bpdu_filter_allow_lists'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        is_bpdu_filter_enabled=pulumi.get(__response__, 'is_bpdu_filter_enabled'),
        is_dhcp_v4_client_block_enabled=pulumi.get(__response__, 'is_dhcp_v4_client_block_enabled'),
        is_dhcp_v4_server_block_enabled=pulumi.get(__response__, 'is_dhcp_v4_server_block_enabled'),
        is_dhcp_v6_client_block_enabled=pulumi.get(__response__, 'is_dhcp_v6_client_block_enabled'),
        is_dhcp_v6_server_block_enabled=pulumi.get(__response__, 'is_dhcp_v6_server_block_enabled'),
        is_non_ip_traffic_block_enabled=pulumi.get(__response__, 'is_non_ip_traffic_block_enabled'),
        is_ra_guard_enabled=pulumi.get(__response__, 'is_ra_guard_enabled'),
        is_rate_limitting_enabled=pulumi.get(__response__, 'is_rate_limitting_enabled'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        rx_broadcast_limit=pulumi.get(__response__, 'rx_broadcast_limit'),
        rx_multicast_limit=pulumi.get(__response__, 'rx_multicast_limit'),
        tx_broadcast_limit=pulumi.get(__response__, 'tx_broadcast_limit'),
        tx_multicast_limit=pulumi.get(__response__, 'tx_multicast_limit'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
