# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVmSizingPolicyResult',
    'AwaitableGetVmSizingPolicyResult',
    'get_vm_sizing_policy',
    'get_vm_sizing_policy_output',
]

@pulumi.output_type
class GetVmSizingPolicyResult:
    """
    A collection of values returned by getVmSizingPolicy.
    """
    def __init__(__self__, cpus=None, description=None, id=None, memories=None, name=None, org=None):
        if cpus and not isinstance(cpus, list):
            raise TypeError("Expected argument 'cpus' to be a list")
        pulumi.set(__self__, "cpus", cpus)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        pulumi.set(__self__, "memories", memories)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetVmSizingPolicyCpusResult']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetVmSizingPolicyMemoryResult']:
        return pulumi.get(self, "memories")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Unneeded property, which was included by mistake""")
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")


class AwaitableGetVmSizingPolicyResult(GetVmSizingPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmSizingPolicyResult(
            cpus=self.cpus,
            description=self.description,
            id=self.id,
            memories=self.memories,
            name=self.name,
            org=self.org)


def get_vm_sizing_policy(name: Optional[str] = None,
                         org: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmSizingPolicyResult:
    """
    Provides a VMware Cloud Director VM sizing policy data source. This can be
    used to read VM sizing policy.

    Supported in provider *v3.0+* and requires VCD 10.0+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_policy_name = vcd.get_vm_sizing_policy(name="my-rule")
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name VM sizing policy
           
           > **Note:**
           Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
           To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
           
           All arguments defined in [`VmSizingPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_sizing_policy#argument-reference) are supported.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmSizingPolicy:getVmSizingPolicy', __args__, opts=opts, typ=GetVmSizingPolicyResult).value

    return AwaitableGetVmSizingPolicyResult(
        cpus=pulumi.get(__ret__, 'cpus'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        memories=pulumi.get(__ret__, 'memories'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'))
def get_vm_sizing_policy_output(name: Optional[pulumi.Input[str]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmSizingPolicyResult]:
    """
    Provides a VMware Cloud Director VM sizing policy data source. This can be
    used to read VM sizing policy.

    Supported in provider *v3.0+* and requires VCD 10.0+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    tf_policy_name = vcd.get_vm_sizing_policy(name="my-rule")
    pulumi.export("policyId", tf_policy_name.id)
    ```


    :param str name: The name VM sizing policy
           
           > **Note:**
           Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
           To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
           
           All arguments defined in [`VmSizingPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_sizing_policy#argument-reference) are supported.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVmSizingPolicy:getVmSizingPolicy', __args__, opts=opts, typ=GetVmSizingPolicyResult)
    return __ret__.apply(lambda __response__: GetVmSizingPolicyResult(
        cpus=pulumi.get(__response__, 'cpus'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        memories=pulumi.get(__response__, 'memories'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org')))
