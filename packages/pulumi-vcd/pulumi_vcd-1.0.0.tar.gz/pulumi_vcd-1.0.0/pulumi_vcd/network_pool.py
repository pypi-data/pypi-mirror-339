# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkPoolArgs', 'NetworkPool']

@pulumi.input_type
class NetworkPoolArgs:
    def __init__(__self__, *,
                 network_provider_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 backing: Optional[pulumi.Input['NetworkPoolBackingArgs']] = None,
                 backing_selection_constraint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkPool resource.
        :param pulumi.Input[str] network_provider_id: Id of the network provider (either vCenter or NSX-T manager)
        :param pulumi.Input[str] type: Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        :param pulumi.Input['NetworkPoolBackingArgs'] backing: The components used by the network pool. See Backing below for details
        :param pulumi.Input[str] backing_selection_constraint: Define how the backing components are considered. It should be one of the following:
               * `use-explicit-name` (Default) The backing components must be named explicitly;
               * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
               * `use-first-available` Use the first available backing component.
        :param pulumi.Input[str] description: Description of the network pool
        :param pulumi.Input[str] name: Unique name of network pool
        """
        pulumi.set(__self__, "network_provider_id", network_provider_id)
        pulumi.set(__self__, "type", type)
        if backing is not None:
            pulumi.set(__self__, "backing", backing)
        if backing_selection_constraint is not None:
            pulumi.set(__self__, "backing_selection_constraint", backing_selection_constraint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="networkProviderId")
    def network_provider_id(self) -> pulumi.Input[str]:
        """
        Id of the network provider (either vCenter or NSX-T manager)
        """
        return pulumi.get(self, "network_provider_id")

    @network_provider_id.setter
    def network_provider_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_provider_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def backing(self) -> Optional[pulumi.Input['NetworkPoolBackingArgs']]:
        """
        The components used by the network pool. See Backing below for details
        """
        return pulumi.get(self, "backing")

    @backing.setter
    def backing(self, value: Optional[pulumi.Input['NetworkPoolBackingArgs']]):
        pulumi.set(self, "backing", value)

    @property
    @pulumi.getter(name="backingSelectionConstraint")
    def backing_selection_constraint(self) -> Optional[pulumi.Input[str]]:
        """
        Define how the backing components are considered. It should be one of the following:
        * `use-explicit-name` (Default) The backing components must be named explicitly;
        * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        * `use-first-available` Use the first available backing component.
        """
        return pulumi.get(self, "backing_selection_constraint")

    @backing_selection_constraint.setter
    def backing_selection_constraint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backing_selection_constraint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of network pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NetworkPoolState:
    def __init__(__self__, *,
                 backing: Optional[pulumi.Input['NetworkPoolBackingArgs']] = None,
                 backing_selection_constraint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_provider_id: Optional[pulumi.Input[str]] = None,
                 network_provider_name: Optional[pulumi.Input[str]] = None,
                 network_provider_type: Optional[pulumi.Input[str]] = None,
                 promiscuous_mode: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 total_backings_count: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 used_backings_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NetworkPool resources.
        :param pulumi.Input['NetworkPoolBackingArgs'] backing: The components used by the network pool. See Backing below for details
        :param pulumi.Input[str] backing_selection_constraint: Define how the backing components are considered. It should be one of the following:
               * `use-explicit-name` (Default) The backing components must be named explicitly;
               * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
               * `use-first-available` Use the first available backing component.
        :param pulumi.Input[str] description: Description of the network pool
        :param pulumi.Input[str] name: Unique name of network pool
        :param pulumi.Input[str] network_provider_id: Id of the network provider (either vCenter or NSX-T manager)
        :param pulumi.Input[str] network_provider_name: Name of the network provider
        :param pulumi.Input[str] network_provider_type: Type of network provider
        :param pulumi.Input[bool] promiscuous_mode: Whether the network pool is in promiscuous mode
        :param pulumi.Input[str] status: Status of the network pool
        :param pulumi.Input[int] total_backings_count: Total number of backings
        :param pulumi.Input[str] type: Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        :param pulumi.Input[int] used_backings_count: Number of used backings
        """
        if backing is not None:
            pulumi.set(__self__, "backing", backing)
        if backing_selection_constraint is not None:
            pulumi.set(__self__, "backing_selection_constraint", backing_selection_constraint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_provider_id is not None:
            pulumi.set(__self__, "network_provider_id", network_provider_id)
        if network_provider_name is not None:
            pulumi.set(__self__, "network_provider_name", network_provider_name)
        if network_provider_type is not None:
            pulumi.set(__self__, "network_provider_type", network_provider_type)
        if promiscuous_mode is not None:
            pulumi.set(__self__, "promiscuous_mode", promiscuous_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_backings_count is not None:
            pulumi.set(__self__, "total_backings_count", total_backings_count)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used_backings_count is not None:
            pulumi.set(__self__, "used_backings_count", used_backings_count)

    @property
    @pulumi.getter
    def backing(self) -> Optional[pulumi.Input['NetworkPoolBackingArgs']]:
        """
        The components used by the network pool. See Backing below for details
        """
        return pulumi.get(self, "backing")

    @backing.setter
    def backing(self, value: Optional[pulumi.Input['NetworkPoolBackingArgs']]):
        pulumi.set(self, "backing", value)

    @property
    @pulumi.getter(name="backingSelectionConstraint")
    def backing_selection_constraint(self) -> Optional[pulumi.Input[str]]:
        """
        Define how the backing components are considered. It should be one of the following:
        * `use-explicit-name` (Default) The backing components must be named explicitly;
        * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        * `use-first-available` Use the first available backing component.
        """
        return pulumi.get(self, "backing_selection_constraint")

    @backing_selection_constraint.setter
    def backing_selection_constraint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backing_selection_constraint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of network pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkProviderId")
    def network_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the network provider (either vCenter or NSX-T manager)
        """
        return pulumi.get(self, "network_provider_id")

    @network_provider_id.setter
    def network_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_provider_id", value)

    @property
    @pulumi.getter(name="networkProviderName")
    def network_provider_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network provider
        """
        return pulumi.get(self, "network_provider_name")

    @network_provider_name.setter
    def network_provider_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_provider_name", value)

    @property
    @pulumi.getter(name="networkProviderType")
    def network_provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of network provider
        """
        return pulumi.get(self, "network_provider_type")

    @network_provider_type.setter
    def network_provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_provider_type", value)

    @property
    @pulumi.getter(name="promiscuousMode")
    def promiscuous_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the network pool is in promiscuous mode
        """
        return pulumi.get(self, "promiscuous_mode")

    @promiscuous_mode.setter
    def promiscuous_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "promiscuous_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the network pool
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="totalBackingsCount")
    def total_backings_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of backings
        """
        return pulumi.get(self, "total_backings_count")

    @total_backings_count.setter
    def total_backings_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_backings_count", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="usedBackingsCount")
    def used_backings_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of used backings
        """
        return pulumi.get(self, "used_backings_count")

    @used_backings_count.setter
    def used_backings_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_backings_count", value)


class NetworkPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backing: Optional[pulumi.Input[Union['NetworkPoolBackingArgs', 'NetworkPoolBackingArgsDict']]] = None,
                 backing_selection_constraint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_provider_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['NetworkPoolBackingArgs', 'NetworkPoolBackingArgsDict']] backing: The components used by the network pool. See Backing below for details
        :param pulumi.Input[str] backing_selection_constraint: Define how the backing components are considered. It should be one of the following:
               * `use-explicit-name` (Default) The backing components must be named explicitly;
               * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
               * `use-first-available` Use the first available backing component.
        :param pulumi.Input[str] description: Description of the network pool
        :param pulumi.Input[str] name: Unique name of network pool
        :param pulumi.Input[str] network_provider_id: Id of the network provider (either vCenter or NSX-T manager)
        :param pulumi.Input[str] type: Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backing: Optional[pulumi.Input[Union['NetworkPoolBackingArgs', 'NetworkPoolBackingArgsDict']]] = None,
                 backing_selection_constraint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_provider_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkPoolArgs.__new__(NetworkPoolArgs)

            __props__.__dict__["backing"] = backing
            __props__.__dict__["backing_selection_constraint"] = backing_selection_constraint
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if network_provider_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_provider_id'")
            __props__.__dict__["network_provider_id"] = network_provider_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["network_provider_name"] = None
            __props__.__dict__["network_provider_type"] = None
            __props__.__dict__["promiscuous_mode"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["total_backings_count"] = None
            __props__.__dict__["used_backings_count"] = None
        super(NetworkPool, __self__).__init__(
            'vcd:index/networkPool:NetworkPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backing: Optional[pulumi.Input[Union['NetworkPoolBackingArgs', 'NetworkPoolBackingArgsDict']]] = None,
            backing_selection_constraint: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_provider_id: Optional[pulumi.Input[str]] = None,
            network_provider_name: Optional[pulumi.Input[str]] = None,
            network_provider_type: Optional[pulumi.Input[str]] = None,
            promiscuous_mode: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            total_backings_count: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            used_backings_count: Optional[pulumi.Input[int]] = None) -> 'NetworkPool':
        """
        Get an existing NetworkPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['NetworkPoolBackingArgs', 'NetworkPoolBackingArgsDict']] backing: The components used by the network pool. See Backing below for details
        :param pulumi.Input[str] backing_selection_constraint: Define how the backing components are considered. It should be one of the following:
               * `use-explicit-name` (Default) The backing components must be named explicitly;
               * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
               * `use-first-available` Use the first available backing component.
        :param pulumi.Input[str] description: Description of the network pool
        :param pulumi.Input[str] name: Unique name of network pool
        :param pulumi.Input[str] network_provider_id: Id of the network provider (either vCenter or NSX-T manager)
        :param pulumi.Input[str] network_provider_name: Name of the network provider
        :param pulumi.Input[str] network_provider_type: Type of network provider
        :param pulumi.Input[bool] promiscuous_mode: Whether the network pool is in promiscuous mode
        :param pulumi.Input[str] status: Status of the network pool
        :param pulumi.Input[int] total_backings_count: Total number of backings
        :param pulumi.Input[str] type: Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        :param pulumi.Input[int] used_backings_count: Number of used backings
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkPoolState.__new__(_NetworkPoolState)

        __props__.__dict__["backing"] = backing
        __props__.__dict__["backing_selection_constraint"] = backing_selection_constraint
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["network_provider_id"] = network_provider_id
        __props__.__dict__["network_provider_name"] = network_provider_name
        __props__.__dict__["network_provider_type"] = network_provider_type
        __props__.__dict__["promiscuous_mode"] = promiscuous_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["total_backings_count"] = total_backings_count
        __props__.__dict__["type"] = type
        __props__.__dict__["used_backings_count"] = used_backings_count
        return NetworkPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def backing(self) -> pulumi.Output['outputs.NetworkPoolBacking']:
        """
        The components used by the network pool. See Backing below for details
        """
        return pulumi.get(self, "backing")

    @property
    @pulumi.getter(name="backingSelectionConstraint")
    def backing_selection_constraint(self) -> pulumi.Output[Optional[str]]:
        """
        Define how the backing components are considered. It should be one of the following:
        * `use-explicit-name` (Default) The backing components must be named explicitly;
        * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        * `use-first-available` Use the first available backing component.
        """
        return pulumi.get(self, "backing_selection_constraint")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the network pool
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name of network pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkProviderId")
    def network_provider_id(self) -> pulumi.Output[str]:
        """
        Id of the network provider (either vCenter or NSX-T manager)
        """
        return pulumi.get(self, "network_provider_id")

    @property
    @pulumi.getter(name="networkProviderName")
    def network_provider_name(self) -> pulumi.Output[str]:
        """
        Name of the network provider
        """
        return pulumi.get(self, "network_provider_name")

    @property
    @pulumi.getter(name="networkProviderType")
    def network_provider_type(self) -> pulumi.Output[str]:
        """
        Type of network provider
        """
        return pulumi.get(self, "network_provider_type")

    @property
    @pulumi.getter(name="promiscuousMode")
    def promiscuous_mode(self) -> pulumi.Output[bool]:
        """
        Whether the network pool is in promiscuous mode
        """
        return pulumi.get(self, "promiscuous_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the network pool
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalBackingsCount")
    def total_backings_count(self) -> pulumi.Output[int]:
        """
        Total number of backings
        """
        return pulumi.get(self, "total_backings_count")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBackingsCount")
    def used_backings_count(self) -> pulumi.Output[int]:
        """
        Number of used backings
        """
        return pulumi.get(self, "used_backings_count")

