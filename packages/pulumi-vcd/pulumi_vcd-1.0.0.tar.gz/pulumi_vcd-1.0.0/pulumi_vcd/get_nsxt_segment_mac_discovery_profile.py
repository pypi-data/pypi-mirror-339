# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtSegmentMacDiscoveryProfileResult',
    'AwaitableGetNsxtSegmentMacDiscoveryProfileResult',
    'get_nsxt_segment_mac_discovery_profile',
    'get_nsxt_segment_mac_discovery_profile_output',
]

@pulumi.output_type
class GetNsxtSegmentMacDiscoveryProfileResult:
    """
    A collection of values returned by getNsxtSegmentMacDiscoveryProfile.
    """
    def __init__(__self__, description=None, id=None, is_mac_change_enabled=None, is_mac_learning_enabled=None, is_unknown_unicast_flooding_enabled=None, mac_learning_aging_time=None, mac_limit=None, mac_policy=None, name=None, nsxt_manager_id=None, vdc_group_id=None, vdc_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_mac_change_enabled and not isinstance(is_mac_change_enabled, bool):
            raise TypeError("Expected argument 'is_mac_change_enabled' to be a bool")
        pulumi.set(__self__, "is_mac_change_enabled", is_mac_change_enabled)
        if is_mac_learning_enabled and not isinstance(is_mac_learning_enabled, bool):
            raise TypeError("Expected argument 'is_mac_learning_enabled' to be a bool")
        pulumi.set(__self__, "is_mac_learning_enabled", is_mac_learning_enabled)
        if is_unknown_unicast_flooding_enabled and not isinstance(is_unknown_unicast_flooding_enabled, bool):
            raise TypeError("Expected argument 'is_unknown_unicast_flooding_enabled' to be a bool")
        pulumi.set(__self__, "is_unknown_unicast_flooding_enabled", is_unknown_unicast_flooding_enabled)
        if mac_learning_aging_time and not isinstance(mac_learning_aging_time, int):
            raise TypeError("Expected argument 'mac_learning_aging_time' to be a int")
        pulumi.set(__self__, "mac_learning_aging_time", mac_learning_aging_time)
        if mac_limit and not isinstance(mac_limit, int):
            raise TypeError("Expected argument 'mac_limit' to be a int")
        pulumi.set(__self__, "mac_limit", mac_limit)
        if mac_policy and not isinstance(mac_policy, str):
            raise TypeError("Expected argument 'mac_policy' to be a str")
        pulumi.set(__self__, "mac_policy", mac_policy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of MAC Discovery Profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMacChangeEnabled")
    def is_mac_change_enabled(self) -> bool:
        """
        Defines whether source MAC address change is enabled
        """
        return pulumi.get(self, "is_mac_change_enabled")

    @property
    @pulumi.getter(name="isMacLearningEnabled")
    def is_mac_learning_enabled(self) -> bool:
        """
        Defines whether source MAC address learning is enabled
        """
        return pulumi.get(self, "is_mac_learning_enabled")

    @property
    @pulumi.getter(name="isUnknownUnicastFloodingEnabled")
    def is_unknown_unicast_flooding_enabled(self) -> bool:
        """
        Defines whether unknown unicast flooding rule is enabled
        This allows flooding for unlearned MAC for ingress traffic
        """
        return pulumi.get(self, "is_unknown_unicast_flooding_enabled")

    @property
    @pulumi.getter(name="macLearningAgingTime")
    def mac_learning_aging_time(self) -> int:
        """
        Aging time in seconds for learned MAC address. Indicates how long
        learned MAC address remain
        """
        return pulumi.get(self, "mac_learning_aging_time")

    @property
    @pulumi.getter(name="macLimit")
    def mac_limit(self) -> int:
        """
        The maximum number of MAC addresses that can be learned on this port
        """
        return pulumi.get(self, "mac_limit")

    @property
    @pulumi.getter(name="macPolicy")
    def mac_policy(self) -> str:
        """
        The policy after MAC Limit is exceeded. It can be either `ALLOW` or `DROP`
        """
        return pulumi.get(self, "mac_policy")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtSegmentMacDiscoveryProfileResult(GetNsxtSegmentMacDiscoveryProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtSegmentMacDiscoveryProfileResult(
            description=self.description,
            id=self.id,
            is_mac_change_enabled=self.is_mac_change_enabled,
            is_mac_learning_enabled=self.is_mac_learning_enabled,
            is_unknown_unicast_flooding_enabled=self.is_unknown_unicast_flooding_enabled,
            mac_learning_aging_time=self.mac_learning_aging_time,
            mac_limit=self.mac_limit,
            mac_policy=self.mac_policy,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_segment_mac_discovery_profile(name: Optional[str] = None,
                                           nsxt_manager_id: Optional[str] = None,
                                           vdc_group_id: Optional[str] = None,
                                           vdc_id: Optional[str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtSegmentMacDiscoveryProfileResult:
    """
    Provides a VMware Cloud Director NSX-T MAC Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### MAC Discovery Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_mac_discovery_profile(name="mac-discovery-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtSegmentMacDiscoveryProfile:getNsxtSegmentMacDiscoveryProfile', __args__, opts=opts, typ=GetNsxtSegmentMacDiscoveryProfileResult).value

    return AwaitableGetNsxtSegmentMacDiscoveryProfileResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_mac_change_enabled=pulumi.get(__ret__, 'is_mac_change_enabled'),
        is_mac_learning_enabled=pulumi.get(__ret__, 'is_mac_learning_enabled'),
        is_unknown_unicast_flooding_enabled=pulumi.get(__ret__, 'is_unknown_unicast_flooding_enabled'),
        mac_learning_aging_time=pulumi.get(__ret__, 'mac_learning_aging_time'),
        mac_limit=pulumi.get(__ret__, 'mac_limit'),
        mac_policy=pulumi.get(__ret__, 'mac_policy'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__ret__, 'vdc_group_id'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxt_segment_mac_discovery_profile_output(name: Optional[pulumi.Input[str]] = None,
                                                  nsxt_manager_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                  vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                  vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtSegmentMacDiscoveryProfileResult]:
    """
    Provides a VMware Cloud Director NSX-T MAC Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.

    Supported in provider *v3.11+*.

    ## Example Usage

    ### MAC Discovery Profile)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    nsxt = vcd.get_nsxt_manager(name="nsxManager1")
    first = vcd.get_nsxt_segment_mac_discovery_profile(name="mac-discovery-profile-0",
        nsxt_manager_id=nsxt.id)
    ```


    :param str name: The name of Segment Profile
    :param str nsxt_manager_id: Segment Profile search context. Use when searching by NSX-T manager
    :param str vdc_group_id: Segment Profile search context. Use when searching by VDC group
           
           > Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
    :param str vdc_id: Segment Profile search context. Use when searching by VDC
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['nsxtManagerId'] = nsxt_manager_id
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtSegmentMacDiscoveryProfile:getNsxtSegmentMacDiscoveryProfile', __args__, opts=opts, typ=GetNsxtSegmentMacDiscoveryProfileResult)
    return __ret__.apply(lambda __response__: GetNsxtSegmentMacDiscoveryProfileResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        is_mac_change_enabled=pulumi.get(__response__, 'is_mac_change_enabled'),
        is_mac_learning_enabled=pulumi.get(__response__, 'is_mac_learning_enabled'),
        is_unknown_unicast_flooding_enabled=pulumi.get(__response__, 'is_unknown_unicast_flooding_enabled'),
        mac_learning_aging_time=pulumi.get(__response__, 'mac_learning_aging_time'),
        mac_limit=pulumi.get(__response__, 'mac_limit'),
        mac_policy=pulumi.get(__response__, 'mac_policy'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        vdc_group_id=pulumi.get(__response__, 'vdc_group_id'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
