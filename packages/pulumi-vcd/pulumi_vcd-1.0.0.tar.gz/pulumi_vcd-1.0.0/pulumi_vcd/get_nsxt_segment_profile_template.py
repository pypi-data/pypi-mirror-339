# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtSegmentProfileTemplateResult',
    'AwaitableGetNsxtSegmentProfileTemplateResult',
    'get_nsxt_segment_profile_template',
    'get_nsxt_segment_profile_template_output',
]

@pulumi.output_type
class GetNsxtSegmentProfileTemplateResult:
    """
    A collection of values returned by getNsxtSegmentProfileTemplate.
    """
    def __init__(__self__, description=None, id=None, ip_discovery_profile_id=None, mac_discovery_profile_id=None, name=None, nsxt_manager_id=None, qos_profile_id=None, segment_security_profile_id=None, spoof_guard_profile_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_discovery_profile_id and not isinstance(ip_discovery_profile_id, str):
            raise TypeError("Expected argument 'ip_discovery_profile_id' to be a str")
        pulumi.set(__self__, "ip_discovery_profile_id", ip_discovery_profile_id)
        if mac_discovery_profile_id and not isinstance(mac_discovery_profile_id, str):
            raise TypeError("Expected argument 'mac_discovery_profile_id' to be a str")
        pulumi.set(__self__, "mac_discovery_profile_id", mac_discovery_profile_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if qos_profile_id and not isinstance(qos_profile_id, str):
            raise TypeError("Expected argument 'qos_profile_id' to be a str")
        pulumi.set(__self__, "qos_profile_id", qos_profile_id)
        if segment_security_profile_id and not isinstance(segment_security_profile_id, str):
            raise TypeError("Expected argument 'segment_security_profile_id' to be a str")
        pulumi.set(__self__, "segment_security_profile_id", segment_security_profile_id)
        if spoof_guard_profile_id and not isinstance(spoof_guard_profile_id, str):
            raise TypeError("Expected argument 'spoof_guard_profile_id' to be a str")
        pulumi.set(__self__, "spoof_guard_profile_id", spoof_guard_profile_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipDiscoveryProfileId")
    def ip_discovery_profile_id(self) -> str:
        return pulumi.get(self, "ip_discovery_profile_id")

    @property
    @pulumi.getter(name="macDiscoveryProfileId")
    def mac_discovery_profile_id(self) -> str:
        return pulumi.get(self, "mac_discovery_profile_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="qosProfileId")
    def qos_profile_id(self) -> str:
        return pulumi.get(self, "qos_profile_id")

    @property
    @pulumi.getter(name="segmentSecurityProfileId")
    def segment_security_profile_id(self) -> str:
        return pulumi.get(self, "segment_security_profile_id")

    @property
    @pulumi.getter(name="spoofGuardProfileId")
    def spoof_guard_profile_id(self) -> str:
        return pulumi.get(self, "spoof_guard_profile_id")


class AwaitableGetNsxtSegmentProfileTemplateResult(GetNsxtSegmentProfileTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtSegmentProfileTemplateResult(
            description=self.description,
            id=self.id,
            ip_discovery_profile_id=self.ip_discovery_profile_id,
            mac_discovery_profile_id=self.mac_discovery_profile_id,
            name=self.name,
            nsxt_manager_id=self.nsxt_manager_id,
            qos_profile_id=self.qos_profile_id,
            segment_security_profile_id=self.segment_security_profile_id,
            spoof_guard_profile_id=self.spoof_guard_profile_id)


def get_nsxt_segment_profile_template(name: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtSegmentProfileTemplateResult:
    """
    Provides a data source to read NSX-T Segment Profile Templates.

    Supported in provider *v3.11+* and VCD 10.4.0+ with NSX-T. Requires System Administrator privileges.

    ## Example Usage

    ### Complete Example With All Segment Profiles)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    complete = vcd.get_nsxt_segment_profile_template(name="my-segment-profile-template-name")
    ```


    :param str name: Name of existing Segment Profile Template
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtSegmentProfileTemplate:getNsxtSegmentProfileTemplate', __args__, opts=opts, typ=GetNsxtSegmentProfileTemplateResult).value

    return AwaitableGetNsxtSegmentProfileTemplateResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ip_discovery_profile_id=pulumi.get(__ret__, 'ip_discovery_profile_id'),
        mac_discovery_profile_id=pulumi.get(__ret__, 'mac_discovery_profile_id'),
        name=pulumi.get(__ret__, 'name'),
        nsxt_manager_id=pulumi.get(__ret__, 'nsxt_manager_id'),
        qos_profile_id=pulumi.get(__ret__, 'qos_profile_id'),
        segment_security_profile_id=pulumi.get(__ret__, 'segment_security_profile_id'),
        spoof_guard_profile_id=pulumi.get(__ret__, 'spoof_guard_profile_id'))
def get_nsxt_segment_profile_template_output(name: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtSegmentProfileTemplateResult]:
    """
    Provides a data source to read NSX-T Segment Profile Templates.

    Supported in provider *v3.11+* and VCD 10.4.0+ with NSX-T. Requires System Administrator privileges.

    ## Example Usage

    ### Complete Example With All Segment Profiles)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    complete = vcd.get_nsxt_segment_profile_template(name="my-segment-profile-template-name")
    ```


    :param str name: Name of existing Segment Profile Template
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtSegmentProfileTemplate:getNsxtSegmentProfileTemplate', __args__, opts=opts, typ=GetNsxtSegmentProfileTemplateResult)
    return __ret__.apply(lambda __response__: GetNsxtSegmentProfileTemplateResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ip_discovery_profile_id=pulumi.get(__response__, 'ip_discovery_profile_id'),
        mac_discovery_profile_id=pulumi.get(__response__, 'mac_discovery_profile_id'),
        name=pulumi.get(__response__, 'name'),
        nsxt_manager_id=pulumi.get(__response__, 'nsxt_manager_id'),
        qos_profile_id=pulumi.get(__response__, 'qos_profile_id'),
        segment_security_profile_id=pulumi.get(__response__, 'segment_security_profile_id'),
        spoof_guard_profile_id=pulumi.get(__response__, 'spoof_guard_profile_id')))
