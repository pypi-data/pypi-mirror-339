# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EdgegatewayVpnArgs', 'EdgegatewayVpn']

@pulumi.input_type
class EdgegatewayVpnArgs:
    def __init__(__self__, *,
                 edge_gateway: pulumi.Input[str],
                 encryption_protocol: pulumi.Input[str],
                 local_id: pulumi.Input[str],
                 local_ip_address: pulumi.Input[str],
                 mtu: pulumi.Input[int],
                 peer_id: pulumi.Input[str],
                 peer_ip_address: pulumi.Input[str],
                 shared_secret: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgegatewayVpn resource.
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the Firewall Rules
        :param pulumi.Input[str] encryption_protocol: E.g. `AES256`
        :param pulumi.Input[str] local_id: Local ID
        :param pulumi.Input[str] local_ip_address: Local IP Address
        :param pulumi.Input[int] mtu: The MTU setting
        :param pulumi.Input[str] peer_id: Peer ID
        :param pulumi.Input[str] peer_ip_address: Peer IP Address
        :param pulumi.Input[str] shared_secret: Shared Secret
        :param pulumi.Input[str] description: A description for the VPN
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]] local_subnets: List of Local Subnets see Local Subnets below for details.
        :param pulumi.Input[str] name: The name of the VPN
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]] peer_subnets: List of Peer Subnets see Peer Subnets below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
               
               <a id="localsubnets"></a>
        """
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        pulumi.set(__self__, "encryption_protocol", encryption_protocol)
        pulumi.set(__self__, "local_id", local_id)
        pulumi.set(__self__, "local_ip_address", local_ip_address)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        pulumi.set(__self__, "shared_secret", shared_secret)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if local_subnets is not None:
            pulumi.set(__self__, "local_subnets", local_subnets)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if peer_subnets is not None:
            pulumi.set(__self__, "peer_subnets", peer_subnets)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Input[str]:
        """
        The name of the edge gateway on which to apply the Firewall Rules
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="encryptionProtocol")
    def encryption_protocol(self) -> pulumi.Input[str]:
        """
        E.g. `AES256`
        """
        return pulumi.get(self, "encryption_protocol")

    @encryption_protocol.setter
    def encryption_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_protocol", value)

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> pulumi.Input[str]:
        """
        Local ID
        """
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_id", value)

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> pulumi.Input[str]:
        """
        Local IP Address
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_ip_address", value)

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Input[int]:
        """
        The MTU setting
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: pulumi.Input[int]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> pulumi.Input[str]:
        """
        Peer ID
        """
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_id", value)

    @property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> pulumi.Input[str]:
        """
        Peer IP Address
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_ip_address", value)

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Input[str]:
        """
        Shared Secret
        """
        return pulumi.get(self, "shared_secret")

    @shared_secret.setter
    def shared_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "shared_secret", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the VPN
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]]:
        """
        List of Local Subnets see Local Subnets below for details.
        """
        return pulumi.get(self, "local_subnets")

    @local_subnets.setter
    def local_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]]):
        pulumi.set(self, "local_subnets", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]]:
        """
        List of Peer Subnets see Peer Subnets below for details.
        """
        return pulumi.get(self, "peer_subnets")

    @peer_subnets.setter
    def peer_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]]):
        pulumi.set(self, "peer_subnets", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level

        <a id="localsubnets"></a>
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _EdgegatewayVpnState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 encryption_protocol: Optional[pulumi.Input[str]] = None,
                 local_id: Optional[pulumi.Input[str]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_id: Optional[pulumi.Input[str]] = None,
                 peer_ip_address: Optional[pulumi.Input[str]] = None,
                 peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EdgegatewayVpn resources.
        :param pulumi.Input[str] description: A description for the VPN
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the Firewall Rules
        :param pulumi.Input[str] encryption_protocol: E.g. `AES256`
        :param pulumi.Input[str] local_id: Local ID
        :param pulumi.Input[str] local_ip_address: Local IP Address
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]] local_subnets: List of Local Subnets see Local Subnets below for details.
        :param pulumi.Input[int] mtu: The MTU setting
        :param pulumi.Input[str] name: The name of the VPN
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_id: Peer ID
        :param pulumi.Input[str] peer_ip_address: Peer IP Address
        :param pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]] peer_subnets: List of Peer Subnets see Peer Subnets below for details.
        :param pulumi.Input[str] shared_secret: Shared Secret
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
               
               <a id="localsubnets"></a>
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway is not None:
            pulumi.set(__self__, "edge_gateway", edge_gateway)
        if encryption_protocol is not None:
            pulumi.set(__self__, "encryption_protocol", encryption_protocol)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if local_subnets is not None:
            pulumi.set(__self__, "local_subnets", local_subnets)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if peer_subnets is not None:
            pulumi.set(__self__, "peer_subnets", peer_subnets)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the VPN
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the edge gateway on which to apply the Firewall Rules
        """
        return pulumi.get(self, "edge_gateway")

    @edge_gateway.setter
    def edge_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway", value)

    @property
    @pulumi.getter(name="encryptionProtocol")
    def encryption_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        E.g. `AES256`
        """
        return pulumi.get(self, "encryption_protocol")

    @encryption_protocol.setter
    def encryption_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_protocol", value)

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID
        """
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_id", value)

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Local IP Address
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ip_address", value)

    @property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]]:
        """
        List of Local Subnets see Local Subnets below for details.
        """
        return pulumi.get(self, "local_subnets")

    @local_subnets.setter
    def local_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnLocalSubnetArgs']]]]):
        pulumi.set(self, "local_subnets", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The MTU setting
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[pulumi.Input[str]]:
        """
        Peer ID
        """
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_id", value)

    @property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Peer IP Address
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip_address", value)

    @property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]]:
        """
        List of Peer Subnets see Peer Subnets below for details.
        """
        return pulumi.get(self, "peer_subnets")

    @peer_subnets.setter
    def peer_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgegatewayVpnPeerSubnetArgs']]]]):
        pulumi.set(self, "peer_subnets", value)

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Shared Secret
        """
        return pulumi.get(self, "shared_secret")

    @shared_secret.setter
    def shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_secret", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level

        <a id="localsubnets"></a>
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class EdgegatewayVpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 encryption_protocol: Optional[pulumi.Input[str]] = None,
                 local_id: Optional[pulumi.Input[str]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnLocalSubnetArgs', 'EdgegatewayVpnLocalSubnetArgsDict']]]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_id: Optional[pulumi.Input[str]] = None,
                 peer_ip_address: Optional[pulumi.Input[str]] = None,
                 peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnPeerSubnetArgs', 'EdgegatewayVpnPeerSubnetArgsDict']]]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a VMware Cloud Director IPsec VPN. This can be used to create,
        modify, and delete VPN settings and rules.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        vpn = vcd.EdgegatewayVpn("vpn",
            edge_gateway="Internet_01(nti0000bi2_123-456-2)",
            name="west-to-east",
            description="Description",
            encryption_protocol="AES256",
            mtu=1400,
            peer_id="64.121.123.11",
            peer_ip_address="64.121.123.11",
            local_id="64.121.123.10",
            local_ip_address="64.121.123.10",
            shared_secret="***********************",
            peer_subnets=[
                {
                    "peer_subnet_name": "DMZ_WEST",
                    "peer_subnet_gateway": "10.0.10.1",
                    "peer_subnet_mask": "255.255.255.0",
                },
                {
                    "peer_subnet_name": "WEB_WEST",
                    "peer_subnet_gateway": "10.0.20.1",
                    "peer_subnet_mask": "255.255.255.0",
                },
            ],
            local_subnets=[
                {
                    "local_subnet_name": "DMZ_EAST",
                    "local_subnet_gateway": "10.0.1.1",
                    "local_subnet_mask": "255.255.255.0",
                },
                {
                    "local_subnet_name": "WEB_EAST",
                    "local_subnet_gateway": "10.0.22.1",
                    "local_subnet_mask": "255.255.255.0",
                },
            ])
        ```

        ## Local Subnets

        Each Local Subnet supports the following attributes:

        * `local_subnet_name` - (Required) Name of the local subnet
        * `local_subnet_gateway` - (Required) Gateway of the local subnet
        * `local_subnet_mask` - (Required) Subnet mask of the local subnet

        <a id="peersubnets"></a>
        ## Peer Subnets

        Each Peer Subnet supports the following attributes:

        * `peer_subnet_name` - (Required) Name of the peer subnet
        * `peer_subnet_gateway` - (Required) Gateway of the peer subnet
        * `peer_subnet_mask` - (Required) Subnet mask of the peer subnet

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the VPN
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the Firewall Rules
        :param pulumi.Input[str] encryption_protocol: E.g. `AES256`
        :param pulumi.Input[str] local_id: Local ID
        :param pulumi.Input[str] local_ip_address: Local IP Address
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnLocalSubnetArgs', 'EdgegatewayVpnLocalSubnetArgsDict']]]] local_subnets: List of Local Subnets see Local Subnets below for details.
        :param pulumi.Input[int] mtu: The MTU setting
        :param pulumi.Input[str] name: The name of the VPN
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_id: Peer ID
        :param pulumi.Input[str] peer_ip_address: Peer IP Address
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnPeerSubnetArgs', 'EdgegatewayVpnPeerSubnetArgsDict']]]] peer_subnets: List of Peer Subnets see Peer Subnets below for details.
        :param pulumi.Input[str] shared_secret: Shared Secret
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
               
               <a id="localsubnets"></a>
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgegatewayVpnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a VMware Cloud Director IPsec VPN. This can be used to create,
        modify, and delete VPN settings and rules.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        vpn = vcd.EdgegatewayVpn("vpn",
            edge_gateway="Internet_01(nti0000bi2_123-456-2)",
            name="west-to-east",
            description="Description",
            encryption_protocol="AES256",
            mtu=1400,
            peer_id="64.121.123.11",
            peer_ip_address="64.121.123.11",
            local_id="64.121.123.10",
            local_ip_address="64.121.123.10",
            shared_secret="***********************",
            peer_subnets=[
                {
                    "peer_subnet_name": "DMZ_WEST",
                    "peer_subnet_gateway": "10.0.10.1",
                    "peer_subnet_mask": "255.255.255.0",
                },
                {
                    "peer_subnet_name": "WEB_WEST",
                    "peer_subnet_gateway": "10.0.20.1",
                    "peer_subnet_mask": "255.255.255.0",
                },
            ],
            local_subnets=[
                {
                    "local_subnet_name": "DMZ_EAST",
                    "local_subnet_gateway": "10.0.1.1",
                    "local_subnet_mask": "255.255.255.0",
                },
                {
                    "local_subnet_name": "WEB_EAST",
                    "local_subnet_gateway": "10.0.22.1",
                    "local_subnet_mask": "255.255.255.0",
                },
            ])
        ```

        ## Local Subnets

        Each Local Subnet supports the following attributes:

        * `local_subnet_name` - (Required) Name of the local subnet
        * `local_subnet_gateway` - (Required) Gateway of the local subnet
        * `local_subnet_mask` - (Required) Subnet mask of the local subnet

        <a id="peersubnets"></a>
        ## Peer Subnets

        Each Peer Subnet supports the following attributes:

        * `peer_subnet_name` - (Required) Name of the peer subnet
        * `peer_subnet_gateway` - (Required) Gateway of the peer subnet
        * `peer_subnet_mask` - (Required) Subnet mask of the peer subnet

        :param str resource_name: The name of the resource.
        :param EdgegatewayVpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgegatewayVpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway: Optional[pulumi.Input[str]] = None,
                 encryption_protocol: Optional[pulumi.Input[str]] = None,
                 local_id: Optional[pulumi.Input[str]] = None,
                 local_ip_address: Optional[pulumi.Input[str]] = None,
                 local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnLocalSubnetArgs', 'EdgegatewayVpnLocalSubnetArgsDict']]]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 peer_id: Optional[pulumi.Input[str]] = None,
                 peer_ip_address: Optional[pulumi.Input[str]] = None,
                 peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnPeerSubnetArgs', 'EdgegatewayVpnPeerSubnetArgsDict']]]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgegatewayVpnArgs.__new__(EdgegatewayVpnArgs)

            __props__.__dict__["description"] = description
            if edge_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway'")
            __props__.__dict__["edge_gateway"] = edge_gateway
            if encryption_protocol is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_protocol'")
            __props__.__dict__["encryption_protocol"] = encryption_protocol
            if local_id is None and not opts.urn:
                raise TypeError("Missing required property 'local_id'")
            __props__.__dict__["local_id"] = local_id
            if local_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'local_ip_address'")
            __props__.__dict__["local_ip_address"] = local_ip_address
            __props__.__dict__["local_subnets"] = local_subnets
            if mtu is None and not opts.urn:
                raise TypeError("Missing required property 'mtu'")
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if peer_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_id'")
            __props__.__dict__["peer_id"] = peer_id
            if peer_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'peer_ip_address'")
            __props__.__dict__["peer_ip_address"] = peer_ip_address
            __props__.__dict__["peer_subnets"] = peer_subnets
            if shared_secret is None and not opts.urn:
                raise TypeError("Missing required property 'shared_secret'")
            __props__.__dict__["shared_secret"] = None if shared_secret is None else pulumi.Output.secret(shared_secret)
            __props__.__dict__["vdc"] = vdc
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sharedSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EdgegatewayVpn, __self__).__init__(
            'vcd:index/edgegatewayVpn:EdgegatewayVpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway: Optional[pulumi.Input[str]] = None,
            encryption_protocol: Optional[pulumi.Input[str]] = None,
            local_id: Optional[pulumi.Input[str]] = None,
            local_ip_address: Optional[pulumi.Input[str]] = None,
            local_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnLocalSubnetArgs', 'EdgegatewayVpnLocalSubnetArgsDict']]]]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            peer_id: Optional[pulumi.Input[str]] = None,
            peer_ip_address: Optional[pulumi.Input[str]] = None,
            peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnPeerSubnetArgs', 'EdgegatewayVpnPeerSubnetArgsDict']]]]] = None,
            shared_secret: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'EdgegatewayVpn':
        """
        Get an existing EdgegatewayVpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the VPN
        :param pulumi.Input[str] edge_gateway: The name of the edge gateway on which to apply the Firewall Rules
        :param pulumi.Input[str] encryption_protocol: E.g. `AES256`
        :param pulumi.Input[str] local_id: Local ID
        :param pulumi.Input[str] local_ip_address: Local IP Address
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnLocalSubnetArgs', 'EdgegatewayVpnLocalSubnetArgsDict']]]] local_subnets: List of Local Subnets see Local Subnets below for details.
        :param pulumi.Input[int] mtu: The MTU setting
        :param pulumi.Input[str] name: The name of the VPN
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] peer_id: Peer ID
        :param pulumi.Input[str] peer_ip_address: Peer IP Address
        :param pulumi.Input[Sequence[pulumi.Input[Union['EdgegatewayVpnPeerSubnetArgs', 'EdgegatewayVpnPeerSubnetArgsDict']]]] peer_subnets: List of Peer Subnets see Peer Subnets below for details.
        :param pulumi.Input[str] shared_secret: Shared Secret
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
               
               <a id="localsubnets"></a>
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgegatewayVpnState.__new__(_EdgegatewayVpnState)

        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway"] = edge_gateway
        __props__.__dict__["encryption_protocol"] = encryption_protocol
        __props__.__dict__["local_id"] = local_id
        __props__.__dict__["local_ip_address"] = local_ip_address
        __props__.__dict__["local_subnets"] = local_subnets
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["peer_id"] = peer_id
        __props__.__dict__["peer_ip_address"] = peer_ip_address
        __props__.__dict__["peer_subnets"] = peer_subnets
        __props__.__dict__["shared_secret"] = shared_secret
        __props__.__dict__["vdc"] = vdc
        return EdgegatewayVpn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description for the VPN
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> pulumi.Output[str]:
        """
        The name of the edge gateway on which to apply the Firewall Rules
        """
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter(name="encryptionProtocol")
    def encryption_protocol(self) -> pulumi.Output[str]:
        """
        E.g. `AES256`
        """
        return pulumi.get(self, "encryption_protocol")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> pulumi.Output[str]:
        """
        Local ID
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> pulumi.Output[str]:
        """
        Local IP Address
        """
        return pulumi.get(self, "local_ip_address")

    @property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> pulumi.Output[Optional[Sequence['outputs.EdgegatewayVpnLocalSubnet']]]:
        """
        List of Local Subnets see Local Subnets below for details.
        """
        return pulumi.get(self, "local_subnets")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        The MTU setting
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the VPN
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> pulumi.Output[str]:
        """
        Peer ID
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> pulumi.Output[str]:
        """
        Peer IP Address
        """
        return pulumi.get(self, "peer_ip_address")

    @property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> pulumi.Output[Optional[Sequence['outputs.EdgegatewayVpnPeerSubnet']]]:
        """
        List of Peer Subnets see Peer Subnets below for details.
        """
        return pulumi.get(self, "peer_subnets")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Output[str]:
        """
        Shared Secret
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level

        <a id="localsubnets"></a>
        """
        return pulumi.get(self, "vdc")

