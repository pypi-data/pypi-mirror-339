# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetOrgLdapResult',
    'AwaitableGetOrgLdapResult',
    'get_org_ldap',
    'get_org_ldap_output',
]

@pulumi.output_type
class GetOrgLdapResult:
    """
    A collection of values returned by getOrgLdap.
    """
    def __init__(__self__, custom_settings=None, custom_user_ou=None, id=None, ldap_mode=None, org_id=None):
        if custom_settings and not isinstance(custom_settings, list):
            raise TypeError("Expected argument 'custom_settings' to be a list")
        pulumi.set(__self__, "custom_settings", custom_settings)
        if custom_user_ou and not isinstance(custom_user_ou, str):
            raise TypeError("Expected argument 'custom_user_ou' to be a str")
        pulumi.set(__self__, "custom_user_ou", custom_user_ou)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ldap_mode and not isinstance(ldap_mode, str):
            raise TypeError("Expected argument 'ldap_mode' to be a str")
        pulumi.set(__self__, "ldap_mode", ldap_mode)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="customSettings")
    def custom_settings(self) -> Sequence['outputs.GetOrgLdapCustomSettingResult']:
        return pulumi.get(self, "custom_settings")

    @property
    @pulumi.getter(name="customUserOu")
    def custom_user_ou(self) -> str:
        return pulumi.get(self, "custom_user_ou")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> str:
        return pulumi.get(self, "ldap_mode")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


class AwaitableGetOrgLdapResult(GetOrgLdapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgLdapResult(
            custom_settings=self.custom_settings,
            custom_user_ou=self.custom_user_ou,
            id=self.id,
            ldap_mode=self.ldap_mode,
            org_id=self.org_id)


def get_org_ldap(org_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgLdapResult:
    """
    Supported in provider *v3.8+*.

    Provides a data source to read LDAP configuration for an organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    first = vcd.get_org_ldap(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the LDAP settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgLdap:getOrgLdap', __args__, opts=opts, typ=GetOrgLdapResult).value

    return AwaitableGetOrgLdapResult(
        custom_settings=pulumi.get(__ret__, 'custom_settings'),
        custom_user_ou=pulumi.get(__ret__, 'custom_user_ou'),
        id=pulumi.get(__ret__, 'id'),
        ldap_mode=pulumi.get(__ret__, 'ldap_mode'),
        org_id=pulumi.get(__ret__, 'org_id'))
def get_org_ldap_output(org_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgLdapResult]:
    """
    Supported in provider *v3.8+*.

    Provides a data source to read LDAP configuration for an organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    first = vcd.get_org_ldap(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the LDAP settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getOrgLdap:getOrgLdap', __args__, opts=opts, typ=GetOrgLdapResult)
    return __ret__.apply(lambda __response__: GetOrgLdapResult(
        custom_settings=pulumi.get(__response__, 'custom_settings'),
        custom_user_ou=pulumi.get(__response__, 'custom_user_ou'),
        id=pulumi.get(__response__, 'id'),
        ldap_mode=pulumi.get(__response__, 'ldap_mode'),
        org_id=pulumi.get(__response__, 'org_id')))
