# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxvDistributedFirewallArgs', 'NsxvDistributedFirewall']

@pulumi.input_type
class NsxvDistributedFirewallArgs:
    def __init__(__self__, *,
                 vdc_id: pulumi.Input[str],
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]] = None):
        """
        The set of arguments for constructing a NsxvDistributedFirewall resource.
        :param pulumi.Input[str] vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        :param pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]] rules: One or more blocks with Firewall Rule definitions. **Order
               defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        """
        pulumi.set(__self__, "vdc_id", vdc_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Input[str]:
        """
        The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]]:
        """
        One or more blocks with Firewall Rule definitions. **Order
        defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _NsxvDistributedFirewallState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxvDistributedFirewall resources.
        :param pulumi.Input[bool] enabled: Shows whether the NSX-V Distributed Firewall is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]] rules: One or more blocks with Firewall Rule definitions. **Order
               defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        :param pulumi.Input[str] vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the NSX-V Distributed Firewall is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]]:
        """
        One or more blocks with Firewall Rule definitions. **Order
        defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvDistributedFirewallRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_id", value)


class NsxvDistributedFirewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvDistributedFirewallRuleArgs', 'NsxvDistributedFirewallRuleArgsDict']]]]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxvDistributedFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxvDistributedFirewallRuleArgs', 'NsxvDistributedFirewallRuleArgsDict']]]] rules: One or more blocks with Firewall Rule definitions. **Order
               defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        :param pulumi.Input[str] vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxvDistributedFirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxvDistributedFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxvDistributedFirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxvDistributedFirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvDistributedFirewallRuleArgs', 'NsxvDistributedFirewallRuleArgsDict']]]]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxvDistributedFirewallArgs.__new__(NsxvDistributedFirewallArgs)

            __props__.__dict__["rules"] = rules
            if vdc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vdc_id'")
            __props__.__dict__["vdc_id"] = vdc_id
            __props__.__dict__["enabled"] = None
        super(NsxvDistributedFirewall, __self__).__init__(
            'vcd:index/nsxvDistributedFirewall:NsxvDistributedFirewall',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxvDistributedFirewallRuleArgs', 'NsxvDistributedFirewallRuleArgsDict']]]]] = None,
            vdc_id: Optional[pulumi.Input[str]] = None) -> 'NsxvDistributedFirewall':
        """
        Get an existing NsxvDistributedFirewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Shows whether the NSX-V Distributed Firewall is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxvDistributedFirewallRuleArgs', 'NsxvDistributedFirewallRuleArgsDict']]]] rules: One or more blocks with Firewall Rule definitions. **Order
               defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        :param pulumi.Input[str] vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxvDistributedFirewallState.__new__(_NsxvDistributedFirewallState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["rules"] = rules
        __props__.__dict__["vdc_id"] = vdc_id
        return NsxvDistributedFirewall(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Shows whether the NSX-V Distributed Firewall is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.NsxvDistributedFirewallRule']]]:
        """
        One or more blocks with Firewall Rule definitions. **Order
        defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Output[str]:
        """
        The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
        """
        return pulumi.get(self, "vdc_id")

