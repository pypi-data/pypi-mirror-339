# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetOrgResult',
    'AwaitableGetOrgResult',
    'get_org',
    'get_org_output',
]

@pulumi.output_type
class GetOrgResult:
    """
    A collection of values returned by getOrg.
    """
    def __init__(__self__, account_lockouts=None, can_publish_catalogs=None, can_publish_external_catalogs=None, can_subscribe_external_catalogs=None, delay_after_power_on_seconds=None, deployed_vm_quota=None, description=None, full_name=None, id=None, is_enabled=None, list_of_catalogs=None, list_of_vdcs=None, metadata=None, metadata_entries=None, name=None, number_of_catalogs=None, number_of_vdcs=None, stored_vm_quota=None, vapp_leases=None, vapp_template_leases=None):
        if account_lockouts and not isinstance(account_lockouts, list):
            raise TypeError("Expected argument 'account_lockouts' to be a list")
        pulumi.set(__self__, "account_lockouts", account_lockouts)
        if can_publish_catalogs and not isinstance(can_publish_catalogs, bool):
            raise TypeError("Expected argument 'can_publish_catalogs' to be a bool")
        pulumi.set(__self__, "can_publish_catalogs", can_publish_catalogs)
        if can_publish_external_catalogs and not isinstance(can_publish_external_catalogs, bool):
            raise TypeError("Expected argument 'can_publish_external_catalogs' to be a bool")
        pulumi.set(__self__, "can_publish_external_catalogs", can_publish_external_catalogs)
        if can_subscribe_external_catalogs and not isinstance(can_subscribe_external_catalogs, bool):
            raise TypeError("Expected argument 'can_subscribe_external_catalogs' to be a bool")
        pulumi.set(__self__, "can_subscribe_external_catalogs", can_subscribe_external_catalogs)
        if delay_after_power_on_seconds and not isinstance(delay_after_power_on_seconds, int):
            raise TypeError("Expected argument 'delay_after_power_on_seconds' to be a int")
        pulumi.set(__self__, "delay_after_power_on_seconds", delay_after_power_on_seconds)
        if deployed_vm_quota and not isinstance(deployed_vm_quota, int):
            raise TypeError("Expected argument 'deployed_vm_quota' to be a int")
        pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if list_of_catalogs and not isinstance(list_of_catalogs, list):
            raise TypeError("Expected argument 'list_of_catalogs' to be a list")
        pulumi.set(__self__, "list_of_catalogs", list_of_catalogs)
        if list_of_vdcs and not isinstance(list_of_vdcs, list):
            raise TypeError("Expected argument 'list_of_vdcs' to be a list")
        pulumi.set(__self__, "list_of_vdcs", list_of_vdcs)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_catalogs and not isinstance(number_of_catalogs, int):
            raise TypeError("Expected argument 'number_of_catalogs' to be a int")
        pulumi.set(__self__, "number_of_catalogs", number_of_catalogs)
        if number_of_vdcs and not isinstance(number_of_vdcs, int):
            raise TypeError("Expected argument 'number_of_vdcs' to be a int")
        pulumi.set(__self__, "number_of_vdcs", number_of_vdcs)
        if stored_vm_quota and not isinstance(stored_vm_quota, int):
            raise TypeError("Expected argument 'stored_vm_quota' to be a int")
        pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if vapp_leases and not isinstance(vapp_leases, list):
            raise TypeError("Expected argument 'vapp_leases' to be a list")
        pulumi.set(__self__, "vapp_leases", vapp_leases)
        if vapp_template_leases and not isinstance(vapp_template_leases, list):
            raise TypeError("Expected argument 'vapp_template_leases' to be a list")
        pulumi.set(__self__, "vapp_template_leases", vapp_template_leases)

    @property
    @pulumi.getter(name="accountLockouts")
    def account_lockouts(self) -> Sequence['outputs.GetOrgAccountLockoutResult']:
        """
        (*v3.14+*) Contains the account lockout properties of the read organization:
        """
        return pulumi.get(self, "account_lockouts")

    @property
    @pulumi.getter(name="canPublishCatalogs")
    def can_publish_catalogs(self) -> bool:
        """
        True if this organization is allowed to share catalogs.
        """
        return pulumi.get(self, "can_publish_catalogs")

    @property
    @pulumi.getter(name="canPublishExternalCatalogs")
    def can_publish_external_catalogs(self) -> bool:
        """
        (*v3.6+*) True if this organization is allowed to publish external catalogs.
        """
        return pulumi.get(self, "can_publish_external_catalogs")

    @property
    @pulumi.getter(name="canSubscribeExternalCatalogs")
    def can_subscribe_external_catalogs(self) -> bool:
        """
        (*v3.6+*) True if this organization is allowed to subscribe to external catalogs.
        """
        return pulumi.get(self, "can_subscribe_external_catalogs")

    @property
    @pulumi.getter(name="delayAfterPowerOnSeconds")
    def delay_after_power_on_seconds(self) -> int:
        """
        Specifies this organization's default for virtual machine boot delay after power on.
        """
        return pulumi.get(self, "delay_after_power_on_seconds")

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> int:
        """
        Maximum number of virtual machines that can be deployed simultaneously by a member of this organization.
        """
        return pulumi.get(self, "deployed_vm_quota")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Org description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        """
        Org full name
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        True if this organization is enabled (allows login and all other operations).
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="listOfCatalogs")
    def list_of_catalogs(self) -> Sequence[str]:
        """
        (*v3.11+*) List of catalogs (sorted alphabetically), owned or shared, available to this organization.
        """
        return pulumi.get(self, "list_of_catalogs")

    @property
    @pulumi.getter(name="listOfVdcs")
    def list_of_vdcs(self) -> Sequence[str]:
        """
        (*v3.11+*) List of VDCs (sorted alphabetically), owned or shared, available to this organization.
        """
        return pulumi.get(self, "list_of_vdcs")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        """
        (Deprecated; *v3.6+*) Use `metadata_entry` instead. Key value map of metadata assigned to this organization.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetOrgMetadataEntryResult']:
        """
        A set of metadata entries assigned to the organization. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfCatalogs")
    def number_of_catalogs(self) -> int:
        """
        (*v3.11+*) Number of catalogs owned or shared, available to this organization.
        """
        return pulumi.get(self, "number_of_catalogs")

    @property
    @pulumi.getter(name="numberOfVdcs")
    def number_of_vdcs(self) -> int:
        """
        (*v3.11+*) Number of VDCs owned or shared, available to this organization.
        """
        return pulumi.get(self, "number_of_vdcs")

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> int:
        """
        Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization.
        """
        return pulumi.get(self, "stored_vm_quota")

    @property
    @pulumi.getter(name="vappLeases")
    def vapp_leases(self) -> Sequence['outputs.GetOrgVappLeaseResult']:
        """
        (*v2.7+*) Defines lease parameters for vApps created in this organization. See vApp Lease below for details.
        """
        return pulumi.get(self, "vapp_leases")

    @property
    @pulumi.getter(name="vappTemplateLeases")
    def vapp_template_leases(self) -> Sequence['outputs.GetOrgVappTemplateLeaseResult']:
        """
        (*v2.7+*) Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.
        """
        return pulumi.get(self, "vapp_template_leases")


class AwaitableGetOrgResult(GetOrgResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgResult(
            account_lockouts=self.account_lockouts,
            can_publish_catalogs=self.can_publish_catalogs,
            can_publish_external_catalogs=self.can_publish_external_catalogs,
            can_subscribe_external_catalogs=self.can_subscribe_external_catalogs,
            delay_after_power_on_seconds=self.delay_after_power_on_seconds,
            deployed_vm_quota=self.deployed_vm_quota,
            description=self.description,
            full_name=self.full_name,
            id=self.id,
            is_enabled=self.is_enabled,
            list_of_catalogs=self.list_of_catalogs,
            list_of_vdcs=self.list_of_vdcs,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            number_of_catalogs=self.number_of_catalogs,
            number_of_vdcs=self.number_of_vdcs,
            stored_vm_quota=self.stored_vm_quota,
            vapp_leases=self.vapp_leases,
            vapp_template_leases=self.vapp_template_leases)


def get_org(name: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgResult:
    """
    Provides a VMware Cloud Director Org data source. An organization can be used to manage catalogs, virtual
    data centers, and users.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    my_org_clone = vcd.Org("my-org-clone",
        name="my-org-clone",
        full_name=my_org.full_name,
        can_publish_catalogs=my_org.can_publish_catalogs,
        deployed_vm_quota=my_org.deployed_vm_quota,
        stored_vm_quota=my_org.stored_vm_quota,
        is_enabled=my_org.is_enabled,
        delete_force=True,
        delete_recursive=True,
        vapp_lease={
            "maximum_runtime_lease_in_sec": my_org.vapp_leases[0].maximum_runtime_lease_in_sec,
            "power_off_on_runtime_lease_expiration": my_org.vapp_leases[0].power_off_on_runtime_lease_expiration,
            "maximum_storage_lease_in_sec": my_org.vapp_leases[0].maximum_storage_lease_in_sec,
            "delete_on_storage_lease_expiration": my_org.vapp_leases[0].delete_on_storage_lease_expiration,
        },
        vapp_template_lease={
            "maximum_storage_lease_in_sec": my_org.vapp_template_leases[0].maximum_storage_lease_in_sec,
            "delete_on_storage_lease_expiration": my_org.vapp_template_leases[0].delete_on_storage_lease_expiration,
        })
    ```

    ## vApp Lease

    The `vapp_lease` section contains lease parameters for vApps created in the current organization, as defined below:

    * `maximum_runtime_lease_in_sec` - How long vApps can run before they are automatically stopped (in seconds)
    * `power_off_on_runtime_lease_expiration` - When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
    * `maximum_storage_lease_in_sec` - How long stopped vApps are available before being automatically cleaned up (in seconds)
    * `delete_on_storage_lease_expiration` - If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.

    <a id="vapp-template-lease"></a>
    ## vApp Template Lease

    The `vapp_template_lease` section contains lease parameters for vApp templates created in the current organization, as defined below:

    * `maximum_storage_lease_in_sec` - How long vApp templates are available before being automatically cleaned up (in seconds)
    * `delete_on_storage_lease_expiration` - If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted

    <a id="metadata"></a>
    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.


    :param str name: Org name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrg:getOrg', __args__, opts=opts, typ=GetOrgResult).value

    return AwaitableGetOrgResult(
        account_lockouts=pulumi.get(__ret__, 'account_lockouts'),
        can_publish_catalogs=pulumi.get(__ret__, 'can_publish_catalogs'),
        can_publish_external_catalogs=pulumi.get(__ret__, 'can_publish_external_catalogs'),
        can_subscribe_external_catalogs=pulumi.get(__ret__, 'can_subscribe_external_catalogs'),
        delay_after_power_on_seconds=pulumi.get(__ret__, 'delay_after_power_on_seconds'),
        deployed_vm_quota=pulumi.get(__ret__, 'deployed_vm_quota'),
        description=pulumi.get(__ret__, 'description'),
        full_name=pulumi.get(__ret__, 'full_name'),
        id=pulumi.get(__ret__, 'id'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        list_of_catalogs=pulumi.get(__ret__, 'list_of_catalogs'),
        list_of_vdcs=pulumi.get(__ret__, 'list_of_vdcs'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        number_of_catalogs=pulumi.get(__ret__, 'number_of_catalogs'),
        number_of_vdcs=pulumi.get(__ret__, 'number_of_vdcs'),
        stored_vm_quota=pulumi.get(__ret__, 'stored_vm_quota'),
        vapp_leases=pulumi.get(__ret__, 'vapp_leases'),
        vapp_template_leases=pulumi.get(__ret__, 'vapp_template_leases'))
def get_org_output(name: Optional[pulumi.Input[str]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgResult]:
    """
    Provides a VMware Cloud Director Org data source. An organization can be used to manage catalogs, virtual
    data centers, and users.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    my_org_clone = vcd.Org("my-org-clone",
        name="my-org-clone",
        full_name=my_org.full_name,
        can_publish_catalogs=my_org.can_publish_catalogs,
        deployed_vm_quota=my_org.deployed_vm_quota,
        stored_vm_quota=my_org.stored_vm_quota,
        is_enabled=my_org.is_enabled,
        delete_force=True,
        delete_recursive=True,
        vapp_lease={
            "maximum_runtime_lease_in_sec": my_org.vapp_leases[0].maximum_runtime_lease_in_sec,
            "power_off_on_runtime_lease_expiration": my_org.vapp_leases[0].power_off_on_runtime_lease_expiration,
            "maximum_storage_lease_in_sec": my_org.vapp_leases[0].maximum_storage_lease_in_sec,
            "delete_on_storage_lease_expiration": my_org.vapp_leases[0].delete_on_storage_lease_expiration,
        },
        vapp_template_lease={
            "maximum_storage_lease_in_sec": my_org.vapp_template_leases[0].maximum_storage_lease_in_sec,
            "delete_on_storage_lease_expiration": my_org.vapp_template_leases[0].delete_on_storage_lease_expiration,
        })
    ```

    ## vApp Lease

    The `vapp_lease` section contains lease parameters for vApps created in the current organization, as defined below:

    * `maximum_runtime_lease_in_sec` - How long vApps can run before they are automatically stopped (in seconds)
    * `power_off_on_runtime_lease_expiration` - When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
    * `maximum_storage_lease_in_sec` - How long stopped vApps are available before being automatically cleaned up (in seconds)
    * `delete_on_storage_lease_expiration` - If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.

    <a id="vapp-template-lease"></a>
    ## vApp Template Lease

    The `vapp_template_lease` section contains lease parameters for vApp templates created in the current organization, as defined below:

    * `maximum_storage_lease_in_sec` - How long vApp templates are available before being automatically cleaned up (in seconds)
    * `delete_on_storage_lease_expiration` - If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted

    <a id="metadata"></a>
    ## Metadata

    The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:

    * `key` - Key of this metadata entry.
    * `value` - Value of this metadata entry.
    * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
    * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
    * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.


    :param str name: Org name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getOrg:getOrg', __args__, opts=opts, typ=GetOrgResult)
    return __ret__.apply(lambda __response__: GetOrgResult(
        account_lockouts=pulumi.get(__response__, 'account_lockouts'),
        can_publish_catalogs=pulumi.get(__response__, 'can_publish_catalogs'),
        can_publish_external_catalogs=pulumi.get(__response__, 'can_publish_external_catalogs'),
        can_subscribe_external_catalogs=pulumi.get(__response__, 'can_subscribe_external_catalogs'),
        delay_after_power_on_seconds=pulumi.get(__response__, 'delay_after_power_on_seconds'),
        deployed_vm_quota=pulumi.get(__response__, 'deployed_vm_quota'),
        description=pulumi.get(__response__, 'description'),
        full_name=pulumi.get(__response__, 'full_name'),
        id=pulumi.get(__response__, 'id'),
        is_enabled=pulumi.get(__response__, 'is_enabled'),
        list_of_catalogs=pulumi.get(__response__, 'list_of_catalogs'),
        list_of_vdcs=pulumi.get(__response__, 'list_of_vdcs'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        number_of_catalogs=pulumi.get(__response__, 'number_of_catalogs'),
        number_of_vdcs=pulumi.get(__response__, 'number_of_vdcs'),
        stored_vm_quota=pulumi.get(__response__, 'stored_vm_quota'),
        vapp_leases=pulumi.get(__response__, 'vapp_leases'),
        vapp_template_leases=pulumi.get(__response__, 'vapp_template_leases')))
