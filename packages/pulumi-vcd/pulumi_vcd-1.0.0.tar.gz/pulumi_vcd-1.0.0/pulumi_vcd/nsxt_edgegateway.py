# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtEdgegatewayArgs', 'NsxtEdgegateway']

@pulumi.input_type
class NsxtEdgegatewayArgs:
    def __init__(__self__, *,
                 external_network_id: pulumi.Input[str],
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 deployment_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]] = None,
                 ip_count_read_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 non_distributed_routing_enabled: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnet_with_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]] = None,
                 subnet_with_total_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]] = None,
                 total_allocated_ip_count: Optional[pulumi.Input[int]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegateway resource.
        :param pulumi.Input[str] external_network_id: An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
               can be used to lookup ID by name.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        :param pulumi.Input[str] deployment_mode: `ACTIVE_STANDBY` (default) or
               `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
               router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
               nature guarantees high north-south data throughput.
        :param pulumi.Input[str] description: A unique name for the edge gateway.
        :param pulumi.Input[str] edge_cluster_id: Specific Edge Cluster ID if required
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]] external_networks: attaches NSX-T Segment backed External
               Networks with a given configuration block. It *does not
               support IP Spaces*.
        :param pulumi.Input[int] ip_count_read_limit: Sets a limit of IPs to count for
               `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
               counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
               only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
               data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
               specify `0` for *unlimited* value.
               
               <a id="ip-allocation-modes"></a>
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[bool] non_distributed_routing_enabled: Non-Distributed routing will allow
               tenants the option of connecting Org Vdc networks to the Service
               Router. This would
               force all VM traffic through the service router for that network. Default `false`.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] owner_id: The ID of VDC or VDC Group. **Note:** Data sources
               [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
               [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
               name.
               
               > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
               definition at provider level.
               
               > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
               (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
               is to pick egress traffic origin for multi datacenter VDC Groups.
        :param pulumi.Input[str] starting_vdc_id: If `owner_id` is a VDC Group, by default Edge
               Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
               to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
               Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]] subnet_with_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]] subnet_with_total_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]] subnets: One or more subnets defined for Edge Gateway. One of
               `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
               network is backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[int] total_allocated_ip_count: Required with `subnet_with_total_ip_count`. It is
               **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
               **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        :param pulumi.Input[str] vdc: **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
               gateway. Can be inherited from `provider` configuration if not defined here.
        """
        pulumi.set(__self__, "external_network_id", external_network_id)
        if dedicate_external_network is not None:
            pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if deployment_mode is not None:
            pulumi.set(__self__, "deployment_mode", deployment_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if external_networks is not None:
            pulumi.set(__self__, "external_networks", external_networks)
        if ip_count_read_limit is not None:
            pulumi.set(__self__, "ip_count_read_limit", ip_count_read_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if non_distributed_routing_enabled is not None:
            pulumi.set(__self__, "non_distributed_routing_enabled", non_distributed_routing_enabled)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if starting_vdc_id is not None:
            pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if subnet_with_ip_counts is not None:
            pulumi.set(__self__, "subnet_with_ip_counts", subnet_with_ip_counts)
        if subnet_with_total_ip_counts is not None:
            pulumi.set(__self__, "subnet_with_total_ip_counts", subnet_with_total_ip_counts)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if total_allocated_ip_count is not None:
            pulumi.set(__self__, "total_allocated_ip_count", total_allocated_ip_count)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> pulumi.Input[str]:
        """
        An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        can be used to lookup ID by name.
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        """
        return pulumi.get(self, "dedicate_external_network")

    @dedicate_external_network.setter
    def dedicate_external_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicate_external_network", value)

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[pulumi.Input[str]]:
        """
        `ACTIVE_STANDBY` (default) or
        `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        nature guarantees high north-south data throughput.
        """
        return pulumi.get(self, "deployment_mode")

    @deployment_mode.setter
    def deployment_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specific Edge Cluster ID if required
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]]:
        """
        attaches NSX-T Segment backed External
        Networks with a given configuration block. It *does not
        support IP Spaces*.
        """
        return pulumi.get(self, "external_networks")

    @external_networks.setter
    def external_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]]):
        pulumi.set(self, "external_networks", value)

    @property
    @pulumi.getter(name="ipCountReadLimit")
    def ip_count_read_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Sets a limit of IPs to count for
        `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        specify `0` for *unlimited* value.

        <a id="ip-allocation-modes"></a>
        """
        return pulumi.get(self, "ip_count_read_limit")

    @ip_count_read_limit.setter
    def ip_count_read_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_count_read_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nonDistributedRoutingEnabled")
    def non_distributed_routing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Non-Distributed routing will allow
        tenants the option of connecting Org Vdc networks to the Service
        Router. This would
        force all VM traffic through the service router for that network. Default `false`.
        """
        return pulumi.get(self, "non_distributed_routing_enabled")

    @non_distributed_routing_enabled.setter
    def non_distributed_routing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "non_distributed_routing_enabled", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VDC or VDC Group. **Note:** Data sources
        [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        name.

        > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        definition at provider level.

        > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        is to pick egress traffic origin for multi datacenter VDC Groups.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        If `owner_id` is a VDC Group, by default Edge
        Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter(name="subnetWithIpCounts")
    def subnet_with_ip_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_ip_counts")

    @subnet_with_ip_counts.setter
    def subnet_with_ip_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]]):
        pulumi.set(self, "subnet_with_ip_counts", value)

    @property
    @pulumi.getter(name="subnetWithTotalIpCounts")
    def subnet_with_total_ip_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_total_ip_counts")

    @subnet_with_total_ip_counts.setter
    def subnet_with_total_ip_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]]):
        pulumi.set(self, "subnet_with_total_ip_counts", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]:
        """
        One or more subnets defined for Edge Gateway. One of
        `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        network is backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="totalAllocatedIpCount")
    def total_allocated_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        Required with `subnet_with_total_ip_count`. It is
        **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        """
        return pulumi.get(self, "total_allocated_ip_count")

    @total_allocated_ip_count.setter
    def total_allocated_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_allocated_ip_count", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        gateway. Can be inherited from `provider` configuration if not defined here.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtEdgegatewayState:
    def __init__(__self__, *,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 deployment_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_allocated_ip_count: Optional[pulumi.Input[int]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]] = None,
                 ip_count_read_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 non_distributed_routing_enabled: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_ip: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnet_with_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]] = None,
                 subnet_with_total_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]] = None,
                 total_allocated_ip_count: Optional[pulumi.Input[int]] = None,
                 unused_ip_count: Optional[pulumi.Input[int]] = None,
                 use_ip_spaces: Optional[pulumi.Input[bool]] = None,
                 used_ip_count: Optional[pulumi.Input[int]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegateway resources.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        :param pulumi.Input[str] deployment_mode: `ACTIVE_STANDBY` (default) or
               `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
               router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
               nature guarantees high north-south data throughput.
        :param pulumi.Input[str] description: A unique name for the edge gateway.
        :param pulumi.Input[str] edge_cluster_id: Specific Edge Cluster ID if required
        :param pulumi.Input[int] external_network_allocated_ip_count: Total allocated IP count in attached NSX-T Segment backed
               external networks
        :param pulumi.Input[str] external_network_id: An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
               can be used to lookup ID by name.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]] external_networks: attaches NSX-T Segment backed External
               Networks with a given configuration block. It *does not
               support IP Spaces*.
        :param pulumi.Input[int] ip_count_read_limit: Sets a limit of IPs to count for
               `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
               counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
               only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
               data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
               specify `0` for *unlimited* value.
               
               <a id="ip-allocation-modes"></a>
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[bool] non_distributed_routing_enabled: Non-Distributed routing will allow
               tenants the option of connecting Org Vdc networks to the Service
               Router. This would
               force all VM traffic through the service router for that network. Default `false`.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] owner_id: The ID of VDC or VDC Group. **Note:** Data sources
               [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
               [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
               name.
               
               > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
               definition at provider level.
               
               > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
               (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
               is to pick egress traffic origin for multi datacenter VDC Groups.
        :param pulumi.Input[str] primary_ip: Primary IP address exposed for an easy access without nesting.
        :param pulumi.Input[str] starting_vdc_id: If `owner_id` is a VDC Group, by default Edge
               Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
               to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
               Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]] subnet_with_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]] subnet_with_total_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]] subnets: One or more subnets defined for Edge Gateway. One of
               `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
               network is backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[int] total_allocated_ip_count: Required with `subnet_with_total_ip_count`. It is
               **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
               **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        :param pulumi.Input[int] unused_ip_count: Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
               exposed when using IP Spaces.
        :param pulumi.Input[bool] use_ip_spaces: Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        :param pulumi.Input[int] used_ip_count: Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
               exposed when using IP Spaces.
        :param pulumi.Input[str] vdc: **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
               gateway. Can be inherited from `provider` configuration if not defined here.
        """
        if dedicate_external_network is not None:
            pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if deployment_mode is not None:
            pulumi.set(__self__, "deployment_mode", deployment_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if external_network_allocated_ip_count is not None:
            pulumi.set(__self__, "external_network_allocated_ip_count", external_network_allocated_ip_count)
        if external_network_id is not None:
            pulumi.set(__self__, "external_network_id", external_network_id)
        if external_networks is not None:
            pulumi.set(__self__, "external_networks", external_networks)
        if ip_count_read_limit is not None:
            pulumi.set(__self__, "ip_count_read_limit", ip_count_read_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if non_distributed_routing_enabled is not None:
            pulumi.set(__self__, "non_distributed_routing_enabled", non_distributed_routing_enabled)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if starting_vdc_id is not None:
            pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if subnet_with_ip_counts is not None:
            pulumi.set(__self__, "subnet_with_ip_counts", subnet_with_ip_counts)
        if subnet_with_total_ip_counts is not None:
            pulumi.set(__self__, "subnet_with_total_ip_counts", subnet_with_total_ip_counts)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if total_allocated_ip_count is not None:
            pulumi.set(__self__, "total_allocated_ip_count", total_allocated_ip_count)
        if unused_ip_count is not None:
            pulumi.set(__self__, "unused_ip_count", unused_ip_count)
        if use_ip_spaces is not None:
            pulumi.set(__self__, "use_ip_spaces", use_ip_spaces)
        if used_ip_count is not None:
            pulumi.set(__self__, "used_ip_count", used_ip_count)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        """
        return pulumi.get(self, "dedicate_external_network")

    @dedicate_external_network.setter
    def dedicate_external_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicate_external_network", value)

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[pulumi.Input[str]]:
        """
        `ACTIVE_STANDBY` (default) or
        `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        nature guarantees high north-south data throughput.
        """
        return pulumi.get(self, "deployment_mode")

    @deployment_mode.setter
    def deployment_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specific Edge Cluster ID if required
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter(name="externalNetworkAllocatedIpCount")
    def external_network_allocated_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total allocated IP count in attached NSX-T Segment backed
        external networks
        """
        return pulumi.get(self, "external_network_allocated_ip_count")

    @external_network_allocated_ip_count.setter
    def external_network_allocated_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_network_allocated_ip_count", value)

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        can be used to lookup ID by name.
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]]:
        """
        attaches NSX-T Segment backed External
        Networks with a given configuration block. It *does not
        support IP Spaces*.
        """
        return pulumi.get(self, "external_networks")

    @external_networks.setter
    def external_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayExternalNetworkArgs']]]]):
        pulumi.set(self, "external_networks", value)

    @property
    @pulumi.getter(name="ipCountReadLimit")
    def ip_count_read_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Sets a limit of IPs to count for
        `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        specify `0` for *unlimited* value.

        <a id="ip-allocation-modes"></a>
        """
        return pulumi.get(self, "ip_count_read_limit")

    @ip_count_read_limit.setter
    def ip_count_read_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_count_read_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nonDistributedRoutingEnabled")
    def non_distributed_routing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Non-Distributed routing will allow
        tenants the option of connecting Org Vdc networks to the Service
        Router. This would
        force all VM traffic through the service router for that network. Default `false`.
        """
        return pulumi.get(self, "non_distributed_routing_enabled")

    @non_distributed_routing_enabled.setter
    def non_distributed_routing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "non_distributed_routing_enabled", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VDC or VDC Group. **Note:** Data sources
        [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        name.

        > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        definition at provider level.

        > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        is to pick egress traffic origin for multi datacenter VDC Groups.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IP address exposed for an easy access without nesting.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        If `owner_id` is a VDC Group, by default Edge
        Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter(name="subnetWithIpCounts")
    def subnet_with_ip_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_ip_counts")

    @subnet_with_ip_counts.setter
    def subnet_with_ip_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithIpCountArgs']]]]):
        pulumi.set(self, "subnet_with_ip_counts", value)

    @property
    @pulumi.getter(name="subnetWithTotalIpCounts")
    def subnet_with_total_ip_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_total_ip_counts")

    @subnet_with_total_ip_counts.setter
    def subnet_with_total_ip_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetWithTotalIpCountArgs']]]]):
        pulumi.set(self, "subnet_with_total_ip_counts", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]:
        """
        One or more subnets defined for Edge Gateway. One of
        `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        network is backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="totalAllocatedIpCount")
    def total_allocated_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        Required with `subnet_with_total_ip_count`. It is
        **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        """
        return pulumi.get(self, "total_allocated_ip_count")

    @total_allocated_ip_count.setter
    def total_allocated_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_allocated_ip_count", value)

    @property
    @pulumi.getter(name="unusedIpCount")
    def unused_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        exposed when using IP Spaces.
        """
        return pulumi.get(self, "unused_ip_count")

    @unused_ip_count.setter
    def unused_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unused_ip_count", value)

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        """
        return pulumi.get(self, "use_ip_spaces")

    @use_ip_spaces.setter
    def use_ip_spaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ip_spaces", value)

    @property
    @pulumi.getter(name="usedIpCount")
    def used_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        exposed when using IP Spaces.
        """
        return pulumi.get(self, "used_ip_count")

    @used_ip_count.setter
    def used_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_ip_count", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        gateway. Can be inherited from `provider` configuration if not defined here.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtEdgegateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 deployment_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayExternalNetworkArgs', 'NsxtEdgegatewayExternalNetworkArgsDict']]]]] = None,
                 ip_count_read_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 non_distributed_routing_enabled: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnet_with_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithIpCountArgs', 'NsxtEdgegatewaySubnetWithIpCountArgsDict']]]]] = None,
                 subnet_with_total_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithTotalIpCountArgs', 'NsxtEdgegatewaySubnetWithTotalIpCountArgsDict']]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetArgs', 'NsxtEdgegatewaySubnetArgsDict']]]]] = None,
                 total_allocated_ip_count: Optional[pulumi.Input[int]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        :param pulumi.Input[str] deployment_mode: `ACTIVE_STANDBY` (default) or
               `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
               router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
               nature guarantees high north-south data throughput.
        :param pulumi.Input[str] description: A unique name for the edge gateway.
        :param pulumi.Input[str] edge_cluster_id: Specific Edge Cluster ID if required
        :param pulumi.Input[str] external_network_id: An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
               can be used to lookup ID by name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayExternalNetworkArgs', 'NsxtEdgegatewayExternalNetworkArgsDict']]]] external_networks: attaches NSX-T Segment backed External
               Networks with a given configuration block. It *does not
               support IP Spaces*.
        :param pulumi.Input[int] ip_count_read_limit: Sets a limit of IPs to count for
               `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
               counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
               only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
               data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
               specify `0` for *unlimited* value.
               
               <a id="ip-allocation-modes"></a>
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[bool] non_distributed_routing_enabled: Non-Distributed routing will allow
               tenants the option of connecting Org Vdc networks to the Service
               Router. This would
               force all VM traffic through the service router for that network. Default `false`.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] owner_id: The ID of VDC or VDC Group. **Note:** Data sources
               [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
               [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
               name.
               
               > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
               definition at provider level.
               
               > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
               (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
               is to pick egress traffic origin for multi datacenter VDC Groups.
        :param pulumi.Input[str] starting_vdc_id: If `owner_id` is a VDC Group, by default Edge
               Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
               to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
               Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithIpCountArgs', 'NsxtEdgegatewaySubnetWithIpCountArgsDict']]]] subnet_with_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithTotalIpCountArgs', 'NsxtEdgegatewaySubnetWithTotalIpCountArgsDict']]]] subnet_with_total_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetArgs', 'NsxtEdgegatewaySubnetArgsDict']]]] subnets: One or more subnets defined for Edge Gateway. One of
               `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
               network is backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[int] total_allocated_ip_count: Required with `subnet_with_total_ip_count`. It is
               **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
               **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        :param pulumi.Input[str] vdc: **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
               gateway. Can be inherited from `provider` configuration if not defined here.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 deployment_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayExternalNetworkArgs', 'NsxtEdgegatewayExternalNetworkArgsDict']]]]] = None,
                 ip_count_read_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 non_distributed_routing_enabled: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnet_with_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithIpCountArgs', 'NsxtEdgegatewaySubnetWithIpCountArgsDict']]]]] = None,
                 subnet_with_total_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithTotalIpCountArgs', 'NsxtEdgegatewaySubnetWithTotalIpCountArgsDict']]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetArgs', 'NsxtEdgegatewaySubnetArgsDict']]]]] = None,
                 total_allocated_ip_count: Optional[pulumi.Input[int]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayArgs.__new__(NsxtEdgegatewayArgs)

            __props__.__dict__["dedicate_external_network"] = dedicate_external_network
            __props__.__dict__["deployment_mode"] = deployment_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["edge_cluster_id"] = edge_cluster_id
            if external_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'external_network_id'")
            __props__.__dict__["external_network_id"] = external_network_id
            __props__.__dict__["external_networks"] = external_networks
            __props__.__dict__["ip_count_read_limit"] = ip_count_read_limit
            __props__.__dict__["name"] = name
            __props__.__dict__["non_distributed_routing_enabled"] = non_distributed_routing_enabled
            __props__.__dict__["org"] = org
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["starting_vdc_id"] = starting_vdc_id
            __props__.__dict__["subnet_with_ip_counts"] = subnet_with_ip_counts
            __props__.__dict__["subnet_with_total_ip_counts"] = subnet_with_total_ip_counts
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["total_allocated_ip_count"] = total_allocated_ip_count
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["external_network_allocated_ip_count"] = None
            __props__.__dict__["primary_ip"] = None
            __props__.__dict__["unused_ip_count"] = None
            __props__.__dict__["use_ip_spaces"] = None
            __props__.__dict__["used_ip_count"] = None
        super(NsxtEdgegateway, __self__).__init__(
            'vcd:index/nsxtEdgegateway:NsxtEdgegateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dedicate_external_network: Optional[pulumi.Input[bool]] = None,
            deployment_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_cluster_id: Optional[pulumi.Input[str]] = None,
            external_network_allocated_ip_count: Optional[pulumi.Input[int]] = None,
            external_network_id: Optional[pulumi.Input[str]] = None,
            external_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayExternalNetworkArgs', 'NsxtEdgegatewayExternalNetworkArgsDict']]]]] = None,
            ip_count_read_limit: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            non_distributed_routing_enabled: Optional[pulumi.Input[bool]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            primary_ip: Optional[pulumi.Input[str]] = None,
            starting_vdc_id: Optional[pulumi.Input[str]] = None,
            subnet_with_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithIpCountArgs', 'NsxtEdgegatewaySubnetWithIpCountArgsDict']]]]] = None,
            subnet_with_total_ip_counts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithTotalIpCountArgs', 'NsxtEdgegatewaySubnetWithTotalIpCountArgsDict']]]]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetArgs', 'NsxtEdgegatewaySubnetArgsDict']]]]] = None,
            total_allocated_ip_count: Optional[pulumi.Input[int]] = None,
            unused_ip_count: Optional[pulumi.Input[int]] = None,
            use_ip_spaces: Optional[pulumi.Input[bool]] = None,
            used_ip_count: Optional[pulumi.Input[int]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegateway':
        """
        Get an existing NsxtEdgegateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        :param pulumi.Input[str] deployment_mode: `ACTIVE_STANDBY` (default) or
               `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
               router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
               nature guarantees high north-south data throughput.
        :param pulumi.Input[str] description: A unique name for the edge gateway.
        :param pulumi.Input[str] edge_cluster_id: Specific Edge Cluster ID if required
        :param pulumi.Input[int] external_network_allocated_ip_count: Total allocated IP count in attached NSX-T Segment backed
               external networks
        :param pulumi.Input[str] external_network_id: An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
               can be used to lookup ID by name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayExternalNetworkArgs', 'NsxtEdgegatewayExternalNetworkArgsDict']]]] external_networks: attaches NSX-T Segment backed External
               Networks with a given configuration block. It *does not
               support IP Spaces*.
        :param pulumi.Input[int] ip_count_read_limit: Sets a limit of IPs to count for
               `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
               counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
               only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
               data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
               specify `0` for *unlimited* value.
               
               <a id="ip-allocation-modes"></a>
        :param pulumi.Input[str] name: A unique name for the edge gateway.
        :param pulumi.Input[bool] non_distributed_routing_enabled: Non-Distributed routing will allow
               tenants the option of connecting Org Vdc networks to the Service
               Router. This would
               force all VM traffic through the service router for that network. Default `false`.
        :param pulumi.Input[str] org: The name of organization to which the VDC belongs. Optional if defined at provider level.
        :param pulumi.Input[str] owner_id: The ID of VDC or VDC Group. **Note:** Data sources
               [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
               [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
               name.
               
               > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
               definition at provider level.
               
               > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
               (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
               is to pick egress traffic origin for multi datacenter VDC Groups.
        :param pulumi.Input[str] primary_ip: Primary IP address exposed for an easy access without nesting.
        :param pulumi.Input[str] starting_vdc_id: If `owner_id` is a VDC Group, by default Edge
               Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
               to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
               Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithIpCountArgs', 'NsxtEdgegatewaySubnetWithIpCountArgsDict']]]] subnet_with_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetWithTotalIpCountArgs', 'NsxtEdgegatewaySubnetWithTotalIpCountArgsDict']]]] subnet_with_total_ip_counts: One or more
               subnets defined for Edge Gateway. One of `subnet`,
               `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
               backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewaySubnetArgs', 'NsxtEdgegatewaySubnetArgsDict']]]] subnets: One or more subnets defined for Edge Gateway. One of
               `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
               network is backed by *IP Spaces*. Read more in IP allocation modes section.
        :param pulumi.Input[int] total_allocated_ip_count: Required with `subnet_with_total_ip_count`. It is
               **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
               **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        :param pulumi.Input[int] unused_ip_count: Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
               exposed when using IP Spaces.
        :param pulumi.Input[bool] use_ip_spaces: Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        :param pulumi.Input[int] used_ip_count: Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
               exposed when using IP Spaces.
        :param pulumi.Input[str] vdc: **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
               gateway. Can be inherited from `provider` configuration if not defined here.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayState.__new__(_NsxtEdgegatewayState)

        __props__.__dict__["dedicate_external_network"] = dedicate_external_network
        __props__.__dict__["deployment_mode"] = deployment_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_cluster_id"] = edge_cluster_id
        __props__.__dict__["external_network_allocated_ip_count"] = external_network_allocated_ip_count
        __props__.__dict__["external_network_id"] = external_network_id
        __props__.__dict__["external_networks"] = external_networks
        __props__.__dict__["ip_count_read_limit"] = ip_count_read_limit
        __props__.__dict__["name"] = name
        __props__.__dict__["non_distributed_routing_enabled"] = non_distributed_routing_enabled
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["starting_vdc_id"] = starting_vdc_id
        __props__.__dict__["subnet_with_ip_counts"] = subnet_with_ip_counts
        __props__.__dict__["subnet_with_total_ip_counts"] = subnet_with_total_ip_counts
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["total_allocated_ip_count"] = total_allocated_ip_count
        __props__.__dict__["unused_ip_count"] = unused_ip_count
        __props__.__dict__["use_ip_spaces"] = use_ip_spaces
        __props__.__dict__["used_ip_count"] = used_ip_count
        __props__.__dict__["vdc"] = vdc
        return NsxtEdgegateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> pulumi.Output[Optional[bool]]:
        """
        Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        """
        return pulumi.get(self, "dedicate_external_network")

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> pulumi.Output[str]:
        """
        `ACTIVE_STANDBY` (default) or
        `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        nature guarantees high north-south data throughput.
        """
        return pulumi.get(self, "deployment_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> pulumi.Output[str]:
        """
        Specific Edge Cluster ID if required
        """
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter(name="externalNetworkAllocatedIpCount")
    def external_network_allocated_ip_count(self) -> pulumi.Output[int]:
        """
        Total allocated IP count in attached NSX-T Segment backed
        external networks
        """
        return pulumi.get(self, "external_network_allocated_ip_count")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> pulumi.Output[str]:
        """
        An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        can be used to lookup ID by name.
        """
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter(name="externalNetworks")
    def external_networks(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtEdgegatewayExternalNetwork']]]:
        """
        attaches NSX-T Segment backed External
        Networks with a given configuration block. It *does not
        support IP Spaces*.
        """
        return pulumi.get(self, "external_networks")

    @property
    @pulumi.getter(name="ipCountReadLimit")
    def ip_count_read_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Sets a limit of IPs to count for
        `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        specify `0` for *unlimited* value.

        <a id="ip-allocation-modes"></a>
        """
        return pulumi.get(self, "ip_count_read_limit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the edge gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonDistributedRoutingEnabled")
    def non_distributed_routing_enabled(self) -> pulumi.Output[bool]:
        """
        Non-Distributed routing will allow
        tenants the option of connecting Org Vdc networks to the Service
        Router. This would
        force all VM traffic through the service router for that network. Default `false`.
        """
        return pulumi.get(self, "non_distributed_routing_enabled")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to which the VDC belongs. Optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        The ID of VDC or VDC Group. **Note:** Data sources
        [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        name.

        > Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        definition at provider level.

        > When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        is to pick egress traffic origin for multi datacenter VDC Groups.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[str]:
        """
        Primary IP address exposed for an easy access without nesting.
        """
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> pulumi.Output[Optional[str]]:
        """
        If `owner_id` is a VDC Group, by default Edge
        Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        """
        return pulumi.get(self, "starting_vdc_id")

    @property
    @pulumi.getter(name="subnetWithIpCounts")
    def subnet_with_ip_counts(self) -> pulumi.Output[Sequence['outputs.NsxtEdgegatewaySubnetWithIpCount']]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_ip_counts")

    @property
    @pulumi.getter(name="subnetWithTotalIpCounts")
    def subnet_with_total_ip_counts(self) -> pulumi.Output[Sequence['outputs.NsxtEdgegatewaySubnetWithTotalIpCount']]:
        """
        One or more
        subnets defined for Edge Gateway. One of `subnet`,
        `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnet_with_total_ip_counts")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.NsxtEdgegatewaySubnet']]:
        """
        One or more subnets defined for Edge Gateway. One of
        `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        network is backed by *IP Spaces*. Read more in IP allocation modes section.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="totalAllocatedIpCount")
    def total_allocated_ip_count(self) -> pulumi.Output[int]:
        """
        Required with `subnet_with_total_ip_count`. It is
        **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        """
        return pulumi.get(self, "total_allocated_ip_count")

    @property
    @pulumi.getter(name="unusedIpCount")
    def unused_ip_count(self) -> pulumi.Output[int]:
        """
        Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        exposed when using IP Spaces.
        """
        return pulumi.get(self, "unused_ip_count")

    @property
    @pulumi.getter(name="useIpSpaces")
    def use_ip_spaces(self) -> pulumi.Output[bool]:
        """
        Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        """
        return pulumi.get(self, "use_ip_spaces")

    @property
    @pulumi.getter(name="usedIpCount")
    def used_ip_count(self) -> pulumi.Output[int]:
        """
        Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        exposed when using IP Spaces.
        """
        return pulumi.get(self, "used_ip_count")

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> pulumi.Output[str]:
        """
        **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        gateway. Can be inherited from `provider` configuration if not defined here.
        """
        return pulumi.get(self, "vdc")

