# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVcenterResult',
    'AwaitableGetVcenterResult',
    'get_vcenter',
    'get_vcenter_output',
]

@pulumi.output_type
class GetVcenterResult:
    """
    A collection of values returned by getVcenter.
    """
    def __init__(__self__, connection_status=None, id=None, is_enabled=None, name=None, status=None, vcenter_host=None, vcenter_version=None):
        if connection_status and not isinstance(connection_status, str):
            raise TypeError("Expected argument 'connection_status' to be a str")
        pulumi.set(__self__, "connection_status", connection_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vcenter_host and not isinstance(vcenter_host, str):
            raise TypeError("Expected argument 'vcenter_host' to be a str")
        pulumi.set(__self__, "vcenter_host", vcenter_host)
        if vcenter_version and not isinstance(vcenter_version, str):
            raise TypeError("Expected argument 'vcenter_version' to be a str")
        pulumi.set(__self__, "vcenter_version", vcenter_version)

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> str:
        """
        vCenter connection status (e.g. `CONNECTED`).
        """
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Boolean value if vCenter is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        vCenter status (e.g. `READY`).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vcenterHost")
    def vcenter_host(self) -> str:
        """
        Hostname of configured vCenter.
        """
        return pulumi.get(self, "vcenter_host")

    @property
    @pulumi.getter(name="vcenterVersion")
    def vcenter_version(self) -> str:
        """
        vCenter version (e.g. `6.7.0`)
        """
        return pulumi.get(self, "vcenter_version")


class AwaitableGetVcenterResult(GetVcenterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVcenterResult(
            connection_status=self.connection_status,
            id=self.id,
            is_enabled=self.is_enabled,
            name=self.name,
            status=self.status,
            vcenter_host=self.vcenter_host,
            vcenter_version=self.vcenter_version)


def get_vcenter(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVcenterResult:
    """
    Provides a data source for vCenter server attached to VCD.

    Supported in provider *v3.0+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vc = vcd.get_vcenter(name="vcenter-one")
    ```


    :param str name: vCenter name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVcenter:getVcenter', __args__, opts=opts, typ=GetVcenterResult).value

    return AwaitableGetVcenterResult(
        connection_status=pulumi.get(__ret__, 'connection_status'),
        id=pulumi.get(__ret__, 'id'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        vcenter_host=pulumi.get(__ret__, 'vcenter_host'),
        vcenter_version=pulumi.get(__ret__, 'vcenter_version'))
def get_vcenter_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVcenterResult]:
    """
    Provides a data source for vCenter server attached to VCD.

    Supported in provider *v3.0+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    vc = vcd.get_vcenter(name="vcenter-one")
    ```


    :param str name: vCenter name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getVcenter:getVcenter', __args__, opts=opts, typ=GetVcenterResult)
    return __ret__.apply(lambda __response__: GetVcenterResult(
        connection_status=pulumi.get(__response__, 'connection_status'),
        id=pulumi.get(__response__, 'id'),
        is_enabled=pulumi.get(__response__, 'is_enabled'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        vcenter_host=pulumi.get(__response__, 'vcenter_host'),
        vcenter_version=pulumi.get(__response__, 'vcenter_version')))
