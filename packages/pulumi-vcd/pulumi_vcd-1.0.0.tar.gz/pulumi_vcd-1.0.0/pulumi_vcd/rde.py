# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RdeArgs', 'Rde']

@pulumi.input_type
class RdeArgs:
    def __init__(__self__, *,
                 rde_type_id: pulumi.Input[str],
                 resolve: pulumi.Input[bool],
                 external_id: Optional[pulumi.Input[str]] = None,
                 input_entity: Optional[pulumi.Input[str]] = None,
                 input_entity_url: Optional[pulumi.Input[str]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 resolve_on_removal: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Rde resource.
        :param pulumi.Input[str] rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
               updating to a **newer/lower** `version` of the **same** RDE Type.
        :param pulumi.Input[bool] resolve: If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
               resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
               deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        :param pulumi.Input[str] external_id: An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        :param pulumi.Input[str] input_entity: A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        :param pulumi.Input[str] input_entity_url: URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
               contents
        :param pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: The name of the Runtime Defined Entity. It can be non-unique.
        :param pulumi.Input[str] org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        :param pulumi.Input[bool] resolve_on_removal: If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        """
        pulumi.set(__self__, "rde_type_id", rde_type_id)
        pulumi.set(__self__, "resolve", resolve)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if input_entity is not None:
            pulumi.set(__self__, "input_entity", input_entity)
        if input_entity_url is not None:
            pulumi.set(__self__, "input_entity_url", input_entity_url)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if resolve_on_removal is not None:
            pulumi.set(__self__, "resolve_on_removal", resolve_on_removal)

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> pulumi.Input[str]:
        """
        The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        updating to a **newer/lower** `version` of the **same** RDE Type.
        """
        return pulumi.get(self, "rde_type_id")

    @rde_type_id.setter
    def rde_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rde_type_id", value)

    @property
    @pulumi.getter
    def resolve(self) -> pulumi.Input[bool]:
        """
        If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        """
        return pulumi.get(self, "resolve")

    @resolve.setter
    def resolve(self, value: pulumi.Input[bool]):
        pulumi.set(self, "resolve", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="inputEntity")
    def input_entity(self) -> Optional[pulumi.Input[str]]:
        """
        A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        """
        return pulumi.get(self, "input_entity")

    @input_entity.setter
    def input_entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_entity", value)

    @property
    @pulumi.getter(name="inputEntityUrl")
    def input_entity_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        contents
        """
        return pulumi.get(self, "input_entity_url")

    @input_entity_url.setter
    def input_entity_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_entity_url", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Runtime Defined Entity. It can be non-unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="resolveOnRemoval")
    def resolve_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        """
        return pulumi.get(self, "resolve_on_removal")

    @resolve_on_removal.setter
    def resolve_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_on_removal", value)


@pulumi.input_type
class _RdeState:
    def __init__(__self__, *,
                 computed_entity: Optional[pulumi.Input[str]] = None,
                 entity_in_sync: Optional[pulumi.Input[bool]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 input_entity: Optional[pulumi.Input[str]] = None,
                 input_entity_url: Optional[pulumi.Input[str]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner_user_id: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None,
                 resolve: Optional[pulumi.Input[bool]] = None,
                 resolve_on_removal: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Rde resources.
        :param pulumi.Input[str] computed_entity: The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        :param pulumi.Input[bool] entity_in_sync: It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
               meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        :param pulumi.Input[str] external_id: An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        :param pulumi.Input[str] input_entity: A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        :param pulumi.Input[str] input_entity_url: URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
               contents
        :param pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: The name of the Runtime Defined Entity. It can be non-unique.
        :param pulumi.Input[str] org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        :param pulumi.Input[str] org_id: The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        :param pulumi.Input[str] owner_user_id: The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        :param pulumi.Input[str] rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
               updating to a **newer/lower** `version` of the **same** RDE Type.
        :param pulumi.Input[bool] resolve: If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
               resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
               deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        :param pulumi.Input[bool] resolve_on_removal: If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        :param pulumi.Input[str] state: Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
               If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
               otherwise it will be `RESOLUTION_ERROR`.
        """
        if computed_entity is not None:
            pulumi.set(__self__, "computed_entity", computed_entity)
        if entity_in_sync is not None:
            pulumi.set(__self__, "entity_in_sync", entity_in_sync)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if input_entity is not None:
            pulumi.set(__self__, "input_entity", input_entity)
        if input_entity_url is not None:
            pulumi.set(__self__, "input_entity_url", input_entity_url)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner_user_id is not None:
            pulumi.set(__self__, "owner_user_id", owner_user_id)
        if rde_type_id is not None:
            pulumi.set(__self__, "rde_type_id", rde_type_id)
        if resolve is not None:
            pulumi.set(__self__, "resolve", resolve)
        if resolve_on_removal is not None:
            pulumi.set(__self__, "resolve_on_removal", resolve_on_removal)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="computedEntity")
    def computed_entity(self) -> Optional[pulumi.Input[str]]:
        """
        The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        """
        return pulumi.get(self, "computed_entity")

    @computed_entity.setter
    def computed_entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computed_entity", value)

    @property
    @pulumi.getter(name="entityInSync")
    def entity_in_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
        meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        """
        return pulumi.get(self, "entity_in_sync")

    @entity_in_sync.setter
    def entity_in_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "entity_in_sync", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="inputEntity")
    def input_entity(self) -> Optional[pulumi.Input[str]]:
        """
        A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        """
        return pulumi.get(self, "input_entity")

    @input_entity.setter
    def input_entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_entity", value)

    @property
    @pulumi.getter(name="inputEntityUrl")
    def input_entity_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        contents
        """
        return pulumi.get(self, "input_entity_url")

    @input_entity_url.setter
    def input_entity_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_entity_url", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RdeMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Runtime Defined Entity. It can be non-unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="ownerUserId")
    def owner_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        """
        return pulumi.get(self, "owner_user_id")

    @owner_user_id.setter
    def owner_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_user_id", value)

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        updating to a **newer/lower** `version` of the **same** RDE Type.
        """
        return pulumi.get(self, "rde_type_id")

    @rde_type_id.setter
    def rde_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rde_type_id", value)

    @property
    @pulumi.getter
    def resolve(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        """
        return pulumi.get(self, "resolve")

    @resolve.setter
    def resolve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve", value)

    @property
    @pulumi.getter(name="resolveOnRemoval")
    def resolve_on_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        """
        return pulumi.get(self, "resolve_on_removal")

    @resolve_on_removal.setter
    def resolve_on_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_on_removal", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
        If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
        otherwise it will be `RESOLUTION_ERROR`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class Rde(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 input_entity: Optional[pulumi.Input[str]] = None,
                 input_entity_url: Optional[pulumi.Input[str]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdeMetadataEntryArgs', 'RdeMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None,
                 resolve: Optional[pulumi.Input[bool]] = None,
                 resolve_on_removal: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Rde resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_id: An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        :param pulumi.Input[str] input_entity: A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        :param pulumi.Input[str] input_entity_url: URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
               contents
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdeMetadataEntryArgs', 'RdeMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: The name of the Runtime Defined Entity. It can be non-unique.
        :param pulumi.Input[str] org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        :param pulumi.Input[str] rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
               updating to a **newer/lower** `version` of the **same** RDE Type.
        :param pulumi.Input[bool] resolve: If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
               resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
               deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        :param pulumi.Input[bool] resolve_on_removal: If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RdeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Rde resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RdeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 input_entity: Optional[pulumi.Input[str]] = None,
                 input_entity_url: Optional[pulumi.Input[str]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdeMetadataEntryArgs', 'RdeMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rde_type_id: Optional[pulumi.Input[str]] = None,
                 resolve: Optional[pulumi.Input[bool]] = None,
                 resolve_on_removal: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdeArgs.__new__(RdeArgs)

            __props__.__dict__["external_id"] = external_id
            __props__.__dict__["input_entity"] = input_entity
            __props__.__dict__["input_entity_url"] = input_entity_url
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            if rde_type_id is None and not opts.urn:
                raise TypeError("Missing required property 'rde_type_id'")
            __props__.__dict__["rde_type_id"] = rde_type_id
            if resolve is None and not opts.urn:
                raise TypeError("Missing required property 'resolve'")
            __props__.__dict__["resolve"] = resolve
            __props__.__dict__["resolve_on_removal"] = resolve_on_removal
            __props__.__dict__["computed_entity"] = None
            __props__.__dict__["entity_in_sync"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner_user_id"] = None
            __props__.__dict__["state"] = None
        super(Rde, __self__).__init__(
            'vcd:index/rde:Rde',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            computed_entity: Optional[pulumi.Input[str]] = None,
            entity_in_sync: Optional[pulumi.Input[bool]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            input_entity: Optional[pulumi.Input[str]] = None,
            input_entity_url: Optional[pulumi.Input[str]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RdeMetadataEntryArgs', 'RdeMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner_user_id: Optional[pulumi.Input[str]] = None,
            rde_type_id: Optional[pulumi.Input[str]] = None,
            resolve: Optional[pulumi.Input[bool]] = None,
            resolve_on_removal: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'Rde':
        """
        Get an existing Rde resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] computed_entity: The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        :param pulumi.Input[bool] entity_in_sync: It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
               meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        :param pulumi.Input[str] external_id: An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        :param pulumi.Input[str] input_entity: A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        :param pulumi.Input[str] input_entity_url: URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
               contents
        :param pulumi.Input[Sequence[pulumi.Input[Union['RdeMetadataEntryArgs', 'RdeMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: The name of the Runtime Defined Entity. It can be non-unique.
        :param pulumi.Input[str] org: Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        :param pulumi.Input[str] org_id: The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        :param pulumi.Input[str] owner_user_id: The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        :param pulumi.Input[str] rde_type_id: The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
               updating to a **newer/lower** `version` of the **same** RDE Type.
        :param pulumi.Input[bool] resolve: If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
               resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
               deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        :param pulumi.Input[bool] resolve_on_removal: If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        :param pulumi.Input[str] state: Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
               If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
               otherwise it will be `RESOLUTION_ERROR`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdeState.__new__(_RdeState)

        __props__.__dict__["computed_entity"] = computed_entity
        __props__.__dict__["entity_in_sync"] = entity_in_sync
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["input_entity"] = input_entity
        __props__.__dict__["input_entity_url"] = input_entity_url
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner_user_id"] = owner_user_id
        __props__.__dict__["rde_type_id"] = rde_type_id
        __props__.__dict__["resolve"] = resolve
        __props__.__dict__["resolve_on_removal"] = resolve_on_removal
        __props__.__dict__["state"] = state
        return Rde(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="computedEntity")
    def computed_entity(self) -> pulumi.Output[str]:
        """
        The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        """
        return pulumi.get(self, "computed_entity")

    @property
    @pulumi.getter(name="entityInSync")
    def entity_in_sync(self) -> pulumi.Output[bool]:
        """
        It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
        meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        """
        return pulumi.get(self, "entity_in_sync")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[str]:
        """
        An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="inputEntity")
    def input_entity(self) -> pulumi.Output[Optional[str]]:
        """
        A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        """
        return pulumi.get(self, "input_entity")

    @property
    @pulumi.getter(name="inputEntityUrl")
    def input_entity_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        contents
        """
        return pulumi.get(self, "input_entity_url")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Optional[Sequence['outputs.RdeMetadataEntry']]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Runtime Defined Entity. It can be non-unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ownerUserId")
    def owner_user_id(self) -> pulumi.Output[str]:
        """
        The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        """
        return pulumi.get(self, "owner_user_id")

    @property
    @pulumi.getter(name="rdeTypeId")
    def rde_type_id(self) -> pulumi.Output[str]:
        """
        The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        updating to a **newer/lower** `version` of the **same** RDE Type.
        """
        return pulumi.get(self, "rde_type_id")

    @property
    @pulumi.getter
    def resolve(self) -> pulumi.Output[bool]:
        """
        If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        """
        return pulumi.get(self, "resolve")

    @property
    @pulumi.getter(name="resolveOnRemoval")
    def resolve_on_removal(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        """
        return pulumi.get(self, "resolve_on_removal")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
        If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
        otherwise it will be `RESOLUTION_ERROR`.
        """
        return pulumi.get(self, "state")

