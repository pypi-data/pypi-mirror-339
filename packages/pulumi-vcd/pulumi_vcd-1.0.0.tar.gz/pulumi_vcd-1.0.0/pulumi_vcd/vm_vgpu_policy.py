# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmVgpuPolicyArgs', 'VmVgpuPolicy']

@pulumi.input_type
class VmVgpuPolicyArgs:
    def __init__(__self__, *,
                 vgpu_profile: pulumi.Input['VmVgpuPolicyVgpuProfileArgs'],
                 cpu: Optional[pulumi.Input['VmVgpuPolicyCpuArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_vdc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]] = None):
        """
        The set of arguments for constructing a VmVgpuPolicy resource.
        :param pulumi.Input['VmVgpuPolicyVgpuProfileArgs'] vgpu_profile: Defines the vGPU profile ID and count.
        :param pulumi.Input['VmVgpuPolicyCpuArgs'] cpu: Configuration options for CPU resources. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        :param pulumi.Input[str] description: A brief description of the vGPU policy.
        :param pulumi.Input['VmVgpuPolicyMemoryArgs'] memory: Memory resource configuration settings. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        :param pulumi.Input[str] name: The unique name assigned to the vGPU policy for a virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]] provider_vdc_scopes: Defines the scope of the policy within 
               provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
               See `provider_vdc_scope` for more details.
        """
        pulumi.set(__self__, "vgpu_profile", vgpu_profile)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_vdc_scopes is not None:
            pulumi.set(__self__, "provider_vdc_scopes", provider_vdc_scopes)

    @property
    @pulumi.getter(name="vgpuProfile")
    def vgpu_profile(self) -> pulumi.Input['VmVgpuPolicyVgpuProfileArgs']:
        """
        Defines the vGPU profile ID and count.
        """
        return pulumi.get(self, "vgpu_profile")

    @vgpu_profile.setter
    def vgpu_profile(self, value: pulumi.Input['VmVgpuPolicyVgpuProfileArgs']):
        pulumi.set(self, "vgpu_profile", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['VmVgpuPolicyCpuArgs']]:
        """
        Configuration options for CPU resources. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['VmVgpuPolicyCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A brief description of the vGPU policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']]:
        """
        Memory resource configuration settings. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name assigned to the vGPU policy for a virtual machine.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerVdcScopes")
    def provider_vdc_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]]:
        """
        Defines the scope of the policy within 
        provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
        See `provider_vdc_scope` for more details.
        """
        return pulumi.get(self, "provider_vdc_scopes")

    @provider_vdc_scopes.setter
    def provider_vdc_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]]):
        pulumi.set(self, "provider_vdc_scopes", value)


@pulumi.input_type
class _VmVgpuPolicyState:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input['VmVgpuPolicyCpuArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_vdc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]] = None,
                 vgpu_profile: Optional[pulumi.Input['VmVgpuPolicyVgpuProfileArgs']] = None):
        """
        Input properties used for looking up and filtering VmVgpuPolicy resources.
        :param pulumi.Input['VmVgpuPolicyCpuArgs'] cpu: Configuration options for CPU resources. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        :param pulumi.Input[str] description: A brief description of the vGPU policy.
        :param pulumi.Input['VmVgpuPolicyMemoryArgs'] memory: Memory resource configuration settings. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        :param pulumi.Input[str] name: The unique name assigned to the vGPU policy for a virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]] provider_vdc_scopes: Defines the scope of the policy within 
               provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
               See `provider_vdc_scope` for more details.
        :param pulumi.Input['VmVgpuPolicyVgpuProfileArgs'] vgpu_profile: Defines the vGPU profile ID and count.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_vdc_scopes is not None:
            pulumi.set(__self__, "provider_vdc_scopes", provider_vdc_scopes)
        if vgpu_profile is not None:
            pulumi.set(__self__, "vgpu_profile", vgpu_profile)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['VmVgpuPolicyCpuArgs']]:
        """
        Configuration options for CPU resources. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['VmVgpuPolicyCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A brief description of the vGPU policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']]:
        """
        Memory resource configuration settings. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['VmVgpuPolicyMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name assigned to the vGPU policy for a virtual machine.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerVdcScopes")
    def provider_vdc_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]]:
        """
        Defines the scope of the policy within 
        provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
        See `provider_vdc_scope` for more details.
        """
        return pulumi.get(self, "provider_vdc_scopes")

    @provider_vdc_scopes.setter
    def provider_vdc_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmVgpuPolicyProviderVdcScopeArgs']]]]):
        pulumi.set(self, "provider_vdc_scopes", value)

    @property
    @pulumi.getter(name="vgpuProfile")
    def vgpu_profile(self) -> Optional[pulumi.Input['VmVgpuPolicyVgpuProfileArgs']]:
        """
        Defines the vGPU profile ID and count.
        """
        return pulumi.get(self, "vgpu_profile")

    @vgpu_profile.setter
    def vgpu_profile(self, value: Optional[pulumi.Input['VmVgpuPolicyVgpuProfileArgs']]):
        pulumi.set(self, "vgpu_profile", value)


class VmVgpuPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu: Optional[pulumi.Input[Union['VmVgpuPolicyCpuArgs', 'VmVgpuPolicyCpuArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[Union['VmVgpuPolicyMemoryArgs', 'VmVgpuPolicyMemoryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_vdc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmVgpuPolicyProviderVdcScopeArgs', 'VmVgpuPolicyProviderVdcScopeArgsDict']]]]] = None,
                 vgpu_profile: Optional[pulumi.Input[Union['VmVgpuPolicyVgpuProfileArgs', 'VmVgpuPolicyVgpuProfileArgsDict']]] = None,
                 __props__=None):
        """
        Experimental in provider *3.11*.

        > **Note:** This resource requires system administrator privileges.

        Provides a resource to manage vGPU policies for virtual machines in VMware Cloud Director.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        example_org = vcd.get_org(name="test_org")
        example_vgpu_profile = vcd.get_vgpu_profile(name="grid_a100-10c")
        example_provider_vdc = vcd.get_provider_vdc(name="example_provider_vdc")
        vm_group_example = vcd.get_vm_group(name="vm-group-1")
        example_vgpu_policy = vcd.VmVgpuPolicy("example_vgpu_policy",
            name="example-vgpu-policy",
            description="An example vGPU policy configuration",
            vgpu_profile={
                "id": example_vgpu_profile.id,
                "count": 1,
            },
            cpu={
                "shares": "886",
                "limit_in_mhz": "2400",
                "count": "9",
                "speed_in_mhz": "2500",
                "cores_per_socket": "3",
                "reservation_guarantee": "0.55",
            },
            memory={
                "shares": "1580",
                "size_in_mb": "3200",
                "limit_in_mb": "2800",
            },
            provider_vdc_scopes=[{
                "provider_vdc_id": example_provider_vdc.id,
                "cluster_names": ["cluster1"],
                "vm_group_id": vm_group_example.id,
            }])
        example_org_vdc = vcd.OrgVdc("example_org_vdc",
            org=example_org.name,
            name="test-org-vdc",
            provider_vdc_name=example_provider_vdc.name,
            allocation_model="Flex",
            delete_force=True,
            compute_capacity={
                "cpu": {
                    "allocated": 2048,
                },
                "memory": {
                    "allocated": 2048,
                },
            },
            storage_profiles=[{
                "name": "*",
                "limit": 10240,
                "default": True,
            }],
            elasticity=True,
            include_vm_memory_overhead=True,
            memory_guaranteed=1,
            default_compute_policy_id=example_vgpu_policy.id,
            vm_vgpu_policy_ids=[example_vgpu_policy.id])
        test_vm = vcd.Vm("test_vm",
            org=example_org.name,
            vdc=example_org_vdc.name,
            name="terraform-provider-vm",
            computer_name="emptyVM",
            memory=2048,
            cpus=2,
            cpu_cores=1,
            power_on=False,
            os_type="sles11_64Guest",
            hardware_version="vmx-19",
            placement_policy_id=example_vgpu_policy.id)
        ```

        ### Without A Sizing Policy)

        ```python
        import pulumi
        import pulumi_vcd as vcd

        example_vgpu_policy_without_sizing = vcd.VmVgpuPolicy("example_vgpu_policy_without_sizing",
            name="example-vgpu-policy-without-sizing",
            description="An example vGPU policy configuration",
            vgpu_profile={
                "id": example_vgpu_profile["id"],
                "count": 1,
            },
            provider_vdc_scopes=[{
                "provider_vdc_id": example_provider_vdc["id"],
                "cluster_names": ["cluster1"],
                "vm_group_id": vm_group_example["id"],
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['VmVgpuPolicyCpuArgs', 'VmVgpuPolicyCpuArgsDict']] cpu: Configuration options for CPU resources. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        :param pulumi.Input[str] description: A brief description of the vGPU policy.
        :param pulumi.Input[Union['VmVgpuPolicyMemoryArgs', 'VmVgpuPolicyMemoryArgsDict']] memory: Memory resource configuration settings. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        :param pulumi.Input[str] name: The unique name assigned to the vGPU policy for a virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmVgpuPolicyProviderVdcScopeArgs', 'VmVgpuPolicyProviderVdcScopeArgsDict']]]] provider_vdc_scopes: Defines the scope of the policy within 
               provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
               See `provider_vdc_scope` for more details.
        :param pulumi.Input[Union['VmVgpuPolicyVgpuProfileArgs', 'VmVgpuPolicyVgpuProfileArgsDict']] vgpu_profile: Defines the vGPU profile ID and count.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmVgpuPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Experimental in provider *3.11*.

        > **Note:** This resource requires system administrator privileges.

        Provides a resource to manage vGPU policies for virtual machines in VMware Cloud Director.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vcd as vcd

        example_org = vcd.get_org(name="test_org")
        example_vgpu_profile = vcd.get_vgpu_profile(name="grid_a100-10c")
        example_provider_vdc = vcd.get_provider_vdc(name="example_provider_vdc")
        vm_group_example = vcd.get_vm_group(name="vm-group-1")
        example_vgpu_policy = vcd.VmVgpuPolicy("example_vgpu_policy",
            name="example-vgpu-policy",
            description="An example vGPU policy configuration",
            vgpu_profile={
                "id": example_vgpu_profile.id,
                "count": 1,
            },
            cpu={
                "shares": "886",
                "limit_in_mhz": "2400",
                "count": "9",
                "speed_in_mhz": "2500",
                "cores_per_socket": "3",
                "reservation_guarantee": "0.55",
            },
            memory={
                "shares": "1580",
                "size_in_mb": "3200",
                "limit_in_mb": "2800",
            },
            provider_vdc_scopes=[{
                "provider_vdc_id": example_provider_vdc.id,
                "cluster_names": ["cluster1"],
                "vm_group_id": vm_group_example.id,
            }])
        example_org_vdc = vcd.OrgVdc("example_org_vdc",
            org=example_org.name,
            name="test-org-vdc",
            provider_vdc_name=example_provider_vdc.name,
            allocation_model="Flex",
            delete_force=True,
            compute_capacity={
                "cpu": {
                    "allocated": 2048,
                },
                "memory": {
                    "allocated": 2048,
                },
            },
            storage_profiles=[{
                "name": "*",
                "limit": 10240,
                "default": True,
            }],
            elasticity=True,
            include_vm_memory_overhead=True,
            memory_guaranteed=1,
            default_compute_policy_id=example_vgpu_policy.id,
            vm_vgpu_policy_ids=[example_vgpu_policy.id])
        test_vm = vcd.Vm("test_vm",
            org=example_org.name,
            vdc=example_org_vdc.name,
            name="terraform-provider-vm",
            computer_name="emptyVM",
            memory=2048,
            cpus=2,
            cpu_cores=1,
            power_on=False,
            os_type="sles11_64Guest",
            hardware_version="vmx-19",
            placement_policy_id=example_vgpu_policy.id)
        ```

        ### Without A Sizing Policy)

        ```python
        import pulumi
        import pulumi_vcd as vcd

        example_vgpu_policy_without_sizing = vcd.VmVgpuPolicy("example_vgpu_policy_without_sizing",
            name="example-vgpu-policy-without-sizing",
            description="An example vGPU policy configuration",
            vgpu_profile={
                "id": example_vgpu_profile["id"],
                "count": 1,
            },
            provider_vdc_scopes=[{
                "provider_vdc_id": example_provider_vdc["id"],
                "cluster_names": ["cluster1"],
                "vm_group_id": vm_group_example["id"],
            }])
        ```

        :param str resource_name: The name of the resource.
        :param VmVgpuPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmVgpuPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu: Optional[pulumi.Input[Union['VmVgpuPolicyCpuArgs', 'VmVgpuPolicyCpuArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[Union['VmVgpuPolicyMemoryArgs', 'VmVgpuPolicyMemoryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_vdc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmVgpuPolicyProviderVdcScopeArgs', 'VmVgpuPolicyProviderVdcScopeArgsDict']]]]] = None,
                 vgpu_profile: Optional[pulumi.Input[Union['VmVgpuPolicyVgpuProfileArgs', 'VmVgpuPolicyVgpuProfileArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmVgpuPolicyArgs.__new__(VmVgpuPolicyArgs)

            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["description"] = description
            __props__.__dict__["memory"] = memory
            __props__.__dict__["name"] = name
            __props__.__dict__["provider_vdc_scopes"] = provider_vdc_scopes
            if vgpu_profile is None and not opts.urn:
                raise TypeError("Missing required property 'vgpu_profile'")
            __props__.__dict__["vgpu_profile"] = vgpu_profile
        super(VmVgpuPolicy, __self__).__init__(
            'vcd:index/vmVgpuPolicy:VmVgpuPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu: Optional[pulumi.Input[Union['VmVgpuPolicyCpuArgs', 'VmVgpuPolicyCpuArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[Union['VmVgpuPolicyMemoryArgs', 'VmVgpuPolicyMemoryArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            provider_vdc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmVgpuPolicyProviderVdcScopeArgs', 'VmVgpuPolicyProviderVdcScopeArgsDict']]]]] = None,
            vgpu_profile: Optional[pulumi.Input[Union['VmVgpuPolicyVgpuProfileArgs', 'VmVgpuPolicyVgpuProfileArgsDict']]] = None) -> 'VmVgpuPolicy':
        """
        Get an existing VmVgpuPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['VmVgpuPolicyCpuArgs', 'VmVgpuPolicyCpuArgsDict']] cpu: Configuration options for CPU resources. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        :param pulumi.Input[str] description: A brief description of the vGPU policy.
        :param pulumi.Input[Union['VmVgpuPolicyMemoryArgs', 'VmVgpuPolicyMemoryArgsDict']] memory: Memory resource configuration settings. If this is set, 
               a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        :param pulumi.Input[str] name: The unique name assigned to the vGPU policy for a virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmVgpuPolicyProviderVdcScopeArgs', 'VmVgpuPolicyProviderVdcScopeArgsDict']]]] provider_vdc_scopes: Defines the scope of the policy within 
               provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
               See `provider_vdc_scope` for more details.
        :param pulumi.Input[Union['VmVgpuPolicyVgpuProfileArgs', 'VmVgpuPolicyVgpuProfileArgsDict']] vgpu_profile: Defines the vGPU profile ID and count.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmVgpuPolicyState.__new__(_VmVgpuPolicyState)

        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["description"] = description
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_vdc_scopes"] = provider_vdc_scopes
        __props__.__dict__["vgpu_profile"] = vgpu_profile
        return VmVgpuPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional['outputs.VmVgpuPolicyCpu']]:
        """
        Configuration options for CPU resources. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A brief description of the vGPU policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional['outputs.VmVgpuPolicyMemory']]:
        """
        Memory resource configuration settings. If this is set, 
        a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique name assigned to the vGPU policy for a virtual machine.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerVdcScopes")
    def provider_vdc_scopes(self) -> pulumi.Output[Optional[Sequence['outputs.VmVgpuPolicyProviderVdcScope']]]:
        """
        Defines the scope of the policy within 
        provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
        See `provider_vdc_scope` for more details.
        """
        return pulumi.get(self, "provider_vdc_scopes")

    @property
    @pulumi.getter(name="vgpuProfile")
    def vgpu_profile(self) -> pulumi.Output['outputs.VmVgpuPolicyVgpuProfile']:
        """
        Defines the vGPU profile ID and count.
        """
        return pulumi.get(self, "vgpu_profile")

