# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalNetworkArgs', 'ExternalNetwork']

@pulumi.input_type
class ExternalNetworkArgs:
    def __init__(__self__, *,
                 ip_scopes: pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]],
                 vsphere_networks: pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retain_net_info_across_deployments: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ExternalNetwork resource.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]] ip_scopes: A list of IP scopes for the network.  See IP Scope below for details.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]] vsphere_networks: A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[bool] retain_net_info_across_deployments: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
               
               <a id="ipscope"></a>
        """
        pulumi.set(__self__, "ip_scopes", ip_scopes)
        pulumi.set(__self__, "vsphere_networks", vsphere_networks)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retain_net_info_across_deployments is not None:
            pulumi.set(__self__, "retain_net_info_across_deployments", retain_net_info_across_deployments)

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]]:
        """
        A list of IP scopes for the network.  See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @ip_scopes.setter
    def ip_scopes(self, value: pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]]):
        pulumi.set(self, "ip_scopes", value)

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]]:
        """
        A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        return pulumi.get(self, "vsphere_networks")

    @vsphere_networks.setter
    def vsphere_networks(self, value: pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]]):
        pulumi.set(self, "vsphere_networks", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retainNetInfoAcrossDeployments")
    def retain_net_info_across_deployments(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "retain_net_info_across_deployments")

    @retain_net_info_across_deployments.setter
    def retain_net_info_across_deployments(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_net_info_across_deployments", value)


@pulumi.input_type
class _ExternalNetworkState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retain_net_info_across_deployments: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]]] = None):
        """
        Input properties used for looking up and filtering ExternalNetwork resources.
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]] ip_scopes: A list of IP scopes for the network.  See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[bool] retain_net_info_across_deployments: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
               
               <a id="ipscope"></a>
        :param pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]] vsphere_networks: A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_scopes is not None:
            pulumi.set(__self__, "ip_scopes", ip_scopes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retain_net_info_across_deployments is not None:
            pulumi.set(__self__, "retain_net_info_across_deployments", retain_net_info_across_deployments)
        if vsphere_networks is not None:
            pulumi.set(__self__, "vsphere_networks", vsphere_networks)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]]]:
        """
        A list of IP scopes for the network.  See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @ip_scopes.setter
    def ip_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeArgs']]]]):
        pulumi.set(self, "ip_scopes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retainNetInfoAcrossDeployments")
    def retain_net_info_across_deployments(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "retain_net_info_across_deployments")

    @retain_net_info_across_deployments.setter
    def retain_net_info_across_deployments(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_net_info_across_deployments", value)

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]]]:
        """
        A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        return pulumi.get(self, "vsphere_networks")

    @vsphere_networks.setter
    def vsphere_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkVsphereNetworkArgs']]]]):
        pulumi.set(self, "vsphere_networks", value)


class ExternalNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkIpScopeArgs', 'ExternalNetworkIpScopeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retain_net_info_across_deployments: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkVsphereNetworkArgs', 'ExternalNetworkVsphereNetworkArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ExternalNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkIpScopeArgs', 'ExternalNetworkIpScopeArgsDict']]]] ip_scopes: A list of IP scopes for the network.  See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[bool] retain_net_info_across_deployments: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
               
               <a id="ipscope"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkVsphereNetworkArgs', 'ExternalNetworkVsphereNetworkArgsDict']]]] vsphere_networks: A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkIpScopeArgs', 'ExternalNetworkIpScopeArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retain_net_info_across_deployments: Optional[pulumi.Input[bool]] = None,
                 vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkVsphereNetworkArgs', 'ExternalNetworkVsphereNetworkArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalNetworkArgs.__new__(ExternalNetworkArgs)

            __props__.__dict__["description"] = description
            if ip_scopes is None and not opts.urn:
                raise TypeError("Missing required property 'ip_scopes'")
            __props__.__dict__["ip_scopes"] = ip_scopes
            __props__.__dict__["name"] = name
            __props__.__dict__["retain_net_info_across_deployments"] = retain_net_info_across_deployments
            if vsphere_networks is None and not opts.urn:
                raise TypeError("Missing required property 'vsphere_networks'")
            __props__.__dict__["vsphere_networks"] = vsphere_networks
        super(ExternalNetwork, __self__).__init__(
            'vcd:index/externalNetwork:ExternalNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            ip_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkIpScopeArgs', 'ExternalNetworkIpScopeArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            retain_net_info_across_deployments: Optional[pulumi.Input[bool]] = None,
            vsphere_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkVsphereNetworkArgs', 'ExternalNetworkVsphereNetworkArgsDict']]]]] = None) -> 'ExternalNetwork':
        """
        Get an existing ExternalNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Network friendly description
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkIpScopeArgs', 'ExternalNetworkIpScopeArgsDict']]]] ip_scopes: A list of IP scopes for the network.  See IP Scope below for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[bool] retain_net_info_across_deployments: Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
               
               <a id="ipscope"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['ExternalNetworkVsphereNetworkArgs', 'ExternalNetworkVsphereNetworkArgsDict']]]] vsphere_networks: A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalNetworkState.__new__(_ExternalNetworkState)

        __props__.__dict__["description"] = description
        __props__.__dict__["ip_scopes"] = ip_scopes
        __props__.__dict__["name"] = name
        __props__.__dict__["retain_net_info_across_deployments"] = retain_net_info_across_deployments
        __props__.__dict__["vsphere_networks"] = vsphere_networks
        return ExternalNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Network friendly description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> pulumi.Output[Sequence['outputs.ExternalNetworkIpScope']]:
        """
        A list of IP scopes for the network.  See IP Scope below for details.
        """
        return pulumi.get(self, "ip_scopes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retainNetInfoAcrossDeployments")
    def retain_net_info_across_deployments(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.

        <a id="ipscope"></a>
        """
        return pulumi.get(self, "retain_net_info_across_deployments")

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> pulumi.Output[Sequence['outputs.ExternalNetworkVsphereNetwork']]:
        """
        A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
        """
        return pulumi.get(self, "vsphere_networks")

