# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtEdgegatewayDnsArgs', 'NsxtEdgegatewayDns']

@pulumi.input_type
class NsxtEdgegatewayDnsArgs:
    def __init__(__self__, *,
                 default_forwarder_zone: pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs'],
                 edge_gateway_id: pulumi.Input[str],
                 conditional_forwarder_zones: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 snat_rule_ip_address: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegatewayDns resource.
        :param pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs'] default_forwarder_zone: The default forwarder zone to use if 
               there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        :param pulumi.Input[str] edge_gateway_id: NSX-T Edge Gateway ID.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]] conditional_forwarder_zones: A set (up to 5) of conditional forwarder zones that allows to define 
               specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        :param pulumi.Input[bool] enabled: Status of the DNS forwarding service. Defaults to `true`.
        :param pulumi.Input[str] listener_ip: The IP on which the DNS forwarder listens. If the Edge Gateway 
               has a dedicated external network, this can be changed.
        :param pulumi.Input[str] org: Org in which the NSX-T Edge Gateway is located, required
               if not set in the provider section.
        :param pulumi.Input[str] snat_rule_ip_address: This argument only applies if the Edge Gateway 
               is connected to a Provider Gateway using IP Spaces. If specified, VCD will
               conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
               The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
               If not specified, the IP address will be computed and chosen by VCD.
        """
        pulumi.set(__self__, "default_forwarder_zone", default_forwarder_zone)
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if conditional_forwarder_zones is not None:
            pulumi.set(__self__, "conditional_forwarder_zones", conditional_forwarder_zones)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if snat_rule_ip_address is not None:
            pulumi.set(__self__, "snat_rule_ip_address", snat_rule_ip_address)

    @property
    @pulumi.getter(name="defaultForwarderZone")
    def default_forwarder_zone(self) -> pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs']:
        """
        The default forwarder zone to use if 
        there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        """
        return pulumi.get(self, "default_forwarder_zone")

    @default_forwarder_zone.setter
    def default_forwarder_zone(self, value: pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs']):
        pulumi.set(self, "default_forwarder_zone", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        NSX-T Edge Gateway ID.
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="conditionalForwarderZones")
    def conditional_forwarder_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]]:
        """
        A set (up to 5) of conditional forwarder zones that allows to define 
        specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        """
        return pulumi.get(self, "conditional_forwarder_zones")

    @conditional_forwarder_zones.setter
    def conditional_forwarder_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]]):
        pulumi.set(self, "conditional_forwarder_zones", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Status of the DNS forwarding service. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP on which the DNS forwarder listens. If the Edge Gateway 
        has a dedicated external network, this can be changed.
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        Org in which the NSX-T Edge Gateway is located, required
        if not set in the provider section.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="snatRuleIpAddress")
    def snat_rule_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        This argument only applies if the Edge Gateway 
        is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        If not specified, the IP address will be computed and chosen by VCD.
        """
        return pulumi.get(self, "snat_rule_ip_address")

    @snat_rule_ip_address.setter
    def snat_rule_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_rule_ip_address", value)


@pulumi.input_type
class _NsxtEdgegatewayDnsState:
    def __init__(__self__, *,
                 conditional_forwarder_zones: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]] = None,
                 default_forwarder_zone: Optional[pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs']] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 snat_rule_enabled: Optional[pulumi.Input[bool]] = None,
                 snat_rule_ip_address: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegatewayDns resources.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]] conditional_forwarder_zones: A set (up to 5) of conditional forwarder zones that allows to define 
               specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        :param pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs'] default_forwarder_zone: The default forwarder zone to use if 
               there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        :param pulumi.Input[str] edge_gateway_id: NSX-T Edge Gateway ID.
        :param pulumi.Input[bool] enabled: Status of the DNS forwarding service. Defaults to `true`.
        :param pulumi.Input[str] listener_ip: The IP on which the DNS forwarder listens. If the Edge Gateway 
               has a dedicated external network, this can be changed.
        :param pulumi.Input[str] org: Org in which the NSX-T Edge Gateway is located, required
               if not set in the provider section.
        :param pulumi.Input[bool] snat_rule_enabled: Is `true` if there exists a SNAT rule for the DNS forwarder. 
               If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
               is modified manually, this field will be set to `false`, otherwise `true`.
        :param pulumi.Input[str] snat_rule_ip_address: This argument only applies if the Edge Gateway 
               is connected to a Provider Gateway using IP Spaces. If specified, VCD will
               conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
               The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
               If not specified, the IP address will be computed and chosen by VCD.
        """
        if conditional_forwarder_zones is not None:
            pulumi.set(__self__, "conditional_forwarder_zones", conditional_forwarder_zones)
        if default_forwarder_zone is not None:
            pulumi.set(__self__, "default_forwarder_zone", default_forwarder_zone)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if snat_rule_enabled is not None:
            pulumi.set(__self__, "snat_rule_enabled", snat_rule_enabled)
        if snat_rule_ip_address is not None:
            pulumi.set(__self__, "snat_rule_ip_address", snat_rule_ip_address)

    @property
    @pulumi.getter(name="conditionalForwarderZones")
    def conditional_forwarder_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]]:
        """
        A set (up to 5) of conditional forwarder zones that allows to define 
        specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        """
        return pulumi.get(self, "conditional_forwarder_zones")

    @conditional_forwarder_zones.setter
    def conditional_forwarder_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayDnsConditionalForwarderZoneArgs']]]]):
        pulumi.set(self, "conditional_forwarder_zones", value)

    @property
    @pulumi.getter(name="defaultForwarderZone")
    def default_forwarder_zone(self) -> Optional[pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs']]:
        """
        The default forwarder zone to use if 
        there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        """
        return pulumi.get(self, "default_forwarder_zone")

    @default_forwarder_zone.setter
    def default_forwarder_zone(self, value: Optional[pulumi.Input['NsxtEdgegatewayDnsDefaultForwarderZoneArgs']]):
        pulumi.set(self, "default_forwarder_zone", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        NSX-T Edge Gateway ID.
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Status of the DNS forwarding service. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP on which the DNS forwarder listens. If the Edge Gateway 
        has a dedicated external network, this can be changed.
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        Org in which the NSX-T Edge Gateway is located, required
        if not set in the provider section.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="snatRuleEnabled")
    def snat_rule_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is `true` if there exists a SNAT rule for the DNS forwarder. 
        If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
        is modified manually, this field will be set to `false`, otherwise `true`.
        """
        return pulumi.get(self, "snat_rule_enabled")

    @snat_rule_enabled.setter
    def snat_rule_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snat_rule_enabled", value)

    @property
    @pulumi.getter(name="snatRuleIpAddress")
    def snat_rule_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        This argument only applies if the Edge Gateway 
        is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        If not specified, the IP address will be computed and chosen by VCD.
        """
        return pulumi.get(self, "snat_rule_ip_address")

    @snat_rule_ip_address.setter
    def snat_rule_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_rule_ip_address", value)


class NsxtEdgegatewayDns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_forwarder_zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayDnsConditionalForwarderZoneArgs', 'NsxtEdgegatewayDnsConditionalForwarderZoneArgsDict']]]]] = None,
                 default_forwarder_zone: Optional[pulumi.Input[Union['NsxtEdgegatewayDnsDefaultForwarderZoneArgs', 'NsxtEdgegatewayDnsDefaultForwarderZoneArgsDict']]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 snat_rule_ip_address: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegatewayDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayDnsConditionalForwarderZoneArgs', 'NsxtEdgegatewayDnsConditionalForwarderZoneArgsDict']]]] conditional_forwarder_zones: A set (up to 5) of conditional forwarder zones that allows to define 
               specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        :param pulumi.Input[Union['NsxtEdgegatewayDnsDefaultForwarderZoneArgs', 'NsxtEdgegatewayDnsDefaultForwarderZoneArgsDict']] default_forwarder_zone: The default forwarder zone to use if 
               there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        :param pulumi.Input[str] edge_gateway_id: NSX-T Edge Gateway ID.
        :param pulumi.Input[bool] enabled: Status of the DNS forwarding service. Defaults to `true`.
        :param pulumi.Input[str] listener_ip: The IP on which the DNS forwarder listens. If the Edge Gateway 
               has a dedicated external network, this can be changed.
        :param pulumi.Input[str] org: Org in which the NSX-T Edge Gateway is located, required
               if not set in the provider section.
        :param pulumi.Input[str] snat_rule_ip_address: This argument only applies if the Edge Gateway 
               is connected to a Provider Gateway using IP Spaces. If specified, VCD will
               conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
               The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
               If not specified, the IP address will be computed and chosen by VCD.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayDnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegatewayDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayDnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayDnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_forwarder_zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayDnsConditionalForwarderZoneArgs', 'NsxtEdgegatewayDnsConditionalForwarderZoneArgsDict']]]]] = None,
                 default_forwarder_zone: Optional[pulumi.Input[Union['NsxtEdgegatewayDnsDefaultForwarderZoneArgs', 'NsxtEdgegatewayDnsDefaultForwarderZoneArgsDict']]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 snat_rule_ip_address: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayDnsArgs.__new__(NsxtEdgegatewayDnsArgs)

            __props__.__dict__["conditional_forwarder_zones"] = conditional_forwarder_zones
            if default_forwarder_zone is None and not opts.urn:
                raise TypeError("Missing required property 'default_forwarder_zone'")
            __props__.__dict__["default_forwarder_zone"] = default_forwarder_zone
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["listener_ip"] = listener_ip
            __props__.__dict__["org"] = org
            __props__.__dict__["snat_rule_ip_address"] = snat_rule_ip_address
            __props__.__dict__["snat_rule_enabled"] = None
        super(NsxtEdgegatewayDns, __self__).__init__(
            'vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditional_forwarder_zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayDnsConditionalForwarderZoneArgs', 'NsxtEdgegatewayDnsConditionalForwarderZoneArgsDict']]]]] = None,
            default_forwarder_zone: Optional[pulumi.Input[Union['NsxtEdgegatewayDnsDefaultForwarderZoneArgs', 'NsxtEdgegatewayDnsDefaultForwarderZoneArgsDict']]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            listener_ip: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            snat_rule_enabled: Optional[pulumi.Input[bool]] = None,
            snat_rule_ip_address: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegatewayDns':
        """
        Get an existing NsxtEdgegatewayDns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayDnsConditionalForwarderZoneArgs', 'NsxtEdgegatewayDnsConditionalForwarderZoneArgsDict']]]] conditional_forwarder_zones: A set (up to 5) of conditional forwarder zones that allows to define 
               specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        :param pulumi.Input[Union['NsxtEdgegatewayDnsDefaultForwarderZoneArgs', 'NsxtEdgegatewayDnsDefaultForwarderZoneArgsDict']] default_forwarder_zone: The default forwarder zone to use if 
               there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        :param pulumi.Input[str] edge_gateway_id: NSX-T Edge Gateway ID.
        :param pulumi.Input[bool] enabled: Status of the DNS forwarding service. Defaults to `true`.
        :param pulumi.Input[str] listener_ip: The IP on which the DNS forwarder listens. If the Edge Gateway 
               has a dedicated external network, this can be changed.
        :param pulumi.Input[str] org: Org in which the NSX-T Edge Gateway is located, required
               if not set in the provider section.
        :param pulumi.Input[bool] snat_rule_enabled: Is `true` if there exists a SNAT rule for the DNS forwarder. 
               If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
               is modified manually, this field will be set to `false`, otherwise `true`.
        :param pulumi.Input[str] snat_rule_ip_address: This argument only applies if the Edge Gateway 
               is connected to a Provider Gateway using IP Spaces. If specified, VCD will
               conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
               The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
               If not specified, the IP address will be computed and chosen by VCD.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayDnsState.__new__(_NsxtEdgegatewayDnsState)

        __props__.__dict__["conditional_forwarder_zones"] = conditional_forwarder_zones
        __props__.__dict__["default_forwarder_zone"] = default_forwarder_zone
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["listener_ip"] = listener_ip
        __props__.__dict__["org"] = org
        __props__.__dict__["snat_rule_enabled"] = snat_rule_enabled
        __props__.__dict__["snat_rule_ip_address"] = snat_rule_ip_address
        return NsxtEdgegatewayDns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="conditionalForwarderZones")
    def conditional_forwarder_zones(self) -> pulumi.Output[Optional[Sequence['outputs.NsxtEdgegatewayDnsConditionalForwarderZone']]]:
        """
        A set (up to 5) of conditional forwarder zones that allows to define 
        specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        """
        return pulumi.get(self, "conditional_forwarder_zones")

    @property
    @pulumi.getter(name="defaultForwarderZone")
    def default_forwarder_zone(self) -> pulumi.Output['outputs.NsxtEdgegatewayDnsDefaultForwarderZone']:
        """
        The default forwarder zone to use if 
        there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        """
        return pulumi.get(self, "default_forwarder_zone")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        NSX-T Edge Gateway ID.
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Status of the DNS forwarding service. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> pulumi.Output[str]:
        """
        The IP on which the DNS forwarder listens. If the Edge Gateway 
        has a dedicated external network, this can be changed.
        """
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        Org in which the NSX-T Edge Gateway is located, required
        if not set in the provider section.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="snatRuleEnabled")
    def snat_rule_enabled(self) -> pulumi.Output[bool]:
        """
        Is `true` if there exists a SNAT rule for the DNS forwarder. 
        If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
        is modified manually, this field will be set to `false`, otherwise `true`.
        """
        return pulumi.get(self, "snat_rule_enabled")

    @property
    @pulumi.getter(name="snatRuleIpAddress")
    def snat_rule_ip_address(self) -> pulumi.Output[str]:
        """
        This argument only applies if the Edge Gateway 
        is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        If not specified, the IP address will be computed and chosen by VCD.
        """
        return pulumi.get(self, "snat_rule_ip_address")

