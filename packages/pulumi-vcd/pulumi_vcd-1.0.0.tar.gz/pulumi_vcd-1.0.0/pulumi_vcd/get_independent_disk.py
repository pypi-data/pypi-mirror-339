# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIndependentDiskResult',
    'AwaitableGetIndependentDiskResult',
    'get_independent_disk',
    'get_independent_disk_output',
]

@pulumi.output_type
class GetIndependentDiskResult:
    """
    A collection of values returned by getIndependentDisk.
    """
    def __init__(__self__, attached_vm_ids=None, bus_sub_type=None, bus_type=None, datastore_name=None, description=None, encrypted=None, id=None, iops=None, is_attached=None, metadata=None, metadata_entries=None, name=None, org=None, owner_name=None, sharing_type=None, size_in_mb=None, storage_profile=None, uuid=None, vdc=None):
        if attached_vm_ids and not isinstance(attached_vm_ids, list):
            raise TypeError("Expected argument 'attached_vm_ids' to be a list")
        pulumi.set(__self__, "attached_vm_ids", attached_vm_ids)
        if bus_sub_type and not isinstance(bus_sub_type, str):
            raise TypeError("Expected argument 'bus_sub_type' to be a str")
        pulumi.set(__self__, "bus_sub_type", bus_sub_type)
        if bus_type and not isinstance(bus_type, str):
            raise TypeError("Expected argument 'bus_type' to be a str")
        pulumi.set(__self__, "bus_type", bus_type)
        if datastore_name and not isinstance(datastore_name, str):
            raise TypeError("Expected argument 'datastore_name' to be a str")
        pulumi.set(__self__, "datastore_name", datastore_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if encrypted and not isinstance(encrypted, bool):
            raise TypeError("Expected argument 'encrypted' to be a bool")
        pulumi.set(__self__, "encrypted", encrypted)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iops and not isinstance(iops, int):
            raise TypeError("Expected argument 'iops' to be a int")
        pulumi.set(__self__, "iops", iops)
        if is_attached and not isinstance(is_attached, bool):
            raise TypeError("Expected argument 'is_attached' to be a bool")
        pulumi.set(__self__, "is_attached", is_attached)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if sharing_type and not isinstance(sharing_type, str):
            raise TypeError("Expected argument 'sharing_type' to be a str")
        pulumi.set(__self__, "sharing_type", sharing_type)
        if size_in_mb and not isinstance(size_in_mb, int):
            raise TypeError("Expected argument 'size_in_mb' to be a int")
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile and not isinstance(storage_profile, str):
            raise TypeError("Expected argument 'storage_profile' to be a str")
        pulumi.set(__self__, "storage_profile", storage_profile)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="attachedVmIds")
    def attached_vm_ids(self) -> Sequence[str]:
        return pulumi.get(self, "attached_vm_ids")

    @property
    @pulumi.getter(name="busSubType")
    def bus_sub_type(self) -> str:
        return pulumi.get(self, "bus_sub_type")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> str:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> str:
        return pulumi.get(self, "datastore_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="isAttached")
    def is_attached(self) -> bool:
        return pulumi.get(self, "is_attached")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetIndependentDiskMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="sharingType")
    def sharing_type(self) -> str:
        return pulumi.get(self, "sharing_type")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> str:
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetIndependentDiskResult(GetIndependentDiskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndependentDiskResult(
            attached_vm_ids=self.attached_vm_ids,
            bus_sub_type=self.bus_sub_type,
            bus_type=self.bus_type,
            datastore_name=self.datastore_name,
            description=self.description,
            encrypted=self.encrypted,
            id=self.id,
            iops=self.iops,
            is_attached=self.is_attached,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            owner_name=self.owner_name,
            sharing_type=self.sharing_type,
            size_in_mb=self.size_in_mb,
            storage_profile=self.storage_profile,
            uuid=self.uuid,
            vdc=self.vdc)


def get_independent_disk(id: Optional[str] = None,
                         name: Optional[str] = None,
                         org: Optional[str] = None,
                         vdc: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndependentDiskResult:
    """
    Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing_disk = vcd.get_independent_disk(org="my-org",
        vdc="my-vdc",
        id="urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
        name="my-disk")
    pulumi.export("disk-iops", existing_disk.iops)
    pulumi.export("typeIsAttached", existing_disk.is_attached)
    ```


    :param str id: Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
    :param str name: Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getIndependentDisk:getIndependentDisk', __args__, opts=opts, typ=GetIndependentDiskResult).value

    return AwaitableGetIndependentDiskResult(
        attached_vm_ids=pulumi.get(__ret__, 'attached_vm_ids'),
        bus_sub_type=pulumi.get(__ret__, 'bus_sub_type'),
        bus_type=pulumi.get(__ret__, 'bus_type'),
        datastore_name=pulumi.get(__ret__, 'datastore_name'),
        description=pulumi.get(__ret__, 'description'),
        encrypted=pulumi.get(__ret__, 'encrypted'),
        id=pulumi.get(__ret__, 'id'),
        iops=pulumi.get(__ret__, 'iops'),
        is_attached=pulumi.get(__ret__, 'is_attached'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_entries=pulumi.get(__ret__, 'metadata_entries'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        owner_name=pulumi.get(__ret__, 'owner_name'),
        sharing_type=pulumi.get(__ret__, 'sharing_type'),
        size_in_mb=pulumi.get(__ret__, 'size_in_mb'),
        storage_profile=pulumi.get(__ret__, 'storage_profile'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_independent_disk_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIndependentDiskResult]:
    """
    Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its
    data within other resources or data sources.

    Supported in provider *v2.5+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing_disk = vcd.get_independent_disk(org="my-org",
        vdc="my-vdc",
        id="urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
        name="my-disk")
    pulumi.export("disk-iops", existing_disk.iops)
    pulumi.export("typeIsAttached", existing_disk.is_attached)
    ```


    :param str id: Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
    :param str name: Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getIndependentDisk:getIndependentDisk', __args__, opts=opts, typ=GetIndependentDiskResult)
    return __ret__.apply(lambda __response__: GetIndependentDiskResult(
        attached_vm_ids=pulumi.get(__response__, 'attached_vm_ids'),
        bus_sub_type=pulumi.get(__response__, 'bus_sub_type'),
        bus_type=pulumi.get(__response__, 'bus_type'),
        datastore_name=pulumi.get(__response__, 'datastore_name'),
        description=pulumi.get(__response__, 'description'),
        encrypted=pulumi.get(__response__, 'encrypted'),
        id=pulumi.get(__response__, 'id'),
        iops=pulumi.get(__response__, 'iops'),
        is_attached=pulumi.get(__response__, 'is_attached'),
        metadata=pulumi.get(__response__, 'metadata'),
        metadata_entries=pulumi.get(__response__, 'metadata_entries'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        owner_name=pulumi.get(__response__, 'owner_name'),
        sharing_type=pulumi.get(__response__, 'sharing_type'),
        size_in_mb=pulumi.get(__response__, 'size_in_mb'),
        storage_profile=pulumi.get(__response__, 'storage_profile'),
        uuid=pulumi.get(__response__, 'uuid'),
        vdc=pulumi.get(__response__, 'vdc')))
