# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxvDistributedFirewallResult',
    'AwaitableGetNsxvDistributedFirewallResult',
    'get_nsxv_distributed_firewall',
    'get_nsxv_distributed_firewall_output',
]

@pulumi.output_type
class GetNsxvDistributedFirewallResult:
    """
    A collection of values returned by getNsxvDistributedFirewall.
    """
    def __init__(__self__, enabled=None, id=None, rules=None, vdc_id=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetNsxvDistributedFirewallRuleResult']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> str:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxvDistributedFirewallResult(GetNsxvDistributedFirewallResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvDistributedFirewallResult(
            enabled=self.enabled,
            id=self.id,
            rules=self.rules,
            vdc_id=self.vdc_id)


def get_nsxv_distributed_firewall(vdc_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvDistributedFirewallResult:
    """
    The NSX-V Distributed Firewall data source reads all defined rules for a particular VDC.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="my-org",
        name="my-vdc")
    dfw1 = vcd.get_nsxv_distributed_firewall(vdc_id=my_vdc.id)
    ```

    ## Attributes reference

    All the arguments and attributes defined for the `NsxvDistributedFirewall` resource are reported as attributes for this data source.


    :param str vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
    """
    __args__ = dict()
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxvDistributedFirewall:getNsxvDistributedFirewall', __args__, opts=opts, typ=GetNsxvDistributedFirewallResult).value

    return AwaitableGetNsxvDistributedFirewallResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        rules=pulumi.get(__ret__, 'rules'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'))
def get_nsxv_distributed_firewall_output(vdc_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxvDistributedFirewallResult]:
    """
    The NSX-V Distributed Firewall data source reads all defined rules for a particular VDC.

    Supported in provider *v3.9+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_vdc = vcd.get_org_vdc(org="my-org",
        name="my-vdc")
    dfw1 = vcd.get_nsxv_distributed_firewall(vdc_id=my_vdc.id)
    ```

    ## Attributes reference

    All the arguments and attributes defined for the `NsxvDistributedFirewall` resource are reported as attributes for this data source.


    :param str vdc_id: The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
    """
    __args__ = dict()
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxvDistributedFirewall:getNsxvDistributedFirewall', __args__, opts=opts, typ=GetNsxvDistributedFirewallResult)
    return __ret__.apply(lambda __response__: GetNsxvDistributedFirewallResult(
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        rules=pulumi.get(__response__, 'rules'),
        vdc_id=pulumi.get(__response__, 'vdc_id')))
