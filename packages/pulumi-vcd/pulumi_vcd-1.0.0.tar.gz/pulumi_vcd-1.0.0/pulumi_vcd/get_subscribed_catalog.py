# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubscribedCatalogResult',
    'AwaitableGetSubscribedCatalogResult',
    'get_subscribed_catalog',
    'get_subscribed_catalog_output',
]

@pulumi.output_type
class GetSubscribedCatalogResult:
    """
    A collection of values returned by getSubscribedCatalog.
    """
    def __init__(__self__, catalog_version=None, created=None, description=None, failed_tasks=None, filter=None, href=None, id=None, is_local=None, is_published=None, is_shared=None, make_local_copy=None, media_item_lists=None, name=None, number_of_media=None, number_of_vapp_templates=None, org=None, owner_name=None, publish_subscription_type=None, running_tasks=None, storage_profile_id=None, subscription_url=None, vapp_template_lists=None):
        if catalog_version and not isinstance(catalog_version, int):
            raise TypeError("Expected argument 'catalog_version' to be a int")
        pulumi.set(__self__, "catalog_version", catalog_version)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if failed_tasks and not isinstance(failed_tasks, list):
            raise TypeError("Expected argument 'failed_tasks' to be a list")
        pulumi.set(__self__, "failed_tasks", failed_tasks)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_local and not isinstance(is_local, bool):
            raise TypeError("Expected argument 'is_local' to be a bool")
        pulumi.set(__self__, "is_local", is_local)
        if is_published and not isinstance(is_published, bool):
            raise TypeError("Expected argument 'is_published' to be a bool")
        pulumi.set(__self__, "is_published", is_published)
        if is_shared and not isinstance(is_shared, bool):
            raise TypeError("Expected argument 'is_shared' to be a bool")
        pulumi.set(__self__, "is_shared", is_shared)
        if make_local_copy and not isinstance(make_local_copy, bool):
            raise TypeError("Expected argument 'make_local_copy' to be a bool")
        pulumi.set(__self__, "make_local_copy", make_local_copy)
        if media_item_lists and not isinstance(media_item_lists, list):
            raise TypeError("Expected argument 'media_item_lists' to be a list")
        pulumi.set(__self__, "media_item_lists", media_item_lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_media and not isinstance(number_of_media, int):
            raise TypeError("Expected argument 'number_of_media' to be a int")
        pulumi.set(__self__, "number_of_media", number_of_media)
        if number_of_vapp_templates and not isinstance(number_of_vapp_templates, int):
            raise TypeError("Expected argument 'number_of_vapp_templates' to be a int")
        pulumi.set(__self__, "number_of_vapp_templates", number_of_vapp_templates)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if publish_subscription_type and not isinstance(publish_subscription_type, str):
            raise TypeError("Expected argument 'publish_subscription_type' to be a str")
        pulumi.set(__self__, "publish_subscription_type", publish_subscription_type)
        if running_tasks and not isinstance(running_tasks, list):
            raise TypeError("Expected argument 'running_tasks' to be a list")
        pulumi.set(__self__, "running_tasks", running_tasks)
        if storage_profile_id and not isinstance(storage_profile_id, str):
            raise TypeError("Expected argument 'storage_profile_id' to be a str")
        pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if subscription_url and not isinstance(subscription_url, str):
            raise TypeError("Expected argument 'subscription_url' to be a str")
        pulumi.set(__self__, "subscription_url", subscription_url)
        if vapp_template_lists and not isinstance(vapp_template_lists, list):
            raise TypeError("Expected argument 'vapp_template_lists' to be a list")
        pulumi.set(__self__, "vapp_template_lists", vapp_template_lists)

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> int:
        """
        Version number from this catalog.
        """
        return pulumi.get(self, "catalog_version")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        Date and time of catalog creation.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the catalog. This is inherited from the publishing catalog
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failedTasks")
    def failed_tasks(self) -> Sequence[str]:
        """
        List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "failed_tasks")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetSubscribedCatalogFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        the catalog's Hyper reference.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> bool:
        """
        (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        """
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> bool:
        """
        Indicates if this catalog is available for subscription. (Always return `false` for this data source)
        """
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> bool:
        """
        Indicates if the catalog is shared (`true` or `false`).
        """
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter(name="makeLocalCopy")
    def make_local_copy(self) -> bool:
        return pulumi.get(self, "make_local_copy")

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> Sequence[str]:
        """
        List of media item names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "media_item_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> int:
        """
        Number of media items available in this catalog.
        """
        return pulumi.get(self, "number_of_media")

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> int:
        """
        Number of vApp templates available in this catalog.
        """
        return pulumi.get(self, "number_of_vapp_templates")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        """
        Owner of the catalog.
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> str:
        """
        Shows if the catalog is published, if it is a subscription from another one or none of those. (Always returns `SUBSCRIBED` for this data source)
        """
        return pulumi.get(self, "publish_subscription_type")

    @property
    @pulumi.getter(name="runningTasks")
    def running_tasks(self) -> Sequence[str]:
        """
        List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        """
        return pulumi.get(self, "running_tasks")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> str:
        """
        Allows to set specific storage profile to be used for catalog.
        """
        return pulumi.get(self, "storage_profile_id")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> str:
        """
        The URL to which this catalog is subscribed.
        """
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> Sequence[str]:
        """
        List of vApp template names in this catalog, in alphabetical order.
        """
        return pulumi.get(self, "vapp_template_lists")


class AwaitableGetSubscribedCatalogResult(GetSubscribedCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscribedCatalogResult(
            catalog_version=self.catalog_version,
            created=self.created,
            description=self.description,
            failed_tasks=self.failed_tasks,
            filter=self.filter,
            href=self.href,
            id=self.id,
            is_local=self.is_local,
            is_published=self.is_published,
            is_shared=self.is_shared,
            make_local_copy=self.make_local_copy,
            media_item_lists=self.media_item_lists,
            name=self.name,
            number_of_media=self.number_of_media,
            number_of_vapp_templates=self.number_of_vapp_templates,
            org=self.org,
            owner_name=self.owner_name,
            publish_subscription_type=self.publish_subscription_type,
            running_tasks=self.running_tasks,
            storage_profile_id=self.storage_profile_id,
            subscription_url=self.subscription_url,
            vapp_template_lists=self.vapp_template_lists)


def get_subscribed_catalog(filter: Optional[Union['GetSubscribedCatalogFilterArgs', 'GetSubscribedCatalogFilterArgsDict']] = None,
                           name: Optional[str] = None,
                           org: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscribedCatalogResult:
    """
    Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.

    A `SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
    like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
    may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.

    Supported in provider *v3.8+*

    ## Example

    ```python
    import pulumi
    import pulumi_vcd as vcd

    subscriber = vcd.get_subscribed_catalog(org="my-org",
        name="subscriber")
    ```

    ## Filter arguments

    * `name_regex` (Optional) matches the name using a regular expression.
    * `date` (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param Union['GetSubscribedCatalogFilterArgs', 'GetSubscribedCatalogFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Catalog name. Required if `filter` is not set.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSubscribedCatalog:getSubscribedCatalog', __args__, opts=opts, typ=GetSubscribedCatalogResult).value

    return AwaitableGetSubscribedCatalogResult(
        catalog_version=pulumi.get(__ret__, 'catalog_version'),
        created=pulumi.get(__ret__, 'created'),
        description=pulumi.get(__ret__, 'description'),
        failed_tasks=pulumi.get(__ret__, 'failed_tasks'),
        filter=pulumi.get(__ret__, 'filter'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_local=pulumi.get(__ret__, 'is_local'),
        is_published=pulumi.get(__ret__, 'is_published'),
        is_shared=pulumi.get(__ret__, 'is_shared'),
        make_local_copy=pulumi.get(__ret__, 'make_local_copy'),
        media_item_lists=pulumi.get(__ret__, 'media_item_lists'),
        name=pulumi.get(__ret__, 'name'),
        number_of_media=pulumi.get(__ret__, 'number_of_media'),
        number_of_vapp_templates=pulumi.get(__ret__, 'number_of_vapp_templates'),
        org=pulumi.get(__ret__, 'org'),
        owner_name=pulumi.get(__ret__, 'owner_name'),
        publish_subscription_type=pulumi.get(__ret__, 'publish_subscription_type'),
        running_tasks=pulumi.get(__ret__, 'running_tasks'),
        storage_profile_id=pulumi.get(__ret__, 'storage_profile_id'),
        subscription_url=pulumi.get(__ret__, 'subscription_url'),
        vapp_template_lists=pulumi.get(__ret__, 'vapp_template_lists'))
def get_subscribed_catalog_output(filter: Optional[pulumi.Input[Optional[Union['GetSubscribedCatalogFilterArgs', 'GetSubscribedCatalogFilterArgsDict']]]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  org: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubscribedCatalogResult]:
    """
    Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.

    A `SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
    like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
    may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.

    Supported in provider *v3.8+*

    ## Example

    ```python
    import pulumi
    import pulumi_vcd as vcd

    subscriber = vcd.get_subscribed_catalog(org="my-org",
        name="subscriber")
    ```

    ## Filter arguments

    * `name_regex` (Optional) matches the name using a regular expression.
    * `date` (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
      optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
      The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
      is recommended.
      Comparison with equality operator (`==`) need to define the date to the microseconds.
    * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the newest item.
    * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
      are set, it retrieves the oldest item.
    * `metadata` (Optional) One or more parameters that will match metadata contents.

    See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.


    :param Union['GetSubscribedCatalogFilterArgs', 'GetSubscribedCatalogFilterArgsDict'] filter: Retrieves the data source using one or more filter parameters
    :param str name: Catalog name. Required if `filter` is not set.
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getSubscribedCatalog:getSubscribedCatalog', __args__, opts=opts, typ=GetSubscribedCatalogResult)
    return __ret__.apply(lambda __response__: GetSubscribedCatalogResult(
        catalog_version=pulumi.get(__response__, 'catalog_version'),
        created=pulumi.get(__response__, 'created'),
        description=pulumi.get(__response__, 'description'),
        failed_tasks=pulumi.get(__response__, 'failed_tasks'),
        filter=pulumi.get(__response__, 'filter'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        is_local=pulumi.get(__response__, 'is_local'),
        is_published=pulumi.get(__response__, 'is_published'),
        is_shared=pulumi.get(__response__, 'is_shared'),
        make_local_copy=pulumi.get(__response__, 'make_local_copy'),
        media_item_lists=pulumi.get(__response__, 'media_item_lists'),
        name=pulumi.get(__response__, 'name'),
        number_of_media=pulumi.get(__response__, 'number_of_media'),
        number_of_vapp_templates=pulumi.get(__response__, 'number_of_vapp_templates'),
        org=pulumi.get(__response__, 'org'),
        owner_name=pulumi.get(__response__, 'owner_name'),
        publish_subscription_type=pulumi.get(__response__, 'publish_subscription_type'),
        running_tasks=pulumi.get(__response__, 'running_tasks'),
        storage_profile_id=pulumi.get(__response__, 'storage_profile_id'),
        subscription_url=pulumi.get(__response__, 'subscription_url'),
        vapp_template_lists=pulumi.get(__response__, 'vapp_template_lists')))
