# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IndependentDiskArgs', 'IndependentDisk']

@pulumi.input_type
class IndependentDiskArgs:
    def __init__(__self__, *,
                 size_in_mb: pulumi.Input[int],
                 bus_sub_type: Optional[pulumi.Input[str]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 sharing_type: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IndependentDisk resource.
        :param pulumi.Input[int] size_in_mb: Size of disk in MB.
        :param pulumi.Input[str] bus_sub_type: Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        :param pulumi.Input[str] bus_type: Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        :param pulumi.Input[str] description: independent disk description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        :param pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Disk name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] sharing_type: This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        :param pulumi.Input[str] storage_profile: The name of storage profile where disk will be created
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        if bus_sub_type is not None:
            pulumi.set(__self__, "bus_sub_type", bus_sub_type)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if sharing_type is not None:
            pulumi.set(__self__, "sharing_type", sharing_type)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> pulumi.Input[int]:
        """
        Size of disk in MB.
        """
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="busSubType")
    def bus_sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        """
        return pulumi.get(self, "bus_sub_type")

    @bus_sub_type.setter
    def bus_sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_sub_type", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        """
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        independent disk description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Disk name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="sharingType")
    def sharing_type(self) -> Optional[pulumi.Input[str]]:
        """
        This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        """
        return pulumi.get(self, "sharing_type")

    @sharing_type.setter
    def sharing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing_type", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The name of storage profile where disk will be created
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _IndependentDiskState:
    def __init__(__self__, *,
                 attached_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bus_sub_type: Optional[pulumi.Input[str]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 datastore_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 is_attached: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_name: Optional[pulumi.Input[str]] = None,
                 sharing_type: Optional[pulumi.Input[str]] = None,
                 size_in_mb: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IndependentDisk resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attached_vm_ids: (Computed, *v3.6+*) IDs of VM which are using the disk
        :param pulumi.Input[str] bus_sub_type: Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        :param pulumi.Input[str] bus_type: Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        :param pulumi.Input[str] datastore_name: (Computed) Data store name. Readable only for system user.
        :param pulumi.Input[str] description: independent disk description
        :param pulumi.Input[bool] encrypted: (Computed, *v3.6+* and VCD 10.2+) True if disk is encrypted
        :param pulumi.Input[int] iops: (Computed) IOPS request for the created disk
        :param pulumi.Input[bool] is_attached: (Computed) True if the disk is already attached
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        :param pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Disk name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_name: (Computed) The owner name of the disk
        :param pulumi.Input[str] sharing_type: This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        :param pulumi.Input[int] size_in_mb: Size of disk in MB.
        :param pulumi.Input[str] storage_profile: The name of storage profile where disk will be created
        :param pulumi.Input[str] uuid: (Computed, *v3.6+* and VCD 10.2+) The UUID of this named disk's device backing
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if attached_vm_ids is not None:
            pulumi.set(__self__, "attached_vm_ids", attached_vm_ids)
        if bus_sub_type is not None:
            pulumi.set(__self__, "bus_sub_type", bus_sub_type)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if datastore_name is not None:
            pulumi.set(__self__, "datastore_name", datastore_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_attached is not None:
            pulumi.set(__self__, "is_attached", is_attached)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_name is not None:
            pulumi.set(__self__, "owner_name", owner_name)
        if sharing_type is not None:
            pulumi.set(__self__, "sharing_type", sharing_type)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="attachedVmIds")
    def attached_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Computed, *v3.6+*) IDs of VM which are using the disk
        """
        return pulumi.get(self, "attached_vm_ids")

    @attached_vm_ids.setter
    def attached_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attached_vm_ids", value)

    @property
    @pulumi.getter(name="busSubType")
    def bus_sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        """
        return pulumi.get(self, "bus_sub_type")

    @bus_sub_type.setter
    def bus_sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_sub_type", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        """
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) Data store name. Readable only for system user.
        """
        return pulumi.get(self, "datastore_name")

    @datastore_name.setter
    def datastore_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        independent disk description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed, *v3.6+* and VCD 10.2+) True if disk is encrypted
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        """
        (Computed) IOPS request for the created disk
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="isAttached")
    def is_attached(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed) True if the disk is already attached
        """
        return pulumi.get(self, "is_attached")

    @is_attached.setter
    def is_attached(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_attached", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndependentDiskMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Disk name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The owner name of the disk
        """
        return pulumi.get(self, "owner_name")

    @owner_name.setter
    def owner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_name", value)

    @property
    @pulumi.getter(name="sharingType")
    def sharing_type(self) -> Optional[pulumi.Input[str]]:
        """
        This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        """
        return pulumi.get(self, "sharing_type")

    @sharing_type.setter
    def sharing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing_type", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Size of disk in MB.
        """
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The name of storage profile where disk will be created
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed, *v3.6+* and VCD 10.2+) The UUID of this named disk's device backing
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class IndependentDisk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bus_sub_type: Optional[pulumi.Input[str]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IndependentDiskMetadataEntryArgs', 'IndependentDiskMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 sharing_type: Optional[pulumi.Input[str]] = None,
                 size_in_mb: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IndependentDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bus_sub_type: Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        :param pulumi.Input[str] bus_type: Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        :param pulumi.Input[str] description: independent disk description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IndependentDiskMetadataEntryArgs', 'IndependentDiskMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Disk name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] sharing_type: This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        :param pulumi.Input[int] size_in_mb: Size of disk in MB.
        :param pulumi.Input[str] storage_profile: The name of storage profile where disk will be created
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IndependentDiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IndependentDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IndependentDiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IndependentDiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bus_sub_type: Optional[pulumi.Input[str]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IndependentDiskMetadataEntryArgs', 'IndependentDiskMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 sharing_type: Optional[pulumi.Input[str]] = None,
                 size_in_mb: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IndependentDiskArgs.__new__(IndependentDiskArgs)

            __props__.__dict__["bus_sub_type"] = bus_sub_type
            __props__.__dict__["bus_type"] = bus_type
            __props__.__dict__["description"] = description
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["sharing_type"] = sharing_type
            if size_in_mb is None and not opts.urn:
                raise TypeError("Missing required property 'size_in_mb'")
            __props__.__dict__["size_in_mb"] = size_in_mb
            __props__.__dict__["storage_profile"] = storage_profile
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["attached_vm_ids"] = None
            __props__.__dict__["datastore_name"] = None
            __props__.__dict__["encrypted"] = None
            __props__.__dict__["iops"] = None
            __props__.__dict__["is_attached"] = None
            __props__.__dict__["owner_name"] = None
            __props__.__dict__["uuid"] = None
        super(IndependentDisk, __self__).__init__(
            'vcd:index/independentDisk:IndependentDisk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attached_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bus_sub_type: Optional[pulumi.Input[str]] = None,
            bus_type: Optional[pulumi.Input[str]] = None,
            datastore_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            encrypted: Optional[pulumi.Input[bool]] = None,
            iops: Optional[pulumi.Input[int]] = None,
            is_attached: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IndependentDiskMetadataEntryArgs', 'IndependentDiskMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_name: Optional[pulumi.Input[str]] = None,
            sharing_type: Optional[pulumi.Input[str]] = None,
            size_in_mb: Optional[pulumi.Input[int]] = None,
            storage_profile: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'IndependentDisk':
        """
        Get an existing IndependentDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attached_vm_ids: (Computed, *v3.6+*) IDs of VM which are using the disk
        :param pulumi.Input[str] bus_sub_type: Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        :param pulumi.Input[str] bus_type: Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        :param pulumi.Input[str] datastore_name: (Computed) Data store name. Readable only for system user.
        :param pulumi.Input[str] description: independent disk description
        :param pulumi.Input[bool] encrypted: (Computed, *v3.6+* and VCD 10.2+) True if disk is encrypted
        :param pulumi.Input[int] iops: (Computed) IOPS request for the created disk
        :param pulumi.Input[bool] is_attached: (Computed) True if the disk is already attached
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IndependentDiskMetadataEntryArgs', 'IndependentDiskMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: Disk name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_name: (Computed) The owner name of the disk
        :param pulumi.Input[str] sharing_type: This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        :param pulumi.Input[int] size_in_mb: Size of disk in MB.
        :param pulumi.Input[str] storage_profile: The name of storage profile where disk will be created
        :param pulumi.Input[str] uuid: (Computed, *v3.6+* and VCD 10.2+) The UUID of this named disk's device backing
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IndependentDiskState.__new__(_IndependentDiskState)

        __props__.__dict__["attached_vm_ids"] = attached_vm_ids
        __props__.__dict__["bus_sub_type"] = bus_sub_type
        __props__.__dict__["bus_type"] = bus_type
        __props__.__dict__["datastore_name"] = datastore_name
        __props__.__dict__["description"] = description
        __props__.__dict__["encrypted"] = encrypted
        __props__.__dict__["iops"] = iops
        __props__.__dict__["is_attached"] = is_attached
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_name"] = owner_name
        __props__.__dict__["sharing_type"] = sharing_type
        __props__.__dict__["size_in_mb"] = size_in_mb
        __props__.__dict__["storage_profile"] = storage_profile
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdc"] = vdc
        return IndependentDisk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachedVmIds")
    def attached_vm_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        (Computed, *v3.6+*) IDs of VM which are using the disk
        """
        return pulumi.get(self, "attached_vm_ids")

    @property
    @pulumi.getter(name="busSubType")
    def bus_sub_type(self) -> pulumi.Output[str]:
        """
        Disk bus subtype. Values can be: `buslogic`, `lsilogic`, `lsilogicsas`, `VirtualSCSI` for `SCSI`, `ahci` for `SATA` and (*v3.6+*) `nvmecontroller` for `NVME`
        """
        return pulumi.get(self, "bus_sub_type")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> pulumi.Output[str]:
        """
        Disk bus type. Values can be: `IDE`, `SCSI`, `SATA`, (*v3.6+*) `NVME`. **Note** When the disk type is IDE then VM is required to be powered off
        """
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> pulumi.Output[str]:
        """
        (Computed) Data store name. Readable only for system user.
        """
        return pulumi.get(self, "datastore_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        independent disk description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encrypted(self) -> pulumi.Output[bool]:
        """
        (Computed, *v3.6+* and VCD 10.2+) True if disk is encrypted
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Output[int]:
        """
        (Computed) IOPS request for the created disk
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="isAttached")
    def is_attached(self) -> pulumi.Output[bool]:
        """
        (Computed) True if the disk is already attached
        """
        return pulumi.get(self, "is_attached")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this independent disk.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.IndependentDiskMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Disk name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> pulumi.Output[str]:
        """
        (Computed) The owner name of the disk
        """
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="sharingType")
    def sharing_type(self) -> pulumi.Output[str]:
        """
        This is the sharing type. Values can be: `DiskSharing`,`ControllerSharing`, or `None`
        """
        return pulumi.get(self, "sharing_type")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> pulumi.Output[int]:
        """
        Size of disk in MB.
        """
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> pulumi.Output[str]:
        """
        The name of storage profile where disk will be created
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        (Computed, *v3.6+* and VCD 10.2+) The UUID of this named disk's device backing
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

