# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkIsolatedV2Args', 'NetworkIsolatedV2']

@pulumi.input_type
class NetworkIsolatedV2Args:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkIsolatedV2 resource.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[bool] guest_vlan_allowed: Set to `true` if network should allow guest VLAN tagging.
               Default `false`.
        :param pulumi.Input[bool] is_shared: **NSX-V only.** Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful 
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dual_stack_enabled is not None:
            pulumi.set(__self__, "dual_stack_enabled", dual_stack_enabled)
        if guest_vlan_allowed is not None:
            pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if is_shared is not None:
            pulumi.set(__self__, "is_shared", is_shared)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if secondary_gateway is not None:
            pulumi.set(__self__, "secondary_gateway", secondary_gateway)
        if secondary_prefix_length is not None:
            pulumi.set(__self__, "secondary_prefix_length", secondary_prefix_length)
        if secondary_static_ip_pools is not None:
            pulumi.set(__self__, "secondary_static_ip_pools", secondary_static_ip_pools)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @dual_stack_enabled.setter
    def dual_stack_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dual_stack_enabled", value)

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` if network should allow guest VLAN tagging.
        Default `false`.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @guest_vlan_allowed.setter
    def guest_vlan_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "guest_vlan_allowed", value)

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> Optional[pulumi.Input[bool]]:
        """
        **NSX-V only.** Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "is_shared")

    @is_shared.setter
    def is_shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_shared", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful 
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @secondary_gateway.setter
    def secondary_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_gateway", value)

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @secondary_prefix_length.setter
    def secondary_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_prefix_length", value)

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @secondary_static_ip_pools.setter
    def secondary_static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]]):
        pulumi.set(self, "secondary_static_ip_pools", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NetworkIsolatedV2State:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkIsolatedV2 resources.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[bool] guest_vlan_allowed: Set to `true` if network should allow guest VLAN tagging.
               Default `false`.
        :param pulumi.Input[bool] is_shared: **NSX-V only.** Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful 
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dual_stack_enabled is not None:
            pulumi.set(__self__, "dual_stack_enabled", dual_stack_enabled)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if guest_vlan_allowed is not None:
            pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if is_shared is not None:
            pulumi.set(__self__, "is_shared", is_shared)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if secondary_gateway is not None:
            pulumi.set(__self__, "secondary_gateway", secondary_gateway)
        if secondary_prefix_length is not None:
            pulumi.set(__self__, "secondary_prefix_length", secondary_prefix_length)
        if secondary_static_ip_pools is not None:
            pulumi.set(__self__, "secondary_static_ip_pools", secondary_static_ip_pools)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @dual_stack_enabled.setter
    def dual_stack_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dual_stack_enabled", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` if network should allow guest VLAN tagging.
        Default `false`.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @guest_vlan_allowed.setter
    def guest_vlan_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "guest_vlan_allowed", value)

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> Optional[pulumi.Input[bool]]:
        """
        **NSX-V only.** Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "is_shared")

    @is_shared.setter
    def is_shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_shared", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2MetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful 
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @secondary_gateway.setter
    def secondary_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_gateway", value)

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @secondary_prefix_length.setter
    def secondary_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_prefix_length", value)

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @secondary_static_ip_pools.setter
    def secondary_static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2SecondaryStaticIpPoolArgs']]]]):
        pulumi.set(self, "secondary_static_ip_pools", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIsolatedV2StaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NetworkIsolatedV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2MetadataEntryArgs', 'NetworkIsolatedV2MetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2SecondaryStaticIpPoolArgs', 'NetworkIsolatedV2SecondaryStaticIpPoolArgsDict']]]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2StaticIpPoolArgs', 'NetworkIsolatedV2StaticIpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkIsolatedV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[bool] guest_vlan_allowed: Set to `true` if network should allow guest VLAN tagging.
               Default `false`.
        :param pulumi.Input[bool] is_shared: **NSX-V only.** Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2MetadataEntryArgs', 'NetworkIsolatedV2MetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful 
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2SecondaryStaticIpPoolArgs', 'NetworkIsolatedV2SecondaryStaticIpPoolArgsDict']]]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2StaticIpPoolArgs', 'NetworkIsolatedV2StaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkIsolatedV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkIsolatedV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkIsolatedV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkIsolatedV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
                 is_shared: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2MetadataEntryArgs', 'NetworkIsolatedV2MetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 secondary_gateway: Optional[pulumi.Input[str]] = None,
                 secondary_prefix_length: Optional[pulumi.Input[str]] = None,
                 secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2SecondaryStaticIpPoolArgs', 'NetworkIsolatedV2SecondaryStaticIpPoolArgsDict']]]]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2StaticIpPoolArgs', 'NetworkIsolatedV2StaticIpPoolArgsDict']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkIsolatedV2Args.__new__(NetworkIsolatedV2Args)

            __props__.__dict__["description"] = description
            __props__.__dict__["dns1"] = dns1
            __props__.__dict__["dns2"] = dns2
            __props__.__dict__["dns_suffix"] = dns_suffix
            __props__.__dict__["dual_stack_enabled"] = dual_stack_enabled
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["guest_vlan_allowed"] = guest_vlan_allowed
            __props__.__dict__["is_shared"] = is_shared
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["owner_id"] = owner_id
            if prefix_length is None and not opts.urn:
                raise TypeError("Missing required property 'prefix_length'")
            __props__.__dict__["prefix_length"] = prefix_length
            __props__.__dict__["secondary_gateway"] = secondary_gateway
            __props__.__dict__["secondary_prefix_length"] = secondary_prefix_length
            __props__.__dict__["secondary_static_ip_pools"] = secondary_static_ip_pools
            __props__.__dict__["static_ip_pools"] = static_ip_pools
            __props__.__dict__["vdc"] = vdc
        super(NetworkIsolatedV2, __self__).__init__(
            'vcd:index/networkIsolatedV2:NetworkIsolatedV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns1: Optional[pulumi.Input[str]] = None,
            dns2: Optional[pulumi.Input[str]] = None,
            dns_suffix: Optional[pulumi.Input[str]] = None,
            dual_stack_enabled: Optional[pulumi.Input[bool]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            guest_vlan_allowed: Optional[pulumi.Input[bool]] = None,
            is_shared: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2MetadataEntryArgs', 'NetworkIsolatedV2MetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            prefix_length: Optional[pulumi.Input[int]] = None,
            secondary_gateway: Optional[pulumi.Input[str]] = None,
            secondary_prefix_length: Optional[pulumi.Input[str]] = None,
            secondary_static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2SecondaryStaticIpPoolArgs', 'NetworkIsolatedV2SecondaryStaticIpPoolArgsDict']]]]] = None,
            static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2StaticIpPoolArgs', 'NetworkIsolatedV2StaticIpPoolArgsDict']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NetworkIsolatedV2':
        """
        Get an existing NetworkIsolatedV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] dns1: First DNS server to use.
        :param pulumi.Input[str] dns2: Second DNS server to use.
        :param pulumi.Input[str] dns_suffix: A FQDN for the virtual machines on this network
        :param pulumi.Input[bool] dual_stack_enabled: Enables Dual-Stack mode so that one can configure one
               IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
               `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
               `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        :param pulumi.Input[str] gateway: The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        :param pulumi.Input[bool] guest_vlan_allowed: Set to `true` if network should allow guest VLAN tagging.
               Default `false`.
        :param pulumi.Input[bool] is_shared: **NSX-V only.** Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2MetadataEntryArgs', 'NetworkIsolatedV2MetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful 
               when connected as sysadmin working across different organisations
        :param pulumi.Input[str] owner_id: VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
               and inherited from provider configuration)
        :param pulumi.Input[int] prefix_length: The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        :param pulumi.Input[str] secondary_gateway: IPv6 gateway *when Dual-Stack mode is enabled*
        :param pulumi.Input[str] secondary_prefix_length: IPv6 prefix length *when Dual-Stack mode is
               enabled*
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2SecondaryStaticIpPoolArgs', 'NetworkIsolatedV2SecondaryStaticIpPoolArgsDict']]]] secondary_static_ip_pools: One or more IPv6 static
               pools *when Dual-Stack mode is enabled*
               
               > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
               notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
               converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
               
               <a id="ip-pools"></a>
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkIsolatedV2StaticIpPoolArgs', 'NetworkIsolatedV2StaticIpPoolArgsDict']]]] static_ip_pools: A range of IPs permitted to be used as static IPs for
               virtual machines; see IP Pools below for details.
        :param pulumi.Input[str] vdc: The name of VDC to use. **Deprecated**  in favor of new field
               `owner_id` which supports VDC and VDC Group IDs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkIsolatedV2State.__new__(_NetworkIsolatedV2State)

        __props__.__dict__["description"] = description
        __props__.__dict__["dns1"] = dns1
        __props__.__dict__["dns2"] = dns2
        __props__.__dict__["dns_suffix"] = dns_suffix
        __props__.__dict__["dual_stack_enabled"] = dual_stack_enabled
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["guest_vlan_allowed"] = guest_vlan_allowed
        __props__.__dict__["is_shared"] = is_shared
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["prefix_length"] = prefix_length
        __props__.__dict__["secondary_gateway"] = secondary_gateway
        __props__.__dict__["secondary_prefix_length"] = secondary_prefix_length
        __props__.__dict__["secondary_static_ip_pools"] = secondary_static_ip_pools
        __props__.__dict__["static_ip_pools"] = static_ip_pools
        __props__.__dict__["vdc"] = vdc
        return NetworkIsolatedV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dns1(self) -> pulumi.Output[Optional[str]]:
        """
        First DNS server to use.
        """
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> pulumi.Output[Optional[str]]:
        """
        Second DNS server to use.
        """
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> pulumi.Output[Optional[str]]:
        """
        A FQDN for the virtual machines on this network
        """
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dualStackEnabled")
    def dual_stack_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables Dual-Stack mode so that one can configure one
        IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
        `prefix_length` and `static_ip_pool` while *IPv6* addresses in `secondary_gateway`,
        `secondary_prefix_length` and `secondary_static_ip_pool` fields.
        """
        return pulumi.get(self, "dual_stack_enabled")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to `true` if network should allow guest VLAN tagging.
        Default `false`.
        """
        return pulumi.get(self, "guest_vlan_allowed")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> pulumi.Output[bool]:
        """
        **NSX-V only.** Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.NetworkIsolatedV2MetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful 
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        and inherited from provider configuration)
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Output[int]:
        """
        The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="secondaryGateway")
    def secondary_gateway(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 gateway *when Dual-Stack mode is enabled*
        """
        return pulumi.get(self, "secondary_gateway")

    @property
    @pulumi.getter(name="secondaryPrefixLength")
    def secondary_prefix_length(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 prefix length *when Dual-Stack mode is
        enabled*
        """
        return pulumi.get(self, "secondary_prefix_length")

    @property
    @pulumi.getter(name="secondaryStaticIpPools")
    def secondary_static_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkIsolatedV2SecondaryStaticIpPool']]]:
        """
        One or more IPv6 static
        pools *when Dual-Stack mode is enabled*

        > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
        notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
        converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)

        <a id="ip-pools"></a>
        """
        return pulumi.get(self, "secondary_static_ip_pools")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkIsolatedV2StaticIpPool']]]:
        """
        A range of IPs permitted to be used as static IPs for
        virtual machines; see IP Pools below for details.
        """
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use. **Deprecated**  in favor of new field
        `owner_id` which supports VDC and VDC Group IDs.
        """
        return pulumi.get(self, "vdc")

