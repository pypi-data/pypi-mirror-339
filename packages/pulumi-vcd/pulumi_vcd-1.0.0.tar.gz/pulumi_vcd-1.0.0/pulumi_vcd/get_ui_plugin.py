# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetUiPluginResult',
    'AwaitableGetUiPluginResult',
    'get_ui_plugin',
    'get_ui_plugin_output',
]

@pulumi.output_type
class GetUiPluginResult:
    """
    A collection of values returned by getUiPlugin.
    """
    def __init__(__self__, description=None, enabled=None, id=None, license=None, link=None, name=None, provider_scoped=None, status=None, tenant_ids=None, tenant_scoped=None, vendor=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if license and not isinstance(license, str):
            raise TypeError("Expected argument 'license' to be a str")
        pulumi.set(__self__, "license", license)
        if link and not isinstance(link, str):
            raise TypeError("Expected argument 'link' to be a str")
        pulumi.set(__self__, "link", link)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_scoped and not isinstance(provider_scoped, bool):
            raise TypeError("Expected argument 'provider_scoped' to be a bool")
        pulumi.set(__self__, "provider_scoped", provider_scoped)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tenant_ids and not isinstance(tenant_ids, list):
            raise TypeError("Expected argument 'tenant_ids' to be a list")
        pulumi.set(__self__, "tenant_ids", tenant_ids)
        if tenant_scoped and not isinstance(tenant_scoped, bool):
            raise TypeError("Expected argument 'tenant_scoped' to be a bool")
        pulumi.set(__self__, "tenant_scoped", tenant_scoped)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def link(self) -> str:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerScoped")
    def provider_scoped(self) -> bool:
        return pulumi.get(self, "provider_scoped")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Sequence[str]:
        return pulumi.get(self, "tenant_ids")

    @property
    @pulumi.getter(name="tenantScoped")
    def tenant_scoped(self) -> bool:
        return pulumi.get(self, "tenant_scoped")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetUiPluginResult(GetUiPluginResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUiPluginResult(
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            license=self.license,
            link=self.link,
            name=self.name,
            provider_scoped=self.provider_scoped,
            status=self.status,
            tenant_ids=self.tenant_ids,
            tenant_scoped=self.tenant_scoped,
            vendor=self.vendor,
            version=self.version)


def get_ui_plugin(name: Optional[str] = None,
                  vendor: Optional[str] = None,
                  version: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUiPluginResult:
    """
    Provides a VMware Cloud Director UI Plugin data source. This can be used to fetch and read an existing UI Plugin.

    > Reading UI Plugins requires System Administrator privileges.

    Supported in provider *v3.10+* and requires VCD 10.3+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing_ui_plugin = vcd.get_ui_plugin(vendor="VMware",
        name="Customize Portal",
        version="3.1.4")
    pulumi.export("license", existing_ui_plugin.license)
    pulumi.export("tenants", existing_ui_plugin.tenant_ids)
    ```


    :param str name: The name of the UI Plugin
    :param str vendor: The vendor of the UI Plugin
    :param str version: The version of the UI Plugin
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getUiPlugin:getUiPlugin', __args__, opts=opts, typ=GetUiPluginResult).value

    return AwaitableGetUiPluginResult(
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        license=pulumi.get(__ret__, 'license'),
        link=pulumi.get(__ret__, 'link'),
        name=pulumi.get(__ret__, 'name'),
        provider_scoped=pulumi.get(__ret__, 'provider_scoped'),
        status=pulumi.get(__ret__, 'status'),
        tenant_ids=pulumi.get(__ret__, 'tenant_ids'),
        tenant_scoped=pulumi.get(__ret__, 'tenant_scoped'),
        vendor=pulumi.get(__ret__, 'vendor'),
        version=pulumi.get(__ret__, 'version'))
def get_ui_plugin_output(name: Optional[pulumi.Input[str]] = None,
                         vendor: Optional[pulumi.Input[str]] = None,
                         version: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUiPluginResult]:
    """
    Provides a VMware Cloud Director UI Plugin data source. This can be used to fetch and read an existing UI Plugin.

    > Reading UI Plugins requires System Administrator privileges.

    Supported in provider *v3.10+* and requires VCD 10.3+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    existing_ui_plugin = vcd.get_ui_plugin(vendor="VMware",
        name="Customize Portal",
        version="3.1.4")
    pulumi.export("license", existing_ui_plugin.license)
    pulumi.export("tenants", existing_ui_plugin.tenant_ids)
    ```


    :param str name: The name of the UI Plugin
    :param str vendor: The vendor of the UI Plugin
    :param str version: The version of the UI Plugin
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getUiPlugin:getUiPlugin', __args__, opts=opts, typ=GetUiPluginResult)
    return __ret__.apply(lambda __response__: GetUiPluginResult(
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        license=pulumi.get(__response__, 'license'),
        link=pulumi.get(__response__, 'link'),
        name=pulumi.get(__response__, 'name'),
        provider_scoped=pulumi.get(__response__, 'provider_scoped'),
        status=pulumi.get(__response__, 'status'),
        tenant_ids=pulumi.get(__response__, 'tenant_ids'),
        tenant_scoped=pulumi.get(__response__, 'tenant_scoped'),
        vendor=pulumi.get(__response__, 'vendor'),
        version=pulumi.get(__response__, 'version')))
