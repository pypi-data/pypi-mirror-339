# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOrgSamlResult',
    'AwaitableGetOrgSamlResult',
    'get_org_saml',
    'get_org_saml_output',
]

@pulumi.output_type
class GetOrgSamlResult:
    """
    A collection of values returned by getOrgSaml.
    """
    def __init__(__self__, email=None, enabled=None, entity_id=None, first_name=None, full_name=None, group=None, id=None, org_id=None, role=None, surname=None, user_name=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if surname and not isinstance(surname, str):
            raise TypeError("Expected argument 'surname' to be a str")
        pulumi.set(__self__, "surname", surname)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The name of the SAML attribute that returns the email address of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Shows whether the SAML identity service is used for authentication
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        """
        Your service provider entity ID
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        The name of the SAML attribute that returns the first name of the user
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        """
        The name of the SAML attribute that returns the full name of the user
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The name of the SAML attribute that returns the identifiers of all roles of the user
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def surname(self) -> str:
        """
        The name of the SAML attribute that returns the surname of the user
        """
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The name of the SAML attribute that returns the username of the user
        """
        return pulumi.get(self, "user_name")


class AwaitableGetOrgSamlResult(GetOrgSamlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgSamlResult(
            email=self.email,
            enabled=self.enabled,
            entity_id=self.entity_id,
            first_name=self.first_name,
            full_name=self.full_name,
            group=self.group,
            id=self.id,
            org_id=self.org_id,
            role=self.role,
            surname=self.surname,
            user_name=self.user_name)


def get_org_saml(org_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgSamlResult:
    """
    Supported in provider *v3.10+*.

    Provides a data source to read SAML configuration for an organization.

    > **Note:** This data source requires system administrator privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    first = vcd.get_org_saml(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the SAML settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgSaml:getOrgSaml', __args__, opts=opts, typ=GetOrgSamlResult).value

    return AwaitableGetOrgSamlResult(
        email=pulumi.get(__ret__, 'email'),
        enabled=pulumi.get(__ret__, 'enabled'),
        entity_id=pulumi.get(__ret__, 'entity_id'),
        first_name=pulumi.get(__ret__, 'first_name'),
        full_name=pulumi.get(__ret__, 'full_name'),
        group=pulumi.get(__ret__, 'group'),
        id=pulumi.get(__ret__, 'id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        role=pulumi.get(__ret__, 'role'),
        surname=pulumi.get(__ret__, 'surname'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_org_saml_output(org_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgSamlResult]:
    """
    Supported in provider *v3.10+*.

    Provides a data source to read SAML configuration for an organization.

    > **Note:** This data source requires system administrator privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_org = vcd.get_org(name="my-org")
    first = vcd.get_org_saml(org_id=my_org.id)
    ```


    :param str org_id: ID of the organization containing the SAML settings
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getOrgSaml:getOrgSaml', __args__, opts=opts, typ=GetOrgSamlResult)
    return __ret__.apply(lambda __response__: GetOrgSamlResult(
        email=pulumi.get(__response__, 'email'),
        enabled=pulumi.get(__response__, 'enabled'),
        entity_id=pulumi.get(__response__, 'entity_id'),
        first_name=pulumi.get(__response__, 'first_name'),
        full_name=pulumi.get(__response__, 'full_name'),
        group=pulumi.get(__response__, 'group'),
        id=pulumi.get(__response__, 'id'),
        org_id=pulumi.get(__response__, 'org_id'),
        role=pulumi.get(__response__, 'role'),
        surname=pulumi.get(__response__, 'surname'),
        user_name=pulumi.get(__response__, 'user_name')))
