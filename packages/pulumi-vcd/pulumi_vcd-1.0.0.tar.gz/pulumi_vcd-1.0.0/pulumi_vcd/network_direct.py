# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkDirectArgs', 'NetworkDirect']

@pulumi.input_type
class NetworkDirectArgs:
    def __init__(__self__, *,
                 external_network: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkDirect resource.
        :param pulumi.Input[str] external_network: The name of the external network.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[bool] shared: Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "external_network", external_network)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="externalNetwork")
    def external_network(self) -> pulumi.Input[str]:
        """
        The name of the external network.
        """
        return pulumi.get(self, "external_network")

    @external_network.setter
    def external_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_network", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NetworkDirectState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[str]] = None,
                 external_network_dns1: Optional[pulumi.Input[str]] = None,
                 external_network_dns2: Optional[pulumi.Input[str]] = None,
                 external_network_dns_suffix: Optional[pulumi.Input[str]] = None,
                 external_network_gateway: Optional[pulumi.Input[str]] = None,
                 external_network_netmask: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkDirect resources.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] external_network: The name of the external network.
        :param pulumi.Input[str] external_network_dns1: (Computed) returns the first DNS from the external network
        :param pulumi.Input[str] external_network_dns2: (Computed) returns the second DNS from the external network
        :param pulumi.Input[str] external_network_dns_suffix: (Computed) returns the DNS suffix from the external network
        :param pulumi.Input[str] external_network_gateway: (Computed) returns the gateway from the external network
        :param pulumi.Input[str] external_network_netmask: (Computed) returns the netmask from the external network
        :param pulumi.Input[str] href: Network Hypertext Reference
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[bool] shared: Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_network is not None:
            pulumi.set(__self__, "external_network", external_network)
        if external_network_dns1 is not None:
            pulumi.set(__self__, "external_network_dns1", external_network_dns1)
        if external_network_dns2 is not None:
            pulumi.set(__self__, "external_network_dns2", external_network_dns2)
        if external_network_dns_suffix is not None:
            pulumi.set(__self__, "external_network_dns_suffix", external_network_dns_suffix)
        if external_network_gateway is not None:
            pulumi.set(__self__, "external_network_gateway", external_network_gateway)
        if external_network_netmask is not None:
            pulumi.set(__self__, "external_network_netmask", external_network_netmask)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalNetwork")
    def external_network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the external network.
        """
        return pulumi.get(self, "external_network")

    @external_network.setter
    def external_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network", value)

    @property
    @pulumi.getter(name="externalNetworkDns1")
    def external_network_dns1(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns the first DNS from the external network
        """
        return pulumi.get(self, "external_network_dns1")

    @external_network_dns1.setter
    def external_network_dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_dns1", value)

    @property
    @pulumi.getter(name="externalNetworkDns2")
    def external_network_dns2(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns the second DNS from the external network
        """
        return pulumi.get(self, "external_network_dns2")

    @external_network_dns2.setter
    def external_network_dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_dns2", value)

    @property
    @pulumi.getter(name="externalNetworkDnsSuffix")
    def external_network_dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns the DNS suffix from the external network
        """
        return pulumi.get(self, "external_network_dns_suffix")

    @external_network_dns_suffix.setter
    def external_network_dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_dns_suffix", value)

    @property
    @pulumi.getter(name="externalNetworkGateway")
    def external_network_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns the gateway from the external network
        """
        return pulumi.get(self, "external_network_gateway")

    @external_network_gateway.setter
    def external_network_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_gateway", value)

    @property
    @pulumi.getter(name="externalNetworkNetmask")
    def external_network_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) returns the netmask from the external network
        """
        return pulumi.get(self, "external_network_netmask")

    @external_network_netmask.setter
    def external_network_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_netmask", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Network Hypertext Reference
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkDirectMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NetworkDirect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkDirectMetadataEntryArgs', 'NetworkDirectMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkDirect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] external_network: The name of the external network.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkDirectMetadataEntryArgs', 'NetworkDirectMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[bool] shared: Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkDirectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkDirect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkDirectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkDirectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkDirectMetadataEntryArgs', 'NetworkDirectMetadataEntryArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkDirectArgs.__new__(NetworkDirectArgs)

            __props__.__dict__["description"] = description
            if external_network is None and not opts.urn:
                raise TypeError("Missing required property 'external_network'")
            __props__.__dict__["external_network"] = external_network
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["shared"] = shared
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["external_network_dns1"] = None
            __props__.__dict__["external_network_dns2"] = None
            __props__.__dict__["external_network_dns_suffix"] = None
            __props__.__dict__["external_network_gateway"] = None
            __props__.__dict__["external_network_netmask"] = None
            __props__.__dict__["href"] = None
        super(NetworkDirect, __self__).__init__(
            'vcd:index/networkDirect:NetworkDirect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_network: Optional[pulumi.Input[str]] = None,
            external_network_dns1: Optional[pulumi.Input[str]] = None,
            external_network_dns2: Optional[pulumi.Input[str]] = None,
            external_network_dns_suffix: Optional[pulumi.Input[str]] = None,
            external_network_gateway: Optional[pulumi.Input[str]] = None,
            external_network_netmask: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkDirectMetadataEntryArgs', 'NetworkDirectMetadataEntryArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            shared: Optional[pulumi.Input[bool]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NetworkDirect':
        """
        Get an existing NetworkDirect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the network
        :param pulumi.Input[str] external_network: The name of the external network.
        :param pulumi.Input[str] external_network_dns1: (Computed) returns the first DNS from the external network
        :param pulumi.Input[str] external_network_dns2: (Computed) returns the second DNS from the external network
        :param pulumi.Input[str] external_network_dns_suffix: (Computed) returns the DNS suffix from the external network
        :param pulumi.Input[str] external_network_gateway: (Computed) returns the gateway from the external network
        :param pulumi.Input[str] external_network_netmask: (Computed) returns the netmask from the external network
        :param pulumi.Input[str] href: Network Hypertext Reference
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkDirectMetadataEntryArgs', 'NetworkDirectMetadataEntryArgsDict']]]] metadata_entries: A set of metadata entries to assign. See Metadata section for details.
        :param pulumi.Input[str] name: A unique name for the network
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when
               connected as sysadmin working across different organisations
        :param pulumi.Input[bool] shared: Defines if this network is shared between multiple VDCs
               in the Org.  Defaults to `false`.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkDirectState.__new__(_NetworkDirectState)

        __props__.__dict__["description"] = description
        __props__.__dict__["external_network"] = external_network
        __props__.__dict__["external_network_dns1"] = external_network_dns1
        __props__.__dict__["external_network_dns2"] = external_network_dns2
        __props__.__dict__["external_network_dns_suffix"] = external_network_dns_suffix
        __props__.__dict__["external_network_gateway"] = external_network_gateway
        __props__.__dict__["external_network_netmask"] = external_network_netmask
        __props__.__dict__["href"] = href
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["shared"] = shared
        __props__.__dict__["vdc"] = vdc
        return NetworkDirect(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalNetwork")
    def external_network(self) -> pulumi.Output[str]:
        """
        The name of the external network.
        """
        return pulumi.get(self, "external_network")

    @property
    @pulumi.getter(name="externalNetworkDns1")
    def external_network_dns1(self) -> pulumi.Output[str]:
        """
        (Computed) returns the first DNS from the external network
        """
        return pulumi.get(self, "external_network_dns1")

    @property
    @pulumi.getter(name="externalNetworkDns2")
    def external_network_dns2(self) -> pulumi.Output[str]:
        """
        (Computed) returns the second DNS from the external network
        """
        return pulumi.get(self, "external_network_dns2")

    @property
    @pulumi.getter(name="externalNetworkDnsSuffix")
    def external_network_dns_suffix(self) -> pulumi.Output[str]:
        """
        (Computed) returns the DNS suffix from the external network
        """
        return pulumi.get(self, "external_network_dns_suffix")

    @property
    @pulumi.getter(name="externalNetworkGateway")
    def external_network_gateway(self) -> pulumi.Output[str]:
        """
        (Computed) returns the gateway from the external network
        """
        return pulumi.get(self, "external_network_gateway")

    @property
    @pulumi.getter(name="externalNetworkNetmask")
    def external_network_netmask(self) -> pulumi.Output[str]:
        """
        (Computed) returns the netmask from the external network
        """
        return pulumi.get(self, "external_network_netmask")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Network Hypertext Reference
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metadata_entry instead""")
    def metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Use `metadata_entry` instead. Key value map of metadata to assign to this network.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.NetworkDirectMetadataEntry']]:
        """
        A set of metadata entries to assign. See Metadata section for details.
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when
        connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def shared(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines if this network is shared between multiple VDCs
        in the Org.  Defaults to `false`.
        """
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

