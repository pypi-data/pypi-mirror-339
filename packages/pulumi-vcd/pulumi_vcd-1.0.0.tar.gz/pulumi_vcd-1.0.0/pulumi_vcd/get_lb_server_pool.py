# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLbServerPoolResult',
    'AwaitableGetLbServerPoolResult',
    'get_lb_server_pool',
    'get_lb_server_pool_output',
]

@pulumi.output_type
class GetLbServerPoolResult:
    """
    A collection of values returned by getLbServerPool.
    """
    def __init__(__self__, algorithm=None, algorithm_parameters=None, description=None, edge_gateway=None, enable_transparency=None, id=None, members=None, monitor_id=None, name=None, org=None, vdc=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_parameters and not isinstance(algorithm_parameters, str):
            raise TypeError("Expected argument 'algorithm_parameters' to be a str")
        pulumi.set(__self__, "algorithm_parameters", algorithm_parameters)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if enable_transparency and not isinstance(enable_transparency, bool):
            raise TypeError("Expected argument 'enable_transparency' to be a bool")
        pulumi.set(__self__, "enable_transparency", enable_transparency)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if monitor_id and not isinstance(monitor_id, str):
            raise TypeError("Expected argument 'monitor_id' to be a str")
        pulumi.set(__self__, "monitor_id", monitor_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="algorithmParameters")
    def algorithm_parameters(self) -> str:
        return pulumi.get(self, "algorithm_parameters")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter(name="enableTransparency")
    def enable_transparency(self) -> bool:
        return pulumi.get(self, "enable_transparency")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetLbServerPoolMemberResult']:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> str:
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetLbServerPoolResult(GetLbServerPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbServerPoolResult(
            algorithm=self.algorithm,
            algorithm_parameters=self.algorithm_parameters,
            description=self.description,
            edge_gateway=self.edge_gateway,
            enable_transparency=self.enable_transparency,
            id=self.id,
            members=self.members,
            monitor_id=self.monitor_id,
            name=self.name,
            org=self.org,
            vdc=self.vdc)


def get_lb_server_pool(edge_gateway: Optional[str] = None,
                       name: Optional[str] = None,
                       org: Optional[str] = None,
                       vdc: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbServerPoolResult:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Server Pool data source. A Server Pool defines
    a group of backend servers (defined as pool members), manages load balancer distribution methods, and has a service
    monitor attached to it for health check parameters.

    > **Note:** See additional support notes in [server pool resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_server_pool).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    sp_ds = vcd.get_lb_server_pool(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the server pool is defined
    :param str name: Server Pool name for identifying the exact server pool
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getLbServerPool:getLbServerPool', __args__, opts=opts, typ=GetLbServerPoolResult).value

    return AwaitableGetLbServerPoolResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        algorithm_parameters=pulumi.get(__ret__, 'algorithm_parameters'),
        description=pulumi.get(__ret__, 'description'),
        edge_gateway=pulumi.get(__ret__, 'edge_gateway'),
        enable_transparency=pulumi.get(__ret__, 'enable_transparency'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        monitor_id=pulumi.get(__ret__, 'monitor_id'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_lb_server_pool_output(edge_gateway: Optional[pulumi.Input[str]] = None,
                              name: Optional[pulumi.Input[str]] = None,
                              org: Optional[pulumi.Input[Optional[str]]] = None,
                              vdc: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLbServerPoolResult]:
    """
    Provides a VMware Cloud Director Edge Gateway Load Balancer Server Pool data source. A Server Pool defines
    a group of backend servers (defined as pool members), manages load balancer distribution methods, and has a service
    monitor attached to it for health check parameters.

    > **Note:** See additional support notes in [server pool resource page](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/lb_server_pool).

    Supported in provider *v2.4+*

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    sp_ds = vcd.get_lb_server_pool(org="my-org",
        vdc="my-org-vdc",
        edge_gateway="my-edge-gw",
        name="not-managed")
    ```


    :param str edge_gateway: The name of the edge gateway on which the server pool is defined
    :param str name: Server Pool name for identifying the exact server pool
    :param str org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getLbServerPool:getLbServerPool', __args__, opts=opts, typ=GetLbServerPoolResult)
    return __ret__.apply(lambda __response__: GetLbServerPoolResult(
        algorithm=pulumi.get(__response__, 'algorithm'),
        algorithm_parameters=pulumi.get(__response__, 'algorithm_parameters'),
        description=pulumi.get(__response__, 'description'),
        edge_gateway=pulumi.get(__response__, 'edge_gateway'),
        enable_transparency=pulumi.get(__response__, 'enable_transparency'),
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        monitor_id=pulumi.get(__response__, 'monitor_id'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        vdc=pulumi.get(__response__, 'vdc')))
