# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetExternalEndpointResult',
    'AwaitableGetExternalEndpointResult',
    'get_external_endpoint',
    'get_external_endpoint_output',
]

@pulumi.output_type
class GetExternalEndpointResult:
    """
    A collection of values returned by getExternalEndpoint.
    """
    def __init__(__self__, description=None, enabled=None, id=None, name=None, root_url=None, vendor=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if root_url and not isinstance(root_url, str):
            raise TypeError("Expected argument 'root_url' to be a str")
        pulumi.set(__self__, "root_url", root_url)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> str:
        return pulumi.get(self, "root_url")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetExternalEndpointResult(GetExternalEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalEndpointResult(
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            root_url=self.root_url,
            vendor=self.vendor,
            version=self.version)


def get_external_endpoint(name: Optional[str] = None,
                          vendor: Optional[str] = None,
                          version: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalEndpointResult:
    """
    Supported in provider *v3.14+* and VCD 10.4.3+.

    Provides a data source to read External Endpoints in VMware Cloud Director. An External Endpoint holds information for the
    HTTPS endpoint which requests will be proxied to when using a [`ApiFilter`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_filter).

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    external_endpoint1 = vcd.get_external_endpoint(vendor="vmware",
        name="my-endpoint",
        version="1.0.0")
    ```


    :param str name: The name of the External Endpoint
    :param str vendor: The vendor name of the External Endpoint
    :param str version: The version of the External Endpoint
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getExternalEndpoint:getExternalEndpoint', __args__, opts=opts, typ=GetExternalEndpointResult).value

    return AwaitableGetExternalEndpointResult(
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        root_url=pulumi.get(__ret__, 'root_url'),
        vendor=pulumi.get(__ret__, 'vendor'),
        version=pulumi.get(__ret__, 'version'))
def get_external_endpoint_output(name: Optional[pulumi.Input[str]] = None,
                                 vendor: Optional[pulumi.Input[str]] = None,
                                 version: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetExternalEndpointResult]:
    """
    Supported in provider *v3.14+* and VCD 10.4.3+.

    Provides a data source to read External Endpoints in VMware Cloud Director. An External Endpoint holds information for the
    HTTPS endpoint which requests will be proxied to when using a [`ApiFilter`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_filter).

    > Only `System Administrator` can use this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    external_endpoint1 = vcd.get_external_endpoint(vendor="vmware",
        name="my-endpoint",
        version="1.0.0")
    ```


    :param str name: The name of the External Endpoint
    :param str vendor: The vendor name of the External Endpoint
    :param str version: The version of the External Endpoint
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vendor'] = vendor
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getExternalEndpoint:getExternalEndpoint', __args__, opts=opts, typ=GetExternalEndpointResult)
    return __ret__.apply(lambda __response__: GetExternalEndpointResult(
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        root_url=pulumi.get(__response__, 'root_url'),
        vendor=pulumi.get(__response__, 'vendor'),
        version=pulumi.get(__response__, 'version')))
