# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtRouteAdvertisementResult',
    'AwaitableGetNsxtRouteAdvertisementResult',
    'get_nsxt_route_advertisement',
    'get_nsxt_route_advertisement_output',
]

@pulumi.output_type
class GetNsxtRouteAdvertisementResult:
    """
    A collection of values returned by getNsxtRouteAdvertisement.
    """
    def __init__(__self__, edge_gateway_id=None, enabled=None, id=None, org=None, subnets=None):
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")


class AwaitableGetNsxtRouteAdvertisementResult(GetNsxtRouteAdvertisementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtRouteAdvertisementResult(
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            org=self.org,
            subnets=self.subnets)


def get_nsxt_route_advertisement(edge_gateway_id: Optional[str] = None,
                                 org: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtRouteAdvertisementResult:
    """
    Provides a VMware Cloud Director data source for reading route advertisement in an NSX-T Edge Gateway.

    ## Example Usage

    ### Reading Route Advertisement From NSX-T Edge Gateway)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    group1 = vcd.get_vdc_group(name="my-vdc-group")
    t1 = vcd.get_nsxt_edgegateway(owner_id=group1.id,
        name="my-nsxt-edge-gateway")
    route_advertisement = vcd.get_nsxt_route_advertisement(edge_gateway_id=t1.id)
    ```


    :param str edge_gateway_id: NSX-T Edge Gateway ID in which route advertisement is located.
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organizations.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtRouteAdvertisement:getNsxtRouteAdvertisement', __args__, opts=opts, typ=GetNsxtRouteAdvertisementResult).value

    return AwaitableGetNsxtRouteAdvertisementResult(
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        org=pulumi.get(__ret__, 'org'),
        subnets=pulumi.get(__ret__, 'subnets'))
def get_nsxt_route_advertisement_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                        org: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtRouteAdvertisementResult]:
    """
    Provides a VMware Cloud Director data source for reading route advertisement in an NSX-T Edge Gateway.

    ## Example Usage

    ### Reading Route Advertisement From NSX-T Edge Gateway)

    ```python
    import pulumi
    import pulumi_vcd as vcd

    group1 = vcd.get_vdc_group(name="my-vdc-group")
    t1 = vcd.get_nsxt_edgegateway(owner_id=group1.id,
        name="my-nsxt-edge-gateway")
    route_advertisement = vcd.get_nsxt_route_advertisement(edge_gateway_id=t1.id)
    ```


    :param str edge_gateway_id: NSX-T Edge Gateway ID in which route advertisement is located.
    :param str org: The name of organization to use, optional if defined at provider level. Useful
           when connected as sysadmin working across different organizations.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtRouteAdvertisement:getNsxtRouteAdvertisement', __args__, opts=opts, typ=GetNsxtRouteAdvertisementResult)
    return __ret__.apply(lambda __response__: GetNsxtRouteAdvertisementResult(
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        org=pulumi.get(__response__, 'org'),
        subnets=pulumi.get(__response__, 'subnets')))
