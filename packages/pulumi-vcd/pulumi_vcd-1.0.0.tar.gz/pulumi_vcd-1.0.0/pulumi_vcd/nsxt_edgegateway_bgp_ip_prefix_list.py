# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtEdgegatewayBgpIpPrefixListArgs', 'NsxtEdgegatewayBgpIpPrefixList']

@pulumi.input_type
class NsxtEdgegatewayBgpIpPrefixListArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 ip_prefixes: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegatewayBgpIpPrefixList resource.
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]] ip_prefixes: At least one `ip_prefix` definition. See IP Prefix for
               definition structure.
               
               <a id="ip-prefix"></a>
        :param pulumi.Input[str] description: Description of IP Prefix List
        :param pulumi.Input[str] name: The Name of IP Prefix List
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "ip_prefixes", ip_prefixes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]]:
        """
        At least one `ip_prefix` definition. See IP Prefix for
        definition structure.

        <a id="ip-prefix"></a>
        """
        return pulumi.get(self, "ip_prefixes")

    @ip_prefixes.setter
    def ip_prefixes(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]]):
        pulumi.set(self, "ip_prefixes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of IP Prefix List
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of IP Prefix List
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


@pulumi.input_type
class _NsxtEdgegatewayBgpIpPrefixListState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegatewayBgpIpPrefixList resources.
        :param pulumi.Input[str] description: Description of IP Prefix List
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]] ip_prefixes: At least one `ip_prefix` definition. See IP Prefix for
               definition structure.
               
               <a id="ip-prefix"></a>
        :param pulumi.Input[str] name: The Name of IP Prefix List
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if ip_prefixes is not None:
            pulumi.set(__self__, "ip_prefixes", ip_prefixes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of IP Prefix List
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]]]:
        """
        At least one `ip_prefix` definition. See IP Prefix for
        definition structure.

        <a id="ip-prefix"></a>
        """
        return pulumi.get(self, "ip_prefixes")

    @ip_prefixes.setter
    def ip_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs']]]]):
        pulumi.set(self, "ip_prefixes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of IP Prefix List
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


class NsxtEdgegatewayBgpIpPrefixList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs', 'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegatewayBgpIpPrefixList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of IP Prefix List
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs', 'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgsDict']]]] ip_prefixes: At least one `ip_prefix` definition. See IP Prefix for
               definition structure.
               
               <a id="ip-prefix"></a>
        :param pulumi.Input[str] name: The Name of IP Prefix List
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayBgpIpPrefixListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegatewayBgpIpPrefixList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayBgpIpPrefixListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayBgpIpPrefixListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs', 'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayBgpIpPrefixListArgs.__new__(NsxtEdgegatewayBgpIpPrefixListArgs)

            __props__.__dict__["description"] = description
            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            if ip_prefixes is None and not opts.urn:
                raise TypeError("Missing required property 'ip_prefixes'")
            __props__.__dict__["ip_prefixes"] = ip_prefixes
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
        super(NsxtEdgegatewayBgpIpPrefixList, __self__).__init__(
            'vcd:index/nsxtEdgegatewayBgpIpPrefixList:NsxtEdgegatewayBgpIpPrefixList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            ip_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs', 'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegatewayBgpIpPrefixList':
        """
        Get an existing NsxtEdgegatewayBgpIpPrefixList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of IP Prefix List
        :param pulumi.Input[str] edge_gateway_id: The ID of the Edge Gateway (NSX-T only). Can be looked up using
               `NsxtEdgegateway` datasource
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs', 'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgsDict']]]] ip_prefixes: At least one `ip_prefix` definition. See IP Prefix for
               definition structure.
               
               <a id="ip-prefix"></a>
        :param pulumi.Input[str] name: The Name of IP Prefix List
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayBgpIpPrefixListState.__new__(_NsxtEdgegatewayBgpIpPrefixListState)

        __props__.__dict__["description"] = description
        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["ip_prefixes"] = ip_prefixes
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        return NsxtEdgegatewayBgpIpPrefixList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of IP Prefix List
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        The ID of the Edge Gateway (NSX-T only). Can be looked up using
        `NsxtEdgegateway` datasource
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter(name="ipPrefixes")
    def ip_prefixes(self) -> pulumi.Output[Sequence['outputs.NsxtEdgegatewayBgpIpPrefixListIpPrefix']]:
        """
        At least one `ip_prefix` definition. See IP Prefix for
        definition structure.

        <a id="ip-prefix"></a>
        """
        return pulumi.get(self, "ip_prefixes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of IP Prefix List
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations
        """
        return pulumi.get(self, "org")

