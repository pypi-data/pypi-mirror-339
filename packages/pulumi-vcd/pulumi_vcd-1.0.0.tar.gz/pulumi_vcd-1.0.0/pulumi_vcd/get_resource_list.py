# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceListResult',
    'AwaitableGetResourceListResult',
    'get_resource_list',
    'get_resource_list_output',
]

@pulumi.output_type
class GetResourceListResult:
    """
    A collection of values returned by getResourceList.
    """
    def __init__(__self__, id=None, import_file_name=None, list_mode=None, lists=None, name=None, name_id_separator=None, name_regex=None, org=None, parent=None, resource_type=None, vdc=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_file_name and not isinstance(import_file_name, str):
            raise TypeError("Expected argument 'import_file_name' to be a str")
        pulumi.set(__self__, "import_file_name", import_file_name)
        if list_mode and not isinstance(list_mode, str):
            raise TypeError("Expected argument 'list_mode' to be a str")
        pulumi.set(__self__, "list_mode", list_mode)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_id_separator and not isinstance(name_id_separator, str):
            raise TypeError("Expected argument 'name_id_separator' to be a str")
        pulumi.set(__self__, "name_id_separator", name_id_separator)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        pulumi.set(__self__, "parent", parent)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importFileName")
    def import_file_name(self) -> Optional[str]:
        return pulumi.get(self, "import_file_name")

    @property
    @pulumi.getter(name="listMode")
    def list_mode(self) -> Optional[str]:
        return pulumi.get(self, "list_mode")

    @property
    @pulumi.getter
    def lists(self) -> Sequence[str]:
        """
        (Computed) The list of requested resources in the chosen format.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameIdSeparator")
    def name_id_separator(self) -> Optional[str]:
        return pulumi.get(self, "name_id_separator")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetResourceListResult(GetResourceListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceListResult(
            id=self.id,
            import_file_name=self.import_file_name,
            list_mode=self.list_mode,
            lists=self.lists,
            name=self.name,
            name_id_separator=self.name_id_separator,
            name_regex=self.name_regex,
            org=self.org,
            parent=self.parent,
            resource_type=self.resource_type,
            vdc=self.vdc)


def get_resource_list(import_file_name: Optional[str] = None,
                      list_mode: Optional[str] = None,
                      name: Optional[str] = None,
                      name_id_separator: Optional[str] = None,
                      name_regex: Optional[str] = None,
                      org: Optional[str] = None,
                      parent: Optional[str] = None,
                      resource_type: Optional[str] = None,
                      vdc: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceListResult:
    """
    Use this data source to access information about an existing resource.

    :param str import_file_name: Name of the file containing the import block. (Requires `list_mode = "import"`).
           See [Importing resources][import-resources] for more information on importing.
    :param str list_mode: How the list should be built. One of:
    :param str name: An unique name to identify the data source
    :param str name_id_separator: A string separating name and ID in the list. Default is "  " (two spaces)
    :param str name_regex: If set, will restrict the list of resources to the ones whose name matches the given regular expression.
    :param str org: The name of organization to use, optional if defined at provider level
    :param str parent: The resource parent, such as vApp, catalog, or edge gateway name, when needed.
    :param str resource_type: Which resource we want to list. Supported keywords are:
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['importFileName'] = import_file_name
    __args__['listMode'] = list_mode
    __args__['name'] = name
    __args__['nameIdSeparator'] = name_id_separator
    __args__['nameRegex'] = name_regex
    __args__['org'] = org
    __args__['parent'] = parent
    __args__['resourceType'] = resource_type
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getResourceList:getResourceList', __args__, opts=opts, typ=GetResourceListResult).value

    return AwaitableGetResourceListResult(
        id=pulumi.get(__ret__, 'id'),
        import_file_name=pulumi.get(__ret__, 'import_file_name'),
        list_mode=pulumi.get(__ret__, 'list_mode'),
        lists=pulumi.get(__ret__, 'lists'),
        name=pulumi.get(__ret__, 'name'),
        name_id_separator=pulumi.get(__ret__, 'name_id_separator'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        org=pulumi.get(__ret__, 'org'),
        parent=pulumi.get(__ret__, 'parent'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        vdc=pulumi.get(__ret__, 'vdc'))
def get_resource_list_output(import_file_name: Optional[pulumi.Input[Optional[str]]] = None,
                             list_mode: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[str]] = None,
                             name_id_separator: Optional[pulumi.Input[Optional[str]]] = None,
                             name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                             org: Optional[pulumi.Input[Optional[str]]] = None,
                             parent: Optional[pulumi.Input[Optional[str]]] = None,
                             resource_type: Optional[pulumi.Input[str]] = None,
                             vdc: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceListResult]:
    """
    Use this data source to access information about an existing resource.

    :param str import_file_name: Name of the file containing the import block. (Requires `list_mode = "import"`).
           See [Importing resources][import-resources] for more information on importing.
    :param str list_mode: How the list should be built. One of:
    :param str name: An unique name to identify the data source
    :param str name_id_separator: A string separating name and ID in the list. Default is "  " (two spaces)
    :param str name_regex: If set, will restrict the list of resources to the ones whose name matches the given regular expression.
    :param str org: The name of organization to use, optional if defined at provider level
    :param str parent: The resource parent, such as vApp, catalog, or edge gateway name, when needed.
    :param str resource_type: Which resource we want to list. Supported keywords are:
    :param str vdc: The name of VDC to use, optional if defined at provider level
    """
    __args__ = dict()
    __args__['importFileName'] = import_file_name
    __args__['listMode'] = list_mode
    __args__['name'] = name
    __args__['nameIdSeparator'] = name_id_separator
    __args__['nameRegex'] = name_regex
    __args__['org'] = org
    __args__['parent'] = parent
    __args__['resourceType'] = resource_type
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getResourceList:getResourceList', __args__, opts=opts, typ=GetResourceListResult)
    return __ret__.apply(lambda __response__: GetResourceListResult(
        id=pulumi.get(__response__, 'id'),
        import_file_name=pulumi.get(__response__, 'import_file_name'),
        list_mode=pulumi.get(__response__, 'list_mode'),
        lists=pulumi.get(__response__, 'lists'),
        name=pulumi.get(__response__, 'name'),
        name_id_separator=pulumi.get(__response__, 'name_id_separator'),
        name_regex=pulumi.get(__response__, 'name_regex'),
        org=pulumi.get(__response__, 'org'),
        parent=pulumi.get(__response__, 'parent'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        vdc=pulumi.get(__response__, 'vdc')))
