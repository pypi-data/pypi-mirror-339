# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNsxtEdgegatewayDhcpForwardingResult',
    'AwaitableGetNsxtEdgegatewayDhcpForwardingResult',
    'get_nsxt_edgegateway_dhcp_forwarding',
    'get_nsxt_edgegateway_dhcp_forwarding_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayDhcpForwardingResult:
    """
    A collection of values returned by getNsxtEdgegatewayDhcpForwarding.
    """
    def __init__(__self__, dhcp_servers=None, edge_gateway_id=None, enabled=None, id=None, org=None):
        if dhcp_servers and not isinstance(dhcp_servers, list):
            raise TypeError("Expected argument 'dhcp_servers' to be a list")
        pulumi.set(__self__, "dhcp_servers", dhcp_servers)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter(name="dhcpServers")
    def dhcp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "dhcp_servers")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")


class AwaitableGetNsxtEdgegatewayDhcpForwardingResult(GetNsxtEdgegatewayDhcpForwardingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayDhcpForwardingResult(
            dhcp_servers=self.dhcp_servers,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            org=self.org)


def get_nsxt_edgegateway_dhcp_forwarding(edge_gateway_id: Optional[str] = None,
                                         org: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayDhcpForwardingResult:
    """
    Supported in provider *v3.10+* and VCD 10.3.1+ with NSX-T.

    Provides a data source to read NSX-T Edge Gateway DHCP forwarding configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    v1 = vcd.get_org_vdc(org="datacloud",
        name="nsxt-vdc-datacloud")
    testing_in_vdc = vcd.get_nsxt_edgegateway(org="datacloud",
        owner_id=v1.id,
        name="nsxt-gw-datacloud")
    testing_in_vdc_get_nsxt_edgegateway_dhcp_forwarding = vcd.get_nsxt_edgegateway_dhcp_forwarding(org="datacloud",
        edge_gateway_id=testing_in_vdc.id)
    ```


    :param str edge_gateway_id: NSX-T Edge Gateway ID.
    :param str org: Org in which the NSX-T Edge Gateway is located, required
           if not set in the provider section.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegatewayDhcpForwarding:getNsxtEdgegatewayDhcpForwarding', __args__, opts=opts, typ=GetNsxtEdgegatewayDhcpForwardingResult).value

    return AwaitableGetNsxtEdgegatewayDhcpForwardingResult(
        dhcp_servers=pulumi.get(__ret__, 'dhcp_servers'),
        edge_gateway_id=pulumi.get(__ret__, 'edge_gateway_id'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        org=pulumi.get(__ret__, 'org'))
def get_nsxt_edgegateway_dhcp_forwarding_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsxtEdgegatewayDhcpForwardingResult]:
    """
    Supported in provider *v3.10+* and VCD 10.3.1+ with NSX-T.

    Provides a data source to read NSX-T Edge Gateway DHCP forwarding configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vcd as vcd

    v1 = vcd.get_org_vdc(org="datacloud",
        name="nsxt-vdc-datacloud")
    testing_in_vdc = vcd.get_nsxt_edgegateway(org="datacloud",
        owner_id=v1.id,
        name="nsxt-gw-datacloud")
    testing_in_vdc_get_nsxt_edgegateway_dhcp_forwarding = vcd.get_nsxt_edgegateway_dhcp_forwarding(org="datacloud",
        edge_gateway_id=testing_in_vdc.id)
    ```


    :param str edge_gateway_id: NSX-T Edge Gateway ID.
    :param str org: Org in which the NSX-T Edge Gateway is located, required
           if not set in the provider section.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['org'] = org
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getNsxtEdgegatewayDhcpForwarding:getNsxtEdgegatewayDhcpForwarding', __args__, opts=opts, typ=GetNsxtEdgegatewayDhcpForwardingResult)
    return __ret__.apply(lambda __response__: GetNsxtEdgegatewayDhcpForwardingResult(
        dhcp_servers=pulumi.get(__response__, 'dhcp_servers'),
        edge_gateway_id=pulumi.get(__response__, 'edge_gateway_id'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        org=pulumi.get(__response__, 'org')))
