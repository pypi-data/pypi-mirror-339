# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtDistributedFirewallArgs', 'NsxtDistributedFirewall']

@pulumi.input_type
class NsxtDistributedFirewallArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]],
                 vdc_group_id: pulumi.Input[str],
                 org: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtDistributedFirewall resource.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]] rules: One or more blocks with Firewall Rule definitions. **Order**
               defines firewall rule precedence
               
               <a id="firewall-rule"></a>
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        """
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if org is not None:
            pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]]:
        """
        One or more blocks with Firewall Rule definitions. **Order**
        defines firewall rule precedence

        <a id="firewall-rule"></a>
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> pulumi.Input[str]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

    @vdc_group_id.setter
    def vdc_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vdc_group_id", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)


@pulumi.input_type
class _NsxtDistributedFirewallState:
    def __init__(__self__, *,
                 org: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtDistributedFirewall resources.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]] rules: One or more blocks with Firewall Rule definitions. **Order**
               defines firewall rule precedence
               
               <a id="firewall-rule"></a>
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        if org is not None:
            pulumi.set(__self__, "org", org)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if vdc_group_id is not None:
            pulumi.set(__self__, "vdc_group_id", vdc_group_id)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]]]:
        """
        One or more blocks with Firewall Rule definitions. **Order**
        defines firewall rule precedence

        <a id="firewall-rule"></a>
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDistributedFirewallRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

    @vdc_group_id.setter
    def vdc_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_group_id", value)


class NsxtDistributedFirewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtDistributedFirewallRuleArgs', 'NsxtDistributedFirewallRuleArgsDict']]]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtDistributedFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtDistributedFirewallRuleArgs', 'NsxtDistributedFirewallRuleArgsDict']]]] rules: One or more blocks with Firewall Rule definitions. **Order**
               defines firewall rule precedence
               
               <a id="firewall-rule"></a>
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtDistributedFirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtDistributedFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtDistributedFirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtDistributedFirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtDistributedFirewallRuleArgs', 'NsxtDistributedFirewallRuleArgsDict']]]]] = None,
                 vdc_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtDistributedFirewallArgs.__new__(NsxtDistributedFirewallArgs)

            __props__.__dict__["org"] = org
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if vdc_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'vdc_group_id'")
            __props__.__dict__["vdc_group_id"] = vdc_group_id
        super(NsxtDistributedFirewall, __self__).__init__(
            'vcd:index/nsxtDistributedFirewall:NsxtDistributedFirewall',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            org: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NsxtDistributedFirewallRuleArgs', 'NsxtDistributedFirewallRuleArgsDict']]]]] = None,
            vdc_group_id: Optional[pulumi.Input[str]] = None) -> 'NsxtDistributedFirewall':
        """
        Get an existing NsxtDistributedFirewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful
               when connected as sysadmin working across different organisations.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NsxtDistributedFirewallRuleArgs', 'NsxtDistributedFirewallRuleArgsDict']]]] rules: One or more blocks with Firewall Rule definitions. **Order**
               defines firewall rule precedence
               
               <a id="firewall-rule"></a>
        :param pulumi.Input[str] vdc_group_id: The ID of VDC Group to manage Distributed Firewall in. Can be looked
               up using `VdcGroup` resource or data source.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtDistributedFirewallState.__new__(_NsxtDistributedFirewallState)

        __props__.__dict__["org"] = org
        __props__.__dict__["rules"] = rules
        __props__.__dict__["vdc_group_id"] = vdc_group_id
        return NsxtDistributedFirewall(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful
        when connected as sysadmin working across different organisations.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.NsxtDistributedFirewallRule']]:
        """
        One or more blocks with Firewall Rule definitions. **Order**
        defines firewall rule precedence

        <a id="firewall-rule"></a>
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> pulumi.Output[str]:
        """
        The ID of VDC Group to manage Distributed Firewall in. Can be looked
        up using `VdcGroup` resource or data source.
        """
        return pulumi.get(self, "vdc_group_id")

