# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCseKubernetesClusterResult',
    'AwaitableGetCseKubernetesClusterResult',
    'get_cse_kubernetes_cluster',
    'get_cse_kubernetes_cluster_output',
]

@pulumi.output_type
class GetCseKubernetesClusterResult:
    """
    A collection of values returned by getCseKubernetesCluster.
    """
    def __init__(__self__, auto_repair_on_errors=None, capvcd_version=None, cluster_id=None, cluster_resource_set_bindings=None, control_planes=None, cpi_version=None, cse_version=None, csi_version=None, default_storage_classes=None, events=None, id=None, kubeconfig=None, kubernetes_template_id=None, kubernetes_version=None, name=None, network_id=None, node_health_check=None, org_id=None, owner=None, pods_cidr=None, runtime=None, services_cidr=None, ssh_public_key=None, state=None, supported_upgrades=None, tkg_product_version=None, vdc_id=None, virtual_ip_subnet=None, worker_pools=None):
        if auto_repair_on_errors and not isinstance(auto_repair_on_errors, bool):
            raise TypeError("Expected argument 'auto_repair_on_errors' to be a bool")
        pulumi.set(__self__, "auto_repair_on_errors", auto_repair_on_errors)
        if capvcd_version and not isinstance(capvcd_version, str):
            raise TypeError("Expected argument 'capvcd_version' to be a str")
        pulumi.set(__self__, "capvcd_version", capvcd_version)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_resource_set_bindings and not isinstance(cluster_resource_set_bindings, list):
            raise TypeError("Expected argument 'cluster_resource_set_bindings' to be a list")
        pulumi.set(__self__, "cluster_resource_set_bindings", cluster_resource_set_bindings)
        if control_planes and not isinstance(control_planes, list):
            raise TypeError("Expected argument 'control_planes' to be a list")
        pulumi.set(__self__, "control_planes", control_planes)
        if cpi_version and not isinstance(cpi_version, str):
            raise TypeError("Expected argument 'cpi_version' to be a str")
        pulumi.set(__self__, "cpi_version", cpi_version)
        if cse_version and not isinstance(cse_version, str):
            raise TypeError("Expected argument 'cse_version' to be a str")
        pulumi.set(__self__, "cse_version", cse_version)
        if csi_version and not isinstance(csi_version, str):
            raise TypeError("Expected argument 'csi_version' to be a str")
        pulumi.set(__self__, "csi_version", csi_version)
        if default_storage_classes and not isinstance(default_storage_classes, list):
            raise TypeError("Expected argument 'default_storage_classes' to be a list")
        pulumi.set(__self__, "default_storage_classes", default_storage_classes)
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubeconfig and not isinstance(kubeconfig, str):
            raise TypeError("Expected argument 'kubeconfig' to be a str")
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        if kubernetes_template_id and not isinstance(kubernetes_template_id, str):
            raise TypeError("Expected argument 'kubernetes_template_id' to be a str")
        pulumi.set(__self__, "kubernetes_template_id", kubernetes_template_id)
        if kubernetes_version and not isinstance(kubernetes_version, str):
            raise TypeError("Expected argument 'kubernetes_version' to be a str")
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if node_health_check and not isinstance(node_health_check, bool):
            raise TypeError("Expected argument 'node_health_check' to be a bool")
        pulumi.set(__self__, "node_health_check", node_health_check)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if pods_cidr and not isinstance(pods_cidr, str):
            raise TypeError("Expected argument 'pods_cidr' to be a str")
        pulumi.set(__self__, "pods_cidr", pods_cidr)
        if runtime and not isinstance(runtime, str):
            raise TypeError("Expected argument 'runtime' to be a str")
        pulumi.set(__self__, "runtime", runtime)
        if services_cidr and not isinstance(services_cidr, str):
            raise TypeError("Expected argument 'services_cidr' to be a str")
        pulumi.set(__self__, "services_cidr", services_cidr)
        if ssh_public_key and not isinstance(ssh_public_key, str):
            raise TypeError("Expected argument 'ssh_public_key' to be a str")
        pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if supported_upgrades and not isinstance(supported_upgrades, list):
            raise TypeError("Expected argument 'supported_upgrades' to be a list")
        pulumi.set(__self__, "supported_upgrades", supported_upgrades)
        if tkg_product_version and not isinstance(tkg_product_version, str):
            raise TypeError("Expected argument 'tkg_product_version' to be a str")
        pulumi.set(__self__, "tkg_product_version", tkg_product_version)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)
        if virtual_ip_subnet and not isinstance(virtual_ip_subnet, str):
            raise TypeError("Expected argument 'virtual_ip_subnet' to be a str")
        pulumi.set(__self__, "virtual_ip_subnet", virtual_ip_subnet)
        if worker_pools and not isinstance(worker_pools, list):
            raise TypeError("Expected argument 'worker_pools' to be a list")
        pulumi.set(__self__, "worker_pools", worker_pools)

    @property
    @pulumi.getter(name="autoRepairOnErrors")
    def auto_repair_on_errors(self) -> bool:
        return pulumi.get(self, "auto_repair_on_errors")

    @property
    @pulumi.getter(name="capvcdVersion")
    def capvcd_version(self) -> str:
        return pulumi.get(self, "capvcd_version")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterResourceSetBindings")
    def cluster_resource_set_bindings(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_resource_set_bindings")

    @property
    @pulumi.getter(name="controlPlanes")
    def control_planes(self) -> Sequence['outputs.GetCseKubernetesClusterControlPlaneResult']:
        return pulumi.get(self, "control_planes")

    @property
    @pulumi.getter(name="cpiVersion")
    def cpi_version(self) -> str:
        return pulumi.get(self, "cpi_version")

    @property
    @pulumi.getter(name="cseVersion")
    def cse_version(self) -> Optional[str]:
        return pulumi.get(self, "cse_version")

    @property
    @pulumi.getter(name="csiVersion")
    def csi_version(self) -> str:
        return pulumi.get(self, "csi_version")

    @property
    @pulumi.getter(name="defaultStorageClasses")
    def default_storage_classes(self) -> Sequence['outputs.GetCseKubernetesClusterDefaultStorageClassResult']:
        return pulumi.get(self, "default_storage_classes")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.GetCseKubernetesClusterEventResult']:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kubeconfig(self) -> str:
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter(name="kubernetesTemplateId")
    def kubernetes_template_id(self) -> str:
        return pulumi.get(self, "kubernetes_template_id")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="nodeHealthCheck")
    def node_health_check(self) -> bool:
        return pulumi.get(self, "node_health_check")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="podsCidr")
    def pods_cidr(self) -> str:
        return pulumi.get(self, "pods_cidr")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter(name="servicesCidr")
    def services_cidr(self) -> str:
        return pulumi.get(self, "services_cidr")

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> str:
        return pulumi.get(self, "ssh_public_key")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedUpgrades")
    def supported_upgrades(self) -> Sequence[str]:
        return pulumi.get(self, "supported_upgrades")

    @property
    @pulumi.getter(name="tkgProductVersion")
    def tkg_product_version(self) -> str:
        return pulumi.get(self, "tkg_product_version")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> str:
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="virtualIpSubnet")
    def virtual_ip_subnet(self) -> str:
        return pulumi.get(self, "virtual_ip_subnet")

    @property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Sequence['outputs.GetCseKubernetesClusterWorkerPoolResult']:
        return pulumi.get(self, "worker_pools")


class AwaitableGetCseKubernetesClusterResult(GetCseKubernetesClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCseKubernetesClusterResult(
            auto_repair_on_errors=self.auto_repair_on_errors,
            capvcd_version=self.capvcd_version,
            cluster_id=self.cluster_id,
            cluster_resource_set_bindings=self.cluster_resource_set_bindings,
            control_planes=self.control_planes,
            cpi_version=self.cpi_version,
            cse_version=self.cse_version,
            csi_version=self.csi_version,
            default_storage_classes=self.default_storage_classes,
            events=self.events,
            id=self.id,
            kubeconfig=self.kubeconfig,
            kubernetes_template_id=self.kubernetes_template_id,
            kubernetes_version=self.kubernetes_version,
            name=self.name,
            network_id=self.network_id,
            node_health_check=self.node_health_check,
            org_id=self.org_id,
            owner=self.owner,
            pods_cidr=self.pods_cidr,
            runtime=self.runtime,
            services_cidr=self.services_cidr,
            ssh_public_key=self.ssh_public_key,
            state=self.state,
            supported_upgrades=self.supported_upgrades,
            tkg_product_version=self.tkg_product_version,
            vdc_id=self.vdc_id,
            virtual_ip_subnet=self.virtual_ip_subnet,
            worker_pools=self.worker_pools)


def get_cse_kubernetes_cluster(cluster_id: Optional[str] = None,
                               cse_version: Optional[str] = None,
                               name: Optional[str] = None,
                               org_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCseKubernetesClusterResult:
    """
    Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.

    Supported in provider *v3.12+*

    Supports the following **Container Service Extension** versions:

    * 4.1.0
    * 4.1.1 / 4.1.1a
    * 4.2.0
    * 4.2.1
    * 4.2.2
    * 4.2.3

    > To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)

    ## Example Usage

    ### With ID

    The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
    the desired cluster and obtaining the ID from the displayed information.

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_cluster = vcd.get_cse_kubernetes_cluster(cluster_id="urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865")
    ```


    :param str cluster_id: Unequivocally identifies a cluster in VCD. Either `cluster_id` or `name` must be set.
    :param str cse_version: Specifies the CSE Version of the cluster to find when `name` is used instead of `cluster_id`.
    :param str name: Allows to find a Kubernetes cluster by name inside the given Organization with ID `org_id`. Either `cluster_id` or `name` must be set. This argument requires `cse_version` and `org_id` to be set.
    :param str org_id: The ID of the Organization to which the Kubernetes cluster belongs. Only used if `cluster_id` is not set. Must be present if `name` is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['cseVersion'] = cse_version
    __args__['name'] = name
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCseKubernetesCluster:getCseKubernetesCluster', __args__, opts=opts, typ=GetCseKubernetesClusterResult).value

    return AwaitableGetCseKubernetesClusterResult(
        auto_repair_on_errors=pulumi.get(__ret__, 'auto_repair_on_errors'),
        capvcd_version=pulumi.get(__ret__, 'capvcd_version'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_resource_set_bindings=pulumi.get(__ret__, 'cluster_resource_set_bindings'),
        control_planes=pulumi.get(__ret__, 'control_planes'),
        cpi_version=pulumi.get(__ret__, 'cpi_version'),
        cse_version=pulumi.get(__ret__, 'cse_version'),
        csi_version=pulumi.get(__ret__, 'csi_version'),
        default_storage_classes=pulumi.get(__ret__, 'default_storage_classes'),
        events=pulumi.get(__ret__, 'events'),
        id=pulumi.get(__ret__, 'id'),
        kubeconfig=pulumi.get(__ret__, 'kubeconfig'),
        kubernetes_template_id=pulumi.get(__ret__, 'kubernetes_template_id'),
        kubernetes_version=pulumi.get(__ret__, 'kubernetes_version'),
        name=pulumi.get(__ret__, 'name'),
        network_id=pulumi.get(__ret__, 'network_id'),
        node_health_check=pulumi.get(__ret__, 'node_health_check'),
        org_id=pulumi.get(__ret__, 'org_id'),
        owner=pulumi.get(__ret__, 'owner'),
        pods_cidr=pulumi.get(__ret__, 'pods_cidr'),
        runtime=pulumi.get(__ret__, 'runtime'),
        services_cidr=pulumi.get(__ret__, 'services_cidr'),
        ssh_public_key=pulumi.get(__ret__, 'ssh_public_key'),
        state=pulumi.get(__ret__, 'state'),
        supported_upgrades=pulumi.get(__ret__, 'supported_upgrades'),
        tkg_product_version=pulumi.get(__ret__, 'tkg_product_version'),
        vdc_id=pulumi.get(__ret__, 'vdc_id'),
        virtual_ip_subnet=pulumi.get(__ret__, 'virtual_ip_subnet'),
        worker_pools=pulumi.get(__ret__, 'worker_pools'))
def get_cse_kubernetes_cluster_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      cse_version: Optional[pulumi.Input[Optional[str]]] = None,
                                      name: Optional[pulumi.Input[Optional[str]]] = None,
                                      org_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCseKubernetesClusterResult]:
    """
    Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.

    Supported in provider *v3.12+*

    Supports the following **Container Service Extension** versions:

    * 4.1.0
    * 4.1.1 / 4.1.1a
    * 4.2.0
    * 4.2.1
    * 4.2.2
    * 4.2.3

    > To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)

    ## Example Usage

    ### With ID

    The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
    the desired cluster and obtaining the ID from the displayed information.

    ```python
    import pulumi
    import pulumi_vcd as vcd

    my_cluster = vcd.get_cse_kubernetes_cluster(cluster_id="urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865")
    ```


    :param str cluster_id: Unequivocally identifies a cluster in VCD. Either `cluster_id` or `name` must be set.
    :param str cse_version: Specifies the CSE Version of the cluster to find when `name` is used instead of `cluster_id`.
    :param str name: Allows to find a Kubernetes cluster by name inside the given Organization with ID `org_id`. Either `cluster_id` or `name` must be set. This argument requires `cse_version` and `org_id` to be set.
    :param str org_id: The ID of the Organization to which the Kubernetes cluster belongs. Only used if `cluster_id` is not set. Must be present if `name` is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['cseVersion'] = cse_version
    __args__['name'] = name
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vcd:index/getCseKubernetesCluster:getCseKubernetesCluster', __args__, opts=opts, typ=GetCseKubernetesClusterResult)
    return __ret__.apply(lambda __response__: GetCseKubernetesClusterResult(
        auto_repair_on_errors=pulumi.get(__response__, 'auto_repair_on_errors'),
        capvcd_version=pulumi.get(__response__, 'capvcd_version'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        cluster_resource_set_bindings=pulumi.get(__response__, 'cluster_resource_set_bindings'),
        control_planes=pulumi.get(__response__, 'control_planes'),
        cpi_version=pulumi.get(__response__, 'cpi_version'),
        cse_version=pulumi.get(__response__, 'cse_version'),
        csi_version=pulumi.get(__response__, 'csi_version'),
        default_storage_classes=pulumi.get(__response__, 'default_storage_classes'),
        events=pulumi.get(__response__, 'events'),
        id=pulumi.get(__response__, 'id'),
        kubeconfig=pulumi.get(__response__, 'kubeconfig'),
        kubernetes_template_id=pulumi.get(__response__, 'kubernetes_template_id'),
        kubernetes_version=pulumi.get(__response__, 'kubernetes_version'),
        name=pulumi.get(__response__, 'name'),
        network_id=pulumi.get(__response__, 'network_id'),
        node_health_check=pulumi.get(__response__, 'node_health_check'),
        org_id=pulumi.get(__response__, 'org_id'),
        owner=pulumi.get(__response__, 'owner'),
        pods_cidr=pulumi.get(__response__, 'pods_cidr'),
        runtime=pulumi.get(__response__, 'runtime'),
        services_cidr=pulumi.get(__response__, 'services_cidr'),
        ssh_public_key=pulumi.get(__response__, 'ssh_public_key'),
        state=pulumi.get(__response__, 'state'),
        supported_upgrades=pulumi.get(__response__, 'supported_upgrades'),
        tkg_product_version=pulumi.get(__response__, 'tkg_product_version'),
        vdc_id=pulumi.get(__response__, 'vdc_id'),
        virtual_ip_subnet=pulumi.get(__response__, 'virtual_ip_subnet'),
        worker_pools=pulumi.get(__response__, 'worker_pools')))
