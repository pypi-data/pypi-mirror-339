Metadata-Version: 2.4
Name: FlaskSimpleAuth
Version: 35.3
Summary: Simple authentication, authorization and parameters for Flask, emphasizing configurability
Author-email: Fabien Coelho <flask.auth@coelho.net>
License-Expression: CC0-1.0
Project-URL: repository, https://github.com/zx80/flask-simple-auth
Project-URL: documentation, https://zx80.github.io/flask-simple-auth/
Project-URL: issues, https://github.com/zx80/flask-simple-auth/issues
Project-URL: package, https://pypi.org/project/FlaskSimpleAuth/
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Environment :: Web Environment
Classifier: Framework :: Flask
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: flask>=3.0
Requires-Dist: ProxyPatternPool>=1.0
Requires-Dist: CacheToolsUtils>=10.0
Provides-Extra: dev
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pyright; extra == "dev"
Requires-Dist: types-flask; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: types-cachetools; extra == "dev"
Requires-Dist: types-redis; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: pymarkdownlnt!=0.9.5; extra == "dev"
Provides-Extra: pub
Requires-Dist: build; extra == "pub"
Requires-Dist: twine; extra == "pub"
Requires-Dist: wheel; extra == "pub"
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: sphinx_rtd_theme; extra == "doc"
Requires-Dist: sphinx-autoapi; extra == "doc"
Requires-Dist: sphinx-lint; extra == "doc"
Requires-Dist: myst_parser; extra == "doc"
Provides-Extra: tests
Requires-Dist: requests; extra == "tests"
Requires-Dist: pydantic>=2.0; extra == "tests"
Provides-Extra: demo
Requires-Dist: anodb; extra == "demo"
Requires-Dist: psycopg; extra == "demo"
Requires-Dist: psycopg2; extra == "demo"
Requires-Dist: types-cachetools; extra == "demo"
Provides-Extra: password
Requires-Dist: bcrypt; extra == "password"
Requires-Dist: argon2-cffi; extra == "password"
Requires-Dist: scrypt; extra == "password"
Requires-Dist: pyotp; extra == "password"
Requires-Dist: passlib; extra == "password"
Requires-Dist: crypt_r; python_version >= "3.13" and extra == "password"
Provides-Extra: passwrd
Requires-Dist: bcrypt; extra == "passwrd"
Requires-Dist: pyotp; extra == "passwrd"
Requires-Dist: passlib; extra == "passwrd"
Requires-Dist: crypt_r; python_version >= "3.13" and extra == "passwrd"
Provides-Extra: ldap
Requires-Dist: ldap3; extra == "ldap"
Provides-Extra: redis
Requires-Dist: redis; extra == "redis"
Provides-Extra: memcached
Requires-Dist: pymemcache; extra == "memcached"
Provides-Extra: jwt
Requires-Dist: pyjwt; extra == "jwt"
Requires-Dist: cryptography; extra == "jwt"
Provides-Extra: cors
Requires-Dist: flask_cors; extra == "cors"
Provides-Extra: httpauth
Requires-Dist: flask_httpauth; extra == "httpauth"
Dynamic: license-file

# FlaskSimpleAuth: The Secure Flask Framework

FlaskSimpleAuth is a [Flask](https://flask.palletsprojects.com/) wrapper to add
a declarative security layer to routes with authentification, authorization and
parameter management.

![Status](https://github.com/zx80/flask-simple-auth/actions/workflows/fsa.yml/badge.svg?branch=main&style=flat)
![Tests](https://img.shields.io/badge/tests-105%20✓-success)
![Coverage](https://img.shields.io/badge/coverage-100%25-success)
![Issues](https://img.shields.io/github/issues/zx80/flask-simple-auth?style=flat)
![Python](https://img.shields.io/badge/python-3-informational)
![Version](https://img.shields.io/pypi/v/FlaskSimpleAuth)
![Badges](https://img.shields.io/badge/badges-8-informational)
![License](https://img.shields.io/pypi/l/flasksimpleauth?style=flat)

With FlaskSimpleAuth, application and security concerns are separated:

- the **application** focusses on *what* to do, and *declares* its security
  requirements.
- the **configuration** declares *how* the authentification and authorization
  constraints are checked by providing settings and hook functions.
- the **framework** *implements* and *enforces* the security on the application
  routes, with safe defaults so that security cannot be overlooked.

The following Flask application provides two routes:

- `GET /store` allows any authenticated *user* in group *employee* to
  access the store list.
- `POST /store/<sid>` allows an authenticated *user* who is a *manager* of
  *store* number *sid* to add a quantity of product to the store inventory.

```python
# File "app.py"
from FlaskSimpleAuth import Flask

app = Flask("acme")
app.config.from_envvar("ACME_CONFIG")

@app.get("/store", authz="employee")
def get_store(pattern: str = "%"):
    # return the list of stores matching optional parameter pattern
    return ..., 200

@app.post("/store/<sid>/product", authz=("store", "sid", "manager"))
def post_store_sid_product(sid: int, product: str, quantity: int):
    # product is added in quantity to store sid
    return ..., 201
```

In this code, there is *no* clue about how users are authenticated, as this is
set from the configuration.
Only authorizations are declared on the route with the mandatory ``authz``
parameter.
How these are checked is also set from the configuration.
HTTP or JSON parameters are automatically converted to the expected type,
with features on par with [FastAPI](https://fastapi.tiangolo.com/).

Authentication and authorizations are provided to the framework with callback functions.
For our example, we will need to retrieve the salted hashed password for a user,
to check whether a user belongs to a group, and
to tell whether a user can access a given store in a particular role:

```python
# File "auth.py"
def get_user_pass(user: str) -> str|None:
    return ...  # hashed password retrieved from somewhere

def user_is_employee(user: str) -> bool:
    return ...  # whether user belongs to group employee

def store_perms(user: str, sid: int, role: str) -> bool|None:
    return ...  # whether user can access store sid in role
```

Here is an example of configuration for the above application:
Users are identified either with a JWT token or with a basic authentification.

```python
# File "acme.conf"
import os
import auth

FSA_MODE = "dev"
FSA_AUTH = ["token", "basic"]
FSA_TOKEN_TYPE = "jwt"
FSA_TOKEN_SECRET = os.environ["ACME_SECRET"]
FSA_GET_USER_PASS = auth.get_user_pass
FSA_GROUP_CHECK = { "employee": auth.user_is_employee }
FSA_OBJECT_PERMS = { "store": auth.store_perms }
```

The framework will ensure that routes are only called by authenticated users
who have the right authorizations.
Secure and reasonable defaults are provided.
Most features can be adjusted or extended to particular needs through numerous
directives and hooks.
Authentication and authorization callback invocations are cached for efficiency.
Also, [pydantic](https://docs.pydantic.dev/), dataclass and generic type
parameters are supported out of the box.

## More

- [documentation](https://zx80.github.io/flask-simple-auth/)
  including a [tutorial](https://zx80.github.io/flask-simple-auth/TUTORIAL)
  and convenient [recipes](https://zx80.github.io/flask-simple-auth/RECIPES),
  [sources](https://github.com/zx80/flask-simple-auth) and
  [issues](https://github.com/zx80/flask-simple-auth/issues) are hosted on
  [GitHub](https://github.com/).
- install [package](https://pypi.org/project/FlaskSimpleAuth/) from
  [PyPI](https://pypi.org/).

## License

This code is [Public Domain](https://creativecommons.org/publicdomain/zero/1.0/).

All software has bug, this is software, hence…
Beware that you may lose your hairs or your friends because of it.
If you like it, feel free to send a postcard to the author.
