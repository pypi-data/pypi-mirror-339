# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AnalyticsProductQueriesDetailsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'datetime',
        'date_to': 'datetime',
        'limit_by_sku': 'int',
        'page': 'int',
        'page_size': 'int',
        'skus': 'list[str]',
        'sort_by': 'V1AnalyticsProductQueriesDetailsRequestSortBy',
        'sort_dir': 'V1AnalyticsProductQueriesDetailsRequestSortDir'
    }

    attribute_map = {
        'date_from': 'date_from',
        'date_to': 'date_to',
        'limit_by_sku': 'limit_by_sku',
        'page': 'page',
        'page_size': 'page_size',
        'skus': 'skus',
        'sort_by': 'sort_by',
        'sort_dir': 'sort_dir'
    }

    def __init__(self, date_from=None, date_to=None, limit_by_sku=None, page=None, page_size=None, skus=None, sort_by=None, sort_dir=None):  # noqa: E501
        """V1AnalyticsProductQueriesDetailsRequest - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._limit_by_sku = None
        self._page = None
        self._page_size = None
        self._skus = None
        self._sort_by = None
        self._sort_dir = None
        self.discriminator = None
        self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        self.limit_by_sku = limit_by_sku
        if page is not None:
            self.page = page
        self.page_size = page_size
        self.skus = skus
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_dir is not None:
            self.sort_dir = sort_dir

    @property
    def date_from(self):
        """Gets the date_from of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Дата начала формирования аналитики.  # noqa: E501

        :return: The date_from of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this V1AnalyticsProductQueriesDetailsRequest.

        Дата начала формирования аналитики.  # noqa: E501

        :param date_from: The date_from of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Дата окончания формирования аналитики.  # noqa: E501

        :return: The date_to of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this V1AnalyticsProductQueriesDetailsRequest.

        Дата окончания формирования аналитики.  # noqa: E501

        :param date_to: The date_to of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def limit_by_sku(self):
        """Gets the limit_by_sku of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Лимит числа запросов по одному SKU. Максимум — 15 запросов.  # noqa: E501

        :return: The limit_by_sku of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit_by_sku

    @limit_by_sku.setter
    def limit_by_sku(self, limit_by_sku):
        """Sets the limit_by_sku of this V1AnalyticsProductQueriesDetailsRequest.

        Лимит числа запросов по одному SKU. Максимум — 15 запросов.  # noqa: E501

        :param limit_by_sku: The limit_by_sku of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: int
        """
        if limit_by_sku is None:
            raise ValueError("Invalid value for `limit_by_sku`, must not be `None`")  # noqa: E501

        self._limit_by_sku = limit_by_sku

    @property
    def page(self):
        """Gets the page of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Номер страницы, возвращаемой в запросе. Минимум — 0.  # noqa: E501

        :return: The page of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this V1AnalyticsProductQueriesDetailsRequest.

        Номер страницы, возвращаемой в запросе. Минимум — 0.  # noqa: E501

        :param page: The page of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Количество элементов на странице. Максимум — 100.  # noqa: E501

        :return: The page_size of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this V1AnalyticsProductQueriesDetailsRequest.

        Количество элементов на странице. Максимум — 100.  # noqa: E501

        :param page_size: The page_size of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def skus(self):
        """Gets the skus of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501

        Список SKU, идентификаторов товара в системе Ozon. По ним вернётся аналитика по запросам. Максимум — 1000 SKU.  # noqa: E501

        :return: The skus of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this V1AnalyticsProductQueriesDetailsRequest.

        Список SKU, идентификаторов товара в системе Ozon. По ним вернётся аналитика по запросам. Максимум — 1000 SKU.  # noqa: E501

        :param skus: The skus of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: list[str]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")  # noqa: E501

        self._skus = skus

    @property
    def sort_by(self):
        """Gets the sort_by of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501


        :return: The sort_by of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: V1AnalyticsProductQueriesDetailsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this V1AnalyticsProductQueriesDetailsRequest.


        :param sort_by: The sort_by of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: V1AnalyticsProductQueriesDetailsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def sort_dir(self):
        """Gets the sort_dir of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501


        :return: The sort_dir of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :rtype: V1AnalyticsProductQueriesDetailsRequestSortDir
        """
        return self._sort_dir

    @sort_dir.setter
    def sort_dir(self, sort_dir):
        """Sets the sort_dir of this V1AnalyticsProductQueriesDetailsRequest.


        :param sort_dir: The sort_dir of this V1AnalyticsProductQueriesDetailsRequest.  # noqa: E501
        :type: V1AnalyticsProductQueriesDetailsRequestSortDir
        """

        self._sort_dir = sort_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AnalyticsProductQueriesDetailsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AnalyticsProductQueriesDetailsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
