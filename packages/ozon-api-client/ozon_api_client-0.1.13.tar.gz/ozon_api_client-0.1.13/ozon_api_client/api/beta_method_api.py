# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class BetaMethodApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analytics_api_analytics_product_queries(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию о запросах моих товаров  # noqa: E501

        Используйте метод, чтобы получить данные о запросах ваших товаров. Полная аналитика доступна с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus). Без подписки вы можете посмотреть часть показателей. Метод аналогичен вкладке **Товары в поиске → Запросы моего товара** в личном кабинете.  Аналитику по запросам можно проверить за определённые даты. Для этого укажите интервал в полях `date_from` и `date_to`. Данные за последний месяц доступны в любом интервале, кроме трёх дней от текущей даты — в эти дни происходит расчёт. Аналитика за даты позже, чем месяц назад, доступна только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus) и только по неделям — в запросе укажите параметр `date_from`.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1115-Metod-polucheniia-informatsii-o-zaprosakh-tovara) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_analytics_product_queries(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsProductQueriesRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsProductQueriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analytics_api_analytics_product_queries_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.analytics_api_analytics_product_queries_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def analytics_api_analytics_product_queries_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию о запросах моих товаров  # noqa: E501

        Используйте метод, чтобы получить данные о запросах ваших товаров. Полная аналитика доступна с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus). Без подписки вы можете посмотреть часть показателей. Метод аналогичен вкладке **Товары в поиске → Запросы моего товара** в личном кабинете.  Аналитику по запросам можно проверить за определённые даты. Для этого укажите интервал в полях `date_from` и `date_to`. Данные за последний месяц доступны в любом интервале, кроме трёх дней от текущей даты — в эти дни происходит расчёт. Аналитика за даты позже, чем месяц назад, доступна только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus) и только по неделям — в запросе укажите параметр `date_from`.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1115-Metod-polucheniia-informatsii-o-zaprosakh-tovara) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_analytics_product_queries_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsProductQueriesRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsProductQueriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analytics_api_analytics_product_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `analytics_api_analytics_product_queries`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `analytics_api_analytics_product_queries`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `analytics_api_analytics_product_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/analytics/product-queries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AnalyticsProductQueriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analytics_api_analytics_product_queries_details(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить детализацию запросов по товару  # noqa: E501

        Используйте метод, чтобы получить данные по запросам на конкретный товар. Полная аналитика доступна с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus). Без подписки вы можете посмотреть часть показателей. Метод аналогичен просмотру данных по товару на вкладке **Товары в поиске → Запросы моего товара** в личном кабинете.  Аналитику по запросам можно проверить за определённые даты. Для этого укажите интервал в полях `date_from` и `date_to`. Данные за последний месяц доступны в любом интервале, кроме трёх дней от текущей даты — в эти дни происходит расчёт. Аналитика за даты позже, чем месяц назад, доступна только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus) и только по неделям — в запросе укажите параметр `date_from`.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1306-Metod-polucheniia-informatsii-o-zaprosakh-tovara-po-odnomu-tovaru) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_analytics_product_queries_details(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsProductQueriesDetailsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsProductQueriesDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analytics_api_analytics_product_queries_details_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.analytics_api_analytics_product_queries_details_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def analytics_api_analytics_product_queries_details_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить детализацию запросов по товару  # noqa: E501

        Используйте метод, чтобы получить данные по запросам на конкретный товар. Полная аналитика доступна с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus). Без подписки вы можете посмотреть часть показателей. Метод аналогичен просмотру данных по товару на вкладке **Товары в поиске → Запросы моего товара** в личном кабинете.  Аналитику по запросам можно проверить за определённые даты. Для этого укажите интервал в полях `date_from` и `date_to`. Данные за последний месяц доступны в любом интервале, кроме трёх дней от текущей даты — в эти дни происходит расчёт. Аналитика за даты позже, чем месяц назад, доступна только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus) и только по неделям — в запросе укажите параметр `date_from`.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1306-Metod-polucheniia-informatsii-o-zaprosakh-tovara-po-odnomu-tovaru) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_analytics_product_queries_details_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsProductQueriesDetailsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsProductQueriesDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analytics_api_analytics_product_queries_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `analytics_api_analytics_product_queries_details`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `analytics_api_analytics_product_queries_details`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `analytics_api_analytics_product_queries_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/analytics/product-queries/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AnalyticsProductQueriesDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analytics_api_manage_stocks(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Управление остатками  # noqa: E501

        Используйте метод, чтобы узнать, сколько товаров осталось на складах FBO.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1106-Razdel-upravleniia-ostatkami-analytics-manage-stocks) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_manage_stocks(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsManageStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsManageStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analytics_api_manage_stocks_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.analytics_api_manage_stocks_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def analytics_api_manage_stocks_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Управление остатками  # noqa: E501

        Используйте метод, чтобы узнать, сколько товаров осталось на складах FBO.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1106-Razdel-upravleniia-ostatkami-analytics-manage-stocks) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analytics_api_manage_stocks_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AnalyticsManageStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1AnalyticsManageStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analytics_api_manage_stocks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `analytics_api_manage_stocks`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `analytics_api_manage_stocks`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `analytics_api_manage_stocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/analytics/manage/stocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AnalyticsManageStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carriage_api_carriage_cancel(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Удаление отгрузки  # noqa: E501

        Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1183-Otmena-aktualnoi-otgruzki-FBS) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carriage_api_carriage_cancel(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CarriageCancelRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1CarriageCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carriage_api_carriage_cancel_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.carriage_api_carriage_cancel_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def carriage_api_carriage_cancel_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Удаление отгрузки  # noqa: E501

        Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1183-Otmena-aktualnoi-otgruzki-FBS) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carriage_api_carriage_cancel_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CarriageCancelRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1CarriageCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carriage_api_carriage_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `carriage_api_carriage_cancel`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `carriage_api_carriage_cancel`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `carriage_api_carriage_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/carriage/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CarriageCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carriage_api_set_postings(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменение состава отгрузки  # noqa: E501

         <aside class=\"warning\"> Метод полностью перезаписывает список заказов в отгрузке. Передавайте только те заказы, которые находятся в статусе <code>Ожидает отгрузки</code>, и вы готовы их отгрузить.     </aside>  <br>  <aside class=\"notice\"> Чтобы вернуться к списку заказов, удалите отгрузку с помощью метода <a href=\"#operation/CarriageAPI_CarriageCancel\">/v1/carriage/cancel</a>, и создайте новую. </aside>  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1182-Izmenenie-sostava-otgruzki) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carriage_api_set_postings(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SetPostingsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1SetPostingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carriage_api_set_postings_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.carriage_api_set_postings_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def carriage_api_set_postings_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменение состава отгрузки  # noqa: E501

         <aside class=\"warning\"> Метод полностью перезаписывает список заказов в отгрузке. Передавайте только те заказы, которые находятся в статусе <code>Ожидает отгрузки</code>, и вы готовы их отгрузить.     </aside>  <br>  <aside class=\"notice\"> Чтобы вернуться к списку заказов, удалите отгрузку с помощью метода <a href=\"#operation/CarriageAPI_CarriageCancel\">/v1/carriage/cancel</a>, и создайте новую. </aside>  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1182-Izmenenie-sostava-otgruzki) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carriage_api_set_postings_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SetPostingsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1SetPostingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carriage_api_set_postings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `carriage_api_set_postings`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `carriage_api_set_postings`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `carriage_api_set_postings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/carriage/set-postings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SetPostingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chat_api_chat_history_v3(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """История чата  # noqa: E501

        Возвращает историю сообщений чата. По умолчанию от самого нового сообщения к старым.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1299-Metod-dlia-polucheniia-istorii-chatov) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chat_api_chat_history_v3(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3ChatHistoryRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3ChatHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chat_api_chat_history_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.chat_api_chat_history_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def chat_api_chat_history_v3_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """История чата  # noqa: E501

        Возвращает историю сообщений чата. По умолчанию от самого нового сообщения к старым.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1299-Metod-dlia-polucheniia-istorii-chatov) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chat_api_chat_history_v3_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3ChatHistoryRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3ChatHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chat_api_chat_history_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chat_api_chat_history_v3`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `chat_api_chat_history_v3`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `chat_api_chat_history_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/chat/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3ChatHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_action_timer_status(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить статус установленного таймера  # noqa: E501

         Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1076-Beta-metody-dlia-polucheniia-otcheta-o-vzaimoraschetakh-i-otcheta-Reestr-prodazh-iur-litsam) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_action_timer_status(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductActionTimerStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductActionTimerStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_action_timer_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_action_timer_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_action_timer_status_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить статус установленного таймера  # noqa: E501

         Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1076-Beta-metody-dlia-polucheniia-otcheta-o-vzaimoraschetakh-i-otcheta-Reestr-prodazh-iur-litsam) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_action_timer_status_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductActionTimerStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductActionTimerStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_action_timer_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_action_timer_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_action_timer_status`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_action_timer_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/action/timer/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ProductActionTimerStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_action_timer_update(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Обновление таймера актуальности минимальной цены  # noqa: E501

         Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1209-Uchet-minimalnoi-tseny) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_action_timer_update(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductActionTimerUpdateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductActionTimerUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_action_timer_update_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_action_timer_update_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_action_timer_update_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Обновление таймера актуальности минимальной цены  # noqa: E501

         Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1209-Uchet-minimalnoi-tseny) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_action_timer_update_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductActionTimerUpdateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductActionTimerUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_action_timer_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_action_timer_update`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_action_timer_update`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_action_timer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/action/timer/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ProductActionTimerUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_product_info_wrong_volume(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список товаров с некорректными ОВХ  # noqa: E501

        Возвращает список товаров с некорректными объёмно-весовыми характеристиками (ОВХ). Если вы указали размеры правильно, обратитесь в поддержку Ozon.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1260-Informer-nekorrektnykh-OVKh) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_info_wrong_volume(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductInfoWrongVolumeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductInfoWrongVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_product_info_wrong_volume_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_product_info_wrong_volume_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_product_info_wrong_volume_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список товаров с некорректными ОВХ  # noqa: E501

        Возвращает список товаров с некорректными объёмно-весовыми характеристиками (ОВХ). Если вы указали размеры правильно, обратитесь в поддержку Ozon.  Вы можете оставить обратную связь по этому методу в комментариях к [обсуждению](https://dev.ozon.ru/community/1260-Informer-nekorrektnykh-OVKh) в сообществе разработчиков Ozon for dev.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_info_wrong_volume_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductInfoWrongVolumeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductInfoWrongVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_product_info_wrong_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_product_info_wrong_volume`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_product_info_wrong_volume`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_product_info_wrong_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/info/wrong-volume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ProductInfoWrongVolumeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
