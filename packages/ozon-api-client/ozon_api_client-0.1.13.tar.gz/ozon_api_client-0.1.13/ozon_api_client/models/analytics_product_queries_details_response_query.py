# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsProductQueriesDetailsResponseQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'gmv': 'float',
        'order_count': 'int',
        'position': 'float',
        'query': 'str',
        'query_index': 'int',
        'sku': 'int',
        'unique_search_users': 'int',
        'unique_view_users': 'int',
        'view_conversion': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'gmv': 'gmv',
        'order_count': 'order_count',
        'position': 'position',
        'query': 'query',
        'query_index': 'query_index',
        'sku': 'sku',
        'unique_search_users': 'unique_search_users',
        'unique_view_users': 'unique_view_users',
        'view_conversion': 'view_conversion'
    }

    def __init__(self, currency=None, gmv=None, order_count=None, position=None, query=None, query_index=None, sku=None, unique_search_users=None, unique_view_users=None, view_conversion=None):  # noqa: E501
        """AnalyticsProductQueriesDetailsResponseQuery - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._gmv = None
        self._order_count = None
        self._position = None
        self._query = None
        self._query_index = None
        self._sku = None
        self._unique_search_users = None
        self._unique_view_users = None
        self._view_conversion = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if gmv is not None:
            self.gmv = gmv
        if order_count is not None:
            self.order_count = order_count
        if position is not None:
            self.position = position
        if query is not None:
            self.query = query
        if query_index is not None:
            self.query_index = query_index
        if sku is not None:
            self.sku = sku
        if unique_search_users is not None:
            self.unique_search_users = unique_search_users
        if unique_view_users is not None:
            self.unique_view_users = unique_view_users
        if view_conversion is not None:
            self.view_conversion = view_conversion

    @property
    def currency(self):
        """Gets the currency of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Валюта.  # noqa: E501

        :return: The currency of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AnalyticsProductQueriesDetailsResponseQuery.

        Валюта.  # noqa: E501

        :param currency: The currency of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def gmv(self):
        """Gets the gmv of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Продажи по запросам.  # noqa: E501

        :return: The gmv of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: float
        """
        return self._gmv

    @gmv.setter
    def gmv(self, gmv):
        """Sets the gmv of this AnalyticsProductQueriesDetailsResponseQuery.

        Продажи по запросам.  # noqa: E501

        :param gmv: The gmv of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: float
        """

        self._gmv = gmv

    @property
    def order_count(self):
        """Gets the order_count of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Количество заказов по запросу.  # noqa: E501

        :return: The order_count of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this AnalyticsProductQueriesDetailsResponseQuery.

        Количество заказов по запросу.  # noqa: E501

        :param order_count: The order_count of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: int
        """

        self._order_count = order_count

    @property
    def position(self):
        """Gets the position of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Средняя позиция товара. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :return: The position of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AnalyticsProductQueriesDetailsResponseQuery.

        Средняя позиция товара. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :param position: The position of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: float
        """

        self._position = position

    @property
    def query(self):
        """Gets the query of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Текст запроса.  # noqa: E501

        :return: The query of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AnalyticsProductQueriesDetailsResponseQuery.

        Текст запроса.  # noqa: E501

        :param query: The query of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def query_index(self):
        """Gets the query_index of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Порядковый номер запроса.  # noqa: E501

        :return: The query_index of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: int
        """
        return self._query_index

    @query_index.setter
    def query_index(self, query_index):
        """Sets the query_index of this AnalyticsProductQueriesDetailsResponseQuery.

        Порядковый номер запроса.  # noqa: E501

        :param query_index: The query_index of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: int
        """

        self._query_index = query_index

    @property
    def sku(self):
        """Gets the sku of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AnalyticsProductQueriesDetailsResponseQuery.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def unique_search_users(self):
        """Gets the unique_search_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Количество покупателей, которые искали ваш товар на Ozon.  # noqa: E501

        :return: The unique_search_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: int
        """
        return self._unique_search_users

    @unique_search_users.setter
    def unique_search_users(self, unique_search_users):
        """Sets the unique_search_users of this AnalyticsProductQueriesDetailsResponseQuery.

        Количество покупателей, которые искали ваш товар на Ozon.  # noqa: E501

        :param unique_search_users: The unique_search_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: int
        """

        self._unique_search_users = unique_search_users

    @property
    def unique_view_users(self):
        """Gets the unique_view_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Количество покупателей, которые увидели ваш товар на Ozon. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :return: The unique_view_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: int
        """
        return self._unique_view_users

    @unique_view_users.setter
    def unique_view_users(self, unique_view_users):
        """Sets the unique_view_users of this AnalyticsProductQueriesDetailsResponseQuery.

        Количество покупателей, которые увидели ваш товар на Ozon. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :param unique_view_users: The unique_view_users of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: int
        """

        self._unique_view_users = unique_view_users

    @property
    def view_conversion(self):
        """Gets the view_conversion of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501

        Конверсия из просмотра товара. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :return: The view_conversion of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :rtype: float
        """
        return self._view_conversion

    @view_conversion.setter
    def view_conversion(self, view_conversion):
        """Sets the view_conversion of this AnalyticsProductQueriesDetailsResponseQuery.

        Конверсия из просмотра товара. Доступно только с подпиской [Premium](https://seller-edu.ozon.ru/seller-rating/about-rating/premium-program) или [Premium Plus](https://seller-edu.ozon.ru/seller-rating/about-rating/subscription-premium-plus), иначе поле вернётся пустым.  # noqa: E501

        :param view_conversion: The view_conversion of this AnalyticsProductQueriesDetailsResponseQuery.  # noqa: E501
        :type: float
        """

        self._view_conversion = view_conversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsProductQueriesDetailsResponseQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsProductQueriesDetailsResponseQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
