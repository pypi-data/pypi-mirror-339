"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from skylight_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List
from typing_extensions import NotRequired, TypedDict


class FilesTypedDict(TypedDict):
    pass


class Files(BaseModel):
    pass


class AgentStatusResponseTypedDict(TypedDict):
    agent_status: str
    r"""Current status of the agent"""
    is_running: bool
    r"""Whether the agent is currently running"""
    total_steps: int
    r"""Total number of steps executed"""
    step_count: int
    r"""Number of steps in memory"""
    files: List[FilesTypedDict]
    r"""List of files downloaded by the agent"""
    steps: List[str]
    r"""List of steps executed by the agent"""
    created_at: str
    r"""Timestamp when the agent was created"""
    query: str
    r"""Original query given to the agent"""
    agent_id: str
    r"""Unique identifier for the agent"""
    final_summary: NotRequired[Nullable[str]]
    r"""Final summary of agent execution"""


class AgentStatusResponse(BaseModel):
    agent_status: str
    r"""Current status of the agent"""

    is_running: bool
    r"""Whether the agent is currently running"""

    total_steps: int
    r"""Total number of steps executed"""

    step_count: int
    r"""Number of steps in memory"""

    files: List[Files]
    r"""List of files downloaded by the agent"""

    steps: List[str]
    r"""List of steps executed by the agent"""

    created_at: str
    r"""Timestamp when the agent was created"""

    query: str
    r"""Original query given to the agent"""

    agent_id: str
    r"""Unique identifier for the agent"""

    final_summary: OptionalNullable[str] = UNSET
    r"""Final summary of agent execution"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["final_summary"]
        nullable_fields = ["final_summary"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
