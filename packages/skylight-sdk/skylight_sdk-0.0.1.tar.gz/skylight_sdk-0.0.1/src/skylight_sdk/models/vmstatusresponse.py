"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from pydantic import model_serializer
from skylight_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing_extensions import NotRequired, TypedDict


class State(str, Enum):
    r"""Current state of the VM"""

    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    STOPPED = "stopped"
    SHUTTING_DOWN = "shutting-down"
    TERMINATED = "terminated"


class VMStatusResponseTypedDict(TypedDict):
    state: State
    r"""Current state of the VM"""
    ip_address: NotRequired[Nullable[str]]
    r"""Public IP address of the VM"""
    launch_time: NotRequired[Nullable[str]]
    r"""ISO format timestamp of when the VM was launched"""


class VMStatusResponse(BaseModel):
    state: State
    r"""Current state of the VM"""

    ip_address: OptionalNullable[str] = UNSET
    r"""Public IP address of the VM"""

    launch_time: OptionalNullable[str] = UNSET
    r"""ISO format timestamp of when the VM was launched"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["ip_address", "launch_time"]
        nullable_fields = ["ip_address", "launch_time"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
