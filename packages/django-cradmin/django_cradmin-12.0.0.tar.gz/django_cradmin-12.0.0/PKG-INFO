Metadata-Version: 2.3
Name: django-cradmin
Version: 12.0.0
Summary: A role based admin UI for Django that produces a user friendly and beautiful UI.
Project-URL: Homepage, https://github.com/appressoas/django_cradmin
Author: Tor Johansen, Vegard Angell, Magne Westlie
Author-email: Espen Angell Kristiansen <post@appresso.no>
Maintainer-email: Espen Angell Kristiansen <post@appresso.no>, Tor Johansen <post@appresso.no>, Stian Julseth <stian@appresso.no>, Eskil Nordland <eskil@appresso.no>, Jim Nordal <jim@appresso.no>
License: Copyright (c) 2014, Appresso AS 
        All rights reserved. 
        
        Redistribution and use in source and binary forms, with or without 
        modification, are permitted provided that the following conditions are met: 
        
         * Redistributions of source code must retain the above copyright notice, 
           this list of conditions and the following disclaimer. 
         * Redistributions in binary form must reproduce the above copyright 
           notice, this list of conditions and the following disclaimer in the 
           documentation and/or other materials provided with the distribution. 
         * Neither the name of Appresso AS nor the names of its contributors may be 
           used to endorse or promote products derived from this software without 
           specific prior written permission. 
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
        ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
        LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
        ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
        POSSIBILITY OF SUCH DAMAGE. 
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Requires-Python: >=3.10.0
Requires-Dist: appresso-sphinx-extensions
Requires-Dist: django<6.0.0,>=5.2.0
Requires-Dist: djangorestframework
Requires-Dist: html2text
Requires-Dist: ievv-opensource<13.0.0,>=12.0.0
Requires-Dist: importlib-metadata
Provides-Extra: dev
Requires-Dist: beautifulsoup4; extra == 'dev'
Requires-Dist: flake8; extra == 'dev'
Requires-Dist: html5lib; extra == 'dev'
Requires-Dist: ipython; extra == 'dev'
Requires-Dist: markdown; extra == 'dev'
Requires-Dist: mock-django; extra == 'dev'
Requires-Dist: psycopg2; extra == 'dev'
Requires-Dist: pygments; extra == 'dev'
Requires-Dist: pythonkss; extra == 'dev'
Requires-Dist: sphinx; extra == 'dev'
Requires-Dist: sphinx-rtd-theme; extra == 'dev'
Requires-Dist: tox; extra == 'dev'
Requires-Dist: twine; extra == 'dev'
Provides-Extra: test
Requires-Dist: coverage; extra == 'test'
Requires-Dist: django-debug-toolbar; extra == 'test'
Requires-Dist: htmls; extra == 'test'
Requires-Dist: model-bakery; extra == 'test'
Requires-Dist: pytest; extra == 'test'
Requires-Dist: pytest-django; extra == 'test'
Requires-Dist: pytest-env; extra == 'test'
Description-Content-Type: text/markdown

# Django cradmin

Django custom role based admin UI.

Django cradmin is in BETA. The system is fairly stable, but:

- We do not have getting started guides.
- We should have better tests before release. Some parts have been prototyped
  a lot while we tested out different concepts, and they need a complexity
  review and better tests.
- Works with Django 4 and python >=3.8,<3.11

## Develop
Requires:
- https://github.com/pyenv/pyenv


### Use conventional commits for GIT commit messages
See https://www.conventionalcommits.org/en/v1.0.0/.
You can use this git commit message format in many different ways, but the easiest is:

- Use commitizen: https://commitizen-tools.github.io/commitizen/commit/
- Use an editor extension, like https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits for VScode.
- Just learn to write the format by hand (can be error prone to begin with, but it is fairly easy to learn).


### Install hatch and commitizen
NOTE: You only need hatch if you need to build releases, and you
only need commitizen for releases OR to make it easy to follow
conventional commits for your commit messages
(see _Use conventional commits for GIT commit messages_ above).

First install pipx with:
```bash
brew install pipx
pipx ensurepath
```

Then install hatch and commitizen:
```bash
pipx install hatch
pipx install commitizen
```

See https://github.com/pypa/pipx, https://hatch.pypa.io/latest/install/
and https://commitizen-tools.github.io/commitizen/ for more install alternatives if
needed, but we really recommend using pipx since that is isolated.


### Install development dependencies

Install a local python version with pyenv:
```bash
pyenv install $(pyenv latest -k 3.12)
pyenv local 3.12
```

#### Create virtualenv
```bash
./tools/recreate-virtualenv.sh
```

> Alternatively, create virtualenv manually (this does the same as recreate-virtualenv.sh):
> ```bash
> python -m venv .venv
> ```
> the ./tools/recreate-virtualenv.sh script is just here to make creating virtualenvs more uniform
> across different repos because some repos will require extra setup in the virtualenv
> for package authentication etc.

#### Install dependencies
```bash
source .venv/bin/activate
pip install -e ".[dev, test]"
# install dependencies in virtualenv without "activate"
.venv/bin/pip install -e ".[dev,test]"
```

### Run dev server
```bash
source .venv/bin/activate   # enable virtualenv
ievv devrun
```

### Run tests
```bash
source .venv/bin/activate   # enable virtualenv
pytest django_cradmin
```

### Build css/javascript:
```bash
source .venv/bin/activate   # enable virtualenv
nvm use 14    # May need to run "nvm install 14" first
ievv buildstatic
# ... or if you want to watch for changes ...:
ievv buildstatic --watch
```


## Docs
http://django-cradmin.readthedocs.org


## License
3-clause BSD license. See the LICENSE file in the same directory as this readme file.


## How to release django_cradmin
First make sure you have NO UNCOMITTED CHANGES!

### Buildstatic
Remove the previous built static files:
```bash
git rm -r django_cradmin/apps/django_cradmin_js/static/django_cradmin_js/ django_cradmin/apps/django_cradmin_styles/static/django_cradmin_styles/
```

#### Bump version and add changelog
```bash
cz bump --files-only --changelog
```

#### Build static files
Create new production static files
```bash
nvm use 14    # May need to run "nvm install 14" first
ievv buildstatic --production
```

Commit static files
__NB__: Make sure you also commit `pyproject.toml` and `django_cradmin/__init__.py`, as the new version is in these files now.
```bash
git add pyproject.toml django_cradmin/__init__.py django_cradmin/apps/django_cradmin_js/static/django_cradmin_js/ django_cradmin/apps/django_cradmin_styles/static/django_cradmin_styles/
git status
# ... make sure there are no more files that need to be added ...
git commit -m "bump: $(cz version --project)"
```

#### Make tag and push
Create tag with the current version
```bash
git tag $(cz version --project)
git push && git push --tags
```

### What if the release fails?
See _How to revert a bump_ in the [commitizen FAQ](https://commitizen-tools.github.io/commitizen/faq/#how-to-revert-a-bump).

## Release to pypi:
```bash
hatch build -t sdist
hatch publish
rm dist/*              # optional cleanup
```
