line-length = 100
preview = true

[lint]
extend-safe-fixes = [
    "PYI025", # The fix quite elaborate to do manually, so the autofixer is handy
    "TC", # It is easy to see and test the effects of this autofix
]
ignore = [
    "A005", # Some submodule names may clash with standard library modules
    "CPY", # It's not always necessary to add a copyright notice
    "D", # Documentation rules should be defined in pyproject.toml
    "E501", # Ruff formatter takes care of keeping lines not too long
    "EM101", # Makes the source code too verbose
    "EM102", # Makes the source code too verbose
    "FURB118", # operator.* methods are often not as well typed as lambda (and arguably less readable)
    "ISC001", # Incompatible with Ruff formatter
    "PIE810", # The recommended pattern can be hard to understand (implicit 'or' semantics)
    "PLC0206", # Calling `keys()` or `values()` can be clearer
    "PLC0415", # Permit delayed import
    "PLC1901", # Prefer explicit comparisons
    "PLR09", # These count-based rules are often too crude
    "PLR2004", # Magic values are often acceptable, especially as Pyright reasons about them as literals
    "PLR5501", # Nested if statements are sometimes intentional for readability
    "PLW0108", # Explicit lambdas make some code more readable
    "PT011", # Sometimes the raised errors is indeed broad
    "SIM117", # Nested `with` statements are sometimes more readable
    "TID252", # Relative imports are sometimes cleaner
    "TRY003", # Some custom exceptions should be raised with a message and are unusual to subclass
]
select = ["ALL"]
unfixable = [
    "F841", # Ruff removing unused vars can lead to leftover dead code (it doesn't remove function calls which assign values)
    "RUF015", # Prefer first/one/only from more_itertools to just next
    "RUF100", # Prefer to manually review the unnecessary ignore
]

[lint.flake8-type-checking]
strict = true
