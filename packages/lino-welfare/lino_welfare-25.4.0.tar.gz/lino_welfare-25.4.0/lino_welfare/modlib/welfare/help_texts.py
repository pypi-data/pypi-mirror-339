# -*- coding: UTF-8 -*-
# generated by lino.sphinxcontrib.help_text_builder
# fmt: off
from django.utils.translation import gettext_lazy as _

help_texts = {
    'lino_welfare.migrate.Migrator' : _("""The standard migrator for welfare."""),
    'lino_welfare.modlib.aids.Plugin' : _("""The plugin."""),
    'lino_welfare.modlib.aids.Plugin.no_date_range_veto_until' : _("""Optionally specify the primary key (an integer) of the last granting for which you want to deactivate date range validation in confirmations. This is useful for keeping legacy confirmations that have been issued before the rule was activated."""),
    'lino_welfare.modlib.badges.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.badges.Plugin.holder_model' : _("""A string referring to the model which represents the badge holder in your application. Default value is 'contacts.Person'."""),
    'lino_welfare.modlib.cal.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.cbss.Plugin' : _("""The descriptor for this plugin. See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.cbss.Plugin.cbss_live_requests' : _("""Whether executing requests should try to really connect to the CBSS. Real requests would fail with a timeout if run from behind an IP address that is not registered at the CBSS."""),
    'lino_welfare.modlib.cbss.Plugin.cbss_environment' : _("""Either None or one of ‘test’, ‘acpt’ or ‘prod’."""),
    'lino_welfare.modlib.cbss.RequestStates' : _("""The status of a CBSSRequest."""),
    'lino_welfare.modlib.cbss.ManageActions' : _("""Possible values for the action field of a lino_welfare.modlib.cbss.models.ManageAccessRequest."""),
    'lino_welfare.modlib.cbss.ManageActions.REGISTER' : _("""Ce service est sollicité au moment du démarrage de l’enquête sociale. Le CPAS déclare au réseau de la sécurité sociale qu’il possède un dossier pour lequel il a l’autorisation (dispositions légales et réglementaires) d’obtenir des informations des autres institutions en vue de compléter son enquête dans le cadre de l’octroi du revenu d’intégration. Cette déclaration concerne le répertoire sectoriel des CPAS à la SmalS-MvM et peut concerner plusieurs catégories de personnes : le demandeur, les cohabitants et les tiers concernés et ce, pour des finalités différentes."""),
    'lino_welfare.modlib.cbss.ManageActions.UNREGISTER' : _("""L’opération contraire est aussi mise à disposition."""),
    'lino_welfare.modlib.cbss.ManageActions.LIST' : _("""Il est en plus possible d’obtenir une liste des enregistrements dans le répertoire sectoriel des CPAS à la SmalS-MvM ainsi qu’au sein du réseau BCSS."""),
    'lino_welfare.modlib.cbss.QueryRegisters' : _("""Possible values for the query_register field of a lino_welfare.modlib.cbss.models.ManageAccessRequest."""),
    'lino_welfare.modlib.cbss.QueryRegisters.PRIMARY' : _("""Query only the primary register."""),
    'lino_welfare.modlib.cbss.QueryRegisters.SECONDARY' : _("""Query only the secondary register."""),
    'lino_welfare.modlib.cbss.QueryRegisters.ALL' : _("""Query both registers."""),
    'lino_welfare.modlib.cbss.CBSSRequest' : _("""Common Abstract Base Class for SSDNRequest and NewStyleRequest"""),
    'lino_welfare.modlib.cbss.CBSSRequest.wsdl_parts' : _("""alias of NotImplementedError"""),
    'lino_welfare.modlib.cbss.CBSSRequest.on_duplicate' : _("""When duplicating a CBSS request, we want re-execute it. So please duplicate only the parameters, not the execution data like ticket, sent and status. Note that also the user will be set to the user who asked to duplicate (because this is a subclass of UserAuthored."""),
    'lino_welfare.modlib.cbss.CBSSRequest.get_row_permission' : _("""CBSS requests that have a ticket may never be modified."""),
    'lino_welfare.modlib.cbss.CBSSRequest.on_cbss_ok' : _("""Called when a successful reply has been received."""),
    'lino_welfare.modlib.cbss.CBSSRequest.execute_request' : _("""This is the common part of a request for both classic and new-style."""),
    'lino_welfare.modlib.cbss.CBSSRequest.get_excerpt_options' : _("""When we print a request, the resulting excerpt should go to the client’s history."""),
    'lino_welfare.modlib.cbss.SSDNRequest' : _("""Abstract Base Class for Models that represent SSDN (“classic”) requests."""),
    'lino_welfare.modlib.cbss.SSDNRequest.validate_request' : _("""Validates the generated XML against the XSD files. Used by test suite. It is not necessary to validate each real request before actually sending it."""),
    'lino_welfare.modlib.cbss.SSDNRequest.execute_request_' : _("""SSDN specific part of a request."""),
    'lino_welfare.modlib.cbss.SSDNRequest.wrap_ssdn_request' : _("""Wrap the given service request into the SSDN envelope by adding AuthorizedUser and other information common the all SSDN requests)."""),
    'lino_welfare.modlib.cbss.NewStyleRequest' : _("""Abstract Base Class for Models that represent “new style” requests to the CBSS (and responses)."""),
    'lino_welfare.modlib.cbss.NewStyleRequest.execute_request_' : _("""NewStyle specific part of a request."""),
    'lino_welfare.modlib.cbss.NewStyleRequest.on_cbss_ok' : _("""Called when a successful reply has been received."""),
    'lino_welfare.modlib.cbss.SSIN' : _("""Abstract base for Requests that have a field national_id and a method get_ssin()."""),
    'lino_welfare.modlib.cbss.WithPerson' : _("""Mixin for models that have certain fields"""),
    'lino_welfare.modlib.cbss.WithPerson.first_name' : _("""Space-separated list of all first names."""),
    'lino_welfare.modlib.cbss.WithPerson.last_name' : _("""Last name (family name)."""),
    'lino_welfare.modlib.client_vouchers.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.dupable_clients.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.dupable_clients.DupableClient' : _("""Model mixin to add to the base classes of your application’s pcsw.Client model."""),
    'lino_welfare.modlib.dupable_clients.DupableClient.find_similar_instances' : _("""Overrides lino.mixins.dupable.Dupable.find_similar_instances(), adding some additional rules."""),
    'lino_welfare.modlib.esf.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.immersion.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.integ.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.integ.Plugin.only_primary' : _("""Whether to show only primary coachings in the columns (coachings per Integration phase table."""),
    'lino_welfare.modlib.integ.roles.IntegUser' : _("""Has access to data used by integration agents."""),
    'lino_welfare.modlib.integ.roles.IntegrationStaff' : _("""Can configure social integration functionality."""),
    'lino_welfare.modlib.isip.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.jobs.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.pcsw.Plugin' : _("""See lino.core.plugin.Plugin."""),
    'lino_welfare.modlib.pcsw.RefuseClient' : _("""Refuse this newcomer request."""),
    'lino_welfare.modlib.pcsw.MarkClientFormer' : _("""Change client’s state to ‘former’. This will also end any active coachings."""),
    'lino_welfare.modlib.pcsw.roles.SocialCoordinator' : _("""Has limited access to data of social workers. Can see contracts."""),
    'lino_welfare.modlib.pcsw.roles.SocialUser' : _("""Can access data managed by general social workers."""),
    'lino_welfare.modlib.pcsw.roles.SocialStaff' : _("""Can configure general social work functionality."""),
    'lino_welfare.modlib.xcourses.roles.CoursesUser' : _("""Can manage external courses."""),
    'lino_welfare.modlib.xcourses.roles.CoursesStaff' : _("""Can manage and configure external courses."""),
    'lino_welfare.modlib.aids.AidType' : _("""The Django model representing an aid type."""),
    'lino_welfare.modlib.aids.AidType.short_name' : _("""The short name for internal use, e.g. when a user must select an aid type from a combobox."""),
    'lino_welfare.modlib.aids.AidType.confirmation_type' : _("""The database model to use for issuing an aid confirmation of this type. This is a mandatory pointer to ConfirmationTypes."""),
    'lino_welfare.modlib.aids.AidType.name' : _("""The designation of this aid type as seen by the user e.g. when selecting an aid type."""),
    'lino_welfare.modlib.aids.AidType.excerpt_title' : _("""The text to print as title in confirmations. See also lino_xl.lib.excerpts.mixins.ExcerptTitle.excerpt_title."""),
    'lino_welfare.modlib.aids.AidType.body_template' : _("""The body template to use when printing a confirmation of this type. If this field is empty, Lino uses the excerpt type’s body_template. See also lino.admin.printing."""),
    'lino_welfare.modlib.aids.AidType.is_urgent' : _("""Whether aid grantings of this type are considered as urgent. This is used by Confirmation.get_urgent_granting()"""),
    'lino_welfare.modlib.aids.AidType.board' : _("""Pointer to the default lino_xl.lib.boards.models.Board for aid projects of this type."""),
    'lino_welfare.modlib.aids.AidType.confirmed_by_primary_coach' : _("""Whether grantings for this aid type are to be signed by the client’s primary coach (see Client.get_primary_coach)."""),
    'lino_welfare.modlib.aids.AidType.pharmacy_type' : _("""A pointer to the ClientContactType to be used when selecting the pharmacy of a refund confirmation (RefundConfirmation.pharmacy)."""),
    'lino_welfare.modlib.aids.Granting' : _("""The Django model representing an aid granting."""),
    'lino_welfare.modlib.aids.Granting.client' : _("""Pointer to the lino_welfare.modlib.pcsw.models.Client."""),
    'lino_welfare.modlib.aids.Granting.aid_type' : _("""The type of aid being granted. Mandatory. Pointer to the AidType."""),
    'lino_welfare.modlib.aids.Granting.signer' : _("""Pointer to the user who is expected to “sign” this granting (i.e. to confirm that it is real)."""),
    'lino_welfare.modlib.aids.Granting.board' : _("""Pointer to the Board which decided to allocate this aid project."""),
    'lino_welfare.modlib.aids.Granting.category' : _("""Currently only used for printing an isip.Contract."""),
    'lino_welfare.modlib.aids.Confirmation' : _("""Base class for all aid confirmations."""),
    'lino_welfare.modlib.aids.Confirmation.get_date_range_veto' : _("""Return an error message if this confirmation lies outside of granted period."""),
    'lino_welfare.modlib.aids.Confirmable' : _("""Base class for both Granting and Confirmation."""),
    'lino_welfare.modlib.aids.Confirmable.state' : _("""The confirmation state of this object. Pointer to ConfirmationStates."""),
    'lino_welfare.modlib.aids.Confirmable.sign' : _("""Sign this granting or confirmation, making most fields read-only."""),
    'lino_welfare.modlib.aids.Confirmable.revoke' : _("""Revoke your signature of this granting or confirmation."""),
    'lino_welfare.modlib.art61.Contract' : _("""The database model used to represent an article 61 job supplyment."""),
    'lino_welfare.modlib.art61.Contract.get_subsidizations' : _("""Yield a list of all subsidizations activated for this contract."""),
    'lino_welfare.modlib.art61.ContractsByClient' : _("""Shows the Art61 job supplyments for this client."""),
    'lino_welfare.modlib.art61.ContractType' : _("""This is the homologue of isip.ContractType (see there for general documentation)."""),
    'lino_welfare.modlib.art61.Activation.company' : _("""The employer or job provider."""),
    'lino_welfare.modlib.art61.Subsidizations' : _("""The choicelist with available subsidization formulas."""),
    'lino_welfare.modlib.cal.EventType' : _("""Adds two fields."""),
    'lino_welfare.modlib.cal.EventType.esf_field' : _("""How to summarize entries of this type in the ESF summary."""),
    'lino_welfare.modlib.cal.Guest' : _("""Adds a virtual field client."""),
    'lino_welfare.modlib.cal.Guest.client' : _("""Virtual field which returns the partner if it is a client."""),
    'lino_welfare.modlib.cal.EntriesByClient' : _("""Shows calendar entries having either project or one guest pointing to this client."""),
    'lino_welfare.modlib.cbss.Sector' : _("""Default values filled from lino_welfare.modlib.cbss.fixtures.sectors."""),
    'lino_welfare.modlib.cbss.Purpose' : _("""Codes qualité (Hoedanigheidscodes). This table is usually filled with the official codes by lino_welfare.modlib.cbss.fixtures.purposes."""),
    'lino_welfare.modlib.cbss.IdentifyPersonRequest' : _("""A request to the IdentifyPerson service."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest' : _("""A request to the ManageAccess service."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.sector' : _("""Pointer to Sector."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.purpose' : _("""Pointer to Purpose."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.action' : _("""The action to perform. This must be one of the values in lino_welfare.modlib.cbss.choicelists.ManageActions"""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.query_register' : _("""The register to be query. This must be one of the values in lino_welfare.modlib.cbss.choicelists.QueryRegisters"""),
    'lino_welfare.modlib.cbss.RetrieveTIGroupsRequest' : _("""A request to the RetrieveTIGroups service (aka Tx25)"""),
    'lino_welfare.modlib.contacts.Company.job_provider' : _("""The job provider for whom this company acts as a workplace."""),
    'lino_welfare.modlib.debts.Budget.print_empty_rows' : _("""Whether to print empty rows."""),
    'lino_welfare.modlib.debts.Budget.ignore_yearly_incomes' : _("""Whether to ignore yearly incomes."""),
    'lino_welfare.modlib.debts.Budget.entry_groups' : _("""Yield the entry groups for this budget, i.e. one item for each account group for which this budget has some data."""),
    'lino_welfare.modlib.debts.Actor' : _("""The database model used to represent a budget actor."""),
    'lino_welfare.modlib.debts.Entry' : _("""A detail row of a Budget."""),
    'lino_welfare.modlib.debts.Entry.actor' : _("""Optionally specify a budget actor who contributes this entry. Leave empty when the entry refers to the entire household."""),
    'lino_welfare.modlib.debts.Entry.amount' : _("""The amount of money. An empty amount is different from a zero amount in that the latter will be printed while the former not."""),
    'lino_welfare.modlib.debts.Entry.account' : _("""The related Account."""),
    'lino_welfare.modlib.debts.Account' : _("""An account is an item of an account chart used to collect ledger transactions or other accountable items."""),
    'lino_welfare.modlib.debts.Account.name' : _("""The multilingual designation of this account, as the users see it."""),
    'lino_welfare.modlib.debts.Account.group' : _("""The account group to which this account belongs. This must point to an instance of Group."""),
    'lino_welfare.modlib.debts.Account.seqno' : _("""The sequence number of this account within its group."""),
    'lino_welfare.modlib.debts.Account.ref' : _("""An optional unique name which can be used to reference a given account."""),
    'lino_welfare.modlib.debts.Account.type' : _("""The account type of this account. This must point to an item of lino_welfare.modlib.debts.AccountTypes."""),
    'lino_welfare.modlib.debts.ActorBase' : _("""Base class for both the volatile MainActor and the Actor model."""),
    'lino_welfare.modlib.debts.MainActor' : _("""A volatile object that represents the budget partner as actor"""),
    'lino_welfare.modlib.debts.PeriodsField' : _("""Used for Entry.periods and Account.periods (the latter holds simply the default value for the former). It means: for how many months the entered amount counts. Default value is 1. For yearly amounts set it to 12."""),
    'lino_welfare.modlib.esf.ClientSummary' : _("""The Django model that represents a client summary."""),
    'lino_welfare.modlib.esf.Summaries' : _("""Base class for all tables on ClientSummary."""),
    'lino_welfare.modlib.esf.AllSummaries' : _("""Lists all ESF summaries for all clients."""),
    'lino_welfare.modlib.esf.SummariesByClient' : _("""Lists the ESF summaries for a given client."""),
    'lino_welfare.modlib.esf.StatisticalField' : _("""Base class for all statistical fields."""),
    'lino_welfare.modlib.esf.StatisticalField.short_name' : _("""Used as the verbose_name of field."""),
    'lino_welfare.modlib.esf.StatisticalField.field_name' : _("""The internal field name."""),
    'lino_welfare.modlib.esf.StatisticalField.field' : _("""The field descriptor (an instance of a Django Field)"""),
    'lino_welfare.modlib.esf.GuestCount' : _("""Count the number of presences."""),
    'lino_welfare.modlib.esf.GuestHours' : _("""Count the real hours of presence."""),
    'lino_welfare.modlib.esf.GuestHoursEvent' : _("""Count the event’s duration for each presence."""),
    'lino_welfare.modlib.esf.GuestHoursFixed' : _("""Count a fixed time for each presence."""),
    'lino_welfare.modlib.households.RefundsByPerson' : _("""Shows the members of the primary household of this person together with an amount which depends on whether that member is adult or not."""),
    'lino_welfare.modlib.households.RefundsByPerson.child_tariff' : _("""The amount to refund for children (household members less than lino_xl.lib.households.Plugin.adult_age years old)."""),
    'lino_welfare.modlib.households.RefundsByPerson.adult_tariff' : _("""The amount to refund for children (household members who are lino_xl.lib.households.Plugin.adult_age years or older)."""),
    'lino_welfare.modlib.households.RefundsByPerson.person_info' : _("""The full name of the household member."""),
    'lino_welfare.modlib.households.RefundsByPerson.amount' : _("""The amount to pay. This is either child_tariff or adult_tarif depending on the age of the household member."""),
    'lino_welfare.modlib.isip.ContractBase' : _("""Model mixin for all integration contracts."""),
    'lino_welfare.modlib.isip.ContractBase.user' : _("""The person who created this contract."""),
    'lino_welfare.modlib.isip.ContractBase.user_asd' : _("""The responsible person at the general social service."""),
    'lino_welfare.modlib.isip.ContractBase.client' : _("""The client for whom this contract is done."""),
    'lino_welfare.modlib.isip.ContractBase.applies_from' : _("""The start date of the contract."""),
    'lino_welfare.modlib.isip.ContractBase.applies_until' : _("""The planned end date of this contract."""),
    'lino_welfare.modlib.isip.ContractBase.date_ended' : _("""The date when this contract was effectively ended. This field is set to the same value as applies_until."""),
    'lino_welfare.modlib.isip.ContractBase.ending' : _("""The reason of prematured ending. Pointer to ContractEnding"""),
    'lino_welfare.modlib.isip.ContractBase.date_issued' : _("""When the contract was issued to the client and signed by them."""),
    'lino_welfare.modlib.isip.ContractBase.date_decided' : _("""When the contract was ratified by the responsible board."""),
    'lino_welfare.modlib.isip.ContractBase.language' : _("""The language of this contract. Default value is the client’s language."""),
    'lino_welfare.modlib.isip.ContractBase.type' : _("""The type of this contract. Pointer to a subclass of ContractTypeBase."""),
    'lino_welfare.modlib.isip.ContractBase.get_excerpt_title' : _("""The printed title of a contract specifies just the contract type (not the number and name of client)."""),
    'lino_welfare.modlib.isip.ContractBase.get_excerpt_templates' : _("""Overrides lino_xl.lib.excerpts.Certifiable.get_excerpt_templates()."""),
    'lino_welfare.modlib.isip.ContractBase.client_changed' : _("""If the contract’s author is the client’s primary coach, then set user_asd to None, otherwise set user_asd to the primary coach. We no longer suppose that only integration agents write contracts."""),
    'lino_welfare.modlib.isip.ContractBase.full_clean' : _("""Checks for the following error conditions:"""),
    'lino_welfare.modlib.isip.ContractBase.get_aid_confirmation' : _("""Returns the last aid confirmation that has been issued for this contract. May be used in .odt template."""),
    'lino_welfare.modlib.isip.ContractBase.suggest_cal_guests' : _("""Automatic evaluation events have the client as mandatory participant, plus possibly some other coach."""),
    'lino_welfare.modlib.isip.ContractBase.get_printable_demo_objects' : _("""All contracts of a demo project (not only one) are being printed. Overrides lino.modlib.printing.Printable.get_printable_demo_objects()."""),
    'lino_welfare.modlib.isip.ContractPartnerBase' : _("""Model mixin for integration contracts that have a single partner."""),
    'lino_welfare.modlib.isip.ContractBaseTable' : _("""Base for contract tables. Defines the following parameter fields:"""),
    'lino_welfare.modlib.isip.ContractBaseTable.observed_event' : _("""See ContractEvents."""),
    'lino_welfare.modlib.isip.ContractBaseTable.ending' : _("""Show only contracts with the specified ContractEnding."""),
    'lino_welfare.modlib.isip.ContractBaseTable.ending_success' : _("""Select “Yes” to show only contracts whose ending ContractEnding has is_success checked."""),
    'lino_welfare.modlib.isip.Contract' : _("""The Django model representing an ISIP."""),
    'lino_welfare.modlib.isip.Contract.type' : _("""The type of this contract. Pointer to ContractType."""),
    'lino_welfare.modlib.isip.Contract.study_type' : _("""The type of study that is going to be followed during this contract."""),
    'lino_welfare.modlib.isip.ContractTypes' : _("""The table of all ISIP contract types."""),
    'lino_welfare.modlib.isip.ContractType' : _("""The type of a Contract."""),
    'lino_welfare.modlib.isip.ContractType.needs_study_type' : _("""Whether contracts of this type need their study_type field filled in."""),
    'lino_welfare.modlib.isip.ExamPolicy' : _("""Django model to represent an examination policy."""),
    'lino_welfare.modlib.isip.ContractEnding' : _("""A possible reason for premature termination of a contract."""),
    'lino_welfare.modlib.isip.ContractPartner' : _("""Represents a third-party external partner who participates in this contract. For every partner there is a rich text field describing their duties."""),
    'lino_welfare.modlib.isip.ContractEvents' : _("""A list of observable events for filtering contracts (ContractBaseTable.observed_event)."""),
    'lino_welfare.modlib.isip.ClientHasContract' : _("""Whether the client has at least one ISIP contact during the observed date range."""),
    'lino_welfare.modlib.isip.ContractsByClient' : _("""To see this table you need either IntegrationAgent or SocialCoordinator."""),
    'lino_welfare.modlib.isip.ContractTypeBase' : _("""Base class for all ContractType models."""),
    'lino_welfare.modlib.isip.ContractTypeBase.full_name' : _("""The full description of this contract type as used in printed documents."""),
    'lino_welfare.modlib.isip.ContractTypeBase.exam_policy' : _("""The default examination policy to be used for contracts of this type."""),
    'lino_welfare.modlib.isip.ContractTypeBase.overlap_group' : _("""The overlap group to use when checking whether two contracts are overlapping or not. If this field is empty, Lino does not check at all for overlapping contracts."""),
    'lino_welfare.modlib.isip.ContractTypeBase.template' : _("""The main template to use instead of the default template defined on the excerpt type."""),
    'lino_welfare.modlib.isip.OverlapGroups' : _("""The list of all known overlap groups to be selected for the overlap_group of a contract type."""),
    'lino_welfare.modlib.isip.OverlappingContractsTest' : _("""Volatile object used to test for overlapping contracts. It is responsible for issuing the following error messages:"""),
    'lino_welfare.modlib.isip.OverlappingContractsChecker' : _("""A given client cannot have two active contracts at the same time."""),
    'lino_welfare.modlib.jobs.Job.provider' : _("""The job provider for this job."""),
    'lino_welfare.modlib.jobs.Job.workplace' : _("""The workplace for this job if the job provider has multiple workplaces. See art60_workplace."""),
    'lino_welfare.modlib.jobs.JobProvider' : _("""Database model used to represent a job provider."""),
    'lino_welfare.modlib.jobs.JobProvider.is_social' : _("""Whether this is a recognized social economy project."""),
    'lino_welfare.modlib.jobs.WorkplacesByProvider' : _("""Shows the companies that act as workplaces for this job provider."""),
    'lino_welfare.modlib.jobs.Employer' : _("""Database model used to represent an employer."""),
    'lino_welfare.modlib.jobs.Employer.is_social' : _("""Whether this is a recognized social economy project."""),
    'lino_welfare.modlib.jobs.Contracts' : _("""Shows all Art60 job supplyments."""),
    'lino_welfare.modlib.jobs.ContractsByClient' : _("""Shows the Art60 job supplyments for this client."""),
    'lino_welfare.modlib.jobs.JobSupplyment' : _("""Model mixin for jobs.Contract and art61.Contract. And also for art60.Contract."""),
    'lino_welfare.modlib.jobs.JobSupplyment.duration' : _("""The duration of this job supplyment (number of working days)."""),
    'lino_welfare.modlib.pcsw.Client' : _("""Django model used to represent a beneficiary."""),
    'lino_welfare.modlib.pcsw.Client.has_esf' : _("""Whether Lino should make ESF summaries for this client."""),
    'lino_welfare.modlib.pcsw.Client.overview' : _("""A panel with general information about this client."""),
    'lino_welfare.modlib.pcsw.Client.cvs_emitted' : _("""A virtual field displaying a group of shortcut links for managing CVs (Curriculum Vitaes)."""),
    'lino_welfare.modlib.pcsw.Client.id_document' : _("""A virtual field displaying a group of buttons for managing the “identifying document”, i.e. an uploaded document which has been used as alternative to the eID card."""),
    'lino_welfare.modlib.pcsw.Client.group' : _("""Pointer to PersonGroup. The intergration phase of this client."""),
    'lino_welfare.modlib.pcsw.Client.civil_state' : _("""The civil state of this client. Allowed choices are defined in CivilState."""),
    'lino_welfare.modlib.pcsw.Client.client_state' : _("""Pointer to ClientStates."""),
    'lino_welfare.modlib.pcsw.Client.unemployed_since' : _("""The date when this client got unemployed and stopped to have a regular work."""),
    'lino_welfare.modlib.pcsw.Client.seeking_since' : _("""The date when this client registered as unemployed and started to look for a new job."""),
    'lino_welfare.modlib.pcsw.Client.get_first_meeting' : _("""Return the last note of type “First meeting” for this client. Usage example see debts and notes."""),
    'lino_welfare.modlib.pcsw.Clients' : _("""The list that opens by Contacts ‣ Clients."""),
    'lino_welfare.modlib.pcsw.Clients.client_state' : _("""If not empty, show only Clients whose client_state equals the specified value."""),
    'lino_welfare.modlib.cbss.tx25.RetrieveTIGroupsResult' : _("""Displays the response of an RetrieveTIGroupsRequest as a table."""),
}
