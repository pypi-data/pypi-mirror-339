# coding: utf-8

"""
    Enyday API

    This API allows integration with the Enyday platform, providing access to user authentication, user details, authorization data, address information, and power consumption data. It helps in integrating Enyday into platforms like Home Assistant. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from EnydayPy.models.address_response_submeters import AddressResponseSubmeters
from typing import Optional, Set
from typing_extensions import Self

class AddressResponseAddresses(BaseModel):
    """
    AddressResponseAddresses
    """ # noqa: E501
    id: Optional[StrictInt] = None
    access_address_id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    floor: Optional[StrictStr] = None
    side: Optional[StrictStr] = None
    is_virtual: Optional[StrictInt] = None
    door_number: Optional[StrictInt] = None
    total_doors_on_floor: Optional[StrictInt] = None
    building_id: Optional[StrictInt] = None
    btm_id: Optional[StrictInt] = None
    submeters: Optional[List[AddressResponseSubmeters]] = None
    __properties: ClassVar[List[str]] = ["id", "access_address_id", "external_id", "address", "floor", "side", "is_virtual", "door_number", "total_doors_on_floor", "building_id", "btm_id", "submeters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressResponseAddresses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in submeters (list)
        _items = []
        if self.submeters:
            for _item_submeters in self.submeters:
                if _item_submeters:
                    _items.append(_item_submeters.to_dict())
            _dict['submeters'] = _items
        # set to None if building_id (nullable) is None
        # and model_fields_set contains the field
        if self.building_id is None and "building_id" in self.model_fields_set:
            _dict['building_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressResponseAddresses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "access_address_id": obj.get("access_address_id"),
            "external_id": obj.get("external_id"),
            "address": obj.get("address"),
            "floor": obj.get("floor"),
            "side": obj.get("side"),
            "is_virtual": obj.get("is_virtual"),
            "door_number": obj.get("door_number"),
            "total_doors_on_floor": obj.get("total_doors_on_floor"),
            "building_id": obj.get("building_id"),
            "btm_id": obj.get("btm_id"),
            "submeters": [AddressResponseSubmeters.from_dict(_item) for _item in obj["submeters"]] if obj.get("submeters") is not None else None
        })
        return _obj


