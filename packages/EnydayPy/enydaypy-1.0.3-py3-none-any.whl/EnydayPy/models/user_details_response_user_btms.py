# coding: utf-8

"""
    Enyday API

    This API allows integration with the Enyday platform, providing access to user authentication, user details, authorization data, address information, and power consumption data. It helps in integrating Enyday into platforms like Home Assistant. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from EnydayPy.models.user_details_response_periods import UserDetailsResponsePeriods
from typing import Optional, Set
from typing_extensions import Self

class UserDetailsResponseUserBtms(BaseModel):
    """
    UserDetailsResponseUserBtms
    """ # noqa: E501
    btm_id: Optional[StrictInt] = None
    btm_name: Optional[StrictStr] = None
    access_address_id: Optional[StrictInt] = None
    access_address: Optional[StrictStr] = None
    use_buildings: Optional[StrictInt] = None
    nordpool_area: Optional[StrictStr] = None
    periods: Optional[List[UserDetailsResponsePeriods]] = None
    new_price_model: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["btm_id", "btm_name", "access_address_id", "access_address", "use_buildings", "nordpool_area", "periods", "new_price_model"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDetailsResponseUserBtms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDetailsResponseUserBtms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "btm_id": obj.get("btm_id"),
            "btm_name": obj.get("btm_name"),
            "access_address_id": obj.get("access_address_id"),
            "access_address": obj.get("access_address"),
            "use_buildings": obj.get("use_buildings"),
            "nordpool_area": obj.get("nordpool_area"),
            "periods": [UserDetailsResponsePeriods.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "new_price_model": obj.get("new_price_model")
        })
        return _obj


