# coding: utf-8

"""
    Enyday API

    This API allows integration with the Enyday platform, providing access to user authentication, user details, authorization data, address information, and power consumption data. It helps in integrating Enyday into platforms like Home Assistant. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddressResponseSubmeters(BaseModel):
    """
    AddressResponseSubmeters
    """ # noqa: E501
    submeter_id: Optional[StrictInt] = None
    submeter_external_id: Optional[StrictStr] = None
    submeter_name: Optional[StrictStr] = None
    submeter_direction: Optional[StrictInt] = None
    submeter_box_id: Optional[StrictInt] = None
    submeter_box_external_id: Optional[StrictStr] = None
    submeter_box_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["submeter_id", "submeter_external_id", "submeter_name", "submeter_direction", "submeter_box_id", "submeter_box_external_id", "submeter_box_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressResponseSubmeters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressResponseSubmeters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "submeter_id": obj.get("submeter_id"),
            "submeter_external_id": obj.get("submeter_external_id"),
            "submeter_name": obj.get("submeter_name"),
            "submeter_direction": obj.get("submeter_direction"),
            "submeter_box_id": obj.get("submeter_box_id"),
            "submeter_box_external_id": obj.get("submeter_box_external_id"),
            "submeter_box_name": obj.get("submeter_box_name")
        })
        return _obj


