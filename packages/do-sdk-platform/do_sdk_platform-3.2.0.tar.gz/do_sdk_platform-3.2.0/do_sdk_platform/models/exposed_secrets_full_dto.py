# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExposedSecretsFullDto(BaseModel):
    """
    ExposedSecretsFullDto
    """ # noqa: E501
    name: StrictStr
    type: StrictStr
    key_group: StrictStr = Field(alias="keyGroup")
    filename: Optional[StrictStr]
    value: Optional[StrictStr]
    key: Optional[StrictStr]
    repository: Optional[StrictStr]
    username: Optional[StrictStr]
    password: Optional[StrictStr]
    profile_name: Optional[StrictStr] = Field(alias="profileName")
    access_key: Optional[StrictStr] = Field(alias="accessKey")
    secret_key: Optional[StrictStr] = Field(alias="secretKey")
    default_region: Optional[StrictStr] = Field(alias="defaultRegion")
    __properties: ClassVar[List[str]] = ["name", "type", "keyGroup", "filename", "value", "key", "repository", "username", "password", "profileName", "accessKey", "secretKey", "defaultRegion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExposedSecretsFullDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        # set to None if repository (nullable) is None
        # and model_fields_set contains the field
        if self.repository is None and "repository" in self.model_fields_set:
            _dict['repository'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if profile_name (nullable) is None
        # and model_fields_set contains the field
        if self.profile_name is None and "profile_name" in self.model_fields_set:
            _dict['profileName'] = None

        # set to None if access_key (nullable) is None
        # and model_fields_set contains the field
        if self.access_key is None and "access_key" in self.model_fields_set:
            _dict['accessKey'] = None

        # set to None if secret_key (nullable) is None
        # and model_fields_set contains the field
        if self.secret_key is None and "secret_key" in self.model_fields_set:
            _dict['secretKey'] = None

        # set to None if default_region (nullable) is None
        # and model_fields_set contains the field
        if self.default_region is None and "default_region" in self.model_fields_set:
            _dict['defaultRegion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExposedSecretsFullDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "keyGroup": obj.get("keyGroup"),
            "filename": obj.get("filename"),
            "value": obj.get("value"),
            "key": obj.get("key"),
            "repository": obj.get("repository"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "profileName": obj.get("profileName"),
            "accessKey": obj.get("accessKey"),
            "secretKey": obj.get("secretKey"),
            "defaultRegion": obj.get("defaultRegion")
        })
        return _obj


