# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from do_sdk_platform.models.aws_secret_input_dto import AWSSecretInputDto
from do_sdk_platform.models.configuration_secret_input_dto import ConfigurationSecretInputDto
from do_sdk_platform.models.environment_secret_input_dto import EnvironmentSecretInputDto
from do_sdk_platform.models.git_secret_input_dto import GitSecretInputDto
from do_sdk_platform.models.gpg_secret_input_dto import GPGSecretInputDto
from do_sdk_platform.models.secret_local_type import SecretLocalType
from do_sdk_platform.models.ssh_secret_input_dto import SshSecretInputDto
from typing import Optional, Set
from typing_extensions import Self

class CreateSecretInputDto(BaseModel):
    """
    CreateSecretInputDto
    """ # noqa: E501
    type: SecretLocalType
    name: StrictStr
    aws_secret_input: Optional[AWSSecretInputDto] = Field(alias="awsSecretInput")
    configuration_secret_input: Optional[ConfigurationSecretInputDto] = Field(alias="configurationSecretInput")
    environment_secret_input: Optional[EnvironmentSecretInputDto] = Field(alias="environmentSecretInput")
    git_secret_input: Optional[GitSecretInputDto] = Field(alias="gitSecretInput")
    gpg_secret_input: Optional[GPGSecretInputDto] = Field(alias="gpgSecretInput")
    ssh_secret_input: Optional[SshSecretInputDto] = Field(alias="sshSecretInput")
    __properties: ClassVar[List[str]] = ["type", "name", "awsSecretInput", "configurationSecretInput", "environmentSecretInput", "gitSecretInput", "gpgSecretInput", "sshSecretInput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSecretInputDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_secret_input
        if self.aws_secret_input:
            _dict['awsSecretInput'] = self.aws_secret_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration_secret_input
        if self.configuration_secret_input:
            _dict['configurationSecretInput'] = self.configuration_secret_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_secret_input
        if self.environment_secret_input:
            _dict['environmentSecretInput'] = self.environment_secret_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_secret_input
        if self.git_secret_input:
            _dict['gitSecretInput'] = self.git_secret_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpg_secret_input
        if self.gpg_secret_input:
            _dict['gpgSecretInput'] = self.gpg_secret_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_secret_input
        if self.ssh_secret_input:
            _dict['sshSecretInput'] = self.ssh_secret_input.to_dict()
        # set to None if aws_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.aws_secret_input is None and "aws_secret_input" in self.model_fields_set:
            _dict['awsSecretInput'] = None

        # set to None if configuration_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.configuration_secret_input is None and "configuration_secret_input" in self.model_fields_set:
            _dict['configurationSecretInput'] = None

        # set to None if environment_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.environment_secret_input is None and "environment_secret_input" in self.model_fields_set:
            _dict['environmentSecretInput'] = None

        # set to None if git_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.git_secret_input is None and "git_secret_input" in self.model_fields_set:
            _dict['gitSecretInput'] = None

        # set to None if gpg_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.gpg_secret_input is None and "gpg_secret_input" in self.model_fields_set:
            _dict['gpgSecretInput'] = None

        # set to None if ssh_secret_input (nullable) is None
        # and model_fields_set contains the field
        if self.ssh_secret_input is None and "ssh_secret_input" in self.model_fields_set:
            _dict['sshSecretInput'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSecretInputDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "awsSecretInput": AWSSecretInputDto.from_dict(obj["awsSecretInput"]) if obj.get("awsSecretInput") is not None else None,
            "configurationSecretInput": ConfigurationSecretInputDto.from_dict(obj["configurationSecretInput"]) if obj.get("configurationSecretInput") is not None else None,
            "environmentSecretInput": EnvironmentSecretInputDto.from_dict(obj["environmentSecretInput"]) if obj.get("environmentSecretInput") is not None else None,
            "gitSecretInput": GitSecretInputDto.from_dict(obj["gitSecretInput"]) if obj.get("gitSecretInput") is not None else None,
            "gpgSecretInput": GPGSecretInputDto.from_dict(obj["gpgSecretInput"]) if obj.get("gpgSecretInput") is not None else None,
            "sshSecretInput": SshSecretInputDto.from_dict(obj["sshSecretInput"]) if obj.get("sshSecretInput") is not None else None
        })
        return _obj


