# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from do_sdk_platform.models.access_settings_input_dto import AccessSettingsInputDto
from do_sdk_platform.models.requested_cloud_provider_input import RequestedCloudProviderInput
from typing import Optional, Set
from typing_extensions import Self

class UpdateComputeBenchInputDto(BaseModel):
    """
    UpdateComputeBenchInputDto
    """ # noqa: E501
    cloud_provider: RequestedCloudProviderInput = Field(description="The requested Cloud Provider for the ComputeBench", alias="cloudProvider")
    description: StrictStr = Field(description="The description of the ComputeBench")
    summary: Optional[StrictStr] = Field(description="The summary of the ComputeBench")
    resources: Dict[str, Any] = Field(description="The requested resources for the ComputeBench")
    access_settings: AccessSettingsInputDto = Field(description="Access Settings", alias="accessSettings")
    blueprint: StrictStr = Field(description="The ComputeBench software blueprint to use")
    auto_stop_idle_cpu_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(description="The CPU threshold for auto-stop", alias="autoStopIdleCPUThreshold")
    auto_stop_idle_duration: Optional[Union[StrictFloat, StrictInt]] = Field(description="The duration of idle time before auto-stop", alias="autoStopIdleDuration")
    enable_auto_stop: Optional[StrictBool] = Field(description="Whether auto-stop is enabled", alias="enableAutoStop")
    volume_mounts: Optional[List[StrictStr]] = Field(description="The list of volume DRNs to mount to the bench", alias="volumeMounts")
    cluster_id: StrictStr = Field(description="The cluster to run the ComputeBench on", alias="clusterId")
    __properties: ClassVar[List[str]] = ["cloudProvider", "description", "summary", "resources", "accessSettings", "blueprint", "autoStopIdleCPUThreshold", "autoStopIdleDuration", "enableAutoStop", "volumeMounts", "clusterId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateComputeBenchInputDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_provider
        if self.cloud_provider:
            _dict['cloudProvider'] = self.cloud_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_settings
        if self.access_settings:
            _dict['accessSettings'] = self.access_settings.to_dict()
        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['summary'] = None

        # set to None if auto_stop_idle_cpu_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.auto_stop_idle_cpu_threshold is None and "auto_stop_idle_cpu_threshold" in self.model_fields_set:
            _dict['autoStopIdleCPUThreshold'] = None

        # set to None if auto_stop_idle_duration (nullable) is None
        # and model_fields_set contains the field
        if self.auto_stop_idle_duration is None and "auto_stop_idle_duration" in self.model_fields_set:
            _dict['autoStopIdleDuration'] = None

        # set to None if enable_auto_stop (nullable) is None
        # and model_fields_set contains the field
        if self.enable_auto_stop is None and "enable_auto_stop" in self.model_fields_set:
            _dict['enableAutoStop'] = None

        # set to None if volume_mounts (nullable) is None
        # and model_fields_set contains the field
        if self.volume_mounts is None and "volume_mounts" in self.model_fields_set:
            _dict['volumeMounts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateComputeBenchInputDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudProvider": RequestedCloudProviderInput.from_dict(obj["cloudProvider"]) if obj.get("cloudProvider") is not None else None,
            "description": obj.get("description"),
            "summary": obj.get("summary"),
            "resources": obj.get("resources"),
            "accessSettings": AccessSettingsInputDto.from_dict(obj["accessSettings"]) if obj.get("accessSettings") is not None else None,
            "blueprint": obj.get("blueprint"),
            "autoStopIdleCPUThreshold": obj.get("autoStopIdleCPUThreshold"),
            "autoStopIdleDuration": obj.get("autoStopIdleDuration"),
            "enableAutoStop": obj.get("enableAutoStop"),
            "volumeMounts": obj.get("volumeMounts"),
            "clusterId": obj.get("clusterId")
        })
        return _obj


