# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionMetaDataDto(BaseModel):
    """
    SubscriptionMetaDataDto
    """ # noqa: E501
    includes: List[StrictStr]
    coming_soon: List[StrictStr] = Field(alias="comingSoon")
    max_days: Optional[Union[StrictFloat, StrictInt]] = Field(alias="maxDays")
    renewable: Optional[StrictBool]
    max_invites: Optional[Union[StrictFloat, StrictInt]] = Field(alias="maxInvites")
    max_subscriptions: Optional[Union[StrictFloat, StrictInt]] = Field(alias="maxSubscriptions")
    index: Optional[Union[StrictFloat, StrictInt]]
    can_buy_credits: Optional[StrictBool] = Field(alias="canBuyCredits")
    is_coming_soon: Optional[StrictBool] = Field(alias="isComingSoon")
    needs_credit_card: Optional[StrictBool] = Field(alias="needsCreditCard")
    __properties: ClassVar[List[str]] = ["includes", "comingSoon", "maxDays", "renewable", "maxInvites", "maxSubscriptions", "index", "canBuyCredits", "isComingSoon", "needsCreditCard"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionMetaDataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_days (nullable) is None
        # and model_fields_set contains the field
        if self.max_days is None and "max_days" in self.model_fields_set:
            _dict['maxDays'] = None

        # set to None if renewable (nullable) is None
        # and model_fields_set contains the field
        if self.renewable is None and "renewable" in self.model_fields_set:
            _dict['renewable'] = None

        # set to None if max_invites (nullable) is None
        # and model_fields_set contains the field
        if self.max_invites is None and "max_invites" in self.model_fields_set:
            _dict['maxInvites'] = None

        # set to None if max_subscriptions (nullable) is None
        # and model_fields_set contains the field
        if self.max_subscriptions is None and "max_subscriptions" in self.model_fields_set:
            _dict['maxSubscriptions'] = None

        # set to None if index (nullable) is None
        # and model_fields_set contains the field
        if self.index is None and "index" in self.model_fields_set:
            _dict['index'] = None

        # set to None if can_buy_credits (nullable) is None
        # and model_fields_set contains the field
        if self.can_buy_credits is None and "can_buy_credits" in self.model_fields_set:
            _dict['canBuyCredits'] = None

        # set to None if is_coming_soon (nullable) is None
        # and model_fields_set contains the field
        if self.is_coming_soon is None and "is_coming_soon" in self.model_fields_set:
            _dict['isComingSoon'] = None

        # set to None if needs_credit_card (nullable) is None
        # and model_fields_set contains the field
        if self.needs_credit_card is None and "needs_credit_card" in self.model_fields_set:
            _dict['needsCreditCard'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionMetaDataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includes": obj.get("includes"),
            "comingSoon": obj.get("comingSoon"),
            "maxDays": obj.get("maxDays"),
            "renewable": obj.get("renewable"),
            "maxInvites": obj.get("maxInvites"),
            "maxSubscriptions": obj.get("maxSubscriptions"),
            "index": obj.get("index"),
            "canBuyCredits": obj.get("canBuyCredits"),
            "isComingSoon": obj.get("isComingSoon"),
            "needsCreditCard": obj.get("needsCreditCard")
        })
        return _obj


