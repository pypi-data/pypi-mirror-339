Index: install.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/bin/bash\nset -e\nset -o pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nNC='\\033[0m'\n\n# Default values\nPYTHON_VERSION=\"3.12\"\nAGI_INSTALL_PATH=\"\"\ncluster_credentials=\"agi\"\nopenai_api_key=\"\"\n\n# Logging setup\nLOG_DIR=\"$HOME/log/install_logs\"\nmkdir -p \"$LOG_DIR\"\nLOG_FILE=\"$LOG_DIR/install_$(date +%Y%m%d_%H%M%S).log\"\nexec > >(tee -a \"$LOG_FILE\") 2>&1\n\n# Prevent running as root\nif [[ \"$EUID\" -eq 0 ]]; then\n    echo -e \"${RED}Do not run as root. Please run as a regular user.${NC}\"\n    exit 1\nfi\n\nusage() {\n    echo \"Usage: $0 [--install-path <path>] --cluster-credentials <user:password> --openai-api-key <api-key>\"\n    exit 1\n}\n\n# Parse command-line arguments\nwhile [[ \"$#\" -gt 0 ]]; do\n    case $1 in\n        --cluster-credentials)\n            cluster_credentials=\"$2\"\n            shift 2\n            ;;\n        --openai-api-key)\n            openai_api_key=\"$2\"\n            shift 2\n            ;;\n        --install-path)\n            AGI_INSTALL_PATH=$(realpath \"$2\")\n            shift 2\n            ;;\n        *)\n            echo -e \"${RED}Unknown option: $1${NC}\"\n            usage\n            ;;\n    esac\ndone\n\nif [[ -z \"$openai_api_key\" ]]; then\n    echo -e \"${RED}Missing mandatory parameter: --openai-api-key${NC}\"\n    usage\nfi\n\n# Default installation path if not provided\nif [[ -z \"$AGI_INSTALL_PATH\" ]]; then\n    AGI_INSTALL_PATH=$(realpath \".\")\nfi\n\necho -e \"${GREEN}Installation path: $AGI_INSTALL_PATH${NC}\"\necho -e \"${GREEN}Cluster Credentials: $cluster_credentials${NC}\"\necho -e \"${GREEN}OpenAI API Key: $openai_api_key${NC}\"\n\n# Check internet connectivity\necho \"Checking internet connectivity...\"\nif curl -s --head --fail https://www.google.com >/dev/null; then\n    echo -e \"${GREEN}ok${NC}\"\nelse\n    echo -e \"${RED}No internet connection detected. Aborting.${NC}\"\n    exit 1\nfi\n\n\n# Ask to install system dependencies\nread -p \"Install system dependencies? (y/N): \" choice\nif [[ \"$choice\" =~ ^[Yy]$ ]]; then\n    if command -v apt >/dev/null 2>&1; then\n        sudo apt update && sudo apt install -y build-essential curl wget unzip\n        sudo snap install astral-uv --classic\n        source $HOME/.local/bin/env\n    elif command -v brew >/dev/null 2>&1; then\n        brew update && brew install curl wget unzip\n    else\n        echo -e \"${RED}No supported package manager found. Please install dependencies manually.${NC}\"\n        exit 1\n    fi\nfi\n\n# Set locale to en_US.UTF-8 if not present\nif ! locale -a | grep -qi \"en_US.utf8\"; then\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        sudo locale-gen en_US.UTF-8\n    fi\nfi\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n# Determine the absolute path of the source directory\nEXISTING_PROJECT=$(realpath \"$(pwd)\")\nEXISTING_PROJECT_SRC=\"$EXISTING_PROJECT/src\"\n\n\nbackup_agi_project() {\n    echo -e \"${BLUE}=================================================${NC}\"\n    echo -e \"${BLUE}Step 6: Backing Up agi Project sources (If Any) ${NC}\"\n    echo -e \"${BLUE}=================================================${NC}\"\n    echo\n\n    # Define the source directory and installation path variables\n    if [[ -d \"$AGI_INSTALL_PATH\" && -f \"$EXISTING_PROJECT_SRC/zip-agi.py\" ]]; then\n        echo -e \"${YELLOW}Existing agilab project found at $AGI_INSTALL_PATH and zip-agi.py exists.${NC}\"\n        backup_file=\"${AGI_INSTALL_PATH}_backup_$(date +%Y%m%d-%H%M%S).zip\"\n        echo -e \"${YELLOW}Creating backup: $backup_file${NC}\"\n        echo\n\n        if uv run --project \"$AGI_INSTALL_PATH/fwk/core/managers\" python \"$AGI_INSTALL_PATH/zip-agi.py\" --dir2zip \"$AGI_INSTALL_PATH\" --zipfile \"$backup_file\"; then\n            echo -e \"${GREEN}Backup created successfully at $backup_file.${NC}\"\n            echo -e \"${YELLOW}Removing existing agilab project at '$AGI_INSTALL_PATH' ...${NC}\"\n            echo rm -ri \"$AGI_INSTALL_PATH\"\n            echo -e \"${GREEN}Existing agilab project directory removed.${NC}\"\n        else\n            echo -e \"${RED}ERROR: Backup failed at '$backup_file'.${NC}\"\n            echo -e \"${YELLOW}Switching to fallback backup strategy...${NC}\"\n            # Fallback: create a zip archive of the installation directory\n            if zip -r \"$backup_file\" \"$AGI_INSTALL_PATH\"; then\n                echo -e \"${YELLOW}Fallback backup created at '$backup_file'.${NC}\"\n                echo -e \"${YELLOW}Removing existing agilab project at '$AGI_INSTALL_PATH' ...${NC}\"\n                echo rm -ri \"$AGI_INSTALL_PATH\"\n                echo -e \"${GREEN}Existing agilab project directory removed.${NC}\"\n            else\n                echo -e \"${RED}Failed to create backup using fallback strategy.${NC}\"\n                exit 1\n            fi\n        fi\n    else\n        echo -e \"${YELLOW}No existing agilab project found or zip-agi.py does not exist. Skipping backup.${NC}\"\n    fi\n    echo\n}\n\n# Copy new project files from the source directory to the install path if needed\nif [[ \"$AGI_INSTALL_PATH\" != \"$EXISTING_PROJECT\" ]]; then\n    if [[ -d \"$EXISTING_PROJECT_SRC\" ]]; then\n        mkdir -p \"$AGI_INSTALL_PATH\"\n        rsync -a \"$EXISTING_PROJECT\"/ \"$AGI_INSTALL_PATH\"/\n    else\n        echo -e \"${RED}Source directory 'src' not found. Exiting.${NC}\"\n        exit 1\n    fi\nelse\n    echo \"Using source directory as install directory; no copy needed.\"\nfi\n\n# Update environment file\nENV_FILE=\"$HOME/.local/share/agilab/.env\"\nmkdir -p \"$(dirname \"$ENV_FILE\")\"\n{\n    echo \"OPENAI_API_KEY=\\\"$openai_api_key\\\"\"\n    echo \"AGI_CREDENTIALS=\\\"$cluster_credentials\\\"\"\n    echo \"AGI_PYTHON_VERSION=\\\"$PYTHON_VERSION\\\"\"\n} >> \"$ENV_FILE\"\necho -e \"${GREEN}Environment updated in $ENV_FILE${NC}\"\n\n# Install Framework and Apps\nframework_dir=\"$AGI_INSTALL_PATH/src/fwk\"\napps_dir=\"$AGI_INSTALL_PATH/src/apps\"\n\n# Ensure install scripts are executable\nchmod +x \"$framework_dir/install.sh\" \"$apps_dir/install.sh\"\n\necho \"Installing Framework...\"\npushd \"$framework_dir\" > /dev/null\necho ./install.sh \"$apps_dir\"\n./install.sh \"$framework_dir\"\npopd > /dev/null\n\necho \"Installing Apps...\"\npushd \"$apps_dir\" > /dev/null\necho ./install.sh \"$apps_dir\"\n./install.sh \"$apps_dir\"\npopd > /dev/null\n\necho -e \"${GREEN}Installation complete!${NC}\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/install.sh b/install.sh
--- a/install.sh	(revision c6e5c31ecb0727f44c2164d4a207d592289a9b7a)
+++ b/install.sh	(date 1742733603439)
@@ -182,7 +182,7 @@
 echo "Installing Apps..."
 pushd "$apps_dir" > /dev/null
 echo ./install.sh "$apps_dir"
-./install.sh "$apps_dir"
+#./install.sh "$apps_dir"
 popd > /dev/null
 
 echo -e "${GREEN}Installation complete!${NC}"
