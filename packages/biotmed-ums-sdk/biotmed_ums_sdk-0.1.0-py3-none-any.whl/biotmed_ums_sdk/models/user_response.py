# coding: utf-8

"""
    BioT User Management Service

    APIs document (version: 7.17.2)

    The version of the OpenAPI document: 7.17.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_ums_sdk.models.group_object import GroupObject
from biotmed_ums_sdk.models.mfa import Mfa
from typing import Optional, Set
from typing_extensions import Self

class UserResponse(BaseModel):
    """
    UserResponse
    """ # noqa: E501
    username: Annotated[str, Field(min_length=5, strict=True, max_length=128)] = Field(description="user's username. If the credential type is OTP, should be a valid phone (An E.164 formatted phone number e.g +12345678901)")
    id: Optional[StrictStr] = None
    owner_organization_id: Optional[StrictStr] = Field(default=None, alias="ownerOrganizationId")
    groups: Optional[List[GroupObject]] = None
    locked: Optional[StrictBool] = None
    active: Optional[StrictBool] = None
    mfa: Optional[Mfa] = None
    login_timestamp: Optional[datetime] = Field(default=None, alias="loginTimestamp")
    credential_type: Optional[StrictStr] = Field(default=None, alias="credentialType")
    user_id_ps: Optional[List[StrictStr]] = Field(default=None, alias="userIdPs")
    __properties: ClassVar[List[str]] = ["username", "id", "ownerOrganizationId", "groups", "locked", "active", "mfa", "loginTimestamp", "credentialType", "userIdPs"]

    @field_validator('credential_type')
    def credential_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD', 'OTP']):
            raise ValueError("must be one of enum values ('PASSWORD', 'OTP')")
        return value

    @field_validator('user_id_ps')
    def user_id_ps_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UMS']):
                raise ValueError("each list item must be one of ('UMS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of mfa
        if self.mfa:
            _dict['mfa'] = self.mfa.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "id": obj.get("id"),
            "ownerOrganizationId": obj.get("ownerOrganizationId"),
            "groups": [GroupObject.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "locked": obj.get("locked"),
            "active": obj.get("active"),
            "mfa": Mfa.from_dict(obj["mfa"]) if obj.get("mfa") is not None else None,
            "loginTimestamp": obj.get("loginTimestamp"),
            "credentialType": obj.get("credentialType"),
            "userIdPs": obj.get("userIdPs")
        })
        return _obj


