# coding: utf-8

"""
    BioT User Management Service

    APIs document (version: 7.17.2)

    The version of the OpenAPI document: 7.17.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from biotmed_ums_sdk.models.jwt_token import JwtToken
from typing import Optional, Set
from typing_extensions import Self

class LoginResponse(BaseModel):
    """
    LoginResponse
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    owner_organization_id: Optional[StrictStr] = Field(default=None, alias="ownerOrganizationId")
    access_jwt: Optional[JwtToken] = Field(default=None, alias="accessJwt")
    refresh_jwt: Optional[JwtToken] = Field(default=None, alias="refreshJwt")
    mfa_required: Optional[StrictBool] = Field(default=None, alias="mfaRequired")
    mfa_expiration: Optional[datetime] = Field(default=None, alias="mfaExpiration")
    password_reset_required: Optional[StrictBool] = Field(default=None, alias="passwordResetRequired")
    phone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["userId", "ownerOrganizationId", "accessJwt", "refreshJwt", "mfaRequired", "mfaExpiration", "passwordResetRequired", "phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoginResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_jwt
        if self.access_jwt:
            _dict['accessJwt'] = self.access_jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_jwt
        if self.refresh_jwt:
            _dict['refreshJwt'] = self.refresh_jwt.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoginResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "ownerOrganizationId": obj.get("ownerOrganizationId"),
            "accessJwt": JwtToken.from_dict(obj["accessJwt"]) if obj.get("accessJwt") is not None else None,
            "refreshJwt": JwtToken.from_dict(obj["refreshJwt"]) if obj.get("refreshJwt") is not None else None,
            "mfaRequired": obj.get("mfaRequired"),
            "mfaExpiration": obj.get("mfaExpiration"),
            "passwordResetRequired": obj.get("passwordResetRequired"),
            "phone": obj.get("phone")
        })
        return _obj


