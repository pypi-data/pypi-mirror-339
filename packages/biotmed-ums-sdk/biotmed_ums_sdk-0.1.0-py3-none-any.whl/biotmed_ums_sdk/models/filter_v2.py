# coding: utf-8

"""
    BioT User Management Service

    APIs document (version: 7.17.2)

    The version of the OpenAPI document: 7.17.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FilterV2(BaseModel):
    """
    FilterV2
    """ # noqa: E501
    var_in: Optional[List[StrictStr]] = Field(default=None, description="List of values for the IN operator", alias="in")
    eq: Optional[Any] = None
    lt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value for the LESS THAN (<) operator, numeric value only")
    lte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value for the LESS THAN OR EQUAL operator (<=), numeric value only")
    gt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value for the GREATER THAN operator (>), numeric value only")
    gte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value for the GREATER THAN OR EQUAL operator (>=), numeric value only")
    like: Optional[StrictStr] = Field(default=None, description="Value for the CONTAINS operator (substring), string value only")
    var_from: Optional[datetime] = Field(default=None, description="Value for the DATE RANGE FROM operator, date value only,A UTC date in the ISO-8601 format", alias="from")
    to: Optional[datetime] = Field(default=None, description="Value for the DATE RANGE TO operator, date value only,A UTC date in the ISO-8601 format")
    is_null: Optional[StrictBool] = Field(default=None, description="If set to true, checks if the field's value is null", alias="isNull")
    is_not_null: Optional[StrictBool] = Field(default=None, description="If set to true, checks if the field's value is not null", alias="isNotNull")
    var_not: Optional[Any] = Field(default=None, alias="not")
    not_in: Optional[List[StrictStr]] = Field(default=None, description="List of values for the NOT IN operator", alias="notIn")
    filter: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["in", "eq", "lt", "lte", "gt", "gte", "like", "from", "to", "isNull", "isNotNull", "not", "notIn", "filter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if eq (nullable) is None
        # and model_fields_set contains the field
        if self.eq is None and "eq" in self.model_fields_set:
            _dict['eq'] = None

        # set to None if var_not (nullable) is None
        # and model_fields_set contains the field
        if self.var_not is None and "var_not" in self.model_fields_set:
            _dict['not'] = None

        # set to None if filter (nullable) is None
        # and model_fields_set contains the field
        if self.filter is None and "filter" in self.model_fields_set:
            _dict['filter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "in": obj.get("in"),
            "eq": obj.get("eq"),
            "lt": obj.get("lt"),
            "lte": obj.get("lte"),
            "gt": obj.get("gt"),
            "gte": obj.get("gte"),
            "like": obj.get("like"),
            "from": obj.get("from"),
            "to": obj.get("to"),
            "isNull": obj.get("isNull"),
            "isNotNull": obj.get("isNotNull"),
            "not": obj.get("not"),
            "notIn": obj.get("notIn"),
            "filter": obj.get("filter")
        })
        return _obj


