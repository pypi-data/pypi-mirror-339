# coding: utf-8

"""
    BioT User Management Service

    APIs document (version: 7.17.2)

    The version of the OpenAPI document: 7.17.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from biotmed_ums_sdk.models.permission_basic_info import PermissionBasicInfo
from typing import Optional, Set
from typing_extensions import Self

class RoleResponse(BaseModel):
    """
    RoleResponse
    """ # noqa: E501
    name: Annotated[str, Field(min_length=0, strict=True, max_length=128)]
    description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=512)]] = None
    id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    permissions: Optional[List[PermissionBasicInfo]] = None
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    last_modified_time: Optional[datetime] = Field(default=None, alias="lastModifiedTime")
    __properties: ClassVar[List[str]] = ["name", "description", "id", "type", "permissions", "creationTime", "lastModifiedTime"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERNAL', 'BUILT_IN', 'INTERNAL_SERVICE_USER', 'CUSTOM']):
            raise ValueError("must be one of enum values ('INTERNAL', 'BUILT_IN', 'INTERNAL_SERVICE_USER', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "permissions": [PermissionBasicInfo.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "creationTime": obj.get("creationTime"),
            "lastModifiedTime": obj.get("lastModifiedTime")
        })
        return _obj


