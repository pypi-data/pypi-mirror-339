# coding: utf-8

"""
    BioT User Management Service

    APIs document (version: 7.17.2)

    The version of the OpenAPI document: 7.17.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from biotmed_ums_sdk.models.get_service_user_v2_response import GetServiceUserV2Response

class TestGetServiceUserV2Response(unittest.TestCase):
    """GetServiceUserV2Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetServiceUserV2Response:
        """Test GetServiceUserV2Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetServiceUserV2Response`
        """
        model = GetServiceUserV2Response()
        if include_optional:
            return GetServiceUserV2Response(
                active = True,
                role_id = '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                type = 'INTERNAL_SERVICE',
                owner_organization_id = '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                name = '',
                access_token_expiration_in_minutes = 1,
                id = '',
                secret_keys = [
                    biotmed_ums_sdk.models.secret_key_data.SecretKeyData(
                        id = '', 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return GetServiceUserV2Response(
                role_id = '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                type = 'INTERNAL_SERVICE',
        )
        """

    def testGetServiceUserV2Response(self):
        """Test GetServiceUserV2Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
