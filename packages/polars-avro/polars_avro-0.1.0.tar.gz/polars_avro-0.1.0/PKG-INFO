Metadata-Version: 2.4
Name: polars-avro
Version: 0.1.0
Requires-Dist: maturin>=1.8.2
Requires-Dist: polars>=1.24.0
Requires-Dist: pyarrow>=19.0.1
Requires-Dist: ruff>=0.11.4
License-File: LICENSE
Summary: Polars io-plugin for reading and writing avro files
Requires-Python: >=3.13
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# polars-avro

A polars io plugin for reading and writing avro files.

## Python Usage

```py
from polars_avro import scan_avro, read_avro, write_avro

lazy = scan_avro(path)
frame = read_avro(path)
write_avro(frame, path)
```

## Rust Usage

There are two main objects exported in rust: `AvroScanner` for creating an
iterator of `DataFrames` from polars `ScanSources`, and `sink_avro` for writing
an iterator of `DataFrame`s to a `Write`able.

```rs

use polars_avro::{AvroScanner, sink_avro, WriteOptions};

let scanner = AvroScanner::new_from_sources(
    &ScanSources::Paths(...),
    1024,  //  batch size
    false, // expand globs
    None,  // cloud options
).unwrap()

sink_avro(
    scanner.map(Result::unwrap),
    ..., // impl Write
    WriteOptions::default(),
).unwrap();
```

> ℹ️ Avro supports writing with a fire compression schemes. In
> rust these features need to be enabled manually, e.g. `apache-avro/bzip` to
> enable bzip2 compression. Decompression is handled automatically.

## Development

### Rust

Standard `cargo` commands will build and test the rust library.

### Python

The python library is built with uv and maturin. Run the following to compile
rust for use by python:

For local rust development, run

```sh
uv run maturin develop -m Cargo.toml
```

to build a local copy of the rust interface.

### Testing

```sh
cargo clippy --all-features
cargo test
uv run ruff format --check
uv run ruff check
uv run pyright
uv run pytest
```

