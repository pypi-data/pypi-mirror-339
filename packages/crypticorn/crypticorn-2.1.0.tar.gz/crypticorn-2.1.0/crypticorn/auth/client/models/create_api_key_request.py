# coding: utf-8

"""
    Crypticorn Auth API

    OpenAPI compliant REST API built using tRPC with Express

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class CreateApiKeyRequest(BaseModel):
    """
    CreateApiKeyRequest
    """  # noqa: E501

    name: StrictStr
    scopes: Annotated[List[StrictStr], Field(min_length=1)]
    expires_in: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="expiresIn"
    )
    __properties: ClassVar[List[str]] = ["name", "scopes", "expiresIn"]

    @field_validator("scopes")
    def scopes_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(
                [
                    "read:hive:model",
                    "read:hive:data",
                    "write:hive:model",
                    "write:hive:data",
                    "read:trade:bots",
                    "write:trade:bots",
                    "read:trade:api_keys",
                    "write:trade:api_keys",
                    "read:trade:orders",
                    "read:trade:actions",
                    "write:trade:actions",
                    "read:trade:exchanges",
                    "read:trade:futures",
                    "write:trade:futures",
                    "read:trade:notifications",
                    "write:trade:notifications",
                    "read:trade:strategies",
                    "write:trade:strategies",
                    "read:pay:payments",
                    "read:pay:products",
                    "write:pay:products",
                    "read:pay:subscriptions",
                    "write:pay:subscriptions",
                    "read:pay:now_payments",
                    "write:pay:now_payments",
                    "read:predictions",
                ]
            ):
                raise ValueError(
                    "each list item must be one of ('read:hive:model', 'read:hive:data', 'write:hive:model', 'write:hive:data', 'read:trade:bots', 'write:trade:bots', 'read:trade:api_keys', 'write:trade:api_keys', 'read:trade:orders', 'read:trade:actions', 'write:trade:actions', 'read:trade:exchanges', 'read:trade:futures', 'write:trade:futures', 'read:trade:notifications', 'write:trade:notifications', 'read:trade:strategies', 'write:trade:strategies', 'read:pay:payments', 'read:pay:products', 'write:pay:products', 'read:pay:subscriptions', 'write:pay:subscriptions', 'read:pay:now_payments', 'write:pay:now_payments', 'read:predictions')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateApiKeyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateApiKeyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "scopes": obj.get("scopes"),
                "expiresIn": obj.get("expiresIn"),
            }
        )
        return _obj
