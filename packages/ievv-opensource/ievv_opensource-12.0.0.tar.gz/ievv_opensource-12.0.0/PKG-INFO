Metadata-Version: 2.3
Name: ievv-opensource
Version: 12.0.0
Summary: The opensource modules from the commercial IEVV Django framework.
Author: Tor Johansen, Magne Westlie
Author-email: Espen Angell Kristiansen <post@appresso.no>
License: Copyright (c) 2015, Appresso AS
        All rights reserved. 
        
        Redistribution and use in source and binary forms, with or without 
        modification, are permitted provided that the following conditions are met: 
        
         * Redistributions of source code must retain the above copyright notice, 
           this list of conditions and the following disclaimer. 
         * Redistributions in binary form must reproduce the above copyright 
           notice, this list of conditions and the following disclaimer in the 
           documentation and/or other materials provided with the distribution. 
         * Neither the name of Appresso AS nor the names of its contributors may be 
           used to endorse or promote products derived from this software without 
           specific prior written permission. 
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
        ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
        LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
        ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
        POSSIBILITY OF SUCH DAMAGE. 
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Requires-Python: >=3.10.0
Requires-Dist: arrow
Requires-Dist: django<6.0.0,>=5.2.0
Requires-Dist: psutil
Requires-Dist: sh
Requires-Dist: termcolor
Requires-Dist: watchdog
Provides-Extra: dev
Requires-Dist: arrow; extra == 'dev'
Requires-Dist: autopep8; extra == 'dev'
Requires-Dist: django-rq<4.0.0,>=3.0.0; extra == 'dev'
Requires-Dist: djangorestframework; extra == 'dev'
Requires-Dist: flake8; extra == 'dev'
Requires-Dist: gsm0338; extra == 'dev'
Requires-Dist: ipython; extra == 'dev'
Requires-Dist: psutil; extra == 'dev'
Requires-Dist: psycopg2; extra == 'dev'
Requires-Dist: redis; extra == 'dev'
Requires-Dist: rq<3.0.0,>=2.0.0; extra == 'dev'
Requires-Dist: sh; extra == 'dev'
Requires-Dist: termcolor; extra == 'dev'
Requires-Dist: tox; extra == 'dev'
Requires-Dist: twine; extra == 'dev'
Requires-Dist: watchdog; extra == 'dev'
Provides-Extra: test
Requires-Dist: coverage; extra == 'test'
Requires-Dist: htmls; extra == 'test'
Requires-Dist: model-bakery; extra == 'test'
Requires-Dist: pytest; extra == 'test'
Requires-Dist: pytest-django; extra == 'test'
Requires-Dist: pytest-env; extra == 'test'
Description-Content-Type: text/markdown

# ievv_opensource

## Develop
Requires:
- https://github.com/pyenv/pyenv
- Docker (Docker desktop or similar)


### Use conventional commits for GIT commit messages
See https://www.conventionalcommits.org/en/v1.0.0/.
You can use this git commit message format in many different ways, but the easiest is:

- Use commitizen: https://commitizen-tools.github.io/commitizen/commit/
- Use an editor extension, like https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits for VScode.
- Just learn to write the format by hand (can be error prone to begin with, but it is fairly easy to learn).


### Install hatch and commitizen
NOTE: You only need hatch if you need to build releases, and you
only need commitizen for releases OR to make it easy to follow
conventional commits for your commit messages
(see _Use conventional commits for GIT commit messages_ above).

First install pipx with:
```bash
brew install pipx
pipx ensurepath
```

Then install hatch and commitizen:
```bash
pipx install hatch
pipx install commitizen
```

See https://github.com/pypa/pipx, https://hatch.pypa.io/latest/install/
and https://commitizen-tools.github.io/commitizen/ for more install alternatives if
needed, but we really recommend using pipx since that is isolated.


### Install development dependencies

#### Install a local python version with pyenv:
```bash
pyenv install $(pyenv latest -k 3.12)
pyenv local 3.12
```

#### Install dependencies in a virtualenv:
```bash
./tools/recreate-virtualenv.sh
```

Alternatively, create virtualenv manually (this does the same as recreate-virtualenv.sh):
```bash
python -m venv .venv
```
the ./tools/recreate-virtualenv.sh script is just here to make creating virtualenvs more uniform
across different repos because some repos will require extra setup in the virtualenv
for package authentication etc.

#### Install dependencies in a virtualenv:
```bash
source .venv/bin/activate   # enable virtualenv
pip install -e ".[dev,test]"
```

### Upgrade your local packages
This will upgrade all local packages according to the constraints
set in pyproject.toml:
```bash
pip install --upgrade --upgrade-strategy=eager ".[dev,test]"
```

### Run postgres and redis
```bash
docker compose up
```

### Run dev server
```bash
source .venv/bin/activate   # enable virtualenv
ievv devrun
```

### Run tests
```bash
source .venv/bin/activate   # enable virtualenv
pytest ievv_opensource
```


### Destroy postgres and redis
```bash
docker compose down -v
```


## Documentation
http://ievv-opensource.readthedocs.org/


## How to release ievv_opensource
First make sure you have NO UNCOMITTED CHANGES!

Release (create changelog, increment version, commit and tag the change) with:
```bash
cz bump
git push && git push --tags
```

### NOTE (release):
- `cz bump` automatically updates CHANGELOG.md, updates version file(s), commits the change and tags the release commit.
- If you are unsure about what `cz bump` will do, run it with `--dry-run`. You can use
  options to force a specific version instead of the one it automatically selects
  from the git log if needed, BUT if this is needed, it is a sign that someone has messed
  up with their conventional commits.
- ``cz bump`` only works if conventional commits (see section about that above) is used.
- ``cz bump`` can take a specific version etc, but it automatically select the correct version
  if conventional commits has been used correctly. See https://commitizen-tools.github.io/commitizen/.
- If you need to add more to CHANGELOG.md (migration guide, etc), you can just edit
  CHANGELOG.md after the release, and commit the change with a `docs: some useful message`
  commit.
- The ``cz`` command comes from ``commitizen`` (install documented above).

### What if the release fails?
See _How to revert a bump_ in the [commitizen FAQ](https://commitizen-tools.github.io/commitizen/faq/#how-to-revert-a-bump).

### Release to pypi:
```bash
hatch build -t sdist
hatch publish
rm dist/*              # optional cleanup
```


# Migrate to 11.0.0

## BREAKING! Update log handlers for rq_console
Replace `rq.utils` with `rq.logutils`
```json
"rq_console": {
    "level": "DEBUG",
    "class": "rq.logutils.ColorizingStreamHandler", //ColorizingStreamHandler is no longer in rq.utils, but in rq.logutils
    "formatter": "rq_console",
    "exclude": ["%(asctime)s"],
}
```

## BREAKING! deps
- `rq` is locked to >= 2.0.0 and < 3.0.0
- Along with new `rq` major, `django-rq` is locked to >= 3.0.0 < 4.0.0 for new `rq` major support.

## WARNING! The USE_L10N setting is deprecated
Basically this is `True` by default.
