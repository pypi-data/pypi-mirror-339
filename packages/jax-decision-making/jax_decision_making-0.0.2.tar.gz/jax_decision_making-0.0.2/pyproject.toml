[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools]
license-files = [ "LICENSE.txt" ]

[project]
name = "jax-decision-making"
dynamic = ["version"]
description = 'Decision making with Gaussian processes in JAX.'
readme = "README.md"
requires-python = ">=3.10, <3.13"
license = { text = "MIT" }
keywords = ["gaussian-processes", "jax", "decision-making"]
authors = [
  { name = "Thomas Pinder", email = "tompinder@live.co.uk" },
  { name = "Thomas Christie", email = "thomashamish@hotmail.com"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "gpjax==0.9.4",
  "beartype",
  "jax<0.4.28",
  "jaxlib<0.4.28",
  "optax>0.2.1",
  "jaxtyping>0.2.10",
  "tensorflow-probability>=0.24.0",
  "jaxopt==0.8.2",
  "flax<0.10.0",
  "numpy<2.0.0",
]

[tool.hatch.envs.default]
installer = "uv"
python = "3.10"

[tool.hatch.envs.dev]
dependencies = [
  "ruff>=0.6",
  "pre-commit>=3.2.2",
  "interrogate>=1.5.0",
  "codespell>=2.2.4",
  "pytest>=7.2.2",
  "pytest-cov>=4.0.0",
  "pytest-pretty>=1.1.1",
  "pytest-xdist>=3.2.1",
  "coverage>=7.2.2",
  "absolufy-imports>=0.3.1",
  "xdoctest>=1.1.1",
  "mktestdocs>=0.2.1",
  "isort",
  "black",
  "jupytext",
]

[tool.hatch.envs.dev.scripts]
black-format = ["black ./src/jax_decision_making ./tests", "jupytext --pipe black examples/*.py"]
black-check = "black --check --diff ./src/jax_decision_making ./tests"
imports-format = [
  "isort ./src/jax_decision_making ./tests",
  "isort examples/*.py --treat-comment-as-code '# %%' --float-to-top",
]
imports-check = [
  "isort ./src/jax_decision_making ./tests -c",
  'isort examples/*.py -c --treat-comment-as-code "# %%" --float-to-top',
]
lint-format = ['ruff format ./src/jax_decision_making ./tests ./examples']
lint-check = ['ruff check --fix ./src/jax_decision_making ./tests ./examples']
format = ["black-format", "imports-format", "lint-format"]
check = ["black-check", "imports-check", "lint-check"]
test = "pytest . -v -n auto"
coverage = "pytest . -v --cov=./src/jax_decision_making --cov-report=xml:./coverage.xml"
docstrings = "xdoctest ./src/jax_decision_making"
all-tests = ['check', 'docstrings', 'test']


[project.urls]
Documentation = "https://github.com/U.N. Owen/jax-decision-making#readme"
Issues = "https://github.com/JaxGaussianProcesses/jax-decision-making/issues"
Source = "https://github.com/JaxGaussianProcesses/jax-decision-making"

[tool.hatch.version]
path = "src/jax_decision_making/__about__.py"

[tool.coverage.run]
source_pkgs = ["jax_decision_making", "tests"]
branch = true
parallel = true
omit = [
  "src/jax_decision_making/__about__.py",
]

[tool.coverage.paths]
jax_decision_making = ["src/jax_decision_making", "*/jax-decision-making/src/jax_decision_making"]
tests = ["tests", "*/jax-decision-making/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.black] # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 88
target-version = ["py310"]

[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["jax_decision_making"]
xfail_strict = true

[tool.ruff] # https://github.com/charliermarsh/ruff
fix = true
cache-dir = "~/.cache/ruff"
exclude = ["docs/", "examples/"]
line-length = 88
src = ["jax_decision_making", "tests"]
target-version = "py310"

[tool.ruff.lint]
dummy-variable-rgx = "^_$"
select = [
  "F",
  # pycodestyle
  "E",
  "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # pylint
  "PLE",
  "PLR",
  "PLW",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
]
ignore = [
  # calls in argument defaults
  "B008",
  # space before : (needed for how black formats slicing)
  # "E203",  # not yet implemented
  # module level import not at top of file
  "E402",
  # do not assign a lambda expression, use a def
  "E731",
  "E501",
  "S303",
  "S307",
  "RET504",
  "S101",
  "F722",
  'PLR2004',
  "PLR0913",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.isort]
profile = "black"
combine_as_imports = true
force_sort_within_sections = true
force_grid_wrap = 2
skip = 'examples'

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
fail-under = 64
exclude = [
  "setup.py",
  "docs",
  "tests",
  "jax_decision_making/__init__.py",
]
verbose = 2
quiet = false
color = true
