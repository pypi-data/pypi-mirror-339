name: Integration

on:
  workflow_dispatch:
  pull_request:

jobs:
  integration:
    strategy:
      matrix:
        backend: ["openfga", "openfga_sql_multiplex"]
    name: Integration-${{ matrix.backend }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: openfga
          POSTGRES_PASSWORD: '1234'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      postgres-keystone:
        image: postgres:17
        env:
          POSTGRES_USER: keystone
          POSTGRES_PASSWORD: '1234'
        ports:
          - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      OPENFGA_DATASTORE_ENGINE: 'postgres'
      OPENFGA_DATASTORE_URI: 'postgres://openfga:1234@127.0.0.1:5432/openfga'
      OPENFGA_LOG_LEVEL: debug
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenFGA server
        uses: jaxxstorm/action-install-gh-release@v2.0.0
        with:
          repo: openfga/openfga
          tag: v1.8.4
          cache: enable

      - name: Migrate OpenFGA database
        shell: bash
        run: openfga migrate

      - name: Start OpenFGA server in background
        shell: bash
        run: openfga run &

      - name: Install OpenFGA cli
        uses: jaxxstorm/action-install-gh-release@v2.0.0
        with:
          repo: openfga/cli
          cache: enable

      - name: Install jq
        uses: dcarbone/install-jq-action@v3

      - name: Create store with model
        id: 'store'
        run: |
          fga store create --model ./etc/fga.model > store_response.json
          cat store_response.json
          store_id=$(jq -r '.store.id' store_response.json)
          model_id=$(jq -r '.model.authorization_model_id' store_response.json)
          echo "store_id=${store_id}" >> $GITHUB_OUTPUT
          echo "model_id=${model_id}" >> $GITHUB_OUTPUT

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install necessary python packages
        run: pip install keystone uwsgi psycopg2 .

      - name: Prepare keystone config file
        env:
          store_id: ${{ steps.store.outputs.store_id }}
          model_id: ${{ steps.store.outputs.model_id }}
        run: |
          echo "[fga]" > etc/keystone.conf
          echo "api_url = http://localhost:8080" >> etc/keystone.conf
          echo "store_id = ${store_id}" >> etc/keystone.conf
          echo "model_id = ${model_id}" >> etc/keystone.conf
          echo "domains_using_sql_backend = ["default"]" >> etc/keystone.conf
          echo "[assignment]" >> etc/keystone.conf
          echo "driver = ${{ matrix.backend }}" >> etc/keystone.conf
          echo "[database]" >> etc/keystone.conf
          echo "connection = postgresql://keystone:1234@127.0.0.1:5433/keystone" >> etc/keystone.conf
          echo "[fernet_receipts]" >> etc/keystone.conf
          echo "key_repository = $(pwd)/etc/fernet" >> etc/keystone.conf
          echo "[fernet_tokens]" >> etc/keystone.conf
          echo "key_repository = $(pwd)/etc/fernet" >> etc/keystone.conf
          cat etc/keystone.conf

      - name: Init keystone
        run: |
          mkdir -p etc/fernet
          keystone-manage --config-file etc/keystone.conf db_sync
          keystone-manage --config-file etc/keystone.conf fernet_setup
          keystone-manage --config-file etc/keystone.conf bootstrap --bootstrap-password password
