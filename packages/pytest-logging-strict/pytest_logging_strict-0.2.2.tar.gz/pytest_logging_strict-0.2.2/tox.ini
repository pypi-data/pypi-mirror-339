# To use tox, see https://tox.readthedocs.io
# Simply pip or conda install tox
# If you use conda, you may also want to install tox-conda
# then run `tox` or `tox -- {pytest args}`
# run in parallel using `tox -p`
# rm -rf build/lib; cd .tox && tox -r --root=.. -e docs --workdir=.; cd - &>/dev/null
[tox]
isolated_build = True
env_list =
    docs, format, lint, mypy, pre-commit, interrogate
toxworkdir = {env:TOXWORKDIR:.tox}

[testenv]
usedevelop = False
download = True
extras =
    toml

basepython =
    docs: python3.10
    lint, format, mypy, pre-commit, interrogate: python3.9

deps =
    build

# Windows can't update the pip version with pip running, so use Python
# to install things.
install_command = python -m pip install -I {opts} {packages}

passenv = *
setenv =
    #PYTHONWARNINGS=ignore:removed in Python 3.14; use ast.Constant:DeprecationWarning
    # Disable CPython's color output
    PYTHON_COLORS=0
    TOXINIDIR = {toxinidir}
    DS_CONFIG_SETTINGS={temp_dir}/setuptools-build.toml

allowlist_externals = cat

# tox not recognizing config_settings passed via cli
# python -m build -C--kind="[tag | current]"
commands_pre =
    python -c 'from pathlib import Path; txt="[project]\nname = \"whatever\"\nversion = \"0.0.1\"\n\n[tool.config-settings]\nkind=\"tag\"\n"; p=Path("{env:DS_CONFIG_SETTINGS}"); p.write_text(txt)'

commands =
    python -m build
    python -m pip install --disable-pip-version-check -q .

[testenv:docs]
description = README rst to html
# Build the docs so we know if they are successful
# better alternative https://github.com/marianoguerra/rst2html5
deps =
    -r requirements/rst2html5.lock
commands =
    rst2html5 --strict README.rst "{toxworkdir}{/}trash.html"

[testenv:format]
description = fix / enforce code formatting
deps =
    -r requirements/dev.lock
setenv =
    {[testenv]setenv}
commands =
    python -m isort --profile="black" --multi-line=3 --force-grid-wrap=2 --use-parentheses --trailing-comma --ensure-newline-before-comments --line-length=88 --supported-extension="py,pyi" src/
    python -m isort --profile="black" --multi-line=3 --force-grid-wrap=2 --use-parentheses --trailing-comma --ensure-newline-before-comments --line-length=88 --supported-extension="py,pyi" tests/
    python -m black --quiet --include='\.pyi?$' src/
    python -m black --quiet --include='\.pyi?$' tests/

# Within a runner, have no access to dist/ folder nor contents. Skip, `twine check`
[testenv:lint]
description = pre-commit and build
deps =
    -r requirements/dev.lock
setenv =
    {[testenv]setenv}
commands =
    validate-pyproject pyproject.toml
    # flake8-pyi conflicts with black. Comes down to disagreeing on lines after fcn and classes
    # in flake8, there is no --exclude-plugin
    - python -m flake8 --max-line-length=88 --extend-ignore="E704,E203,W503,W605,W293,W291,E301,E302,E501" src/
    python -m flake8 --max-line-length=88 --extend-ignore="E704,E203,W503,W605,W293,W291,E301,E302,E501" tests/

[testenv:mypy]
description = static type checking
deps =
    -r requirements/mypy.lock
setenv =
    {[testenv]setenv}
commands =
    mypy --python-version=3.9 -p pytest_logging_strict

[testenv:pre-commit]
description = Run pre-commit
skip_install = true
deps =
    -r requirements/manage.lock
setenv =
    {[testenv]setenv}

commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:interrogate]
deps = interrogate
skip_install = true
commands =
    interrogate -vv src tests
