apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dv-pipecat.fullname" . }}
  labels:
    {{- include "dv-pipecat.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # Ensure at least one pod is available during update if replicaCount > 1
      maxUnavailable: "{{ ternary 1 0 (gt (int .Values.replicaCount) 1) }}"
      # Allow bursting one extra pod during update
      maxSurge: 1
  selector:
    matchLabels:
      {{- include "dv-pipecat.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dv-pipecat.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dv-pipecat.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Load environment variables from the secret defined in values.yaml
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          # Define any additional non-secret env vars if needed
          env:
            {{- toYaml .Values.env | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /pc/healthcheck # Updated path
              port: http # Use named port 'http'
            initialDelaySeconds: 60 # Increased delay
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /pc/healthcheck # Updated path
              port: http # Use named port 'http'
            initialDelaySeconds: 90 # Increased delay
            periodSeconds: 60
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .Values.volumeMounts | nindent 12 }}
          # Ensure the volumes defined in values.yaml are included
      volumes:
        {{- toYaml .Values.volumes | nindent 8 }}
