# Generated by https://github.com/foxglove/foxglove-sdk
from .schemas import (
    CameraCalibration,
    CircleAnnotation,
    Color,
    CompressedImage,
    CompressedVideo,
    FrameTransform,
    FrameTransforms,
    GeoJson,
    Grid,
    ImageAnnotations,
    KeyValuePair,
    LaserScan,
    LocationFix,
    Log,
    PackedElementField,
    Point2,
    Point3,
    PointCloud,
    PointsAnnotation,
    Pose,
    PoseInFrame,
    PosesInFrame,
    Quaternion,
    RawImage,
    SceneEntity,
    SceneEntityDeletion,
    SceneUpdate,
    TextAnnotation,
    Vector2,
    Vector3,
)

class CameraCalibrationChannel:
    """
    A channel for logging CameraCalibration messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "CameraCalibrationChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "CameraCalibration",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class CircleAnnotationChannel:
    """
    A channel for logging CircleAnnotation messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "CircleAnnotationChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "CircleAnnotation",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class ColorChannel:
    """
    A channel for logging Color messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "ColorChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Color",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class CompressedImageChannel:
    """
    A channel for logging CompressedImage messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "CompressedImageChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "CompressedImage",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class CompressedVideoChannel:
    """
    A channel for logging CompressedVideo messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "CompressedVideoChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "CompressedVideo",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class FrameTransformChannel:
    """
    A channel for logging FrameTransform messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "FrameTransformChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "FrameTransform",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class FrameTransformsChannel:
    """
    A channel for logging FrameTransforms messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "FrameTransformsChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "FrameTransforms",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class GeoJsonChannel:
    """
    A channel for logging GeoJson messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "GeoJsonChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "GeoJson",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class GridChannel:
    """
    A channel for logging Grid messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "GridChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Grid",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class ImageAnnotationsChannel:
    """
    A channel for logging ImageAnnotations messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "ImageAnnotationsChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "ImageAnnotations",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class KeyValuePairChannel:
    """
    A channel for logging KeyValuePair messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "KeyValuePairChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "KeyValuePair",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class LaserScanChannel:
    """
    A channel for logging LaserScan messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "LaserScanChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "LaserScan",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class LocationFixChannel:
    """
    A channel for logging LocationFix messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "LocationFixChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "LocationFix",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class LogChannel:
    """
    A channel for logging Log messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "LogChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Log",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PackedElementFieldChannel:
    """
    A channel for logging PackedElementField messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PackedElementFieldChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "PackedElementField",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class Point2Channel:
    """
    A channel for logging Point2 messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "Point2Channel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Point2",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class Point3Channel:
    """
    A channel for logging Point3 messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "Point3Channel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Point3",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PointCloudChannel:
    """
    A channel for logging PointCloud messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PointCloudChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "PointCloud",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PointsAnnotationChannel:
    """
    A channel for logging PointsAnnotation messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PointsAnnotationChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "PointsAnnotation",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PoseChannel:
    """
    A channel for logging Pose messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PoseChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Pose",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PoseInFrameChannel:
    """
    A channel for logging PoseInFrame messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PoseInFrameChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "PoseInFrame",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class PosesInFrameChannel:
    """
    A channel for logging PosesInFrame messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "PosesInFrameChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "PosesInFrame",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class QuaternionChannel:
    """
    A channel for logging Quaternion messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "QuaternionChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Quaternion",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class RawImageChannel:
    """
    A channel for logging RawImage messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "RawImageChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "RawImage",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class SceneEntityChannel:
    """
    A channel for logging SceneEntity messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "SceneEntityChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "SceneEntity",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class SceneEntityDeletionChannel:
    """
    A channel for logging SceneEntityDeletion messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "SceneEntityDeletionChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "SceneEntityDeletion",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class SceneUpdateChannel:
    """
    A channel for logging SceneUpdate messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "SceneUpdateChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "SceneUpdate",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class TextAnnotationChannel:
    """
    A channel for logging TextAnnotation messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "TextAnnotationChannel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "TextAnnotation",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class Vector2Channel:
    """
    A channel for logging Vector2 messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "Vector2Channel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Vector2",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...

class Vector3Channel:
    """
    A channel for logging Vector3 messages
    """

    def __new__(
        cls,
        topic: str,
    ) -> "Vector3Channel": ...
    def close(self) -> None: ...
    def log(
        self,
        message: "Vector3",
        *,
        log_time: int | None = None,
        publish_time: int | None = None,
        sequence: int | None = None,
    ) -> None: ...
