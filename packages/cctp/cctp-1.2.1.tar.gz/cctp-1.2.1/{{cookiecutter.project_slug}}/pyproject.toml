# -------------------- build-system --------------------- #
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
readme = "README.rst"
authors = [
  { name = "{{cookiecutter.username}}", email = "{{cookiecutter.email}}" },
]
maintainers = [
  { name = "{{cookiecutter.username}}", email = "{{cookiecutter.email}}" },
]
requires-python = ">=3.8"
dependencies = [
  {% if "no command-line" not in cookiecutter.command_line_interface|lower %}"rich>=13.9.4",
  "typer>=0.15.1",{% endif %}
]
classifiers = []
license = { text = "{{cookiecutter.open_source_license}}" }

{% if "no command-line" not in cookiecutter.command_line_interface|lower %}
[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:app"
{% endif %}

[project.urls]
Repository = "{{cookiecutter.__project_home}}"
Documentation = "https://{{cookiecutter.project_slug}}.readthedocs.io/zh-cn/stable/"
Issues = "{{cookiecutter.__project_home}}/issues"

# ---------------------- coverage ----------------------- #
[tool.coverage.report]
exclude_lines = ["coverage: ignore", "def main", "if __name__ == .__main__.:"]

[tool.coverage.run]
source = ["src/{{cookiecutter.project_slug}}"]
omit = ["tests/*", "examples/*"]

# -------------------- hatch-version -------------------- #
[tool.hatch.version]
path = "src/{{cookiecutter.project_slug}}/__init__.py"

# ------------------------ mypy ------------------------- #
[tool.mypy]
files = "."
strict = true
pretty = true
show_error_codes = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
  "tests.*",
  "asgiref.*",
  "dotenv.*",
  "cryptography.*",
  "importlib_metadata",
]
allow_untyped_defs = true
disable_error_code = "attr-defined"
ignore_missing_imports = true

{% if cookiecutter.use_pytest == 'y' -%}
# ----------------------- pytest ------------------------ #
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]
{% endif %}

# ------------------------ ruff ------------------------- #
[tool.ruff]
line-length = 120
fix = true
show-fixes = true
output-format = "full"
exclude = ["**/ui_*.py", "**/*_rc.py"]

[tool.ruff.lint]
select = ["B", "E", "F", "I", "UP", "W"]

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = false

# ----------------------- uv-dependencies ------------------------ #
[tool.uv]
dev-dependencies = [
    "coverage>=7.6.1",
    "pip>=25.0.1",
    "pre-commit>=3.5.0",
    {% if cookiecutter.use_pytest == 'y' -%}"pytest-benchmark>=4.0.0",
    "pytest-cov>=5.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.4",{% endif %}
    {% if cookiecutter.theme == 'press' -%}"sphinx-press-theme",{% endif %}
    {% if cookiecutter.theme == 'sphinx_rtd_theme' -%}"sphinx-rtd-theme",{% endif %}
    {% if cookiecutter.theme == 'piccolo_theme' -%}"piccolo-theme",{% endif %}
    "ruff>=0.9.7",
    "sphinx>=7.1.2",
    "tox>=4.24.1",
    "tox-uv>=1.13.1",
    "watchdog>=4.0.2",
    "wheel>=0.45.1",
]
