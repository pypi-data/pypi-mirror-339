# coding: utf-8

"""
    Compass API

    #### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!  Our API allows you to interact and transact in DeFi with ease.  We help you construct your transactions via a **simple REST API**.   You maintain custody at all times and **sign** all transactions **yourself**.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from compass.api_client.models.aave_borrow_params import AaveBorrowParams
from compass.api_client.models.aave_repay_params import AaveRepayParams
from compass.api_client.models.aave_supply_params import AaveSupplyParams
from compass.api_client.models.aave_withdraw_params import AaveWithdrawParams
from compass.api_client.models.increase_allowance_params import IncreaseAllowanceParams
from compass.api_client.models.uniswap_buy_exactly_params import UniswapBuyExactlyParams
from compass.api_client.models.uniswap_increase_liquidity_provision_params import UniswapIncreaseLiquidityProvisionParams
from compass.api_client.models.uniswap_mint_liquidity_provision_params import UniswapMintLiquidityProvisionParams
from compass.api_client.models.uniswap_sell_exactly_params import UniswapSellExactlyParams
from compass.api_client.models.uniswap_withdraw_liquidity_provision_params import UniswapWithdrawLiquidityProvisionParams
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

BODY_ANY_OF_SCHEMAS = ["AaveBorrowParams", "AaveRepayParams", "AaveSupplyParams", "AaveWithdrawParams", "IncreaseAllowanceParams", "UniswapBuyExactlyParams", "UniswapIncreaseLiquidityProvisionParams", "UniswapMintLiquidityProvisionParams", "UniswapSellExactlyParams", "UniswapWithdrawLiquidityProvisionParams"]

class Body(BaseModel):
    """
    Body
    """

    # data type: UniswapBuyExactlyParams
    anyof_schema_1_validator: Optional[UniswapBuyExactlyParams] = None
    # data type: UniswapSellExactlyParams
    anyof_schema_2_validator: Optional[UniswapSellExactlyParams] = None
    # data type: UniswapMintLiquidityProvisionParams
    anyof_schema_3_validator: Optional[UniswapMintLiquidityProvisionParams] = None
    # data type: UniswapWithdrawLiquidityProvisionParams
    anyof_schema_4_validator: Optional[UniswapWithdrawLiquidityProvisionParams] = None
    # data type: UniswapIncreaseLiquidityProvisionParams
    anyof_schema_5_validator: Optional[UniswapIncreaseLiquidityProvisionParams] = None
    # data type: AaveBorrowParams
    anyof_schema_6_validator: Optional[AaveBorrowParams] = None
    # data type: AaveRepayParams
    anyof_schema_7_validator: Optional[AaveRepayParams] = None
    # data type: AaveSupplyParams
    anyof_schema_8_validator: Optional[AaveSupplyParams] = None
    # data type: AaveWithdrawParams
    anyof_schema_9_validator: Optional[AaveWithdrawParams] = None
    # data type: IncreaseAllowanceParams
    anyof_schema_10_validator: Optional[IncreaseAllowanceParams] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AaveBorrowParams, AaveRepayParams, AaveSupplyParams, AaveWithdrawParams, IncreaseAllowanceParams, UniswapBuyExactlyParams, UniswapIncreaseLiquidityProvisionParams, UniswapMintLiquidityProvisionParams, UniswapSellExactlyParams, UniswapWithdrawLiquidityProvisionParams]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AaveBorrowParams", "AaveRepayParams", "AaveSupplyParams", "AaveWithdrawParams", "IncreaseAllowanceParams", "UniswapBuyExactlyParams", "UniswapIncreaseLiquidityProvisionParams", "UniswapMintLiquidityProvisionParams", "UniswapSellExactlyParams", "UniswapWithdrawLiquidityProvisionParams" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = Body.model_construct()
        error_messages = []
        # validate data type: UniswapBuyExactlyParams
        if not isinstance(v, UniswapBuyExactlyParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UniswapBuyExactlyParams`")
        else:
            return v

        # validate data type: UniswapSellExactlyParams
        if not isinstance(v, UniswapSellExactlyParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UniswapSellExactlyParams`")
        else:
            return v

        # validate data type: UniswapMintLiquidityProvisionParams
        if not isinstance(v, UniswapMintLiquidityProvisionParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UniswapMintLiquidityProvisionParams`")
        else:
            return v

        # validate data type: UniswapWithdrawLiquidityProvisionParams
        if not isinstance(v, UniswapWithdrawLiquidityProvisionParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UniswapWithdrawLiquidityProvisionParams`")
        else:
            return v

        # validate data type: UniswapIncreaseLiquidityProvisionParams
        if not isinstance(v, UniswapIncreaseLiquidityProvisionParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UniswapIncreaseLiquidityProvisionParams`")
        else:
            return v

        # validate data type: AaveBorrowParams
        if not isinstance(v, AaveBorrowParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AaveBorrowParams`")
        else:
            return v

        # validate data type: AaveRepayParams
        if not isinstance(v, AaveRepayParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AaveRepayParams`")
        else:
            return v

        # validate data type: AaveSupplyParams
        if not isinstance(v, AaveSupplyParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AaveSupplyParams`")
        else:
            return v

        # validate data type: AaveWithdrawParams
        if not isinstance(v, AaveWithdrawParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AaveWithdrawParams`")
        else:
            return v

        # validate data type: IncreaseAllowanceParams
        if not isinstance(v, IncreaseAllowanceParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IncreaseAllowanceParams`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Body with anyOf schemas: AaveBorrowParams, AaveRepayParams, AaveSupplyParams, AaveWithdrawParams, IncreaseAllowanceParams, UniswapBuyExactlyParams, UniswapIncreaseLiquidityProvisionParams, UniswapMintLiquidityProvisionParams, UniswapSellExactlyParams, UniswapWithdrawLiquidityProvisionParams. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[UniswapBuyExactlyParams] = None
        try:
            instance.actual_instance = UniswapBuyExactlyParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[UniswapSellExactlyParams] = None
        try:
            instance.actual_instance = UniswapSellExactlyParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[UniswapMintLiquidityProvisionParams] = None
        try:
            instance.actual_instance = UniswapMintLiquidityProvisionParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[UniswapWithdrawLiquidityProvisionParams] = None
        try:
            instance.actual_instance = UniswapWithdrawLiquidityProvisionParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[UniswapIncreaseLiquidityProvisionParams] = None
        try:
            instance.actual_instance = UniswapIncreaseLiquidityProvisionParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[AaveBorrowParams] = None
        try:
            instance.actual_instance = AaveBorrowParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[AaveRepayParams] = None
        try:
            instance.actual_instance = AaveRepayParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[AaveSupplyParams] = None
        try:
            instance.actual_instance = AaveSupplyParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[AaveWithdrawParams] = None
        try:
            instance.actual_instance = AaveWithdrawParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[IncreaseAllowanceParams] = None
        try:
            instance.actual_instance = IncreaseAllowanceParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Body with anyOf schemas: AaveBorrowParams, AaveRepayParams, AaveSupplyParams, AaveWithdrawParams, IncreaseAllowanceParams, UniswapBuyExactlyParams, UniswapIncreaseLiquidityProvisionParams, UniswapMintLiquidityProvisionParams, UniswapSellExactlyParams, UniswapWithdrawLiquidityProvisionParams. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AaveBorrowParams, AaveRepayParams, AaveSupplyParams, AaveWithdrawParams, IncreaseAllowanceParams, UniswapBuyExactlyParams, UniswapIncreaseLiquidityProvisionParams, UniswapMintLiquidityProvisionParams, UniswapSellExactlyParams, UniswapWithdrawLiquidityProvisionParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


