"""Provides the public API for loading Pegasus files."""

from pathlib import Path

from .loading_nbf import PegasusNBFData, _load_nbf


def load_file(filepath: Path) -> PegasusNBFData:
    """Load files generated by Pegasus++.

    Pass the path to the file and this function will choose the proper internal function
    for reading that file type and return the proper object that contains the data from
    that file.

    Parameters
    ----------
    filepath : Path
        The path to the file to load

    Returns
    -------
    PegasusNBFData
        The data from the file in an appropriate object

    Raises
    ------
    FileNotFoundError
        If the file does not exist
    ValueError
        Raised if the file exists but doesn't have an extension that matches a known
        Pegasus++ file type
    """
    # Check that the file exists
    if not filepath.exists():
        err_msg = f"The file at {filepath} does not exist."
        raise FileNotFoundError(err_msg)

    # Load the file with the proper loading function for that file type
    if filepath.suffix == ".nbf":
        return _load_nbf(filepath)

    # If the file type is not dealt with in one of the above branches then raise an exception
    err_msg = f"The file {filepath} does not appear to be a Pegasus++ File."
    raise ValueError(err_msg)
