# -*- coding: utf-8 -*-
"""KOSM_20250406_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PE9PJY_5QpY3Uq_3qz02W3ymuMibVtlY

# KohyaSetupManager
Kohya_ss GUI の起動を管理します。[(GitHub)](https://github.com/bmaltais/kohya_ss)

```
2025/03/17 0.1.0 BranchRouter用ダミー生成
2025/03/18 0.1.6 デバッグ
2025/03/19 0.1.7 CondaManager との依存関係デバッグ
2025/04/04 1.0.0 完成
2025/04/06 1.0.1 ブラッシュアップ
```

# KohyaSetupManager

## 1. condacolab 設定
- **概要:** Google Drive接続と condacolabのインストールを行う
- **使用例:** コード冒頭に設置。condacolabと周辺プログラムが起動する。
"""

# @title a. GDrive接続とcondacolab設定
if __name__ == '__main__':
    get_ipython().system( "pip install an_QuickViper2" )
    from an_quickviper2 import CondaInitializer

if __name__ == '__main__':
    condainitializer = CondaInitializer()

"""## 2. モジュール定義"""

## %%writefile /content/drive/MyDrive/code/KohyaSetupManager.py
# @title a. KohyaSetupManager 定義
from inspect import ClassFoundException
import os
import sys
import subprocess
import logging
import shutil
from pathlib import Path
from contextlib import contextmanager

get_ipython().system( "pip install an_debughelper" )
from an_debughelper import DebugHelper
get_ipython().system( "pip install an_CudaUtility" )
from an_cudautility import CudaUtility
get_ipython().system( "pip install an_CondaManager" )
from an_condamanager import CondaManager
get_ipython().system( "pip install an_ToolKit" )
from an_toolkit import ToolKit
get_ipython().system( "pip install an_EasyVen" )
from an_easyven import EasyVen

class KohyaSetupManager:
    """Kohya_ss GUI のセットアップと管理を行うクラス"""

    def __init__( self, venv_name = "kohya_env" ):
        self.debug = DebugHelper(instance_name="KohyaSetup")
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        self.debug.enable_timestamp()

        self.venv_name = venv_name

        # 環境変数の設定
        self.even = EasyVen()
        [ self.bch_path,
          self.dst_path,
          self.cur_path,
          self.src_path,
          self.arc_path,
          self.arz_path,
          self.lcl_path,
          self.bin_path,
          self.lib_path,
          self.tmp_path,
          self.org_path,
          self.orz_path,
          self.enva_path ] = self.even.setup( venv_name = self.venv_name )

        self.python_path = Path(self.bin_path).joinpath( "python" )
        self.debug.log_step( f"python_path:{ self.python_path }", success = None )

        self.cudau = CudaUtility()
        self.condamanager = CondaManager( venv_name = self.venv_name )
        self.toolkit = ToolKit()

        # レポジトリ管理
        self.repo_url_kohya                   = "https://github.com/bmaltais/kohya_ss.git"
        self.target_dir_kohya                 = Path( self.tmp_path ) / "kohya_ss"
        self.req_path_kohya                   = Path( self.target_dir_kohya ) / "requirements.txt"
        self.req_path_kohya_non_editable      = Path( self.target_dir_kohya ) / "requirements_non_editable.txt"
        self.req_path_kohya_editable          = Path( self.target_dir_kohya ) / "requirements_editable.txt"
        self.repo_url_sd_scripts              = "https://github.com/kohya-ss/sd-scripts.git"
        self.target_dir_sd_scripts            = Path( self.target_dir_kohya ) / "sd-scripts"
        self.req_path_sd_scripts              = Path( self.target_dir_sd_scripts ) / "requirements.txt"
        self.req_path_sd_scripts_non_editable = Path( self.target_dir_sd_scripts ) / "requirements_non_editable.txt"
        self.req_path_sd_scripts_editable     = Path( self.target_dir_sd_scripts ) / "requirements_editable.txt"
        self.debug.log_step( "-" * 110, success = None )
        self.debug.log_step( f"repo_url_kohya                  :{ self.repo_url_kohya }", success = None )
        self.debug.log_step( f"target_dir_kohya                :{ self.target_dir_kohya }", success = None )
        self.debug.log_step( f"req_path_kohya                  :{ self.req_path_kohya }", success = None )
        self.debug.log_step( f"req_path_kohya_non_editable     :{ self.req_path_kohya_non_editable }", success = None )
        self.debug.log_step( f"req_path_kohya_editable         :{ self.req_path_kohya_editable }", success = None )
        self.debug.log_step( "-" * 110, success = None )
        self.debug.log_step( f"repo_url_sd_scripts             :{ self.repo_url_sd_scripts }", success = None )
        self.debug.log_step( f"target_dir_sd_scripts           :{ self.target_dir_sd_scripts }", success = None )
        self.debug.log_step( f"req_path_sd_scripts             :{ self.req_path_sd_scripts }", success = None )
        self.debug.log_step( f"req_path_sd_scripts_non_editable:{ self.req_path_sd_scripts_non_editable }", success = None )
        self.debug.log_step( f"req_path_sd_scripts_editable    :{ self.req_path_sd_scripts_editable }", success = None )
        self.debug.log_step( "-" * 110, success = None )


    def clone_repository(self, repo_url, target_dir ):
        """
        kohya_ss GUI リポジトリをクローンするメソッド
        args:
            force_install( bool ): True なら強制インストール
        """
        self.debug.log_step(f"Cloning Kohya_ss repository into { target_dir }", success=None )
        self.toolkit.dir_remover( target_dir )
        self.toolkit.executor( cmd = f"git clone --recursive { repo_url } { target_dir }", shell =True, log = True )


    def clone_all_repositories( self ):
        """
        kohya_ss GUI と sd-scripts の両方のリポジトリをクローンする統合メソッド。
        requirements.txt を読み込み、editable 行をコメントアウトしたファイルと、
        editable 行のみのファイルの生成も担当する
        """
        self.debug.log_step( "clone_all_repositories", success = None )
        # kohya_ss リポジトリのクローン
        self.clone_repository( repo_url = self.repo_url_kohya, target_dir = self.target_dir_kohya )
        # sd-scripts リポジトリのクローン
        # 以前はsd-scriptsを、別のメソッドを使ってダウンロードしていたが、--recursiveに
        # より、clone_kohya_ss_repositoryで一度にダウンロードできることがわかったので
        # コメントアウトした。
        # self.clone_sd_scripts_repository(force_install=sd_scripts_rep_force_install)
        # requirements.txt を読み込み、editable 行をコメントアウトしたファイルと、
        # editable 行のみのファイルを作成する。
        self.requirements_preprocessor( self.req_path_kohya,
                                        self.req_path_kohya_non_editable,
                                        self.req_path_kohya_editable )
        self.requirements_preprocessor( self.req_path_sd_scripts,
                                        self.req_path_sd_scripts_non_editable,
                                        self.req_path_sd_scripts_editable )


    def requirements_preprocessor( self, input_path, output_path, editable_output_path ):
        """
        requirements.txt を読み込み、editable 行をコメントアウトしたファイルと、
        editable 行のみのファイルを作成します。
        args:
            input_path( string ): requirements.txt のファイルパス
            output_path( string ): editable 行をコメントアウトしたファイルパス
            editable_output_path( string ): editable 行のみのファイルパス
        """
        self.input_path = input_path
        self.output_path = output_path
        self.editable_output_path = editable_output_path

        with open(self.input_path, "r", encoding="utf-8") as infile:
            lines = infile.readlines()

        processed_lines = []
        editable_lines = []
        for line in lines:
            if line.lstrip().startswith("-e"):
                commented = "# " + line
                processed_lines.append(commented)
                editable_lines.append(commented)
            else:
                processed_lines.append(line)

        with open(self.output_path, "w", encoding="utf-8") as outfile:
            outfile.writelines(processed_lines)

        with open(self.editable_output_path, "w", encoding="utf-8") as editable_file:
            editable_file.writelines(editable_lines)


    def install_dependency( self, req_path ):
        """
        相関関係をインストールします。
        args:
            req_path( str ): requirements.txt へのパス
        """
        arg_req_path = Path( req_path )
        # req_kohya = Path( self.target_dir_kohya ) / "requirements.txt"
        if not os.path.exists( arg_req_path ):
            self.debug.log_step(f"Requirements file not found: { arg_req_path }", success=False)
            raise Exception("Requirements file not found")

        self.debug.log_step( f"target_dir_kohya : { arg_req_path.parent }")
        os.chdir( arg_req_path.parent )

        cmd = f"{ self.python_path } -m pip install -r { arg_req_path }"
        result = self.toolkit.executor_sync( cmd = cmd, shell = True )


    def install_dependencies_non_editable( self ):
        self.install_dependency( self.req_path_kohya_non_editable )
        self.install_dependency( self.req_path_sd_scripts_non_editable )
        # gradioのupgradeも行います。
        result = self.toolkit.executor_sync( f"{self.python_path} -m pip install --upgrade gradio", shell = True )

    def install_dependencies_editable( self ):
        self.install_dependency( self.req_path_kohya_editable )
        self.install_dependency( self.req_path_sd_scripts_editable )

    def install_depenrencies_editable_distribute( self ):
        req_path_kohya_editable_distribute = Path( self.target_dir_kohya ) / "requirements_editable_distribution.txt"
        req_path_sd_scripts_editable_distribute = Path( self.target_dir_sd_scripts ) / "requirements_editable_distribution.txt"
        self.debug.log_step( f"req_path_kohya_editable_distribute     :{ req_path_kohya_editable_distribute }", success = None )
        self.debug.log_step( f"req_path_sd_scripts_editable_distribute:{ req_path_sd_scripts_editable_distribute }", success = None )
        self.install_dependency( "./" / req_path_kohya_editable_distribute )
        self.install_dependency( "./" / req_path_sd_scripts_editable_distribute )

    def launch_gui( self ):
        os.chmod( self.target_dir_kohya, 0o755 )
        os.chmod( self.target_dir_kohya / "kohya_gui.py", 0o755 )
        self.toolkit.executor( cmd = f"ls -ld { self.target_dir_kohya }", shell = True, log = True )
        self.toolkit.executor( cmd = f"ls -ld { self.target_dir_kohya / 'kohya_gui.py' }", shell = True, log = True )
        os.chdir( self.target_dir_kohya )

        get_ipython().system( f"{ self.python_path } kohya_gui.py --share --headless" )



    def run_setup( self, force_recreate = False, distribute = True ):
        """
        セットアップの実行
        args:
            distribute( bool ): 配布時など、既に圧縮仮想環境ファイル等が揃っているときに指定。
            force_recreate( bool ): True なら強制再生成
        """
        self.debug.log_step("🐎🐎🐎🐎🐎 Starting Kohya_ss GUI setup. 🐎🐎🐎🐎🐎", success = None )

        if distribute:
            # enva_stem          = Path( self.enva_path ).stem
            # enva_suffix        = Path( self.enva_path ).suffix
            # enva_relative_path = Path( "./" ) / enva_stem.with_suffix( enva_suffix )
            # self.debug.log_step( f"enva_stem          :{ enva_stem          }", success = None )
            # self.debug.log_step( f"enva_suffix        :{ enva_suffix        }", success = None )
            # self.debug.log_step( f"enva_file          :{ enva_file          }", success = None )
            # self.debug.log_step( f"enva_relative_path :{ enva_relative_path }", success = None )
            self.condamanager.restore_enva()
            self.install_dependencies_editable_distribute()
        elif not os.path.exists( self.target_dir_kohya ):
            self.clone_all_repositories()
            if force_recreate or not os.path.exists( self.enva_path ):
                self.condamanager.extract_env()
                self.condamanager.executor()
                self.install_dependencies_non_editable()
                self.condamanager.archive_enva()
                self.install_dependencies_editable()
            elif os.path.exists( self.enva_path ):
                if not os.path.exists( self.lcl_path ):
                    self.condamanager.restore_enva()
                    self.install_dependencies_editable()
        self.launch_gui()

# @title b. MainLoop 定義
class MainLoop():
    def __init__( self ):
        self.debug = DebugHelper( instance_name="MainLoop" )
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        self.debug.enable_timestamp()

        self.kohya = KohyaSetupManager()

    def run_setup( self, distribute, force_recreate ):
        self.kohya.run_setup( distribute = distribute, force_recreate = force_recreate )

"""## 3. テスト"""

ccccccc# @title a. MainLoop 実行
if __name__ == "__main__":
    main_loop = MainLoop()
    main_loop.run_setup( distribute = True, force_recreate = False )