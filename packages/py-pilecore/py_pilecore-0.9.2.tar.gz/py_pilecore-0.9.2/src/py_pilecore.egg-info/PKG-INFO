Metadata-Version: 2.4
Name: py-pilecore
Version: 0.9.2
Summary: Public python SDK for the CEMS PileCore web-API.
License: MIT License
        
        Copyright (c) 2023 CEMS
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: repository, https://github.com/cemsbv/py-pilecore
Keywords: API,PileCore,CEMS,CRUX
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pygef<1,>0.8
Requires-Dist: numpy<2,>1
Requires-Dist: pandas<3,>2
Requires-Dist: cems-nuclei[client]<2,>=1
Requires-Dist: matplotlib<4,>=3.8
Requires-Dist: tqdm[notebook]<5,>4
Requires-Dist: natsort<9,>8
Requires-Dist: shapely<3,>=2
Requires-Dist: scipy<2,>=1.13
Requires-Dist: ipywidgets<9,>=8
Requires-Dist: dash<3,>=2.17
Requires-Dist: plotly-geo<2,>=1.0.0
Requires-Dist: plotly<6,>=5
Provides-Extra: test
Requires-Dist: coveralls; extra == "test"
Requires-Dist: pytest; extra == "test"
Requires-Dist: openapi-core; extra == "test"
Provides-Extra: docs
Requires-Dist: Sphinx==6.1.3; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints==1.22; extra == "docs"
Requires-Dist: ipython==8.11.0; extra == "docs"
Requires-Dist: asteroid-sphinx-theme==0.0.3; extra == "docs"
Requires-Dist: sphinx_rtd_theme==1.2.0; extra == "docs"
Provides-Extra: lint
Requires-Dist: ansible-lint==6.22.1; extra == "lint"
Requires-Dist: black==23.11.0; extra == "lint"
Requires-Dist: cfn-lint==0.83.3; extra == "lint"
Requires-Dist: cpplint==1.6.1; extra == "lint"
Requires-Dist: flake8==6.0.0; extra == "lint"
Requires-Dist: isort==5.12.0; extra == "lint"
Requires-Dist: mypy==1.7.1; extra == "lint"
Requires-Dist: sqlfluff==2.3.5; extra == "lint"
Requires-Dist: yamllint==1.33.0; extra == "lint"
Requires-Dist: yq==3.2.3; extra == "lint"
Dynamic: license-file

# py-pilecore
Public python SDK for the CEMS PileCore web-API

[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)
[![Coverage Status](https://coveralls.io/repos/github/cemsbv/py-pilecore/badge.svg)](https://coveralls.io/github/cemsbv/py-pilecore)


This repository is created by [CEMS BV](https://cemsbv.nl/) and is a public python wrapper around the CEMS [PileCore web-API](https://nuclei.cemsbv.io/#/pilecore/api).

# Installation

To install a package in this repository run:

`$ pip install py-pilecore`


## ENV VARS

To use `py-pilecore` add the follow ENV vars to your environment. Or provide them when asked.

```
* NUCLEI_TOKEN
    - Your NUCLEI user token
```

You can obtain your `NUCLEI_TOKEN` on [NUCLEI](https://nuclei.cemsbv.io/#/). 
Go to `personal-access-tokens` and create a new user token.

# Contribution

## Environment

We recommend developing in Python3.11 with a clean virtual environment (using `virtualenv` or `conda`), installing the requirements from the requirements.txt file:

Example using `virtualenv` and `pip` to install the dependencies in a new environment .env on Linux:

```bash
python -m venv .env
source .env/bin/activate
python -m pip install --upgrade pip setuptools
pip install -r requirements.txt
pip install -e .
```

## Documentation

Build the docs:

```bash
python -m pip install --upgrade pip setuptools
pip install -r requirements.txt
pip install .

sphinx-build -b html docs public
```

## Format

We format our code with black and isort.

```bash
black --config "pyproject.toml" src/pypilecore tests notebooks
isort --settings-path "pyproject.toml" src/pypilecore tests notebooks
```

## Lint

To maintain code quality we use the GitHub super-linter.

To run the linters locally, run the `run_super_linters.sh` bash script from the root directory.

## UnitTest

Test the software with the use of coverage:

```bash
python -m pip install --upgrade pip setuptools
pip install -r requirements.txt
pip install -e .
coverage run -m pytest
```

## Requirements

Requirements are autogenerated by the `pip-compile` command with python 3.11

Install pip-tools with:

```bash
pip install pip-tools
```

Generate requirements.txt file with:

```bash
pip-compile --extra=test --extra=lint --extra=docs --output-file=requirements.txt pyproject.toml
```

Update the requirements within the defined ranges with:

```bash
pip-compile --upgrade --extra=test --extra=lint --extra=docs --output-file=requirements.txt pyproject.toml
```

Note that `pip-compile` might run from your global path. You can also invoke the compile
command from the `piptools` module on a specific python installation (e.g. within a virtualenv):

```bash
python -m piptools compile
