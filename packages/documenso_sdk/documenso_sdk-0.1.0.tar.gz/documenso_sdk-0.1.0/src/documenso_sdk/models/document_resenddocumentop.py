"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, TypedDict


class DocumentResendDocumentRequestTypedDict(TypedDict):
    document_id: float
    recipients: List[float]
    r"""The IDs of the recipients to redistribute the document to."""


class DocumentResendDocumentRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    recipients: List[float]
    r"""The IDs of the recipients to redistribute the document to."""


class DocumentResendDocumentInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class DocumentResendDocumentInternalServerErrorIssue(BaseModel):
    message: str


class DocumentResendDocumentInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[DocumentResendDocumentInternalServerErrorIssue]] = None


class DocumentResendDocumentInternalServerError(Exception):
    r"""Internal server error"""

    data: DocumentResendDocumentInternalServerErrorData

    def __init__(self, data: DocumentResendDocumentInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, DocumentResendDocumentInternalServerErrorData
        )


class DocumentResendDocumentBadRequestIssueTypedDict(TypedDict):
    message: str


class DocumentResendDocumentBadRequestIssue(BaseModel):
    message: str


class DocumentResendDocumentBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[DocumentResendDocumentBadRequestIssue]] = None


class DocumentResendDocumentBadRequestError(Exception):
    r"""Invalid input data"""

    data: DocumentResendDocumentBadRequestErrorData

    def __init__(self, data: DocumentResendDocumentBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, DocumentResendDocumentBadRequestErrorData)


class DocumentResendDocumentResponseTypedDict(TypedDict):
    r"""Successful response"""

    success: bool


class DocumentResendDocumentResponse(BaseModel):
    r"""Successful response"""

    success: bool
