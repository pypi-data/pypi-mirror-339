"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldUpdateDocumentFieldTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldUpdateDocumentFieldTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateDocumentFieldValueDropdownTypedDict(TypedDict):
    value: str


class FieldUpdateDocumentFieldValueDropdown(BaseModel):
    value: str


class FieldUpdateDocumentFieldFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldUpdateDocumentFieldFieldMetaDropdownRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateDocumentFieldFieldDropdownTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeDropdownRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldFieldMetaDropdownRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldDropdown(BaseModel):
    type: FieldUpdateDocumentFieldTypeDropdownRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldUpdateDocumentFieldTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateDocumentFieldValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateDocumentFieldFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateDocumentFieldFieldCheckboxTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeCheckboxRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldFieldMetaCheckboxRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldCheckbox(BaseModel):
    type: FieldUpdateDocumentFieldTypeCheckboxRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldUpdateDocumentFieldTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldUpdateDocumentFieldValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueRadioTypedDict]]


class FieldUpdateDocumentFieldFieldMetaRadioRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueRadio]] = None


class FieldUpdateDocumentFieldFieldRadioTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeRadioRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaRadioRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldRadio(BaseModel):
    type: FieldUpdateDocumentFieldTypeRadioRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldUpdateDocumentFieldTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldUpdateDocumentFieldTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignNumber]


class FieldUpdateDocumentFieldFieldMetaNumberRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldNumberTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeNumberRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaNumberRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldNumber(BaseModel):
    type: FieldUpdateDocumentFieldTypeNumberRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldUpdateDocumentFieldTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldUpdateDocumentFieldTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignText]


class FieldUpdateDocumentFieldFieldMetaTextRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldTextTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeTextRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaTextRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldText(BaseModel):
    type: FieldUpdateDocumentFieldTypeTextRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldUpdateDocumentFieldTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldUpdateDocumentFieldTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignDate]


class FieldUpdateDocumentFieldFieldMetaDateRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldDateTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeDateRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaDateRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldDate(BaseModel):
    type: FieldUpdateDocumentFieldTypeDateRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldUpdateDocumentFieldTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldUpdateDocumentFieldTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignEmail]


class FieldUpdateDocumentFieldFieldMetaEmailRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldEmailTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeEmailRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaEmailRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldEmail(BaseModel):
    type: FieldUpdateDocumentFieldTypeEmailRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldUpdateDocumentFieldTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldUpdateDocumentFieldTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignName]


class FieldUpdateDocumentFieldFieldMetaNameRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldNameTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeNameRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldFieldMetaNameRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldName(BaseModel):
    type: FieldUpdateDocumentFieldTypeNameRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldUpdateDocumentFieldTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldUpdateDocumentFieldTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignInitials]


class FieldUpdateDocumentFieldFieldMetaInitialsRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldInitialsTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeInitialsRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldFieldMetaInitialsRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldInitials(BaseModel):
    type: FieldUpdateDocumentFieldTypeInitialsRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldUpdateDocumentFieldFieldFreeSignatureTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeFreeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldFreeSignature(BaseModel):
    type: FieldUpdateDocumentFieldTypeFreeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldUpdateDocumentFieldFieldSignatureTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldTypeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldFieldSignature(BaseModel):
    type: FieldUpdateDocumentFieldTypeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


FieldUpdateDocumentFieldFieldUnionTypedDict = TypeAliasType(
    "FieldUpdateDocumentFieldFieldUnionTypedDict",
    Union[
        FieldUpdateDocumentFieldFieldSignatureTypedDict,
        FieldUpdateDocumentFieldFieldFreeSignatureTypedDict,
        FieldUpdateDocumentFieldFieldInitialsTypedDict,
        FieldUpdateDocumentFieldFieldNameTypedDict,
        FieldUpdateDocumentFieldFieldEmailTypedDict,
        FieldUpdateDocumentFieldFieldDateTypedDict,
        FieldUpdateDocumentFieldFieldTextTypedDict,
        FieldUpdateDocumentFieldFieldNumberTypedDict,
        FieldUpdateDocumentFieldFieldRadioTypedDict,
        FieldUpdateDocumentFieldFieldCheckboxTypedDict,
        FieldUpdateDocumentFieldFieldDropdownTypedDict,
    ],
)


FieldUpdateDocumentFieldFieldUnion = TypeAliasType(
    "FieldUpdateDocumentFieldFieldUnion",
    Union[
        FieldUpdateDocumentFieldFieldSignature,
        FieldUpdateDocumentFieldFieldFreeSignature,
        FieldUpdateDocumentFieldFieldInitials,
        FieldUpdateDocumentFieldFieldName,
        FieldUpdateDocumentFieldFieldEmail,
        FieldUpdateDocumentFieldFieldDate,
        FieldUpdateDocumentFieldFieldText,
        FieldUpdateDocumentFieldFieldNumber,
        FieldUpdateDocumentFieldFieldRadio,
        FieldUpdateDocumentFieldFieldCheckbox,
        FieldUpdateDocumentFieldFieldDropdown,
    ],
)


class FieldUpdateDocumentFieldRequestTypedDict(TypedDict):
    document_id: float
    field: FieldUpdateDocumentFieldFieldUnionTypedDict


class FieldUpdateDocumentFieldRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    field: FieldUpdateDocumentFieldFieldUnion


class FieldUpdateDocumentFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldUpdateDocumentFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldUpdateDocumentFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateDocumentFieldInternalServerErrorIssue]] = None


class FieldUpdateDocumentFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldUpdateDocumentFieldInternalServerErrorData

    def __init__(self, data: FieldUpdateDocumentFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateDocumentFieldInternalServerErrorData
        )


class FieldUpdateDocumentFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldUpdateDocumentFieldBadRequestIssue(BaseModel):
    message: str


class FieldUpdateDocumentFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateDocumentFieldBadRequestIssue]] = None


class FieldUpdateDocumentFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldUpdateDocumentFieldBadRequestErrorData

    def __init__(self, data: FieldUpdateDocumentFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateDocumentFieldBadRequestErrorData
        )


class FieldUpdateDocumentFieldTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldUpdateDocumentFieldFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateDocumentFieldValueResponse3TypedDict(TypedDict):
    value: str


class FieldUpdateDocumentFieldValueResponse3(BaseModel):
    value: str


class FieldUpdateDocumentFieldFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldUpdateDocumentFieldFieldMetaDropdownResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateDocumentFieldFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateDocumentFieldValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateDocumentFieldFieldMetaCheckboxResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldUpdateDocumentFieldValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldValueResponse1TypedDict]]


class FieldUpdateDocumentFieldFieldMetaRadioResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldValueResponse1]] = None


class FieldUpdateDocumentFieldFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldUpdateDocumentFieldTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse6]


class FieldUpdateDocumentFieldFieldMetaNumberResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldUpdateDocumentFieldTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse5]


class FieldUpdateDocumentFieldFieldMetaTextResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldUpdateDocumentFieldTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse4]


class FieldUpdateDocumentFieldFieldMetaDateResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldUpdateDocumentFieldTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse3]


class FieldUpdateDocumentFieldFieldMetaEmailResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldUpdateDocumentFieldTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse2]


class FieldUpdateDocumentFieldFieldMetaNameResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldUpdateDocumentFieldTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldTextAlignResponse1]


class FieldUpdateDocumentFieldFieldMetaInitialsResponse(BaseModel):
    type: FieldUpdateDocumentFieldFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldUpdateDocumentFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldUpdateDocumentFieldFieldMetaUnionTypedDict",
    Union[
        FieldUpdateDocumentFieldFieldMetaRadioResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaInitialsResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaNameResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaEmailResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaDateResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaDropdownResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaCheckboxResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaTextResponseTypedDict,
        FieldUpdateDocumentFieldFieldMetaNumberResponseTypedDict,
    ],
)


FieldUpdateDocumentFieldFieldMetaUnion = TypeAliasType(
    "FieldUpdateDocumentFieldFieldMetaUnion",
    Union[
        FieldUpdateDocumentFieldFieldMetaRadioResponse,
        FieldUpdateDocumentFieldFieldMetaInitialsResponse,
        FieldUpdateDocumentFieldFieldMetaNameResponse,
        FieldUpdateDocumentFieldFieldMetaEmailResponse,
        FieldUpdateDocumentFieldFieldMetaDateResponse,
        FieldUpdateDocumentFieldFieldMetaDropdownResponse,
        FieldUpdateDocumentFieldFieldMetaCheckboxResponse,
        FieldUpdateDocumentFieldFieldMetaTextResponse,
        FieldUpdateDocumentFieldFieldMetaNumberResponse,
    ],
)


class FieldUpdateDocumentFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldUpdateDocumentFieldTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldUpdateDocumentFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldUpdateDocumentFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldUpdateDocumentFieldTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldUpdateDocumentFieldFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
