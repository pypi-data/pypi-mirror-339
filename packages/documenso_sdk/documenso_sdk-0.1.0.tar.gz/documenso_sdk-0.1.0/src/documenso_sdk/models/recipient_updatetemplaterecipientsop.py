"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RecipientUpdateTemplateRecipientsRoleRequestBody(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateTemplateRecipientsAccessAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateTemplateRecipientsActionAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateTemplateRecipientsRecipientRequestBodyTypedDict(TypedDict):
    id: float
    r"""The ID of the recipient to update."""
    email: NotRequired[str]
    name: NotRequired[str]
    role: NotRequired[RecipientUpdateTemplateRecipientsRoleRequestBody]
    signing_order: NotRequired[float]
    access_auth: NotRequired[
        Nullable[RecipientUpdateTemplateRecipientsAccessAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: NotRequired[
        Nullable[RecipientUpdateTemplateRecipientsActionAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateTemplateRecipientsRecipientRequestBody(BaseModel):
    id: float
    r"""The ID of the recipient to update."""

    email: Optional[str] = None

    name: Optional[str] = None

    role: Optional[RecipientUpdateTemplateRecipientsRoleRequestBody] = None

    signing_order: Annotated[Optional[float], pydantic.Field(alias="signingOrder")] = (
        None
    )

    access_auth: Annotated[
        OptionalNullable[RecipientUpdateTemplateRecipientsAccessAuthRequestBody],
        pydantic.Field(alias="accessAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        OptionalNullable[RecipientUpdateTemplateRecipientsActionAuthRequestBody],
        pydantic.Field(alias="actionAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "email",
            "name",
            "role",
            "signingOrder",
            "accessAuth",
            "actionAuth",
        ]
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateTemplateRecipientsRequestTypedDict(TypedDict):
    template_id: float
    recipients: List[RecipientUpdateTemplateRecipientsRecipientRequestBodyTypedDict]


class RecipientUpdateTemplateRecipientsRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    recipients: List[RecipientUpdateTemplateRecipientsRecipientRequestBody]


class RecipientUpdateTemplateRecipientsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateTemplateRecipientsInternalServerErrorIssue(BaseModel):
    message: str


class RecipientUpdateTemplateRecipientsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[
        List[RecipientUpdateTemplateRecipientsInternalServerErrorIssue]
    ] = None


class RecipientUpdateTemplateRecipientsInternalServerError(Exception):
    r"""Internal server error"""

    data: RecipientUpdateTemplateRecipientsInternalServerErrorData

    def __init__(self, data: RecipientUpdateTemplateRecipientsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateTemplateRecipientsInternalServerErrorData
        )


class RecipientUpdateTemplateRecipientsBadRequestIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateTemplateRecipientsBadRequestIssue(BaseModel):
    message: str


class RecipientUpdateTemplateRecipientsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientUpdateTemplateRecipientsBadRequestIssue]] = None


class RecipientUpdateTemplateRecipientsBadRequestError(Exception):
    r"""Invalid input data"""

    data: RecipientUpdateTemplateRecipientsBadRequestErrorData

    def __init__(self, data: RecipientUpdateTemplateRecipientsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateTemplateRecipientsBadRequestErrorData
        )


class RecipientUpdateTemplateRecipientsRoleResponse(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateTemplateRecipientsReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientUpdateTemplateRecipientsSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientUpdateTemplateRecipientsSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientUpdateTemplateRecipientsAccessAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateTemplateRecipientsActionAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateTemplateRecipientsAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[RecipientUpdateTemplateRecipientsAccessAuthResponse]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[RecipientUpdateTemplateRecipientsActionAuthResponse]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateTemplateRecipientsAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientUpdateTemplateRecipientsAccessAuthResponse],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientUpdateTemplateRecipientsActionAuthResponse],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateTemplateRecipientsType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class RecipientUpdateTemplateRecipientsTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class RecipientUpdateTemplateRecipientsValue3TypedDict(TypedDict):
    value: str


class RecipientUpdateTemplateRecipientsValue3(BaseModel):
    value: str


class RecipientUpdateTemplateRecipientsFieldMetaDropdownTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateTemplateRecipientsValue3TypedDict]]
    default_value: NotRequired[str]


class RecipientUpdateTemplateRecipientsFieldMetaDropdown(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateTemplateRecipientsValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class RecipientUpdateTemplateRecipientsTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class RecipientUpdateTemplateRecipientsValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateTemplateRecipientsValue2(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateTemplateRecipientsFieldMetaCheckboxTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateTemplateRecipientsValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class RecipientUpdateTemplateRecipientsFieldMetaCheckbox(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateTemplateRecipientsValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class RecipientUpdateTemplateRecipientsTypeRadio(str, Enum):
    RADIO = "radio"


class RecipientUpdateTemplateRecipientsValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateTemplateRecipientsValue1(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateTemplateRecipientsFieldMetaRadioTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateTemplateRecipientsValue1TypedDict]]


class RecipientUpdateTemplateRecipientsFieldMetaRadio(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateTemplateRecipientsValue1]] = None


class RecipientUpdateTemplateRecipientsTypeNumber(str, Enum):
    NUMBER = "number"


class RecipientUpdateTemplateRecipientsTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaNumberTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign6]


class RecipientUpdateTemplateRecipientsFieldMetaNumber(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign6],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateTemplateRecipientsTypeText(str, Enum):
    TEXT = "text"


class RecipientUpdateTemplateRecipientsTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaTextTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign5]


class RecipientUpdateTemplateRecipientsFieldMetaText(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign5],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateTemplateRecipientsTypeDate(str, Enum):
    DATE = "date"


class RecipientUpdateTemplateRecipientsTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaDateTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign4]


class RecipientUpdateTemplateRecipientsFieldMetaDate(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign4],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateTemplateRecipientsTypeEmail(str, Enum):
    EMAIL = "email"


class RecipientUpdateTemplateRecipientsTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaEmailTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign3]


class RecipientUpdateTemplateRecipientsFieldMetaEmail(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign3],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateTemplateRecipientsTypeName(str, Enum):
    NAME = "name"


class RecipientUpdateTemplateRecipientsTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaNameTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign2]


class RecipientUpdateTemplateRecipientsFieldMetaName(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign2],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateTemplateRecipientsTypeInitials(str, Enum):
    INITIALS = "initials"


class RecipientUpdateTemplateRecipientsTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateTemplateRecipientsFieldMetaInitialsTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateTemplateRecipientsTextAlign1]


class RecipientUpdateTemplateRecipientsFieldMetaInitials(BaseModel):
    type: RecipientUpdateTemplateRecipientsTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateTemplateRecipientsTextAlign1],
        pydantic.Field(alias="textAlign"),
    ] = None


RecipientUpdateTemplateRecipientsFieldMetaUnionTypedDict = TypeAliasType(
    "RecipientUpdateTemplateRecipientsFieldMetaUnionTypedDict",
    Union[
        RecipientUpdateTemplateRecipientsFieldMetaRadioTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaInitialsTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaNameTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaEmailTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaDateTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaDropdownTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaCheckboxTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaTextTypedDict,
        RecipientUpdateTemplateRecipientsFieldMetaNumberTypedDict,
    ],
)


RecipientUpdateTemplateRecipientsFieldMetaUnion = TypeAliasType(
    "RecipientUpdateTemplateRecipientsFieldMetaUnion",
    Union[
        RecipientUpdateTemplateRecipientsFieldMetaRadio,
        RecipientUpdateTemplateRecipientsFieldMetaInitials,
        RecipientUpdateTemplateRecipientsFieldMetaName,
        RecipientUpdateTemplateRecipientsFieldMetaEmail,
        RecipientUpdateTemplateRecipientsFieldMetaDate,
        RecipientUpdateTemplateRecipientsFieldMetaDropdown,
        RecipientUpdateTemplateRecipientsFieldMetaCheckbox,
        RecipientUpdateTemplateRecipientsFieldMetaText,
        RecipientUpdateTemplateRecipientsFieldMetaNumber,
    ],
)


class RecipientUpdateTemplateRecipientsFieldTypedDict(TypedDict):
    type: RecipientUpdateTemplateRecipientsType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[RecipientUpdateTemplateRecipientsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class RecipientUpdateTemplateRecipientsField(BaseModel):
    type: RecipientUpdateTemplateRecipientsType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[RecipientUpdateTemplateRecipientsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateTemplateRecipientsRecipientResponseTypedDict(TypedDict):
    role: RecipientUpdateTemplateRecipientsRoleResponse
    read_status: RecipientUpdateTemplateRecipientsReadStatus
    signing_status: RecipientUpdateTemplateRecipientsSigningStatus
    send_status: RecipientUpdateTemplateRecipientsSendStatus
    id: float
    document_id: Nullable[float]
    template_id: Nullable[float]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientUpdateTemplateRecipientsAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]
    fields: List[RecipientUpdateTemplateRecipientsFieldTypedDict]


class RecipientUpdateTemplateRecipientsRecipientResponse(BaseModel):
    role: RecipientUpdateTemplateRecipientsRoleResponse

    read_status: Annotated[
        RecipientUpdateTemplateRecipientsReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientUpdateTemplateRecipientsSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientUpdateTemplateRecipientsSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: float

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientUpdateTemplateRecipientsAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    fields: List[RecipientUpdateTemplateRecipientsField]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateTemplateRecipientsResponseTypedDict(TypedDict):
    r"""Successful response"""

    recipients: List[RecipientUpdateTemplateRecipientsRecipientResponseTypedDict]


class RecipientUpdateTemplateRecipientsResponse(BaseModel):
    r"""Successful response"""

    recipients: List[RecipientUpdateTemplateRecipientsRecipientResponse]
