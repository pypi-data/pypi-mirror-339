"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from documenso_sdk.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldGetTemplateFieldRequestTypedDict(TypedDict):
    field_id: float


class FieldGetTemplateFieldRequest(BaseModel):
    field_id: Annotated[
        float,
        pydantic.Field(alias="fieldId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class FieldGetTemplateFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldGetTemplateFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldGetTemplateFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetTemplateFieldInternalServerErrorIssue]] = None


class FieldGetTemplateFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldGetTemplateFieldInternalServerErrorData

    def __init__(self, data: FieldGetTemplateFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldGetTemplateFieldInternalServerErrorData
        )


class FieldGetTemplateFieldNotFoundIssueTypedDict(TypedDict):
    message: str


class FieldGetTemplateFieldNotFoundIssue(BaseModel):
    message: str


class FieldGetTemplateFieldNotFoundErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetTemplateFieldNotFoundIssue]] = None


class FieldGetTemplateFieldNotFoundError(Exception):
    r"""Not found"""

    data: FieldGetTemplateFieldNotFoundErrorData

    def __init__(self, data: FieldGetTemplateFieldNotFoundErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, FieldGetTemplateFieldNotFoundErrorData)


class FieldGetTemplateFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldGetTemplateFieldBadRequestIssue(BaseModel):
    message: str


class FieldGetTemplateFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetTemplateFieldBadRequestIssue]] = None


class FieldGetTemplateFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldGetTemplateFieldBadRequestErrorData

    def __init__(self, data: FieldGetTemplateFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, FieldGetTemplateFieldBadRequestErrorData)


class FieldGetTemplateFieldType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldGetTemplateFieldTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldGetTemplateFieldValue3TypedDict(TypedDict):
    value: str


class FieldGetTemplateFieldValue3(BaseModel):
    value: str


class FieldGetTemplateFieldFieldMetaDropdownTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetTemplateFieldValue3TypedDict]]
    default_value: NotRequired[str]


class FieldGetTemplateFieldFieldMetaDropdown(BaseModel):
    type: FieldGetTemplateFieldTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetTemplateFieldValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldGetTemplateFieldTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldGetTemplateFieldValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldGetTemplateFieldValue2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldGetTemplateFieldFieldMetaCheckboxTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetTemplateFieldValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldGetTemplateFieldFieldMetaCheckbox(BaseModel):
    type: FieldGetTemplateFieldTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetTemplateFieldValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldGetTemplateFieldTypeRadio(str, Enum):
    RADIO = "radio"


class FieldGetTemplateFieldValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldGetTemplateFieldValue1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldGetTemplateFieldFieldMetaRadioTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetTemplateFieldValue1TypedDict]]


class FieldGetTemplateFieldFieldMetaRadio(BaseModel):
    type: FieldGetTemplateFieldTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetTemplateFieldValue1]] = None


class FieldGetTemplateFieldTypeNumber(str, Enum):
    NUMBER = "number"


class FieldGetTemplateFieldTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaNumberTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign6]


class FieldGetTemplateFieldFieldMetaNumber(BaseModel):
    type: FieldGetTemplateFieldTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign6], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetTemplateFieldTypeText(str, Enum):
    TEXT = "text"


class FieldGetTemplateFieldTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaTextTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign5]


class FieldGetTemplateFieldFieldMetaText(BaseModel):
    type: FieldGetTemplateFieldTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign5], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetTemplateFieldTypeDate(str, Enum):
    DATE = "date"


class FieldGetTemplateFieldTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaDateTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign4]


class FieldGetTemplateFieldFieldMetaDate(BaseModel):
    type: FieldGetTemplateFieldTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign4], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetTemplateFieldTypeEmail(str, Enum):
    EMAIL = "email"


class FieldGetTemplateFieldTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaEmailTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign3]


class FieldGetTemplateFieldFieldMetaEmail(BaseModel):
    type: FieldGetTemplateFieldTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign3], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetTemplateFieldTypeName(str, Enum):
    NAME = "name"


class FieldGetTemplateFieldTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaNameTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign2]


class FieldGetTemplateFieldFieldMetaName(BaseModel):
    type: FieldGetTemplateFieldTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign2], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetTemplateFieldTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldGetTemplateFieldTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetTemplateFieldFieldMetaInitialsTypedDict(TypedDict):
    type: FieldGetTemplateFieldTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetTemplateFieldTextAlign1]


class FieldGetTemplateFieldFieldMetaInitials(BaseModel):
    type: FieldGetTemplateFieldTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetTemplateFieldTextAlign1], pydantic.Field(alias="textAlign")
    ] = None


FieldGetTemplateFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldGetTemplateFieldFieldMetaUnionTypedDict",
    Union[
        FieldGetTemplateFieldFieldMetaRadioTypedDict,
        FieldGetTemplateFieldFieldMetaInitialsTypedDict,
        FieldGetTemplateFieldFieldMetaNameTypedDict,
        FieldGetTemplateFieldFieldMetaEmailTypedDict,
        FieldGetTemplateFieldFieldMetaDateTypedDict,
        FieldGetTemplateFieldFieldMetaDropdownTypedDict,
        FieldGetTemplateFieldFieldMetaCheckboxTypedDict,
        FieldGetTemplateFieldFieldMetaTextTypedDict,
        FieldGetTemplateFieldFieldMetaNumberTypedDict,
    ],
)


FieldGetTemplateFieldFieldMetaUnion = TypeAliasType(
    "FieldGetTemplateFieldFieldMetaUnion",
    Union[
        FieldGetTemplateFieldFieldMetaRadio,
        FieldGetTemplateFieldFieldMetaInitials,
        FieldGetTemplateFieldFieldMetaName,
        FieldGetTemplateFieldFieldMetaEmail,
        FieldGetTemplateFieldFieldMetaDate,
        FieldGetTemplateFieldFieldMetaDropdown,
        FieldGetTemplateFieldFieldMetaCheckbox,
        FieldGetTemplateFieldFieldMetaText,
        FieldGetTemplateFieldFieldMetaNumber,
    ],
)


class FieldGetTemplateFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldGetTemplateFieldType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldGetTemplateFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldGetTemplateFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldGetTemplateFieldType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldGetTemplateFieldFieldMetaUnion], pydantic.Field(alias="fieldMeta")
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
