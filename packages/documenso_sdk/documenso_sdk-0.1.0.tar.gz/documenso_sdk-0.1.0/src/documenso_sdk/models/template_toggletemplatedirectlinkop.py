"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, TypedDict


class TemplateToggleTemplateDirectLinkRequestTypedDict(TypedDict):
    template_id: float
    enabled: bool


class TemplateToggleTemplateDirectLinkRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    enabled: bool


class TemplateToggleTemplateDirectLinkInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class TemplateToggleTemplateDirectLinkInternalServerErrorIssue(BaseModel):
    message: str


class TemplateToggleTemplateDirectLinkInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[TemplateToggleTemplateDirectLinkInternalServerErrorIssue]] = (
        None
    )


class TemplateToggleTemplateDirectLinkInternalServerError(Exception):
    r"""Internal server error"""

    data: TemplateToggleTemplateDirectLinkInternalServerErrorData

    def __init__(self, data: TemplateToggleTemplateDirectLinkInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, TemplateToggleTemplateDirectLinkInternalServerErrorData
        )


class TemplateToggleTemplateDirectLinkBadRequestIssueTypedDict(TypedDict):
    message: str


class TemplateToggleTemplateDirectLinkBadRequestIssue(BaseModel):
    message: str


class TemplateToggleTemplateDirectLinkBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[TemplateToggleTemplateDirectLinkBadRequestIssue]] = None


class TemplateToggleTemplateDirectLinkBadRequestError(Exception):
    r"""Invalid input data"""

    data: TemplateToggleTemplateDirectLinkBadRequestErrorData

    def __init__(self, data: TemplateToggleTemplateDirectLinkBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, TemplateToggleTemplateDirectLinkBadRequestErrorData
        )


class TemplateToggleTemplateDirectLinkResponseTypedDict(TypedDict):
    r"""Successful response"""

    id: str
    template_id: float
    token: str
    created_at: str
    enabled: bool
    direct_template_recipient_id: float


class TemplateToggleTemplateDirectLinkResponse(BaseModel):
    r"""Successful response"""

    id: str

    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    token: str

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]

    enabled: bool

    direct_template_recipient_id: Annotated[
        float, pydantic.Field(alias="directTemplateRecipientId")
    ]
