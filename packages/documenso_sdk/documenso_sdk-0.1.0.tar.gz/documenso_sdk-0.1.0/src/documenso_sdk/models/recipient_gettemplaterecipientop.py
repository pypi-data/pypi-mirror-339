"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from documenso_sdk.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RecipientGetTemplateRecipientRequestTypedDict(TypedDict):
    recipient_id: float


class RecipientGetTemplateRecipientRequest(BaseModel):
    recipient_id: Annotated[
        float,
        pydantic.Field(alias="recipientId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class RecipientGetTemplateRecipientInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class RecipientGetTemplateRecipientInternalServerErrorIssue(BaseModel):
    message: str


class RecipientGetTemplateRecipientInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientGetTemplateRecipientInternalServerErrorIssue]] = None


class RecipientGetTemplateRecipientInternalServerError(Exception):
    r"""Internal server error"""

    data: RecipientGetTemplateRecipientInternalServerErrorData

    def __init__(self, data: RecipientGetTemplateRecipientInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientGetTemplateRecipientInternalServerErrorData
        )


class RecipientGetTemplateRecipientNotFoundIssueTypedDict(TypedDict):
    message: str


class RecipientGetTemplateRecipientNotFoundIssue(BaseModel):
    message: str


class RecipientGetTemplateRecipientNotFoundErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientGetTemplateRecipientNotFoundIssue]] = None


class RecipientGetTemplateRecipientNotFoundError(Exception):
    r"""Not found"""

    data: RecipientGetTemplateRecipientNotFoundErrorData

    def __init__(self, data: RecipientGetTemplateRecipientNotFoundErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientGetTemplateRecipientNotFoundErrorData
        )


class RecipientGetTemplateRecipientBadRequestIssueTypedDict(TypedDict):
    message: str


class RecipientGetTemplateRecipientBadRequestIssue(BaseModel):
    message: str


class RecipientGetTemplateRecipientBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientGetTemplateRecipientBadRequestIssue]] = None


class RecipientGetTemplateRecipientBadRequestError(Exception):
    r"""Invalid input data"""

    data: RecipientGetTemplateRecipientBadRequestErrorData

    def __init__(self, data: RecipientGetTemplateRecipientBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientGetTemplateRecipientBadRequestErrorData
        )


class RecipientGetTemplateRecipientRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientGetTemplateRecipientReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientGetTemplateRecipientSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientGetTemplateRecipientSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientGetTemplateRecipientAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientGetTemplateRecipientActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientGetTemplateRecipientAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[RecipientGetTemplateRecipientAccessAuth]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[RecipientGetTemplateRecipientActionAuth]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientGetTemplateRecipientAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientGetTemplateRecipientAccessAuth],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientGetTemplateRecipientActionAuth],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientGetTemplateRecipientType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class RecipientGetTemplateRecipientTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class RecipientGetTemplateRecipientValue3TypedDict(TypedDict):
    value: str


class RecipientGetTemplateRecipientValue3(BaseModel):
    value: str


class RecipientGetTemplateRecipientFieldMetaDropdownTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientGetTemplateRecipientValue3TypedDict]]
    default_value: NotRequired[str]


class RecipientGetTemplateRecipientFieldMetaDropdown(BaseModel):
    type: RecipientGetTemplateRecipientTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientGetTemplateRecipientValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class RecipientGetTemplateRecipientTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class RecipientGetTemplateRecipientValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientGetTemplateRecipientValue2(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientGetTemplateRecipientFieldMetaCheckboxTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientGetTemplateRecipientValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class RecipientGetTemplateRecipientFieldMetaCheckbox(BaseModel):
    type: RecipientGetTemplateRecipientTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientGetTemplateRecipientValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class RecipientGetTemplateRecipientTypeRadio(str, Enum):
    RADIO = "radio"


class RecipientGetTemplateRecipientValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientGetTemplateRecipientValue1(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientGetTemplateRecipientFieldMetaRadioTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientGetTemplateRecipientValue1TypedDict]]


class RecipientGetTemplateRecipientFieldMetaRadio(BaseModel):
    type: RecipientGetTemplateRecipientTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientGetTemplateRecipientValue1]] = None


class RecipientGetTemplateRecipientTypeNumber(str, Enum):
    NUMBER = "number"


class RecipientGetTemplateRecipientTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaNumberTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign6]


class RecipientGetTemplateRecipientFieldMetaNumber(BaseModel):
    type: RecipientGetTemplateRecipientTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign6],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientGetTemplateRecipientTypeText(str, Enum):
    TEXT = "text"


class RecipientGetTemplateRecipientTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaTextTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign5]


class RecipientGetTemplateRecipientFieldMetaText(BaseModel):
    type: RecipientGetTemplateRecipientTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign5],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientGetTemplateRecipientTypeDate(str, Enum):
    DATE = "date"


class RecipientGetTemplateRecipientTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaDateTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign4]


class RecipientGetTemplateRecipientFieldMetaDate(BaseModel):
    type: RecipientGetTemplateRecipientTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign4],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientGetTemplateRecipientTypeEmail(str, Enum):
    EMAIL = "email"


class RecipientGetTemplateRecipientTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaEmailTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign3]


class RecipientGetTemplateRecipientFieldMetaEmail(BaseModel):
    type: RecipientGetTemplateRecipientTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign3],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientGetTemplateRecipientTypeName(str, Enum):
    NAME = "name"


class RecipientGetTemplateRecipientTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaNameTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign2]


class RecipientGetTemplateRecipientFieldMetaName(BaseModel):
    type: RecipientGetTemplateRecipientTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign2],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientGetTemplateRecipientTypeInitials(str, Enum):
    INITIALS = "initials"


class RecipientGetTemplateRecipientTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientGetTemplateRecipientFieldMetaInitialsTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientGetTemplateRecipientTextAlign1]


class RecipientGetTemplateRecipientFieldMetaInitials(BaseModel):
    type: RecipientGetTemplateRecipientTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientGetTemplateRecipientTextAlign1],
        pydantic.Field(alias="textAlign"),
    ] = None


RecipientGetTemplateRecipientFieldMetaUnionTypedDict = TypeAliasType(
    "RecipientGetTemplateRecipientFieldMetaUnionTypedDict",
    Union[
        RecipientGetTemplateRecipientFieldMetaRadioTypedDict,
        RecipientGetTemplateRecipientFieldMetaInitialsTypedDict,
        RecipientGetTemplateRecipientFieldMetaNameTypedDict,
        RecipientGetTemplateRecipientFieldMetaEmailTypedDict,
        RecipientGetTemplateRecipientFieldMetaDateTypedDict,
        RecipientGetTemplateRecipientFieldMetaDropdownTypedDict,
        RecipientGetTemplateRecipientFieldMetaCheckboxTypedDict,
        RecipientGetTemplateRecipientFieldMetaTextTypedDict,
        RecipientGetTemplateRecipientFieldMetaNumberTypedDict,
    ],
)


RecipientGetTemplateRecipientFieldMetaUnion = TypeAliasType(
    "RecipientGetTemplateRecipientFieldMetaUnion",
    Union[
        RecipientGetTemplateRecipientFieldMetaRadio,
        RecipientGetTemplateRecipientFieldMetaInitials,
        RecipientGetTemplateRecipientFieldMetaName,
        RecipientGetTemplateRecipientFieldMetaEmail,
        RecipientGetTemplateRecipientFieldMetaDate,
        RecipientGetTemplateRecipientFieldMetaDropdown,
        RecipientGetTemplateRecipientFieldMetaCheckbox,
        RecipientGetTemplateRecipientFieldMetaText,
        RecipientGetTemplateRecipientFieldMetaNumber,
    ],
)


class RecipientGetTemplateRecipientFieldTypedDict(TypedDict):
    type: RecipientGetTemplateRecipientType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[RecipientGetTemplateRecipientFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class RecipientGetTemplateRecipientField(BaseModel):
    type: RecipientGetTemplateRecipientType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[RecipientGetTemplateRecipientFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientGetTemplateRecipientResponseTypedDict(TypedDict):
    r"""Successful response"""

    role: RecipientGetTemplateRecipientRole
    read_status: RecipientGetTemplateRecipientReadStatus
    signing_status: RecipientGetTemplateRecipientSigningStatus
    send_status: RecipientGetTemplateRecipientSendStatus
    id: float
    document_id: Nullable[float]
    template_id: Nullable[float]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientGetTemplateRecipientAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]
    fields: List[RecipientGetTemplateRecipientFieldTypedDict]


class RecipientGetTemplateRecipientResponse(BaseModel):
    r"""Successful response"""

    role: RecipientGetTemplateRecipientRole

    read_status: Annotated[
        RecipientGetTemplateRecipientReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientGetTemplateRecipientSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientGetTemplateRecipientSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: float

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientGetTemplateRecipientAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    fields: List[RecipientGetTemplateRecipientField]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
