"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from documenso_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class QueryParamType(str, Enum):
    r"""Filter templates by type."""

    PUBLIC = "PUBLIC"
    PRIVATE = "PRIVATE"


class TemplateFindTemplatesRequestTypedDict(TypedDict):
    query: NotRequired[str]
    r"""The search query."""
    page: NotRequired[float]
    r"""The pagination page number, starts at 1."""
    per_page: NotRequired[float]
    r"""The number of items per page."""
    type: NotRequired[QueryParamType]
    r"""Filter templates by type."""


class TemplateFindTemplatesRequest(BaseModel):
    query: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The search query."""

    page: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The pagination page number, starts at 1."""

    per_page: Annotated[
        Optional[float],
        pydantic.Field(alias="perPage"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The number of items per page."""

    type: Annotated[
        Optional[QueryParamType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter templates by type."""


class TemplateFindTemplatesInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class TemplateFindTemplatesInternalServerErrorIssue(BaseModel):
    message: str


class TemplateFindTemplatesInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[TemplateFindTemplatesInternalServerErrorIssue]] = None


class TemplateFindTemplatesInternalServerError(Exception):
    r"""Internal server error"""

    data: TemplateFindTemplatesInternalServerErrorData

    def __init__(self, data: TemplateFindTemplatesInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, TemplateFindTemplatesInternalServerErrorData
        )


class TemplateFindTemplatesNotFoundIssueTypedDict(TypedDict):
    message: str


class TemplateFindTemplatesNotFoundIssue(BaseModel):
    message: str


class TemplateFindTemplatesNotFoundErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[TemplateFindTemplatesNotFoundIssue]] = None


class TemplateFindTemplatesNotFoundError(Exception):
    r"""Not found"""

    data: TemplateFindTemplatesNotFoundErrorData

    def __init__(self, data: TemplateFindTemplatesNotFoundErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, TemplateFindTemplatesNotFoundErrorData)


class TemplateFindTemplatesBadRequestIssueTypedDict(TypedDict):
    message: str


class TemplateFindTemplatesBadRequestIssue(BaseModel):
    message: str


class TemplateFindTemplatesBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[TemplateFindTemplatesBadRequestIssue]] = None


class TemplateFindTemplatesBadRequestError(Exception):
    r"""Invalid input data"""

    data: TemplateFindTemplatesBadRequestErrorData

    def __init__(self, data: TemplateFindTemplatesBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, TemplateFindTemplatesBadRequestErrorData)


class TemplateFindTemplatesDataType(str, Enum):
    PUBLIC = "PUBLIC"
    PRIVATE = "PRIVATE"


class TemplateFindTemplatesVisibility(str, Enum):
    EVERYONE = "EVERYONE"
    MANAGER_AND_ABOVE = "MANAGER_AND_ABOVE"
    ADMIN = "ADMIN"


class TemplateFindTemplatesGlobalAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class TemplateFindTemplatesGlobalActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"


class TemplateFindTemplatesAuthOptionsTypedDict(TypedDict):
    global_access_auth: Nullable[TemplateFindTemplatesGlobalAccessAuth]
    r"""The type of authentication required for the recipient to access the document."""
    global_action_auth: Nullable[TemplateFindTemplatesGlobalActionAuth]
    r"""The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only."""


class TemplateFindTemplatesAuthOptions(BaseModel):
    global_access_auth: Annotated[
        Nullable[TemplateFindTemplatesGlobalAccessAuth],
        pydantic.Field(alias="globalAccessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    global_action_auth: Annotated[
        Nullable[TemplateFindTemplatesGlobalActionAuth],
        pydantic.Field(alias="globalActionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["globalAccessAuth", "globalActionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesTeamTypedDict(TypedDict):
    id: float
    url: str


class TemplateFindTemplatesTeam(BaseModel):
    id: float

    url: str


class TemplateFindTemplatesFieldType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class TemplateFindTemplatesTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class TemplateFindTemplatesValue3TypedDict(TypedDict):
    value: str


class TemplateFindTemplatesValue3(BaseModel):
    value: str


class TemplateFindTemplatesFieldMetaDropdownTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[TemplateFindTemplatesValue3TypedDict]]
    default_value: NotRequired[str]


class TemplateFindTemplatesFieldMetaDropdown(BaseModel):
    type: TemplateFindTemplatesTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[TemplateFindTemplatesValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class TemplateFindTemplatesTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class TemplateFindTemplatesValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class TemplateFindTemplatesValue2(BaseModel):
    id: float

    checked: bool

    value: str


class TemplateFindTemplatesFieldMetaCheckboxTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[TemplateFindTemplatesValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class TemplateFindTemplatesFieldMetaCheckbox(BaseModel):
    type: TemplateFindTemplatesTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[TemplateFindTemplatesValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class TemplateFindTemplatesTypeRadio(str, Enum):
    RADIO = "radio"


class TemplateFindTemplatesValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class TemplateFindTemplatesValue1(BaseModel):
    id: float

    checked: bool

    value: str


class TemplateFindTemplatesFieldMetaRadioTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[TemplateFindTemplatesValue1TypedDict]]


class TemplateFindTemplatesFieldMetaRadio(BaseModel):
    type: TemplateFindTemplatesTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[TemplateFindTemplatesValue1]] = None


class TemplateFindTemplatesTypeNumber(str, Enum):
    NUMBER = "number"


class TemplateFindTemplatesTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaNumberTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign6]


class TemplateFindTemplatesFieldMetaNumber(BaseModel):
    type: TemplateFindTemplatesTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign6], pydantic.Field(alias="textAlign")
    ] = None


class TemplateFindTemplatesTypeText(str, Enum):
    TEXT = "text"


class TemplateFindTemplatesTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaTextTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign5]


class TemplateFindTemplatesFieldMetaText(BaseModel):
    type: TemplateFindTemplatesTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign5], pydantic.Field(alias="textAlign")
    ] = None


class TemplateFindTemplatesTypeDate(str, Enum):
    DATE = "date"


class TemplateFindTemplatesTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaDateTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign4]


class TemplateFindTemplatesFieldMetaDate(BaseModel):
    type: TemplateFindTemplatesTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign4], pydantic.Field(alias="textAlign")
    ] = None


class TemplateFindTemplatesTypeEmail(str, Enum):
    EMAIL = "email"


class TemplateFindTemplatesTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaEmailTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign3]


class TemplateFindTemplatesFieldMetaEmail(BaseModel):
    type: TemplateFindTemplatesTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign3], pydantic.Field(alias="textAlign")
    ] = None


class TemplateFindTemplatesTypeName(str, Enum):
    NAME = "name"


class TemplateFindTemplatesTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaNameTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign2]


class TemplateFindTemplatesFieldMetaName(BaseModel):
    type: TemplateFindTemplatesTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign2], pydantic.Field(alias="textAlign")
    ] = None


class TemplateFindTemplatesTypeInitials(str, Enum):
    INITIALS = "initials"


class TemplateFindTemplatesTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class TemplateFindTemplatesFieldMetaInitialsTypedDict(TypedDict):
    type: TemplateFindTemplatesTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[TemplateFindTemplatesTextAlign1]


class TemplateFindTemplatesFieldMetaInitials(BaseModel):
    type: TemplateFindTemplatesTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[TemplateFindTemplatesTextAlign1], pydantic.Field(alias="textAlign")
    ] = None


TemplateFindTemplatesFieldMetaUnionTypedDict = TypeAliasType(
    "TemplateFindTemplatesFieldMetaUnionTypedDict",
    Union[
        TemplateFindTemplatesFieldMetaRadioTypedDict,
        TemplateFindTemplatesFieldMetaInitialsTypedDict,
        TemplateFindTemplatesFieldMetaNameTypedDict,
        TemplateFindTemplatesFieldMetaEmailTypedDict,
        TemplateFindTemplatesFieldMetaDateTypedDict,
        TemplateFindTemplatesFieldMetaDropdownTypedDict,
        TemplateFindTemplatesFieldMetaCheckboxTypedDict,
        TemplateFindTemplatesFieldMetaTextTypedDict,
        TemplateFindTemplatesFieldMetaNumberTypedDict,
    ],
)


TemplateFindTemplatesFieldMetaUnion = TypeAliasType(
    "TemplateFindTemplatesFieldMetaUnion",
    Union[
        TemplateFindTemplatesFieldMetaRadio,
        TemplateFindTemplatesFieldMetaInitials,
        TemplateFindTemplatesFieldMetaName,
        TemplateFindTemplatesFieldMetaEmail,
        TemplateFindTemplatesFieldMetaDate,
        TemplateFindTemplatesFieldMetaDropdown,
        TemplateFindTemplatesFieldMetaCheckbox,
        TemplateFindTemplatesFieldMetaText,
        TemplateFindTemplatesFieldMetaNumber,
    ],
)


class TemplateFindTemplatesFieldTypedDict(TypedDict):
    type: TemplateFindTemplatesFieldType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[TemplateFindTemplatesFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class TemplateFindTemplatesField(BaseModel):
    type: TemplateFindTemplatesFieldType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[TemplateFindTemplatesFieldMetaUnion], pydantic.Field(alias="fieldMeta")
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class TemplateFindTemplatesReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class TemplateFindTemplatesSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class TemplateFindTemplatesSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class TemplateFindTemplatesAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class TemplateFindTemplatesActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class TemplateFindTemplatesRecipientAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[TemplateFindTemplatesAccessAuth]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[TemplateFindTemplatesActionAuth]
    r"""The type of authentication required for the recipient to sign the document."""


class TemplateFindTemplatesRecipientAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[TemplateFindTemplatesAccessAuth], pydantic.Field(alias="accessAuth")
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[TemplateFindTemplatesActionAuth], pydantic.Field(alias="actionAuth")
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesRecipientTypedDict(TypedDict):
    role: TemplateFindTemplatesRole
    read_status: TemplateFindTemplatesReadStatus
    signing_status: TemplateFindTemplatesSigningStatus
    send_status: TemplateFindTemplatesSendStatus
    id: float
    document_id: Nullable[float]
    template_id: Nullable[float]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[TemplateFindTemplatesRecipientAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]


class TemplateFindTemplatesRecipient(BaseModel):
    role: TemplateFindTemplatesRole

    read_status: Annotated[
        TemplateFindTemplatesReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        TemplateFindTemplatesSigningStatus, pydantic.Field(alias="signingStatus")
    ]

    send_status: Annotated[
        TemplateFindTemplatesSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: float

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[TemplateFindTemplatesRecipientAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesSigningOrder(str, Enum):
    PARALLEL = "PARALLEL"
    SEQUENTIAL = "SEQUENTIAL"


class TemplateFindTemplatesDistributionMethod(str, Enum):
    EMAIL = "EMAIL"
    NONE = "NONE"


class TemplateFindTemplatesTemplateMetaTypedDict(TypedDict):
    signing_order: Nullable[TemplateFindTemplatesSigningOrder]
    distribution_method: TemplateFindTemplatesDistributionMethod


class TemplateFindTemplatesTemplateMeta(BaseModel):
    signing_order: Annotated[
        Nullable[TemplateFindTemplatesSigningOrder],
        pydantic.Field(alias="signingOrder"),
    ]

    distribution_method: Annotated[
        TemplateFindTemplatesDistributionMethod,
        pydantic.Field(alias="distributionMethod"),
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["signingOrder"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesDirectLinkTypedDict(TypedDict):
    token: str
    enabled: bool


class TemplateFindTemplatesDirectLink(BaseModel):
    token: str

    enabled: bool


class TemplateFindTemplatesDataTypedDict(TypedDict):
    type: TemplateFindTemplatesDataType
    visibility: TemplateFindTemplatesVisibility
    id: float
    external_id: Nullable[str]
    title: str
    user_id: float
    team_id: Nullable[float]
    auth_options: Nullable[TemplateFindTemplatesAuthOptionsTypedDict]
    template_document_data_id: str
    created_at: str
    updated_at: str
    public_title: str
    public_description: str
    team: Nullable[TemplateFindTemplatesTeamTypedDict]
    fields: List[TemplateFindTemplatesFieldTypedDict]
    recipients: List[TemplateFindTemplatesRecipientTypedDict]
    template_meta: Nullable[TemplateFindTemplatesTemplateMetaTypedDict]
    direct_link: Nullable[TemplateFindTemplatesDirectLinkTypedDict]


class TemplateFindTemplatesData(BaseModel):
    type: TemplateFindTemplatesDataType

    visibility: TemplateFindTemplatesVisibility

    id: float

    external_id: Annotated[Nullable[str], pydantic.Field(alias="externalId")]

    title: str

    user_id: Annotated[float, pydantic.Field(alias="userId")]

    team_id: Annotated[Nullable[float], pydantic.Field(alias="teamId")]

    auth_options: Annotated[
        Nullable[TemplateFindTemplatesAuthOptions], pydantic.Field(alias="authOptions")
    ]

    template_document_data_id: Annotated[
        str, pydantic.Field(alias="templateDocumentDataId")
    ]

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]

    updated_at: Annotated[str, pydantic.Field(alias="updatedAt")]

    public_title: Annotated[str, pydantic.Field(alias="publicTitle")]

    public_description: Annotated[str, pydantic.Field(alias="publicDescription")]

    team: Nullable[TemplateFindTemplatesTeam]

    fields: List[TemplateFindTemplatesField]

    recipients: List[TemplateFindTemplatesRecipient]

    template_meta: Annotated[
        Nullable[TemplateFindTemplatesTemplateMeta],
        pydantic.Field(alias="templateMeta"),
    ]

    direct_link: Annotated[
        Nullable[TemplateFindTemplatesDirectLink], pydantic.Field(alias="directLink")
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "externalId",
            "teamId",
            "authOptions",
            "team",
            "templateMeta",
            "directLink",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TemplateFindTemplatesResponseTypedDict(TypedDict):
    r"""Successful response"""

    data: List[TemplateFindTemplatesDataTypedDict]
    count: float
    r"""The total number of items."""
    current_page: float
    r"""The current page number, starts at 1."""
    per_page: float
    r"""The number of items per page."""
    total_pages: float
    r"""The total number of pages."""


class TemplateFindTemplatesResponse(BaseModel):
    r"""Successful response"""

    data: List[TemplateFindTemplatesData]

    count: float
    r"""The total number of items."""

    current_page: Annotated[float, pydantic.Field(alias="currentPage")]
    r"""The current page number, starts at 1."""

    per_page: Annotated[float, pydantic.Field(alias="perPage")]
    r"""The number of items per page."""

    total_pages: Annotated[float, pydantic.Field(alias="totalPages")]
    r"""The total number of pages."""
