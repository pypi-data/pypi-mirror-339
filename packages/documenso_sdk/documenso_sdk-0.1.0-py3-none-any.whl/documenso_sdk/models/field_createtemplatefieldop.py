"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldCreateTemplateFieldTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldValueDropdownTypedDict(TypedDict):
    value: str


class FieldCreateTemplateFieldValueDropdown(BaseModel):
    value: str


class FieldCreateTemplateFieldFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldFieldMetaDropdownRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldFieldDropdownTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeDropdownRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldFieldMetaDropdownRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldFieldDropdown(BaseModel):
    type: FieldCreateTemplateFieldTypeDropdownRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldCreateTemplateFieldTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldFieldCheckboxTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldFieldMetaCheckboxRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldFieldCheckbox(BaseModel):
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldCreateTemplateFieldTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldCreateTemplateFieldValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueRadioTypedDict]]


class FieldCreateTemplateFieldFieldMetaRadioRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueRadio]] = None


class FieldCreateTemplateFieldFieldRadioTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeRadioRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaRadioRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldRadio(BaseModel):
    type: FieldCreateTemplateFieldTypeRadioRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldCreateTemplateFieldTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldCreateTemplateFieldTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignNumber]


class FieldCreateTemplateFieldFieldMetaNumberRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldNumberTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeNumberRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaNumberRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldNumber(BaseModel):
    type: FieldCreateTemplateFieldTypeNumberRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldCreateTemplateFieldTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldCreateTemplateFieldTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignText]


class FieldCreateTemplateFieldFieldMetaTextRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldTextTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeTextRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaTextRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldText(BaseModel):
    type: FieldCreateTemplateFieldTypeTextRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldCreateTemplateFieldTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldCreateTemplateFieldTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignDate]


class FieldCreateTemplateFieldFieldMetaDateRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldDateTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeDateRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaDateRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldDate(BaseModel):
    type: FieldCreateTemplateFieldTypeDateRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldCreateTemplateFieldTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldCreateTemplateFieldTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignEmail]


class FieldCreateTemplateFieldFieldMetaEmailRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldEmailTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeEmailRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaEmailRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldEmail(BaseModel):
    type: FieldCreateTemplateFieldTypeEmailRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldCreateTemplateFieldTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldCreateTemplateFieldTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignName]


class FieldCreateTemplateFieldFieldMetaNameRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldNameTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeNameRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldFieldMetaNameRequestBodyTypedDict]


class FieldCreateTemplateFieldFieldName(BaseModel):
    type: FieldCreateTemplateFieldTypeNameRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldCreateTemplateFieldTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignInitials]


class FieldCreateTemplateFieldFieldMetaInitialsRequestBody(BaseModel):
    type: FieldCreateTemplateFieldTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldInitialsTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeInitialsRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldFieldMetaInitialsRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldFieldInitials(BaseModel):
    type: FieldCreateTemplateFieldTypeInitialsRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldCreateTemplateFieldFieldFreeSignatureTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeFreeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldFieldFreeSignature(BaseModel):
    type: FieldCreateTemplateFieldTypeFreeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldCreateTemplateFieldFieldSignatureTypedDict(TypedDict):
    type: FieldCreateTemplateFieldTypeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldFieldSignature(BaseModel):
    type: FieldCreateTemplateFieldTypeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


FieldCreateTemplateFieldFieldUnionTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldFieldUnionTypedDict",
    Union[
        FieldCreateTemplateFieldFieldSignatureTypedDict,
        FieldCreateTemplateFieldFieldFreeSignatureTypedDict,
        FieldCreateTemplateFieldFieldInitialsTypedDict,
        FieldCreateTemplateFieldFieldNameTypedDict,
        FieldCreateTemplateFieldFieldEmailTypedDict,
        FieldCreateTemplateFieldFieldDateTypedDict,
        FieldCreateTemplateFieldFieldTextTypedDict,
        FieldCreateTemplateFieldFieldNumberTypedDict,
        FieldCreateTemplateFieldFieldRadioTypedDict,
        FieldCreateTemplateFieldFieldCheckboxTypedDict,
        FieldCreateTemplateFieldFieldDropdownTypedDict,
    ],
)


FieldCreateTemplateFieldFieldUnion = TypeAliasType(
    "FieldCreateTemplateFieldFieldUnion",
    Union[
        FieldCreateTemplateFieldFieldSignature,
        FieldCreateTemplateFieldFieldFreeSignature,
        FieldCreateTemplateFieldFieldInitials,
        FieldCreateTemplateFieldFieldName,
        FieldCreateTemplateFieldFieldEmail,
        FieldCreateTemplateFieldFieldDate,
        FieldCreateTemplateFieldFieldText,
        FieldCreateTemplateFieldFieldNumber,
        FieldCreateTemplateFieldFieldRadio,
        FieldCreateTemplateFieldFieldCheckbox,
        FieldCreateTemplateFieldFieldDropdown,
    ],
)


class FieldCreateTemplateFieldRequestTypedDict(TypedDict):
    template_id: float
    field: FieldCreateTemplateFieldFieldUnionTypedDict


class FieldCreateTemplateFieldRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    field: FieldCreateTemplateFieldFieldUnion


class FieldCreateTemplateFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldCreateTemplateFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldInternalServerErrorIssue]] = None


class FieldCreateTemplateFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldCreateTemplateFieldInternalServerErrorData

    def __init__(self, data: FieldCreateTemplateFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldInternalServerErrorData
        )


class FieldCreateTemplateFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldBadRequestIssue(BaseModel):
    message: str


class FieldCreateTemplateFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldBadRequestIssue]] = None


class FieldCreateTemplateFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldCreateTemplateFieldBadRequestErrorData

    def __init__(self, data: FieldCreateTemplateFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldBadRequestErrorData
        )


class FieldCreateTemplateFieldTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldValueResponse3TypedDict(TypedDict):
    value: str


class FieldCreateTemplateFieldValueResponse3(BaseModel):
    value: str


class FieldCreateTemplateFieldFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldFieldMetaDropdownResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldFieldMetaCheckboxResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldCreateTemplateFieldValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldValueResponse1TypedDict]]


class FieldCreateTemplateFieldFieldMetaRadioResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldValueResponse1]] = None


class FieldCreateTemplateFieldFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldCreateTemplateFieldTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse6]


class FieldCreateTemplateFieldFieldMetaNumberResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldCreateTemplateFieldTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse5]


class FieldCreateTemplateFieldFieldMetaTextResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldCreateTemplateFieldTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse4]


class FieldCreateTemplateFieldFieldMetaDateResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldCreateTemplateFieldTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse3]


class FieldCreateTemplateFieldFieldMetaEmailResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldCreateTemplateFieldTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse2]


class FieldCreateTemplateFieldFieldMetaNameResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldTextAlignResponse1]


class FieldCreateTemplateFieldFieldMetaInitialsResponse(BaseModel):
    type: FieldCreateTemplateFieldFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldCreateTemplateFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldFieldMetaUnionTypedDict",
    Union[
        FieldCreateTemplateFieldFieldMetaRadioResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaInitialsResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaNameResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaEmailResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaDateResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaDropdownResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaCheckboxResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaTextResponseTypedDict,
        FieldCreateTemplateFieldFieldMetaNumberResponseTypedDict,
    ],
)


FieldCreateTemplateFieldFieldMetaUnion = TypeAliasType(
    "FieldCreateTemplateFieldFieldMetaUnion",
    Union[
        FieldCreateTemplateFieldFieldMetaRadioResponse,
        FieldCreateTemplateFieldFieldMetaInitialsResponse,
        FieldCreateTemplateFieldFieldMetaNameResponse,
        FieldCreateTemplateFieldFieldMetaEmailResponse,
        FieldCreateTemplateFieldFieldMetaDateResponse,
        FieldCreateTemplateFieldFieldMetaDropdownResponse,
        FieldCreateTemplateFieldFieldMetaCheckboxResponse,
        FieldCreateTemplateFieldFieldMetaTextResponse,
        FieldCreateTemplateFieldFieldMetaNumberResponse,
    ],
)


class FieldCreateTemplateFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldCreateTemplateFieldTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldCreateTemplateFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldCreateTemplateFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldCreateTemplateFieldTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldCreateTemplateFieldFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
