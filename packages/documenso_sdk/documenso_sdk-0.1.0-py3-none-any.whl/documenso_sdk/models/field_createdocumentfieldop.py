"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldCreateDocumentFieldTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldCreateDocumentFieldTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateDocumentFieldValueDropdownTypedDict(TypedDict):
    value: str


class FieldCreateDocumentFieldValueDropdown(BaseModel):
    value: str


class FieldCreateDocumentFieldFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldCreateDocumentFieldFieldMetaDropdownRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateDocumentFieldFieldDropdownTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeDropdownRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldFieldMetaDropdownRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldFieldDropdown(BaseModel):
    type: FieldCreateDocumentFieldTypeDropdownRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldCreateDocumentFieldTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateDocumentFieldValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateDocumentFieldFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateDocumentFieldFieldCheckboxTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeCheckboxRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldFieldMetaCheckboxRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldFieldCheckbox(BaseModel):
    type: FieldCreateDocumentFieldTypeCheckboxRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldCreateDocumentFieldTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldCreateDocumentFieldValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueRadioTypedDict]]


class FieldCreateDocumentFieldFieldMetaRadioRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueRadio]] = None


class FieldCreateDocumentFieldFieldRadioTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeRadioRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaRadioRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldRadio(BaseModel):
    type: FieldCreateDocumentFieldTypeRadioRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldCreateDocumentFieldTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldCreateDocumentFieldTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignNumber]


class FieldCreateDocumentFieldFieldMetaNumberRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldNumberTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeNumberRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaNumberRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldNumber(BaseModel):
    type: FieldCreateDocumentFieldTypeNumberRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldCreateDocumentFieldTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldCreateDocumentFieldTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignText]


class FieldCreateDocumentFieldFieldMetaTextRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldTextTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeTextRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaTextRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldText(BaseModel):
    type: FieldCreateDocumentFieldTypeTextRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldCreateDocumentFieldTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldCreateDocumentFieldTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignDate]


class FieldCreateDocumentFieldFieldMetaDateRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldDateTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeDateRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaDateRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldDate(BaseModel):
    type: FieldCreateDocumentFieldTypeDateRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldCreateDocumentFieldTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldCreateDocumentFieldTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignEmail]


class FieldCreateDocumentFieldFieldMetaEmailRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldEmailTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeEmailRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaEmailRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldEmail(BaseModel):
    type: FieldCreateDocumentFieldTypeEmailRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldCreateDocumentFieldTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldCreateDocumentFieldTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignName]


class FieldCreateDocumentFieldFieldMetaNameRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldNameTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeNameRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldFieldMetaNameRequestBodyTypedDict]


class FieldCreateDocumentFieldFieldName(BaseModel):
    type: FieldCreateDocumentFieldTypeNameRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldCreateDocumentFieldTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldCreateDocumentFieldTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignInitials]


class FieldCreateDocumentFieldFieldMetaInitialsRequestBody(BaseModel):
    type: FieldCreateDocumentFieldTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldInitialsTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeInitialsRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldFieldMetaInitialsRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldFieldInitials(BaseModel):
    type: FieldCreateDocumentFieldTypeInitialsRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldCreateDocumentFieldFieldFreeSignatureTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeFreeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldFieldFreeSignature(BaseModel):
    type: FieldCreateDocumentFieldTypeFreeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldCreateDocumentFieldFieldSignatureTypedDict(TypedDict):
    type: FieldCreateDocumentFieldTypeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldFieldSignature(BaseModel):
    type: FieldCreateDocumentFieldTypeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


FieldCreateDocumentFieldFieldUnionTypedDict = TypeAliasType(
    "FieldCreateDocumentFieldFieldUnionTypedDict",
    Union[
        FieldCreateDocumentFieldFieldSignatureTypedDict,
        FieldCreateDocumentFieldFieldFreeSignatureTypedDict,
        FieldCreateDocumentFieldFieldInitialsTypedDict,
        FieldCreateDocumentFieldFieldNameTypedDict,
        FieldCreateDocumentFieldFieldEmailTypedDict,
        FieldCreateDocumentFieldFieldDateTypedDict,
        FieldCreateDocumentFieldFieldTextTypedDict,
        FieldCreateDocumentFieldFieldNumberTypedDict,
        FieldCreateDocumentFieldFieldRadioTypedDict,
        FieldCreateDocumentFieldFieldCheckboxTypedDict,
        FieldCreateDocumentFieldFieldDropdownTypedDict,
    ],
)


FieldCreateDocumentFieldFieldUnion = TypeAliasType(
    "FieldCreateDocumentFieldFieldUnion",
    Union[
        FieldCreateDocumentFieldFieldSignature,
        FieldCreateDocumentFieldFieldFreeSignature,
        FieldCreateDocumentFieldFieldInitials,
        FieldCreateDocumentFieldFieldName,
        FieldCreateDocumentFieldFieldEmail,
        FieldCreateDocumentFieldFieldDate,
        FieldCreateDocumentFieldFieldText,
        FieldCreateDocumentFieldFieldNumber,
        FieldCreateDocumentFieldFieldRadio,
        FieldCreateDocumentFieldFieldCheckbox,
        FieldCreateDocumentFieldFieldDropdown,
    ],
)


class FieldCreateDocumentFieldRequestTypedDict(TypedDict):
    document_id: float
    field: FieldCreateDocumentFieldFieldUnionTypedDict


class FieldCreateDocumentFieldRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    field: FieldCreateDocumentFieldFieldUnion


class FieldCreateDocumentFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldCreateDocumentFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldCreateDocumentFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateDocumentFieldInternalServerErrorIssue]] = None


class FieldCreateDocumentFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldCreateDocumentFieldInternalServerErrorData

    def __init__(self, data: FieldCreateDocumentFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateDocumentFieldInternalServerErrorData
        )


class FieldCreateDocumentFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldCreateDocumentFieldBadRequestIssue(BaseModel):
    message: str


class FieldCreateDocumentFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateDocumentFieldBadRequestIssue]] = None


class FieldCreateDocumentFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldCreateDocumentFieldBadRequestErrorData

    def __init__(self, data: FieldCreateDocumentFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateDocumentFieldBadRequestErrorData
        )


class FieldCreateDocumentFieldTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldCreateDocumentFieldFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateDocumentFieldValueResponse3TypedDict(TypedDict):
    value: str


class FieldCreateDocumentFieldValueResponse3(BaseModel):
    value: str


class FieldCreateDocumentFieldFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldCreateDocumentFieldFieldMetaDropdownResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateDocumentFieldFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateDocumentFieldValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateDocumentFieldFieldMetaCheckboxResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldCreateDocumentFieldValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldValueResponse1TypedDict]]


class FieldCreateDocumentFieldFieldMetaRadioResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldValueResponse1]] = None


class FieldCreateDocumentFieldFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldCreateDocumentFieldTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse6]


class FieldCreateDocumentFieldFieldMetaNumberResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldCreateDocumentFieldTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse5]


class FieldCreateDocumentFieldFieldMetaTextResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldCreateDocumentFieldTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse4]


class FieldCreateDocumentFieldFieldMetaDateResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldCreateDocumentFieldTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse3]


class FieldCreateDocumentFieldFieldMetaEmailResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldCreateDocumentFieldTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse2]


class FieldCreateDocumentFieldFieldMetaNameResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldCreateDocumentFieldTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldTextAlignResponse1]


class FieldCreateDocumentFieldFieldMetaInitialsResponse(BaseModel):
    type: FieldCreateDocumentFieldFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldCreateDocumentFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldCreateDocumentFieldFieldMetaUnionTypedDict",
    Union[
        FieldCreateDocumentFieldFieldMetaRadioResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaInitialsResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaNameResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaEmailResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaDateResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaDropdownResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaCheckboxResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaTextResponseTypedDict,
        FieldCreateDocumentFieldFieldMetaNumberResponseTypedDict,
    ],
)


FieldCreateDocumentFieldFieldMetaUnion = TypeAliasType(
    "FieldCreateDocumentFieldFieldMetaUnion",
    Union[
        FieldCreateDocumentFieldFieldMetaRadioResponse,
        FieldCreateDocumentFieldFieldMetaInitialsResponse,
        FieldCreateDocumentFieldFieldMetaNameResponse,
        FieldCreateDocumentFieldFieldMetaEmailResponse,
        FieldCreateDocumentFieldFieldMetaDateResponse,
        FieldCreateDocumentFieldFieldMetaDropdownResponse,
        FieldCreateDocumentFieldFieldMetaCheckboxResponse,
        FieldCreateDocumentFieldFieldMetaTextResponse,
        FieldCreateDocumentFieldFieldMetaNumberResponse,
    ],
)


class FieldCreateDocumentFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldCreateDocumentFieldTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldCreateDocumentFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldCreateDocumentFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldCreateDocumentFieldTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldCreateDocumentFieldFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
