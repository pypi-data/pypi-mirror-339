"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldUpdateTemplateFieldTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldUpdateTemplateFieldTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateTemplateFieldValueDropdownTypedDict(TypedDict):
    value: str


class FieldUpdateTemplateFieldValueDropdown(BaseModel):
    value: str


class FieldUpdateTemplateFieldFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldUpdateTemplateFieldFieldMetaDropdownRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateTemplateFieldFieldDropdownTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeDropdownRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldFieldMetaDropdownRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldDropdown(BaseModel):
    type: FieldUpdateTemplateFieldTypeDropdownRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldUpdateTemplateFieldTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateTemplateFieldValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateTemplateFieldFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateTemplateFieldFieldCheckboxTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeCheckboxRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldFieldMetaCheckboxRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldCheckbox(BaseModel):
    type: FieldUpdateTemplateFieldTypeCheckboxRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldUpdateTemplateFieldTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldUpdateTemplateFieldValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueRadioTypedDict]]


class FieldUpdateTemplateFieldFieldMetaRadioRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueRadio]] = None


class FieldUpdateTemplateFieldFieldRadioTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeRadioRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaRadioRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldRadio(BaseModel):
    type: FieldUpdateTemplateFieldTypeRadioRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldUpdateTemplateFieldTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldUpdateTemplateFieldTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignNumber]


class FieldUpdateTemplateFieldFieldMetaNumberRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldNumberTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeNumberRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaNumberRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldNumber(BaseModel):
    type: FieldUpdateTemplateFieldTypeNumberRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldUpdateTemplateFieldTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldUpdateTemplateFieldTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignText]


class FieldUpdateTemplateFieldFieldMetaTextRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldTextTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeTextRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaTextRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldText(BaseModel):
    type: FieldUpdateTemplateFieldTypeTextRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldUpdateTemplateFieldTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldUpdateTemplateFieldTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignDate]


class FieldUpdateTemplateFieldFieldMetaDateRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldDateTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeDateRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaDateRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldDate(BaseModel):
    type: FieldUpdateTemplateFieldTypeDateRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldUpdateTemplateFieldTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldUpdateTemplateFieldTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignEmail]


class FieldUpdateTemplateFieldFieldMetaEmailRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldEmailTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeEmailRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaEmailRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldEmail(BaseModel):
    type: FieldUpdateTemplateFieldTypeEmailRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldUpdateTemplateFieldTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldUpdateTemplateFieldTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignName]


class FieldUpdateTemplateFieldFieldMetaNameRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldNameTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeNameRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldFieldMetaNameRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldName(BaseModel):
    type: FieldUpdateTemplateFieldTypeNameRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldUpdateTemplateFieldTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldUpdateTemplateFieldTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignInitials]


class FieldUpdateTemplateFieldFieldMetaInitialsRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldInitialsTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeInitialsRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldFieldMetaInitialsRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldInitials(BaseModel):
    type: FieldUpdateTemplateFieldTypeInitialsRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldUpdateTemplateFieldFieldFreeSignatureTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeFreeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldFreeSignature(BaseModel):
    type: FieldUpdateTemplateFieldTypeFreeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldUpdateTemplateFieldFieldSignatureTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldTypeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldFieldSignature(BaseModel):
    type: FieldUpdateTemplateFieldTypeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


FieldUpdateTemplateFieldFieldUnionTypedDict = TypeAliasType(
    "FieldUpdateTemplateFieldFieldUnionTypedDict",
    Union[
        FieldUpdateTemplateFieldFieldSignatureTypedDict,
        FieldUpdateTemplateFieldFieldFreeSignatureTypedDict,
        FieldUpdateTemplateFieldFieldInitialsTypedDict,
        FieldUpdateTemplateFieldFieldNameTypedDict,
        FieldUpdateTemplateFieldFieldEmailTypedDict,
        FieldUpdateTemplateFieldFieldDateTypedDict,
        FieldUpdateTemplateFieldFieldTextTypedDict,
        FieldUpdateTemplateFieldFieldNumberTypedDict,
        FieldUpdateTemplateFieldFieldRadioTypedDict,
        FieldUpdateTemplateFieldFieldCheckboxTypedDict,
        FieldUpdateTemplateFieldFieldDropdownTypedDict,
    ],
)


FieldUpdateTemplateFieldFieldUnion = TypeAliasType(
    "FieldUpdateTemplateFieldFieldUnion",
    Union[
        FieldUpdateTemplateFieldFieldSignature,
        FieldUpdateTemplateFieldFieldFreeSignature,
        FieldUpdateTemplateFieldFieldInitials,
        FieldUpdateTemplateFieldFieldName,
        FieldUpdateTemplateFieldFieldEmail,
        FieldUpdateTemplateFieldFieldDate,
        FieldUpdateTemplateFieldFieldText,
        FieldUpdateTemplateFieldFieldNumber,
        FieldUpdateTemplateFieldFieldRadio,
        FieldUpdateTemplateFieldFieldCheckbox,
        FieldUpdateTemplateFieldFieldDropdown,
    ],
)


class FieldUpdateTemplateFieldRequestTypedDict(TypedDict):
    template_id: float
    field: FieldUpdateTemplateFieldFieldUnionTypedDict


class FieldUpdateTemplateFieldRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    field: FieldUpdateTemplateFieldFieldUnion


class FieldUpdateTemplateFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldUpdateTemplateFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldUpdateTemplateFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateTemplateFieldInternalServerErrorIssue]] = None


class FieldUpdateTemplateFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldUpdateTemplateFieldInternalServerErrorData

    def __init__(self, data: FieldUpdateTemplateFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateTemplateFieldInternalServerErrorData
        )


class FieldUpdateTemplateFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldUpdateTemplateFieldBadRequestIssue(BaseModel):
    message: str


class FieldUpdateTemplateFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateTemplateFieldBadRequestIssue]] = None


class FieldUpdateTemplateFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldUpdateTemplateFieldBadRequestErrorData

    def __init__(self, data: FieldUpdateTemplateFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateTemplateFieldBadRequestErrorData
        )


class FieldUpdateTemplateFieldTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldUpdateTemplateFieldFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateTemplateFieldValueResponse3TypedDict(TypedDict):
    value: str


class FieldUpdateTemplateFieldValueResponse3(BaseModel):
    value: str


class FieldUpdateTemplateFieldFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldUpdateTemplateFieldFieldMetaDropdownResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateTemplateFieldFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateTemplateFieldValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateTemplateFieldFieldMetaCheckboxResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldUpdateTemplateFieldValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldValueResponse1TypedDict]]


class FieldUpdateTemplateFieldFieldMetaRadioResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldValueResponse1]] = None


class FieldUpdateTemplateFieldFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldUpdateTemplateFieldTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse6]


class FieldUpdateTemplateFieldFieldMetaNumberResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldUpdateTemplateFieldTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse5]


class FieldUpdateTemplateFieldFieldMetaTextResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldUpdateTemplateFieldTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse4]


class FieldUpdateTemplateFieldFieldMetaDateResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldUpdateTemplateFieldTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse3]


class FieldUpdateTemplateFieldFieldMetaEmailResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldUpdateTemplateFieldTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse2]


class FieldUpdateTemplateFieldFieldMetaNameResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldUpdateTemplateFieldTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldTextAlignResponse1]


class FieldUpdateTemplateFieldFieldMetaInitialsResponse(BaseModel):
    type: FieldUpdateTemplateFieldFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldUpdateTemplateFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldUpdateTemplateFieldFieldMetaUnionTypedDict",
    Union[
        FieldUpdateTemplateFieldFieldMetaRadioResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaInitialsResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaNameResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaEmailResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaDateResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaDropdownResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaCheckboxResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaTextResponseTypedDict,
        FieldUpdateTemplateFieldFieldMetaNumberResponseTypedDict,
    ],
)


FieldUpdateTemplateFieldFieldMetaUnion = TypeAliasType(
    "FieldUpdateTemplateFieldFieldMetaUnion",
    Union[
        FieldUpdateTemplateFieldFieldMetaRadioResponse,
        FieldUpdateTemplateFieldFieldMetaInitialsResponse,
        FieldUpdateTemplateFieldFieldMetaNameResponse,
        FieldUpdateTemplateFieldFieldMetaEmailResponse,
        FieldUpdateTemplateFieldFieldMetaDateResponse,
        FieldUpdateTemplateFieldFieldMetaDropdownResponse,
        FieldUpdateTemplateFieldFieldMetaCheckboxResponse,
        FieldUpdateTemplateFieldFieldMetaTextResponse,
        FieldUpdateTemplateFieldFieldMetaNumberResponse,
    ],
)


class FieldUpdateTemplateFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldUpdateTemplateFieldTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldUpdateTemplateFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldUpdateTemplateFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldUpdateTemplateFieldTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldUpdateTemplateFieldFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
