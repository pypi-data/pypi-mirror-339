"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RecipientUpdateDocumentRecipientRoleRequestBody(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateDocumentRecipientAccessAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientActionAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientRecipientTypedDict(TypedDict):
    id: float
    r"""The ID of the recipient to update."""
    email: NotRequired[str]
    name: NotRequired[str]
    role: NotRequired[RecipientUpdateDocumentRecipientRoleRequestBody]
    signing_order: NotRequired[float]
    access_auth: NotRequired[
        Nullable[RecipientUpdateDocumentRecipientAccessAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: NotRequired[
        Nullable[RecipientUpdateDocumentRecipientActionAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientRecipient(BaseModel):
    id: float
    r"""The ID of the recipient to update."""

    email: Optional[str] = None

    name: Optional[str] = None

    role: Optional[RecipientUpdateDocumentRecipientRoleRequestBody] = None

    signing_order: Annotated[Optional[float], pydantic.Field(alias="signingOrder")] = (
        None
    )

    access_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientAccessAuthRequestBody],
        pydantic.Field(alias="accessAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientActionAuthRequestBody],
        pydantic.Field(alias="actionAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "email",
            "name",
            "role",
            "signingOrder",
            "accessAuth",
            "actionAuth",
        ]
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientRequestTypedDict(TypedDict):
    document_id: float
    recipient: RecipientUpdateDocumentRecipientRecipientTypedDict


class RecipientUpdateDocumentRecipientRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    recipient: RecipientUpdateDocumentRecipientRecipient


class RecipientUpdateDocumentRecipientInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientInternalServerErrorIssue(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientUpdateDocumentRecipientInternalServerErrorIssue]] = (
        None
    )


class RecipientUpdateDocumentRecipientInternalServerError(Exception):
    r"""Internal server error"""

    data: RecipientUpdateDocumentRecipientInternalServerErrorData

    def __init__(self, data: RecipientUpdateDocumentRecipientInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateDocumentRecipientInternalServerErrorData
        )


class RecipientUpdateDocumentRecipientBadRequestIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientBadRequestIssue(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientUpdateDocumentRecipientBadRequestIssue]] = None


class RecipientUpdateDocumentRecipientBadRequestError(Exception):
    r"""Invalid input data"""

    data: RecipientUpdateDocumentRecipientBadRequestErrorData

    def __init__(self, data: RecipientUpdateDocumentRecipientBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateDocumentRecipientBadRequestErrorData
        )


class RecipientUpdateDocumentRecipientRoleResponse(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateDocumentRecipientReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientUpdateDocumentRecipientSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientUpdateDocumentRecipientSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientUpdateDocumentRecipientAccessAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientActionAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[RecipientUpdateDocumentRecipientAccessAuthResponse]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[RecipientUpdateDocumentRecipientActionAuthResponse]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientAccessAuthResponse],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientActionAuthResponse],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class RecipientUpdateDocumentRecipientTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class RecipientUpdateDocumentRecipientValue3TypedDict(TypedDict):
    value: str


class RecipientUpdateDocumentRecipientValue3(BaseModel):
    value: str


class RecipientUpdateDocumentRecipientFieldMetaDropdownTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientValue3TypedDict]]
    default_value: NotRequired[str]


class RecipientUpdateDocumentRecipientFieldMetaDropdown(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class RecipientUpdateDocumentRecipientTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class RecipientUpdateDocumentRecipientValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientValue2(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientFieldMetaCheckboxTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMetaCheckbox(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class RecipientUpdateDocumentRecipientTypeRadio(str, Enum):
    RADIO = "radio"


class RecipientUpdateDocumentRecipientValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientValue1(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientFieldMetaRadioTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientValue1TypedDict]]


class RecipientUpdateDocumentRecipientFieldMetaRadio(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientValue1]] = None


class RecipientUpdateDocumentRecipientTypeNumber(str, Enum):
    NUMBER = "number"


class RecipientUpdateDocumentRecipientTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaNumberTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign6]


class RecipientUpdateDocumentRecipientFieldMetaNumber(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign6],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientTypeText(str, Enum):
    TEXT = "text"


class RecipientUpdateDocumentRecipientTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaTextTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign5]


class RecipientUpdateDocumentRecipientFieldMetaText(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign5],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientTypeDate(str, Enum):
    DATE = "date"


class RecipientUpdateDocumentRecipientTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaDateTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign4]


class RecipientUpdateDocumentRecipientFieldMetaDate(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign4],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientTypeEmail(str, Enum):
    EMAIL = "email"


class RecipientUpdateDocumentRecipientTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaEmailTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign3]


class RecipientUpdateDocumentRecipientFieldMetaEmail(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign3],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientTypeName(str, Enum):
    NAME = "name"


class RecipientUpdateDocumentRecipientTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaNameTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign2]


class RecipientUpdateDocumentRecipientFieldMetaName(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign2],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientTypeInitials(str, Enum):
    INITIALS = "initials"


class RecipientUpdateDocumentRecipientTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientFieldMetaInitialsTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientTextAlign1]


class RecipientUpdateDocumentRecipientFieldMetaInitials(BaseModel):
    type: RecipientUpdateDocumentRecipientTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientTextAlign1],
        pydantic.Field(alias="textAlign"),
    ] = None


RecipientUpdateDocumentRecipientFieldMetaUnionTypedDict = TypeAliasType(
    "RecipientUpdateDocumentRecipientFieldMetaUnionTypedDict",
    Union[
        RecipientUpdateDocumentRecipientFieldMetaRadioTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaInitialsTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaNameTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaEmailTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaDateTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaDropdownTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaCheckboxTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaTextTypedDict,
        RecipientUpdateDocumentRecipientFieldMetaNumberTypedDict,
    ],
)


RecipientUpdateDocumentRecipientFieldMetaUnion = TypeAliasType(
    "RecipientUpdateDocumentRecipientFieldMetaUnion",
    Union[
        RecipientUpdateDocumentRecipientFieldMetaRadio,
        RecipientUpdateDocumentRecipientFieldMetaInitials,
        RecipientUpdateDocumentRecipientFieldMetaName,
        RecipientUpdateDocumentRecipientFieldMetaEmail,
        RecipientUpdateDocumentRecipientFieldMetaDate,
        RecipientUpdateDocumentRecipientFieldMetaDropdown,
        RecipientUpdateDocumentRecipientFieldMetaCheckbox,
        RecipientUpdateDocumentRecipientFieldMetaText,
        RecipientUpdateDocumentRecipientFieldMetaNumber,
    ],
)


class RecipientUpdateDocumentRecipientFieldTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[RecipientUpdateDocumentRecipientFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class RecipientUpdateDocumentRecipientField(BaseModel):
    type: RecipientUpdateDocumentRecipientType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[RecipientUpdateDocumentRecipientFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientResponseTypedDict(TypedDict):
    r"""Successful response"""

    role: RecipientUpdateDocumentRecipientRoleResponse
    read_status: RecipientUpdateDocumentRecipientReadStatus
    signing_status: RecipientUpdateDocumentRecipientSigningStatus
    send_status: RecipientUpdateDocumentRecipientSendStatus
    id: float
    document_id: Nullable[float]
    template_id: Nullable[float]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientUpdateDocumentRecipientAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]
    fields: List[RecipientUpdateDocumentRecipientFieldTypedDict]


class RecipientUpdateDocumentRecipientResponse(BaseModel):
    r"""Successful response"""

    role: RecipientUpdateDocumentRecipientRoleResponse

    read_status: Annotated[
        RecipientUpdateDocumentRecipientReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientUpdateDocumentRecipientSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientUpdateDocumentRecipientSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: float

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientUpdateDocumentRecipientAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    fields: List[RecipientUpdateDocumentRecipientField]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
