"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RecipientUpdateDocumentRecipientsRoleRequestBody(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateDocumentRecipientsAccessAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientsActionAuthRequestBody(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientsRecipientRequestBodyTypedDict(TypedDict):
    id: float
    r"""The ID of the recipient to update."""
    email: NotRequired[str]
    name: NotRequired[str]
    role: NotRequired[RecipientUpdateDocumentRecipientsRoleRequestBody]
    signing_order: NotRequired[float]
    access_auth: NotRequired[
        Nullable[RecipientUpdateDocumentRecipientsAccessAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: NotRequired[
        Nullable[RecipientUpdateDocumentRecipientsActionAuthRequestBody]
    ]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientsRecipientRequestBody(BaseModel):
    id: float
    r"""The ID of the recipient to update."""

    email: Optional[str] = None

    name: Optional[str] = None

    role: Optional[RecipientUpdateDocumentRecipientsRoleRequestBody] = None

    signing_order: Annotated[Optional[float], pydantic.Field(alias="signingOrder")] = (
        None
    )

    access_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientsAccessAuthRequestBody],
        pydantic.Field(alias="accessAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientsActionAuthRequestBody],
        pydantic.Field(alias="actionAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "email",
            "name",
            "role",
            "signingOrder",
            "accessAuth",
            "actionAuth",
        ]
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientsRequestTypedDict(TypedDict):
    document_id: float
    recipients: List[RecipientUpdateDocumentRecipientsRecipientRequestBodyTypedDict]


class RecipientUpdateDocumentRecipientsRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    recipients: List[RecipientUpdateDocumentRecipientsRecipientRequestBody]


class RecipientUpdateDocumentRecipientsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientsInternalServerErrorIssue(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[
        List[RecipientUpdateDocumentRecipientsInternalServerErrorIssue]
    ] = None


class RecipientUpdateDocumentRecipientsInternalServerError(Exception):
    r"""Internal server error"""

    data: RecipientUpdateDocumentRecipientsInternalServerErrorData

    def __init__(self, data: RecipientUpdateDocumentRecipientsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateDocumentRecipientsInternalServerErrorData
        )


class RecipientUpdateDocumentRecipientsBadRequestIssueTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientsBadRequestIssue(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientUpdateDocumentRecipientsBadRequestIssue]] = None


class RecipientUpdateDocumentRecipientsBadRequestError(Exception):
    r"""Invalid input data"""

    data: RecipientUpdateDocumentRecipientsBadRequestErrorData

    def __init__(self, data: RecipientUpdateDocumentRecipientsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, RecipientUpdateDocumentRecipientsBadRequestErrorData
        )


class RecipientUpdateDocumentRecipientsRoleResponse(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"
    ASSISTANT = "ASSISTANT"


class RecipientUpdateDocumentRecipientsReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientUpdateDocumentRecipientsSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientUpdateDocumentRecipientsSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientUpdateDocumentRecipientsAccessAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientsActionAuthResponse(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientsAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[RecipientUpdateDocumentRecipientsAccessAuthResponse]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[RecipientUpdateDocumentRecipientsActionAuthResponse]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientsAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientsAccessAuthResponse],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientsActionAuthResponse],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientsType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class RecipientUpdateDocumentRecipientsTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class RecipientUpdateDocumentRecipientsValue3TypedDict(TypedDict):
    value: str


class RecipientUpdateDocumentRecipientsValue3(BaseModel):
    value: str


class RecipientUpdateDocumentRecipientsFieldMetaDropdownTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientsValue3TypedDict]]
    default_value: NotRequired[str]


class RecipientUpdateDocumentRecipientsFieldMetaDropdown(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientsValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class RecipientUpdateDocumentRecipientsTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class RecipientUpdateDocumentRecipientsValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientsValue2(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientsFieldMetaCheckboxTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientsValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class RecipientUpdateDocumentRecipientsFieldMetaCheckbox(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientsValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class RecipientUpdateDocumentRecipientsTypeRadio(str, Enum):
    RADIO = "radio"


class RecipientUpdateDocumentRecipientsValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientsValue1(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientsFieldMetaRadioTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientsValue1TypedDict]]


class RecipientUpdateDocumentRecipientsFieldMetaRadio(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientsValue1]] = None


class RecipientUpdateDocumentRecipientsTypeNumber(str, Enum):
    NUMBER = "number"


class RecipientUpdateDocumentRecipientsTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaNumberTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign6]


class RecipientUpdateDocumentRecipientsFieldMetaNumber(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign6],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientsTypeText(str, Enum):
    TEXT = "text"


class RecipientUpdateDocumentRecipientsTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaTextTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign5]


class RecipientUpdateDocumentRecipientsFieldMetaText(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign5],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientsTypeDate(str, Enum):
    DATE = "date"


class RecipientUpdateDocumentRecipientsTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaDateTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign4]


class RecipientUpdateDocumentRecipientsFieldMetaDate(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign4],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientsTypeEmail(str, Enum):
    EMAIL = "email"


class RecipientUpdateDocumentRecipientsTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaEmailTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign3]


class RecipientUpdateDocumentRecipientsFieldMetaEmail(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign3],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientsTypeName(str, Enum):
    NAME = "name"


class RecipientUpdateDocumentRecipientsTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaNameTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign2]


class RecipientUpdateDocumentRecipientsFieldMetaName(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign2],
        pydantic.Field(alias="textAlign"),
    ] = None


class RecipientUpdateDocumentRecipientsTypeInitials(str, Enum):
    INITIALS = "initials"


class RecipientUpdateDocumentRecipientsTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class RecipientUpdateDocumentRecipientsFieldMetaInitialsTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[RecipientUpdateDocumentRecipientsTextAlign1]


class RecipientUpdateDocumentRecipientsFieldMetaInitials(BaseModel):
    type: RecipientUpdateDocumentRecipientsTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[RecipientUpdateDocumentRecipientsTextAlign1],
        pydantic.Field(alias="textAlign"),
    ] = None


RecipientUpdateDocumentRecipientsFieldMetaUnionTypedDict = TypeAliasType(
    "RecipientUpdateDocumentRecipientsFieldMetaUnionTypedDict",
    Union[
        RecipientUpdateDocumentRecipientsFieldMetaRadioTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaInitialsTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaNameTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaEmailTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaDateTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaDropdownTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaCheckboxTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaTextTypedDict,
        RecipientUpdateDocumentRecipientsFieldMetaNumberTypedDict,
    ],
)


RecipientUpdateDocumentRecipientsFieldMetaUnion = TypeAliasType(
    "RecipientUpdateDocumentRecipientsFieldMetaUnion",
    Union[
        RecipientUpdateDocumentRecipientsFieldMetaRadio,
        RecipientUpdateDocumentRecipientsFieldMetaInitials,
        RecipientUpdateDocumentRecipientsFieldMetaName,
        RecipientUpdateDocumentRecipientsFieldMetaEmail,
        RecipientUpdateDocumentRecipientsFieldMetaDate,
        RecipientUpdateDocumentRecipientsFieldMetaDropdown,
        RecipientUpdateDocumentRecipientsFieldMetaCheckbox,
        RecipientUpdateDocumentRecipientsFieldMetaText,
        RecipientUpdateDocumentRecipientsFieldMetaNumber,
    ],
)


class RecipientUpdateDocumentRecipientsFieldTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientsType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[RecipientUpdateDocumentRecipientsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class RecipientUpdateDocumentRecipientsField(BaseModel):
    type: RecipientUpdateDocumentRecipientsType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[RecipientUpdateDocumentRecipientsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientsRecipientResponseTypedDict(TypedDict):
    role: RecipientUpdateDocumentRecipientsRoleResponse
    read_status: RecipientUpdateDocumentRecipientsReadStatus
    signing_status: RecipientUpdateDocumentRecipientsSigningStatus
    send_status: RecipientUpdateDocumentRecipientsSendStatus
    id: float
    document_id: Nullable[float]
    template_id: Nullable[float]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientUpdateDocumentRecipientsAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]
    fields: List[RecipientUpdateDocumentRecipientsFieldTypedDict]


class RecipientUpdateDocumentRecipientsRecipientResponse(BaseModel):
    role: RecipientUpdateDocumentRecipientsRoleResponse

    read_status: Annotated[
        RecipientUpdateDocumentRecipientsReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientUpdateDocumentRecipientsSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientUpdateDocumentRecipientsSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: float

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientUpdateDocumentRecipientsAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    fields: List[RecipientUpdateDocumentRecipientsField]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientsResponseTypedDict(TypedDict):
    r"""Successful response"""

    recipients: List[RecipientUpdateDocumentRecipientsRecipientResponseTypedDict]


class RecipientUpdateDocumentRecipientsResponse(BaseModel):
    r"""Successful response"""

    recipients: List[RecipientUpdateDocumentRecipientsRecipientResponse]
