"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldUpdateTemplateFieldsTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldUpdateTemplateFieldsTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateTemplateFieldsValueDropdownTypedDict(TypedDict):
    value: str


class FieldUpdateTemplateFieldsValueDropdown(BaseModel):
    value: str


class FieldUpdateTemplateFieldsFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateTemplateFieldsFieldDropdownTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldsFieldMetaDropdownRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldDropdown(BaseModel):
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldUpdateTemplateFieldsTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateTemplateFieldsValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldsValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateTemplateFieldsFieldCheckboxTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldCheckbox(BaseModel):
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldUpdateTemplateFieldsTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldUpdateTemplateFieldsValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldsValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldsFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueRadioTypedDict]]


class FieldUpdateTemplateFieldsFieldMetaRadioRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueRadio]] = None


class FieldUpdateTemplateFieldsFieldRadioTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldsFieldMetaRadioRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldRadio(BaseModel):
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldUpdateTemplateFieldsTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldUpdateTemplateFieldsTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignNumber]


class FieldUpdateTemplateFieldsFieldMetaNumberRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldNumberTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldsFieldMetaNumberRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldNumber(BaseModel):
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldUpdateTemplateFieldsTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldUpdateTemplateFieldsTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignText]


class FieldUpdateTemplateFieldsFieldMetaTextRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldTextTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeTextRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldsFieldMetaTextRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldText(BaseModel):
    type: FieldUpdateTemplateFieldsTypeTextRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldUpdateTemplateFieldsTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldUpdateTemplateFieldsTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignDate]


class FieldUpdateTemplateFieldsFieldMetaDateRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldDateTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeDateRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldsFieldMetaDateRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldDate(BaseModel):
    type: FieldUpdateTemplateFieldsTypeDateRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldUpdateTemplateFieldsTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldUpdateTemplateFieldsTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignEmail]


class FieldUpdateTemplateFieldsFieldMetaEmailRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldEmailTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldsFieldMetaEmailRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldEmail(BaseModel):
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldUpdateTemplateFieldsTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldUpdateTemplateFieldsTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignName]


class FieldUpdateTemplateFieldsFieldMetaNameRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldNameTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeNameRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateTemplateFieldsFieldMetaNameRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldName(BaseModel):
    type: FieldUpdateTemplateFieldsTypeNameRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldUpdateTemplateFieldsTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldUpdateTemplateFieldsTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignInitials]


class FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody(BaseModel):
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldInitialsTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateTemplateFieldsFieldMetaInitialsRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldInitials(BaseModel):
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldUpdateTemplateFieldsFieldFreeSignatureTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeFreeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldFreeSignature(BaseModel):
    type: FieldUpdateTemplateFieldsTypeFreeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateTemplateFieldsTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldUpdateTemplateFieldsFieldSignatureTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateTemplateFieldsFieldSignature(BaseModel):
    type: FieldUpdateTemplateFieldsTypeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


FieldUpdateTemplateFieldsFieldUnionTypedDict = TypeAliasType(
    "FieldUpdateTemplateFieldsFieldUnionTypedDict",
    Union[
        FieldUpdateTemplateFieldsFieldSignatureTypedDict,
        FieldUpdateTemplateFieldsFieldFreeSignatureTypedDict,
        FieldUpdateTemplateFieldsFieldInitialsTypedDict,
        FieldUpdateTemplateFieldsFieldNameTypedDict,
        FieldUpdateTemplateFieldsFieldEmailTypedDict,
        FieldUpdateTemplateFieldsFieldDateTypedDict,
        FieldUpdateTemplateFieldsFieldTextTypedDict,
        FieldUpdateTemplateFieldsFieldNumberTypedDict,
        FieldUpdateTemplateFieldsFieldRadioTypedDict,
        FieldUpdateTemplateFieldsFieldCheckboxTypedDict,
        FieldUpdateTemplateFieldsFieldDropdownTypedDict,
    ],
)


FieldUpdateTemplateFieldsFieldUnion = TypeAliasType(
    "FieldUpdateTemplateFieldsFieldUnion",
    Union[
        FieldUpdateTemplateFieldsFieldSignature,
        FieldUpdateTemplateFieldsFieldFreeSignature,
        FieldUpdateTemplateFieldsFieldInitials,
        FieldUpdateTemplateFieldsFieldName,
        FieldUpdateTemplateFieldsFieldEmail,
        FieldUpdateTemplateFieldsFieldDate,
        FieldUpdateTemplateFieldsFieldText,
        FieldUpdateTemplateFieldsFieldNumber,
        FieldUpdateTemplateFieldsFieldRadio,
        FieldUpdateTemplateFieldsFieldCheckbox,
        FieldUpdateTemplateFieldsFieldDropdown,
    ],
)


class FieldUpdateTemplateFieldsRequestTypedDict(TypedDict):
    template_id: float
    fields: List[FieldUpdateTemplateFieldsFieldUnionTypedDict]


class FieldUpdateTemplateFieldsRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    fields: List[FieldUpdateTemplateFieldsFieldUnion]


class FieldUpdateTemplateFieldsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldUpdateTemplateFieldsInternalServerErrorIssue(BaseModel):
    message: str


class FieldUpdateTemplateFieldsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateTemplateFieldsInternalServerErrorIssue]] = None


class FieldUpdateTemplateFieldsInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldUpdateTemplateFieldsInternalServerErrorData

    def __init__(self, data: FieldUpdateTemplateFieldsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateTemplateFieldsInternalServerErrorData
        )


class FieldUpdateTemplateFieldsBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldUpdateTemplateFieldsBadRequestIssue(BaseModel):
    message: str


class FieldUpdateTemplateFieldsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateTemplateFieldsBadRequestIssue]] = None


class FieldUpdateTemplateFieldsBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldUpdateTemplateFieldsBadRequestErrorData

    def __init__(self, data: FieldUpdateTemplateFieldsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateTemplateFieldsBadRequestErrorData
        )


class FieldUpdateTemplateFieldsTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldUpdateTemplateFieldsFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateTemplateFieldsValueResponse3TypedDict(TypedDict):
    value: str


class FieldUpdateTemplateFieldsValueResponse3(BaseModel):
    value: str


class FieldUpdateTemplateFieldsFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldUpdateTemplateFieldsFieldMetaDropdownResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateTemplateFieldsFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateTemplateFieldsValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldsValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldsFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateTemplateFieldsFieldMetaCheckboxResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldUpdateTemplateFieldsValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateTemplateFieldsValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateTemplateFieldsFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateTemplateFieldsValueResponse1TypedDict]]


class FieldUpdateTemplateFieldsFieldMetaRadioResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateTemplateFieldsValueResponse1]] = None


class FieldUpdateTemplateFieldsFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldUpdateTemplateFieldsTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse6]


class FieldUpdateTemplateFieldsFieldMetaNumberResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldUpdateTemplateFieldsTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse5]


class FieldUpdateTemplateFieldsFieldMetaTextResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldUpdateTemplateFieldsTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse4]


class FieldUpdateTemplateFieldsFieldMetaDateResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldUpdateTemplateFieldsTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse3]


class FieldUpdateTemplateFieldsFieldMetaEmailResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldUpdateTemplateFieldsTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse2]


class FieldUpdateTemplateFieldsFieldMetaNameResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateTemplateFieldsFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldUpdateTemplateFieldsTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateTemplateFieldsFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateTemplateFieldsTextAlignResponse1]


class FieldUpdateTemplateFieldsFieldMetaInitialsResponse(BaseModel):
    type: FieldUpdateTemplateFieldsFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateTemplateFieldsTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldUpdateTemplateFieldsFieldMetaUnionTypedDict = TypeAliasType(
    "FieldUpdateTemplateFieldsFieldMetaUnionTypedDict",
    Union[
        FieldUpdateTemplateFieldsFieldMetaRadioResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaInitialsResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaNameResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaEmailResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaDateResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaDropdownResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaCheckboxResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaTextResponseTypedDict,
        FieldUpdateTemplateFieldsFieldMetaNumberResponseTypedDict,
    ],
)


FieldUpdateTemplateFieldsFieldMetaUnion = TypeAliasType(
    "FieldUpdateTemplateFieldsFieldMetaUnion",
    Union[
        FieldUpdateTemplateFieldsFieldMetaRadioResponse,
        FieldUpdateTemplateFieldsFieldMetaInitialsResponse,
        FieldUpdateTemplateFieldsFieldMetaNameResponse,
        FieldUpdateTemplateFieldsFieldMetaEmailResponse,
        FieldUpdateTemplateFieldsFieldMetaDateResponse,
        FieldUpdateTemplateFieldsFieldMetaDropdownResponse,
        FieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
        FieldUpdateTemplateFieldsFieldMetaTextResponse,
        FieldUpdateTemplateFieldsFieldMetaNumberResponse,
    ],
)


class FieldUpdateTemplateFieldsFieldResponseTypedDict(TypedDict):
    type: FieldUpdateTemplateFieldsTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldUpdateTemplateFieldsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldUpdateTemplateFieldsFieldResponse(BaseModel):
    type: FieldUpdateTemplateFieldsTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldUpdateTemplateFieldsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FieldUpdateTemplateFieldsResponseTypedDict(TypedDict):
    r"""Successful response"""

    fields: List[FieldUpdateTemplateFieldsFieldResponseTypedDict]


class FieldUpdateTemplateFieldsResponse(BaseModel):
    r"""Successful response"""

    fields: List[FieldUpdateTemplateFieldsFieldResponse]
