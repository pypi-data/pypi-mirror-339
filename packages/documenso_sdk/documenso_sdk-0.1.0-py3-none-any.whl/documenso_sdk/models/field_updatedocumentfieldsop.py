"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldUpdateDocumentFieldsTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldUpdateDocumentFieldsTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateDocumentFieldsValueDropdownTypedDict(TypedDict):
    value: str


class FieldUpdateDocumentFieldsValueDropdown(BaseModel):
    value: str


class FieldUpdateDocumentFieldsFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldUpdateDocumentFieldsFieldMetaDropdownRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateDocumentFieldsFieldDropdownTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeDropdownRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldsFieldMetaDropdownRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldDropdown(BaseModel):
    type: FieldUpdateDocumentFieldsTypeDropdownRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldUpdateDocumentFieldsTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateDocumentFieldsValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldsValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldsFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateDocumentFieldsFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateDocumentFieldsFieldCheckboxTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeCheckboxRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldsFieldMetaCheckboxRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldCheckbox(BaseModel):
    type: FieldUpdateDocumentFieldsTypeCheckboxRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldUpdateDocumentFieldsTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldUpdateDocumentFieldsValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldsValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldsFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueRadioTypedDict]]


class FieldUpdateDocumentFieldsFieldMetaRadioRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueRadio]] = None


class FieldUpdateDocumentFieldsFieldRadioTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeRadioRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldsFieldMetaRadioRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldRadio(BaseModel):
    type: FieldUpdateDocumentFieldsTypeRadioRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldUpdateDocumentFieldsTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldUpdateDocumentFieldsTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignNumber]


class FieldUpdateDocumentFieldsFieldMetaNumberRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldNumberTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeNumberRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldsFieldMetaNumberRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldNumber(BaseModel):
    type: FieldUpdateDocumentFieldsTypeNumberRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldUpdateDocumentFieldsTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldUpdateDocumentFieldsTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignText]


class FieldUpdateDocumentFieldsFieldMetaTextRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldTextTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeTextRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldsFieldMetaTextRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldText(BaseModel):
    type: FieldUpdateDocumentFieldsTypeTextRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldUpdateDocumentFieldsTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldUpdateDocumentFieldsTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignDate]


class FieldUpdateDocumentFieldsFieldMetaDateRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldDateTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeDateRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldsFieldMetaDateRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldDate(BaseModel):
    type: FieldUpdateDocumentFieldsTypeDateRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldUpdateDocumentFieldsTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldUpdateDocumentFieldsTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignEmail]


class FieldUpdateDocumentFieldsFieldMetaEmailRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldEmailTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeEmailRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldsFieldMetaEmailRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldEmail(BaseModel):
    type: FieldUpdateDocumentFieldsTypeEmailRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldUpdateDocumentFieldsTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldUpdateDocumentFieldsTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignName]


class FieldUpdateDocumentFieldsFieldMetaNameRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldNameTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeNameRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[FieldUpdateDocumentFieldsFieldMetaNameRequestBodyTypedDict]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldName(BaseModel):
    type: FieldUpdateDocumentFieldsTypeNameRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldUpdateDocumentFieldsTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldUpdateDocumentFieldsTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignInitials]


class FieldUpdateDocumentFieldsFieldMetaInitialsRequestBody(BaseModel):
    type: FieldUpdateDocumentFieldsTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldInitialsTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeInitialsRequestBody1
    id: float
    r"""The ID of the field to update."""
    field_meta: NotRequired[
        FieldUpdateDocumentFieldsFieldMetaInitialsRequestBodyTypedDict
    ]
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldInitials(BaseModel):
    type: FieldUpdateDocumentFieldsTypeInitialsRequestBody1

    id: float
    r"""The ID of the field to update."""

    field_meta: Annotated[
        Optional[FieldUpdateDocumentFieldsFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldUpdateDocumentFieldsFieldFreeSignatureTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeFreeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldFreeSignature(BaseModel):
    type: FieldUpdateDocumentFieldsTypeFreeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


class FieldUpdateDocumentFieldsTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldUpdateDocumentFieldsFieldSignatureTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeSignature
    id: float
    r"""The ID of the field to update."""
    page_number: NotRequired[float]
    r"""The page number the field will be on."""
    page_x: NotRequired[float]
    r"""The X coordinate of where the field will be placed."""
    page_y: NotRequired[float]
    r"""The Y coordinate of where the field will be placed."""
    width: NotRequired[float]
    r"""The width of the field."""
    height: NotRequired[float]
    r"""The height of the field."""


class FieldUpdateDocumentFieldsFieldSignature(BaseModel):
    type: FieldUpdateDocumentFieldsTypeSignature

    id: float
    r"""The ID of the field to update."""

    page_number: Annotated[Optional[float], pydantic.Field(alias="pageNumber")] = None
    r"""The page number the field will be on."""

    page_x: Annotated[Optional[float], pydantic.Field(alias="pageX")] = None
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[Optional[float], pydantic.Field(alias="pageY")] = None
    r"""The Y coordinate of where the field will be placed."""

    width: Optional[float] = None
    r"""The width of the field."""

    height: Optional[float] = None
    r"""The height of the field."""


FieldUpdateDocumentFieldsFieldUnionTypedDict = TypeAliasType(
    "FieldUpdateDocumentFieldsFieldUnionTypedDict",
    Union[
        FieldUpdateDocumentFieldsFieldSignatureTypedDict,
        FieldUpdateDocumentFieldsFieldFreeSignatureTypedDict,
        FieldUpdateDocumentFieldsFieldInitialsTypedDict,
        FieldUpdateDocumentFieldsFieldNameTypedDict,
        FieldUpdateDocumentFieldsFieldEmailTypedDict,
        FieldUpdateDocumentFieldsFieldDateTypedDict,
        FieldUpdateDocumentFieldsFieldTextTypedDict,
        FieldUpdateDocumentFieldsFieldNumberTypedDict,
        FieldUpdateDocumentFieldsFieldRadioTypedDict,
        FieldUpdateDocumentFieldsFieldCheckboxTypedDict,
        FieldUpdateDocumentFieldsFieldDropdownTypedDict,
    ],
)


FieldUpdateDocumentFieldsFieldUnion = TypeAliasType(
    "FieldUpdateDocumentFieldsFieldUnion",
    Union[
        FieldUpdateDocumentFieldsFieldSignature,
        FieldUpdateDocumentFieldsFieldFreeSignature,
        FieldUpdateDocumentFieldsFieldInitials,
        FieldUpdateDocumentFieldsFieldName,
        FieldUpdateDocumentFieldsFieldEmail,
        FieldUpdateDocumentFieldsFieldDate,
        FieldUpdateDocumentFieldsFieldText,
        FieldUpdateDocumentFieldsFieldNumber,
        FieldUpdateDocumentFieldsFieldRadio,
        FieldUpdateDocumentFieldsFieldCheckbox,
        FieldUpdateDocumentFieldsFieldDropdown,
    ],
)


class FieldUpdateDocumentFieldsRequestTypedDict(TypedDict):
    document_id: float
    fields: List[FieldUpdateDocumentFieldsFieldUnionTypedDict]


class FieldUpdateDocumentFieldsRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    fields: List[FieldUpdateDocumentFieldsFieldUnion]


class FieldUpdateDocumentFieldsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldUpdateDocumentFieldsInternalServerErrorIssue(BaseModel):
    message: str


class FieldUpdateDocumentFieldsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateDocumentFieldsInternalServerErrorIssue]] = None


class FieldUpdateDocumentFieldsInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldUpdateDocumentFieldsInternalServerErrorData

    def __init__(self, data: FieldUpdateDocumentFieldsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateDocumentFieldsInternalServerErrorData
        )


class FieldUpdateDocumentFieldsBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldUpdateDocumentFieldsBadRequestIssue(BaseModel):
    message: str


class FieldUpdateDocumentFieldsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldUpdateDocumentFieldsBadRequestIssue]] = None


class FieldUpdateDocumentFieldsBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldUpdateDocumentFieldsBadRequestErrorData

    def __init__(self, data: FieldUpdateDocumentFieldsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldUpdateDocumentFieldsBadRequestErrorData
        )


class FieldUpdateDocumentFieldsTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldUpdateDocumentFieldsFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldUpdateDocumentFieldsValueResponse3TypedDict(TypedDict):
    value: str


class FieldUpdateDocumentFieldsValueResponse3(BaseModel):
    value: str


class FieldUpdateDocumentFieldsFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldUpdateDocumentFieldsFieldMetaDropdownResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldUpdateDocumentFieldsFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldUpdateDocumentFieldsValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldsValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldsFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldUpdateDocumentFieldsFieldMetaCheckboxResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldUpdateDocumentFieldsValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldUpdateDocumentFieldsValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldUpdateDocumentFieldsFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldUpdateDocumentFieldsValueResponse1TypedDict]]


class FieldUpdateDocumentFieldsFieldMetaRadioResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldUpdateDocumentFieldsValueResponse1]] = None


class FieldUpdateDocumentFieldsFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldUpdateDocumentFieldsTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse6]


class FieldUpdateDocumentFieldsFieldMetaNumberResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldUpdateDocumentFieldsTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse5]


class FieldUpdateDocumentFieldsFieldMetaTextResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldUpdateDocumentFieldsTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse4]


class FieldUpdateDocumentFieldsFieldMetaDateResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldUpdateDocumentFieldsTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse3]


class FieldUpdateDocumentFieldsFieldMetaEmailResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldUpdateDocumentFieldsTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse2]


class FieldUpdateDocumentFieldsFieldMetaNameResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldUpdateDocumentFieldsFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldUpdateDocumentFieldsTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldUpdateDocumentFieldsFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldUpdateDocumentFieldsTextAlignResponse1]


class FieldUpdateDocumentFieldsFieldMetaInitialsResponse(BaseModel):
    type: FieldUpdateDocumentFieldsFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldUpdateDocumentFieldsTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldUpdateDocumentFieldsFieldMetaUnionTypedDict = TypeAliasType(
    "FieldUpdateDocumentFieldsFieldMetaUnionTypedDict",
    Union[
        FieldUpdateDocumentFieldsFieldMetaRadioResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaInitialsResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaNameResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaEmailResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaDateResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaDropdownResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaCheckboxResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaTextResponseTypedDict,
        FieldUpdateDocumentFieldsFieldMetaNumberResponseTypedDict,
    ],
)


FieldUpdateDocumentFieldsFieldMetaUnion = TypeAliasType(
    "FieldUpdateDocumentFieldsFieldMetaUnion",
    Union[
        FieldUpdateDocumentFieldsFieldMetaRadioResponse,
        FieldUpdateDocumentFieldsFieldMetaInitialsResponse,
        FieldUpdateDocumentFieldsFieldMetaNameResponse,
        FieldUpdateDocumentFieldsFieldMetaEmailResponse,
        FieldUpdateDocumentFieldsFieldMetaDateResponse,
        FieldUpdateDocumentFieldsFieldMetaDropdownResponse,
        FieldUpdateDocumentFieldsFieldMetaCheckboxResponse,
        FieldUpdateDocumentFieldsFieldMetaTextResponse,
        FieldUpdateDocumentFieldsFieldMetaNumberResponse,
    ],
)


class FieldUpdateDocumentFieldsFieldResponseTypedDict(TypedDict):
    type: FieldUpdateDocumentFieldsTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldUpdateDocumentFieldsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldUpdateDocumentFieldsFieldResponse(BaseModel):
    type: FieldUpdateDocumentFieldsTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldUpdateDocumentFieldsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FieldUpdateDocumentFieldsResponseTypedDict(TypedDict):
    r"""Successful response"""

    fields: List[FieldUpdateDocumentFieldsFieldResponseTypedDict]


class FieldUpdateDocumentFieldsResponse(BaseModel):
    r"""Successful response"""

    fields: List[FieldUpdateDocumentFieldsFieldResponse]
