"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldCreateDocumentFieldsTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldCreateDocumentFieldsTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateDocumentFieldsValueDropdownTypedDict(TypedDict):
    value: str


class FieldCreateDocumentFieldsValueDropdown(BaseModel):
    value: str


class FieldCreateDocumentFieldsFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldCreateDocumentFieldsFieldMetaDropdownRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateDocumentFieldsFieldDropdownTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeDropdownRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldsFieldMetaDropdownRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldsFieldDropdown(BaseModel):
    type: FieldCreateDocumentFieldsTypeDropdownRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldCreateDocumentFieldsTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateDocumentFieldsValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldsValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldsFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateDocumentFieldsFieldCheckboxTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeCheckboxRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldsFieldMetaCheckboxRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldsFieldCheckbox(BaseModel):
    type: FieldCreateDocumentFieldsTypeCheckboxRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldCreateDocumentFieldsTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldCreateDocumentFieldsValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldsValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldsFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueRadioTypedDict]]


class FieldCreateDocumentFieldsFieldMetaRadioRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueRadio]] = None


class FieldCreateDocumentFieldsFieldRadioTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeRadioRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldsFieldMetaRadioRequestBodyTypedDict]


class FieldCreateDocumentFieldsFieldRadio(BaseModel):
    type: FieldCreateDocumentFieldsTypeRadioRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldCreateDocumentFieldsTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldCreateDocumentFieldsTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignNumber]


class FieldCreateDocumentFieldsFieldMetaNumberRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldNumberTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeNumberRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldsFieldMetaNumberRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldsFieldNumber(BaseModel):
    type: FieldCreateDocumentFieldsTypeNumberRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldCreateDocumentFieldsTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldCreateDocumentFieldsTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignText]


class FieldCreateDocumentFieldsFieldMetaTextRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldTextTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeTextRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldsFieldMetaTextRequestBodyTypedDict]


class FieldCreateDocumentFieldsFieldText(BaseModel):
    type: FieldCreateDocumentFieldsTypeTextRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldCreateDocumentFieldsTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldCreateDocumentFieldsTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignDate]


class FieldCreateDocumentFieldsFieldMetaDateRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldDateTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeDateRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldsFieldMetaDateRequestBodyTypedDict]


class FieldCreateDocumentFieldsFieldDate(BaseModel):
    type: FieldCreateDocumentFieldsTypeDateRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldCreateDocumentFieldsTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldCreateDocumentFieldsTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignEmail]


class FieldCreateDocumentFieldsFieldMetaEmailRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldEmailTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeEmailRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldsFieldMetaEmailRequestBodyTypedDict]


class FieldCreateDocumentFieldsFieldEmail(BaseModel):
    type: FieldCreateDocumentFieldsTypeEmailRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldCreateDocumentFieldsTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldCreateDocumentFieldsTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignName]


class FieldCreateDocumentFieldsFieldMetaNameRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldNameTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeNameRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateDocumentFieldsFieldMetaNameRequestBodyTypedDict]


class FieldCreateDocumentFieldsFieldName(BaseModel):
    type: FieldCreateDocumentFieldsTypeNameRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldCreateDocumentFieldsTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldCreateDocumentFieldsTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignInitials]


class FieldCreateDocumentFieldsFieldMetaInitialsRequestBody(BaseModel):
    type: FieldCreateDocumentFieldsTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldInitialsTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeInitialsRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateDocumentFieldsFieldMetaInitialsRequestBodyTypedDict
    ]


class FieldCreateDocumentFieldsFieldInitials(BaseModel):
    type: FieldCreateDocumentFieldsTypeInitialsRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateDocumentFieldsFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateDocumentFieldsTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldCreateDocumentFieldsFieldFreeSignatureTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeFreeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldsFieldFreeSignature(BaseModel):
    type: FieldCreateDocumentFieldsTypeFreeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldsTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldCreateDocumentFieldsFieldSignatureTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateDocumentFieldsFieldSignature(BaseModel):
    type: FieldCreateDocumentFieldsTypeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


FieldCreateDocumentFieldsFieldUnionTypedDict = TypeAliasType(
    "FieldCreateDocumentFieldsFieldUnionTypedDict",
    Union[
        FieldCreateDocumentFieldsFieldSignatureTypedDict,
        FieldCreateDocumentFieldsFieldFreeSignatureTypedDict,
        FieldCreateDocumentFieldsFieldInitialsTypedDict,
        FieldCreateDocumentFieldsFieldNameTypedDict,
        FieldCreateDocumentFieldsFieldEmailTypedDict,
        FieldCreateDocumentFieldsFieldDateTypedDict,
        FieldCreateDocumentFieldsFieldTextTypedDict,
        FieldCreateDocumentFieldsFieldNumberTypedDict,
        FieldCreateDocumentFieldsFieldRadioTypedDict,
        FieldCreateDocumentFieldsFieldCheckboxTypedDict,
        FieldCreateDocumentFieldsFieldDropdownTypedDict,
    ],
)


FieldCreateDocumentFieldsFieldUnion = TypeAliasType(
    "FieldCreateDocumentFieldsFieldUnion",
    Union[
        FieldCreateDocumentFieldsFieldSignature,
        FieldCreateDocumentFieldsFieldFreeSignature,
        FieldCreateDocumentFieldsFieldInitials,
        FieldCreateDocumentFieldsFieldName,
        FieldCreateDocumentFieldsFieldEmail,
        FieldCreateDocumentFieldsFieldDate,
        FieldCreateDocumentFieldsFieldText,
        FieldCreateDocumentFieldsFieldNumber,
        FieldCreateDocumentFieldsFieldRadio,
        FieldCreateDocumentFieldsFieldCheckbox,
        FieldCreateDocumentFieldsFieldDropdown,
    ],
)


class FieldCreateDocumentFieldsRequestTypedDict(TypedDict):
    document_id: float
    fields: List[FieldCreateDocumentFieldsFieldUnionTypedDict]


class FieldCreateDocumentFieldsRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    fields: List[FieldCreateDocumentFieldsFieldUnion]


class FieldCreateDocumentFieldsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldCreateDocumentFieldsInternalServerErrorIssue(BaseModel):
    message: str


class FieldCreateDocumentFieldsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateDocumentFieldsInternalServerErrorIssue]] = None


class FieldCreateDocumentFieldsInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldCreateDocumentFieldsInternalServerErrorData

    def __init__(self, data: FieldCreateDocumentFieldsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateDocumentFieldsInternalServerErrorData
        )


class FieldCreateDocumentFieldsBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldCreateDocumentFieldsBadRequestIssue(BaseModel):
    message: str


class FieldCreateDocumentFieldsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateDocumentFieldsBadRequestIssue]] = None


class FieldCreateDocumentFieldsBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldCreateDocumentFieldsBadRequestErrorData

    def __init__(self, data: FieldCreateDocumentFieldsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateDocumentFieldsBadRequestErrorData
        )


class FieldCreateDocumentFieldsTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldCreateDocumentFieldsFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateDocumentFieldsValueResponse3TypedDict(TypedDict):
    value: str


class FieldCreateDocumentFieldsValueResponse3(BaseModel):
    value: str


class FieldCreateDocumentFieldsFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldCreateDocumentFieldsFieldMetaDropdownResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateDocumentFieldsFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateDocumentFieldsValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldsValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldsFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateDocumentFieldsFieldMetaCheckboxResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldCreateDocumentFieldsValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateDocumentFieldsValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateDocumentFieldsFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateDocumentFieldsValueResponse1TypedDict]]


class FieldCreateDocumentFieldsFieldMetaRadioResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateDocumentFieldsValueResponse1]] = None


class FieldCreateDocumentFieldsFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldCreateDocumentFieldsTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse6]


class FieldCreateDocumentFieldsFieldMetaNumberResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldCreateDocumentFieldsTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse5]


class FieldCreateDocumentFieldsFieldMetaTextResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldCreateDocumentFieldsTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse4]


class FieldCreateDocumentFieldsFieldMetaDateResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldCreateDocumentFieldsTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse3]


class FieldCreateDocumentFieldsFieldMetaEmailResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldCreateDocumentFieldsTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse2]


class FieldCreateDocumentFieldsFieldMetaNameResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateDocumentFieldsFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldCreateDocumentFieldsTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateDocumentFieldsFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateDocumentFieldsTextAlignResponse1]


class FieldCreateDocumentFieldsFieldMetaInitialsResponse(BaseModel):
    type: FieldCreateDocumentFieldsFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateDocumentFieldsTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldCreateDocumentFieldsFieldMetaUnionTypedDict = TypeAliasType(
    "FieldCreateDocumentFieldsFieldMetaUnionTypedDict",
    Union[
        FieldCreateDocumentFieldsFieldMetaRadioResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaInitialsResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaNameResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaEmailResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaDateResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaDropdownResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaCheckboxResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaTextResponseTypedDict,
        FieldCreateDocumentFieldsFieldMetaNumberResponseTypedDict,
    ],
)


FieldCreateDocumentFieldsFieldMetaUnion = TypeAliasType(
    "FieldCreateDocumentFieldsFieldMetaUnion",
    Union[
        FieldCreateDocumentFieldsFieldMetaRadioResponse,
        FieldCreateDocumentFieldsFieldMetaInitialsResponse,
        FieldCreateDocumentFieldsFieldMetaNameResponse,
        FieldCreateDocumentFieldsFieldMetaEmailResponse,
        FieldCreateDocumentFieldsFieldMetaDateResponse,
        FieldCreateDocumentFieldsFieldMetaDropdownResponse,
        FieldCreateDocumentFieldsFieldMetaCheckboxResponse,
        FieldCreateDocumentFieldsFieldMetaTextResponse,
        FieldCreateDocumentFieldsFieldMetaNumberResponse,
    ],
)


class FieldCreateDocumentFieldsFieldResponseTypedDict(TypedDict):
    type: FieldCreateDocumentFieldsTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldCreateDocumentFieldsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldCreateDocumentFieldsFieldResponse(BaseModel):
    type: FieldCreateDocumentFieldsTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldCreateDocumentFieldsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FieldCreateDocumentFieldsResponseTypedDict(TypedDict):
    r"""Successful response"""

    fields: List[FieldCreateDocumentFieldsFieldResponseTypedDict]


class FieldCreateDocumentFieldsResponse(BaseModel):
    r"""Successful response"""

    fields: List[FieldCreateDocumentFieldsFieldResponse]
