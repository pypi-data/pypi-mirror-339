"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldCreateTemplateFieldsTypeDropdownRequestBody1(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldsTypeDropdownRequestBody2(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldsValueDropdownTypedDict(TypedDict):
    value: str


class FieldCreateTemplateFieldsValueDropdown(BaseModel):
    value: str


class FieldCreateTemplateFieldsFieldMetaDropdownRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeDropdownRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueDropdownTypedDict]]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldsFieldMetaDropdownRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeDropdownRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueDropdown]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldsFieldDropdownTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeDropdownRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldMetaDropdownRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldsFieldDropdown(BaseModel):
    type: FieldCreateTemplateFieldsTypeDropdownRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaDropdownRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeCheckboxRequestBody1(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldCreateTemplateFieldsTypeCheckboxRequestBody2(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldsValueCheckboxTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsValueCheckbox(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMetaCheckboxRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeCheckboxRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueCheckboxTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldsFieldMetaCheckboxRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeCheckboxRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueCheckbox]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldsFieldCheckboxTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeCheckboxRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldMetaCheckboxRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldsFieldCheckbox(BaseModel):
    type: FieldCreateTemplateFieldsTypeCheckboxRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaCheckboxRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeRadioRequestBody1(str, Enum):
    RADIO = "RADIO"


class FieldCreateTemplateFieldsTypeRadioRequestBody2(str, Enum):
    RADIO = "radio"


class FieldCreateTemplateFieldsValueRadioTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsValueRadio(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMetaRadioRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeRadioRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueRadioTypedDict]]


class FieldCreateTemplateFieldsFieldMetaRadioRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeRadioRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueRadio]] = None


class FieldCreateTemplateFieldsFieldRadioTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeRadioRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldMetaRadioRequestBodyTypedDict]


class FieldCreateTemplateFieldsFieldRadio(BaseModel):
    type: FieldCreateTemplateFieldsTypeRadioRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaRadioRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeNumberRequestBody1(str, Enum):
    NUMBER = "NUMBER"


class FieldCreateTemplateFieldsTypeNumberRequestBody2(str, Enum):
    NUMBER = "number"


class FieldCreateTemplateFieldsTextAlignNumber(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaNumberRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeNumberRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignNumber]


class FieldCreateTemplateFieldsFieldMetaNumberRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeNumberRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignNumber],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldNumberTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeNumberRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldMetaNumberRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldsFieldNumber(BaseModel):
    type: FieldCreateTemplateFieldsTypeNumberRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaNumberRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeTextRequestBody1(str, Enum):
    TEXT = "TEXT"


class FieldCreateTemplateFieldsTypeTextRequestBody2(str, Enum):
    TEXT = "text"


class FieldCreateTemplateFieldsTextAlignText(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaTextRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeTextRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignText]


class FieldCreateTemplateFieldsFieldMetaTextRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeTextRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignText],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldTextTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeTextRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldMetaTextRequestBodyTypedDict]


class FieldCreateTemplateFieldsFieldText(BaseModel):
    type: FieldCreateTemplateFieldsTypeTextRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaTextRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeDateRequestBody1(str, Enum):
    DATE = "DATE"


class FieldCreateTemplateFieldsTypeDateRequestBody2(str, Enum):
    DATE = "date"


class FieldCreateTemplateFieldsTextAlignDate(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaDateRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeDateRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignDate]


class FieldCreateTemplateFieldsFieldMetaDateRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeDateRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignDate],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldDateTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeDateRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldMetaDateRequestBodyTypedDict]


class FieldCreateTemplateFieldsFieldDate(BaseModel):
    type: FieldCreateTemplateFieldsTypeDateRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaDateRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeEmailRequestBody1(str, Enum):
    EMAIL = "EMAIL"


class FieldCreateTemplateFieldsTypeEmailRequestBody2(str, Enum):
    EMAIL = "email"


class FieldCreateTemplateFieldsTextAlignEmail(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaEmailRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeEmailRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignEmail]


class FieldCreateTemplateFieldsFieldMetaEmailRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeEmailRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignEmail],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldEmailTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeEmailRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldMetaEmailRequestBodyTypedDict]


class FieldCreateTemplateFieldsFieldEmail(BaseModel):
    type: FieldCreateTemplateFieldsTypeEmailRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaEmailRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeNameRequestBody1(str, Enum):
    NAME = "NAME"


class FieldCreateTemplateFieldsTypeNameRequestBody2(str, Enum):
    NAME = "name"


class FieldCreateTemplateFieldsTextAlignName(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaNameRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeNameRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignName]


class FieldCreateTemplateFieldsFieldMetaNameRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeNameRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignName],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldNameTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeNameRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldMetaNameRequestBodyTypedDict]


class FieldCreateTemplateFieldsFieldName(BaseModel):
    type: FieldCreateTemplateFieldsTypeNameRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaNameRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeInitialsRequestBody1(str, Enum):
    INITIALS = "INITIALS"


class FieldCreateTemplateFieldsTypeInitialsRequestBody2(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldsTextAlignInitials(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaInitialsRequestBodyTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeInitialsRequestBody2
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignInitials]


class FieldCreateTemplateFieldsFieldMetaInitialsRequestBody(BaseModel):
    type: FieldCreateTemplateFieldsTypeInitialsRequestBody2

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignInitials],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldInitialsTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeInitialsRequestBody1
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldMetaInitialsRequestBodyTypedDict
    ]


class FieldCreateTemplateFieldsFieldInitials(BaseModel):
    type: FieldCreateTemplateFieldsTypeInitialsRequestBody1

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldMetaInitialsRequestBody],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsTypeFreeSignature(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldCreateTemplateFieldsFieldFreeSignatureTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeFreeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsFieldFreeSignature(BaseModel):
    type: FieldCreateTemplateFieldsTypeFreeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsTypeSignature(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldCreateTemplateFieldsFieldSignatureTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeSignature
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsFieldSignature(BaseModel):
    type: FieldCreateTemplateFieldsTypeSignature

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


FieldCreateTemplateFieldsFieldUnionTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldsFieldUnionTypedDict",
    Union[
        FieldCreateTemplateFieldsFieldSignatureTypedDict,
        FieldCreateTemplateFieldsFieldFreeSignatureTypedDict,
        FieldCreateTemplateFieldsFieldInitialsTypedDict,
        FieldCreateTemplateFieldsFieldNameTypedDict,
        FieldCreateTemplateFieldsFieldEmailTypedDict,
        FieldCreateTemplateFieldsFieldDateTypedDict,
        FieldCreateTemplateFieldsFieldTextTypedDict,
        FieldCreateTemplateFieldsFieldNumberTypedDict,
        FieldCreateTemplateFieldsFieldRadioTypedDict,
        FieldCreateTemplateFieldsFieldCheckboxTypedDict,
        FieldCreateTemplateFieldsFieldDropdownTypedDict,
    ],
)


FieldCreateTemplateFieldsFieldUnion = TypeAliasType(
    "FieldCreateTemplateFieldsFieldUnion",
    Union[
        FieldCreateTemplateFieldsFieldSignature,
        FieldCreateTemplateFieldsFieldFreeSignature,
        FieldCreateTemplateFieldsFieldInitials,
        FieldCreateTemplateFieldsFieldName,
        FieldCreateTemplateFieldsFieldEmail,
        FieldCreateTemplateFieldsFieldDate,
        FieldCreateTemplateFieldsFieldText,
        FieldCreateTemplateFieldsFieldNumber,
        FieldCreateTemplateFieldsFieldRadio,
        FieldCreateTemplateFieldsFieldCheckbox,
        FieldCreateTemplateFieldsFieldDropdown,
    ],
)


class FieldCreateTemplateFieldsRequestTypedDict(TypedDict):
    template_id: float
    fields: List[FieldCreateTemplateFieldsFieldUnionTypedDict]


class FieldCreateTemplateFieldsRequest(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    fields: List[FieldCreateTemplateFieldsFieldUnion]


class FieldCreateTemplateFieldsInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldsInternalServerErrorIssue(BaseModel):
    message: str


class FieldCreateTemplateFieldsInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldsInternalServerErrorIssue]] = None


class FieldCreateTemplateFieldsInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldCreateTemplateFieldsInternalServerErrorData

    def __init__(self, data: FieldCreateTemplateFieldsInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldsInternalServerErrorData
        )


class FieldCreateTemplateFieldsBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldsBadRequestIssue(BaseModel):
    message: str


class FieldCreateTemplateFieldsBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldsBadRequestIssue]] = None


class FieldCreateTemplateFieldsBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldCreateTemplateFieldsBadRequestErrorData

    def __init__(self, data: FieldCreateTemplateFieldsBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldsBadRequestErrorData
        )


class FieldCreateTemplateFieldsTypeResponse(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldsFieldMetaTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldsValueResponse3TypedDict(TypedDict):
    value: str


class FieldCreateTemplateFieldsValueResponse3(BaseModel):
    value: str


class FieldCreateTemplateFieldsFieldMetaDropdownResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueResponse3TypedDict]]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldsFieldMetaDropdownResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueResponse3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldsFieldMetaTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldsValueResponse2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsValueResponse2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMetaCheckboxResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueResponse2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldsFieldMetaCheckboxResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueResponse2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeRadio(str, Enum):
    RADIO = "radio"


class FieldCreateTemplateFieldsValueResponse1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsValueResponse1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMetaRadioResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsValueResponse1TypedDict]]


class FieldCreateTemplateFieldsFieldMetaRadioResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsValueResponse1]] = None


class FieldCreateTemplateFieldsFieldMetaTypeNumber(str, Enum):
    NUMBER = "number"


class FieldCreateTemplateFieldsTextAlignResponse6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaNumberResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse6]


class FieldCreateTemplateFieldsFieldMetaNumberResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse6],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeText(str, Enum):
    TEXT = "text"


class FieldCreateTemplateFieldsTextAlignResponse5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaTextResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse5]


class FieldCreateTemplateFieldsFieldMetaTextResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse5],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeDate(str, Enum):
    DATE = "date"


class FieldCreateTemplateFieldsTextAlignResponse4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaDateResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse4]


class FieldCreateTemplateFieldsFieldMetaDateResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse4],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeEmail(str, Enum):
    EMAIL = "email"


class FieldCreateTemplateFieldsTextAlignResponse3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaEmailResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse3]


class FieldCreateTemplateFieldsFieldMetaEmailResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse3],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeName(str, Enum):
    NAME = "name"


class FieldCreateTemplateFieldsTextAlignResponse2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaNameResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse2]


class FieldCreateTemplateFieldsFieldMetaNameResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse2],
        pydantic.Field(alias="textAlign"),
    ] = None


class FieldCreateTemplateFieldsFieldMetaTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldsTextAlignResponse1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldCreateTemplateFieldsFieldMetaInitialsResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldCreateTemplateFieldsTextAlignResponse1]


class FieldCreateTemplateFieldsFieldMetaInitialsResponse(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldCreateTemplateFieldsTextAlignResponse1],
        pydantic.Field(alias="textAlign"),
    ] = None


FieldCreateTemplateFieldsFieldMetaUnionTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldsFieldMetaUnionTypedDict",
    Union[
        FieldCreateTemplateFieldsFieldMetaRadioResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaInitialsResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaNameResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaEmailResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaDateResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaDropdownResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaCheckboxResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaTextResponseTypedDict,
        FieldCreateTemplateFieldsFieldMetaNumberResponseTypedDict,
    ],
)


FieldCreateTemplateFieldsFieldMetaUnion = TypeAliasType(
    "FieldCreateTemplateFieldsFieldMetaUnion",
    Union[
        FieldCreateTemplateFieldsFieldMetaRadioResponse,
        FieldCreateTemplateFieldsFieldMetaInitialsResponse,
        FieldCreateTemplateFieldsFieldMetaNameResponse,
        FieldCreateTemplateFieldsFieldMetaEmailResponse,
        FieldCreateTemplateFieldsFieldMetaDateResponse,
        FieldCreateTemplateFieldsFieldMetaDropdownResponse,
        FieldCreateTemplateFieldsFieldMetaCheckboxResponse,
        FieldCreateTemplateFieldsFieldMetaTextResponse,
        FieldCreateTemplateFieldsFieldMetaNumberResponse,
    ],
)


class FieldCreateTemplateFieldsFieldResponseTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsTypeResponse
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldCreateTemplateFieldsFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldCreateTemplateFieldsFieldResponse(BaseModel):
    type: FieldCreateTemplateFieldsTypeResponse

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldCreateTemplateFieldsFieldMetaUnion],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FieldCreateTemplateFieldsResponseTypedDict(TypedDict):
    r"""Successful response"""

    fields: List[FieldCreateTemplateFieldsFieldResponseTypedDict]


class FieldCreateTemplateFieldsResponse(BaseModel):
    r"""Successful response"""

    fields: List[FieldCreateTemplateFieldsFieldResponse]
