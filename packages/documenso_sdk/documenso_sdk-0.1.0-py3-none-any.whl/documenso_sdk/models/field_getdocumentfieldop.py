"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from documenso_sdk.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldGetDocumentFieldRequestTypedDict(TypedDict):
    field_id: float


class FieldGetDocumentFieldRequest(BaseModel):
    field_id: Annotated[
        float,
        pydantic.Field(alias="fieldId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class FieldGetDocumentFieldInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldInternalServerErrorIssue(BaseModel):
    message: str


class FieldGetDocumentFieldInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldInternalServerErrorIssue]] = None


class FieldGetDocumentFieldInternalServerError(Exception):
    r"""Internal server error"""

    data: FieldGetDocumentFieldInternalServerErrorData

    def __init__(self, data: FieldGetDocumentFieldInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldGetDocumentFieldInternalServerErrorData
        )


class FieldGetDocumentFieldNotFoundIssueTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldNotFoundIssue(BaseModel):
    message: str


class FieldGetDocumentFieldNotFoundErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldNotFoundIssue]] = None


class FieldGetDocumentFieldNotFoundError(Exception):
    r"""Not found"""

    data: FieldGetDocumentFieldNotFoundErrorData

    def __init__(self, data: FieldGetDocumentFieldNotFoundErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, FieldGetDocumentFieldNotFoundErrorData)


class FieldGetDocumentFieldBadRequestIssueTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldBadRequestIssue(BaseModel):
    message: str


class FieldGetDocumentFieldBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldBadRequestIssue]] = None


class FieldGetDocumentFieldBadRequestError(Exception):
    r"""Invalid input data"""

    data: FieldGetDocumentFieldBadRequestErrorData

    def __init__(self, data: FieldGetDocumentFieldBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, FieldGetDocumentFieldBadRequestErrorData)


class FieldGetDocumentFieldType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldGetDocumentFieldTypeDropdown(str, Enum):
    DROPDOWN = "dropdown"


class FieldGetDocumentFieldValue3TypedDict(TypedDict):
    value: str


class FieldGetDocumentFieldValue3(BaseModel):
    value: str


class FieldGetDocumentFieldFieldMetaDropdownTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeDropdown
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetDocumentFieldValue3TypedDict]]
    default_value: NotRequired[str]


class FieldGetDocumentFieldFieldMetaDropdown(BaseModel):
    type: FieldGetDocumentFieldTypeDropdown

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetDocumentFieldValue3]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldGetDocumentFieldTypeCheckbox(str, Enum):
    CHECKBOX = "checkbox"


class FieldGetDocumentFieldValue2TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldGetDocumentFieldValue2(BaseModel):
    id: float

    checked: bool

    value: str


class FieldGetDocumentFieldFieldMetaCheckboxTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeCheckbox
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetDocumentFieldValue2TypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldGetDocumentFieldFieldMetaCheckbox(BaseModel):
    type: FieldGetDocumentFieldTypeCheckbox

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetDocumentFieldValue2]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldGetDocumentFieldTypeRadio(str, Enum):
    RADIO = "radio"


class FieldGetDocumentFieldValue1TypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldGetDocumentFieldValue1(BaseModel):
    id: float

    checked: bool

    value: str


class FieldGetDocumentFieldFieldMetaRadioTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeRadio
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetDocumentFieldValue1TypedDict]]


class FieldGetDocumentFieldFieldMetaRadio(BaseModel):
    type: FieldGetDocumentFieldTypeRadio

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetDocumentFieldValue1]] = None


class FieldGetDocumentFieldTypeNumber(str, Enum):
    NUMBER = "number"


class FieldGetDocumentFieldTextAlign6(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaNumberTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeNumber
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign6]


class FieldGetDocumentFieldFieldMetaNumber(BaseModel):
    type: FieldGetDocumentFieldTypeNumber

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign6], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetDocumentFieldTypeText(str, Enum):
    TEXT = "text"


class FieldGetDocumentFieldTextAlign5(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaTextTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeText
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign5]


class FieldGetDocumentFieldFieldMetaText(BaseModel):
    type: FieldGetDocumentFieldTypeText

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign5], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetDocumentFieldTypeDate(str, Enum):
    DATE = "date"


class FieldGetDocumentFieldTextAlign4(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaDateTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeDate
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign4]


class FieldGetDocumentFieldFieldMetaDate(BaseModel):
    type: FieldGetDocumentFieldTypeDate

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign4], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetDocumentFieldTypeEmail(str, Enum):
    EMAIL = "email"


class FieldGetDocumentFieldTextAlign3(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaEmailTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeEmail
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign3]


class FieldGetDocumentFieldFieldMetaEmail(BaseModel):
    type: FieldGetDocumentFieldTypeEmail

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign3], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetDocumentFieldTypeName(str, Enum):
    NAME = "name"


class FieldGetDocumentFieldTextAlign2(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaNameTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeName
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign2]


class FieldGetDocumentFieldFieldMetaName(BaseModel):
    type: FieldGetDocumentFieldTypeName

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign2], pydantic.Field(alias="textAlign")
    ] = None


class FieldGetDocumentFieldTypeInitials(str, Enum):
    INITIALS = "initials"


class FieldGetDocumentFieldTextAlign1(str, Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class FieldGetDocumentFieldFieldMetaInitialsTypedDict(TypedDict):
    type: FieldGetDocumentFieldTypeInitials
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]
    text_align: NotRequired[FieldGetDocumentFieldTextAlign1]


class FieldGetDocumentFieldFieldMetaInitials(BaseModel):
    type: FieldGetDocumentFieldTypeInitials

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None

    text_align: Annotated[
        Optional[FieldGetDocumentFieldTextAlign1], pydantic.Field(alias="textAlign")
    ] = None


FieldGetDocumentFieldFieldMetaUnionTypedDict = TypeAliasType(
    "FieldGetDocumentFieldFieldMetaUnionTypedDict",
    Union[
        FieldGetDocumentFieldFieldMetaRadioTypedDict,
        FieldGetDocumentFieldFieldMetaInitialsTypedDict,
        FieldGetDocumentFieldFieldMetaNameTypedDict,
        FieldGetDocumentFieldFieldMetaEmailTypedDict,
        FieldGetDocumentFieldFieldMetaDateTypedDict,
        FieldGetDocumentFieldFieldMetaDropdownTypedDict,
        FieldGetDocumentFieldFieldMetaCheckboxTypedDict,
        FieldGetDocumentFieldFieldMetaTextTypedDict,
        FieldGetDocumentFieldFieldMetaNumberTypedDict,
    ],
)


FieldGetDocumentFieldFieldMetaUnion = TypeAliasType(
    "FieldGetDocumentFieldFieldMetaUnion",
    Union[
        FieldGetDocumentFieldFieldMetaRadio,
        FieldGetDocumentFieldFieldMetaInitials,
        FieldGetDocumentFieldFieldMetaName,
        FieldGetDocumentFieldFieldMetaEmail,
        FieldGetDocumentFieldFieldMetaDate,
        FieldGetDocumentFieldFieldMetaDropdown,
        FieldGetDocumentFieldFieldMetaCheckbox,
        FieldGetDocumentFieldFieldMetaText,
        FieldGetDocumentFieldFieldMetaNumber,
    ],
)


class FieldGetDocumentFieldResponseTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldGetDocumentFieldType
    id: float
    secondary_id: str
    document_id: Nullable[float]
    template_id: Nullable[float]
    recipient_id: float
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldGetDocumentFieldFieldMetaUnionTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldGetDocumentFieldResponse(BaseModel):
    r"""Successful response"""

    type: FieldGetDocumentFieldType

    id: float

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[float], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[float], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldGetDocumentFieldFieldMetaUnion], pydantic.Field(alias="fieldMeta")
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
