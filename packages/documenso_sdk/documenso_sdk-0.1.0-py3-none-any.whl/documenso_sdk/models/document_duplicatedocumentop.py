"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, TypedDict


class DocumentDuplicateDocumentRequestTypedDict(TypedDict):
    document_id: float


class DocumentDuplicateDocumentRequest(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]


class DocumentDuplicateDocumentInternalServerErrorIssueTypedDict(TypedDict):
    message: str


class DocumentDuplicateDocumentInternalServerErrorIssue(BaseModel):
    message: str


class DocumentDuplicateDocumentInternalServerErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[DocumentDuplicateDocumentInternalServerErrorIssue]] = None


class DocumentDuplicateDocumentInternalServerError(Exception):
    r"""Internal server error"""

    data: DocumentDuplicateDocumentInternalServerErrorData

    def __init__(self, data: DocumentDuplicateDocumentInternalServerErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, DocumentDuplicateDocumentInternalServerErrorData
        )


class DocumentDuplicateDocumentBadRequestIssueTypedDict(TypedDict):
    message: str


class DocumentDuplicateDocumentBadRequestIssue(BaseModel):
    message: str


class DocumentDuplicateDocumentBadRequestErrorData(BaseModel):
    message: str

    code: str

    issues: Optional[List[DocumentDuplicateDocumentBadRequestIssue]] = None


class DocumentDuplicateDocumentBadRequestError(Exception):
    r"""Invalid input data"""

    data: DocumentDuplicateDocumentBadRequestErrorData

    def __init__(self, data: DocumentDuplicateDocumentBadRequestErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, DocumentDuplicateDocumentBadRequestErrorData
        )


class DocumentDuplicateDocumentResponseTypedDict(TypedDict):
    r"""Successful response"""

    document_id: float


class DocumentDuplicateDocumentResponse(BaseModel):
    r"""Successful response"""

    document_id: Annotated[float, pydantic.Field(alias="documentId")]
