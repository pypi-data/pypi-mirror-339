# coding: utf-8


"""
IGNORE:
    Nutanix Objects Storage Management APIs

    Manage Petabytes of Unstructured and Machine-generated data using a software-defined Object Store Service  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_objects_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_objects_py_client.models.objects.v4.config.State import State  # noqa: F401,E501

class ObjectStore(ExternalizableAbstractModel):

    """

    :param metadata: (:attr:`metadata`) 
    :type metadata: 
    
    
    :param name: (:attr:`name`) The name of the Object store.
    :type name: required
     min=1 chars, max=50 chars
    
    :param creation_time: (:attr:`creation_time`) The time when the Object store was created.
    :type creation_time: 
    
    
    :param last_update_time: (:attr:`last_update_time`) The time when the Object store was last updated.
    :type last_update_time: 
    
    
    :param description: (:attr:`description`) A brief description of the Object store.
    :type description: 
     max=1000 chars
    
    :param deployment_version: (:attr:`deployment_version`) Object store deployment version.
    :type deployment_version: 
     min=1 chars, max=50 chars
    
    :param domain: (:attr:`domain`) The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'. 
    :type domain: 
     min=1 chars, max=1000 chars
    
    :param region: (:attr:`region`) The region in which the Object store is deployed.
    :type region: 
     min=1 chars, max=50 chars
    
    :param num_worker_nodes: (:attr:`num_worker_nodes`) The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.
    :type num_worker_nodes: 
    
     min=1, max=1000
    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the AHV or ESXi cluster.
    :type cluster_ext_id: 
    
    
    :param storage_network_reference: (:attr:`storage_network_reference`) Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
    :type storage_network_reference: 
     max=1000 chars
    
    :param storage_network_vip: (:attr:`storage_network_vip`) 
    :type storage_network_vip: 
    
    
    :param storage_network_dns_ip: (:attr:`storage_network_dns_ip`) 
    :type storage_network_dns_ip: 
    
    
    :param public_network_reference: (:attr:`public_network_reference`) Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.
    :type public_network_reference: 
     max=1000 chars
    
    :param public_network_ips: (:attr:`public_network_ips`) A list of static IP addresses used as public IPs to access the Object store.
    :type public_network_ips: 
    
    
    :param total_capacity_gi_b: (:attr:`total_capacity_gi_b`) Size of the Object store in GiB.
    :type total_capacity_gi_b: 
    
     min=1, max=178814713856
    :param state: (:attr:`state`) 
    :type state: 
    
    
    :param certificate_ext_ids: (:attr:`certificate_ext_ids`) A list of the UUIDs of the certificates of an Object store.
    :type certificate_ext_ids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'metadata': 'common.v1.config.Metadata',
        'name': 'str',
        'creation_time': 'datetime',
        'last_update_time': 'datetime',
        'description': 'str',
        'deployment_version': 'str',
        'domain': 'str',
        'region': 'str',
        'num_worker_nodes': 'int',
        'cluster_ext_id': 'str',
        'storage_network_reference': 'str',
        'storage_network_vip': 'common.v1.config.IPAddress',
        'storage_network_dns_ip': 'common.v1.config.IPAddress',
        'public_network_reference': 'str',
        'public_network_ips': 'list[common.v1.config.IPAddress]',
        'total_capacity_gi_b': 'int',
        'state': 'objects.v4.config.State',
        'certificate_ext_ids': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'metadata': 'metadata',
        'name': 'name',
        'creation_time': 'creationTime',
        'last_update_time': 'lastUpdateTime',
        'description': 'description',
        'deployment_version': 'deploymentVersion',
        'domain': 'domain',
        'region': 'region',
        'num_worker_nodes': 'numWorkerNodes',
        'cluster_ext_id': 'clusterExtId',
        'storage_network_reference': 'storageNetworkReference',
        'storage_network_vip': 'storageNetworkVip',
        'storage_network_dns_ip': 'storageNetworkDnsIp',
        'public_network_reference': 'publicNetworkReference',
        'public_network_ips': 'publicNetworkIps',
        'total_capacity_gi_b': 'totalCapacityGiB',
        'state': 'state',
        'certificate_ext_ids': 'certificateExtIds',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, metadata=None, name=None, creation_time=None, last_update_time=None, description=None, deployment_version=None, domain=None, region=None, num_worker_nodes=None, cluster_ext_id=None, storage_network_reference=None, storage_network_vip=None, storage_network_dns_ip=None, public_network_reference=None, public_network_ips=None, total_capacity_gi_b=None, state=None, certificate_ext_ids=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__metadata = None
        self.__name = None
        self.__creation_time = None
        self.__last_update_time = None
        self.__description = None
        self.__deployment_version = None
        self.__domain = None
        self.__region = None
        self.__num_worker_nodes = None
        self.__cluster_ext_id = None
        self.__storage_network_reference = None
        self.__storage_network_vip = None
        self.__storage_network_dns_ip = None
        self.__public_network_reference = None
        self.__public_network_ips = None
        self.__total_capacity_gi_b = None
        self.__state = None
        self.__certificate_ext_ids = None
        self.discriminator = None
        if metadata is not None:
            self.__metadata = metadata
        self.__name = name
        if creation_time is not None:
            self.__creation_time = creation_time
        if last_update_time is not None:
            self.__last_update_time = last_update_time
        if description is not None:
            self.__description = description
        if deployment_version is not None:
            self.__deployment_version = deployment_version
        if domain is not None:
            self.__domain = domain
        if region is not None:
            self.__region = region
        if num_worker_nodes is not None:
            self.__num_worker_nodes = num_worker_nodes
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if storage_network_reference is not None:
            self.__storage_network_reference = storage_network_reference
        if storage_network_vip is not None:
            self.__storage_network_vip = storage_network_vip
        if storage_network_dns_ip is not None:
            self.__storage_network_dns_ip = storage_network_dns_ip
        if public_network_reference is not None:
            self.__public_network_reference = public_network_reference
        if public_network_ips is not None:
            self.__public_network_ips = public_network_ips
        if total_capacity_gi_b is not None:
            self.__total_capacity_gi_b = total_capacity_gi_b
        if state is not None:
            self.__state = state
        if certificate_ext_ids is not None:
            self.__certificate_ext_ids = certificate_ext_ids

    def _initialize_object_type(self):
        return 'objects.v4.config.ObjectStore'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def metadata(self):
        """
        

        :type:
            :class:`~ntnx_objects_py_client.models.common.v1.config.Metadata`
        """  # noqa: E501
        return self.__metadata

    @metadata.setter
    def metadata(self, metadata):

        self.__metadata = metadata

    @property
    def name(self):
        """
        The name of the Object store.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$/`")  # noqa: E501

        self.__name = name

    @property
    def creation_time(self):
        """
        The time when the Object store was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def last_update_time(self):
        """
        The time when the Object store was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):

        self.__last_update_time = last_update_time

    @property
    def description(self):
        """
        A brief description of the Object store.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def deployment_version(self):
        """
        Object store deployment version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__deployment_version

    @deployment_version.setter
    def deployment_version(self, deployment_version):
        if deployment_version is not None and len(deployment_version) > 50:
            raise ValueError("Invalid value for `deployment_version`, length must be less than or equal to `50`")  # noqa: E501
        if deployment_version is not None and len(deployment_version) < 1:
            raise ValueError("Invalid value for `deployment_version`, length must be greater than or equal to `1`")  # noqa: E501
        if deployment_version is not None and not re.search('^[a-zA-z0-9][a-zA-z0-9\\.]*[a-zA-Z0-9]?$', deployment_version):  # noqa: E501
            raise ValueError(r"Invalid value for `deployment_version`, must be a follow pattern or equal to `/^[a-zA-z0-9][a-zA-z0-9\\.]*[a-zA-Z0-9]?$/`")  # noqa: E501

        self.__deployment_version = deployment_version

    @property
    def domain(self):
        """
        The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__domain

    @domain.setter
    def domain(self, domain):
        if domain is not None and len(domain) > 1000:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `1000`")  # noqa: E501
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")  # noqa: E501
        if domain is not None and not re.search('^(([a-zA-Z0-9_\\-]{1,63})\\.)+([a-zA-Z0-9_\\-]{1,63})$', domain):  # noqa: E501
            raise ValueError(r"Invalid value for `domain`, must be a follow pattern or equal to `/^(([a-zA-Z0-9_\\-]{1,63})\\.)+([a-zA-Z0-9_\\-]{1,63})$/`")  # noqa: E501

        self.__domain = domain

    @property
    def region(self):
        """
        The region in which the Object store is deployed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__region

    @region.setter
    def region(self, region):
        if region is not None and len(region) > 50:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `50`")  # noqa: E501
        if region is not None and len(region) < 1:
            raise ValueError("Invalid value for `region`, length must be greater than or equal to `1`")  # noqa: E501
        if region is not None and not re.search('^[a-z]+\\-[a-z]+\\-[0-9]$', region):  # noqa: E501
            raise ValueError(r"Invalid value for `region`, must be a follow pattern or equal to `/^[a-z]+\\-[a-z]+\\-[0-9]$/`")  # noqa: E501

        self.__region = region

    @property
    def num_worker_nodes(self):
        """
        The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_worker_nodes

    @num_worker_nodes.setter
    def num_worker_nodes(self, num_worker_nodes):
        if num_worker_nodes is not None and num_worker_nodes > 1000:  # noqa: E501
            raise ValueError("Invalid value for `num_worker_nodes`, must be a value less than or equal to `1000`")  # noqa: E501
        if num_worker_nodes is not None and num_worker_nodes < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_worker_nodes`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_worker_nodes = num_worker_nodes

    @property
    def cluster_ext_id(self):
        """
        UUID of the AHV or ESXi cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def storage_network_reference(self):
        """
        Reference to the Storage Network of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__storage_network_reference

    @storage_network_reference.setter
    def storage_network_reference(self, storage_network_reference):
        if storage_network_reference is not None and len(storage_network_reference) > 1000:
            raise ValueError("Invalid value for `storage_network_reference`, length must be less than or equal to `1000`")  # noqa: E501

        self.__storage_network_reference = storage_network_reference

    @property
    def storage_network_vip(self):
        """
        

        :type:
            :class:`~ntnx_objects_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__storage_network_vip

    @storage_network_vip.setter
    def storage_network_vip(self, storage_network_vip):

        self.__storage_network_vip = storage_network_vip

    @property
    def storage_network_dns_ip(self):
        """
        

        :type:
            :class:`~ntnx_objects_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__storage_network_dns_ip

    @storage_network_dns_ip.setter
    def storage_network_dns_ip(self, storage_network_dns_ip):

        self.__storage_network_dns_ip = storage_network_dns_ip

    @property
    def public_network_reference(self):
        """
        Public network reference of the Object store. This is the subnet UUID for an AHV cluster or the IPAM name for an ESXi cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__public_network_reference

    @public_network_reference.setter
    def public_network_reference(self, public_network_reference):
        if public_network_reference is not None and len(public_network_reference) > 1000:
            raise ValueError("Invalid value for `public_network_reference`, length must be less than or equal to `1000`")  # noqa: E501

        self.__public_network_reference = public_network_reference

    @property
    def public_network_ips(self):
        """
        A list of static IP addresses used as public IPs to access the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__public_network_ips

    @public_network_ips.setter
    def public_network_ips(self, public_network_ips):

        self.__public_network_ips = public_network_ips

    @property
    def total_capacity_gi_b(self):
        """
        Size of the Object store in GiB.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__total_capacity_gi_b

    @total_capacity_gi_b.setter
    def total_capacity_gi_b(self, total_capacity_gi_b):
        if total_capacity_gi_b is not None and total_capacity_gi_b > 178814713856:  # noqa: E501
            raise ValueError("Invalid value for `total_capacity_gi_b`, must be a value less than or equal to `178814713856`")  # noqa: E501
        if total_capacity_gi_b is not None and total_capacity_gi_b < 1:  # noqa: E501
            raise ValueError("Invalid value for `total_capacity_gi_b`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__total_capacity_gi_b = total_capacity_gi_b

    @property
    def state(self):
        """
        

        :type:
            :class:`~ntnx_objects_py_client.models.objects.v4.config.State`
        """  # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    @property
    def certificate_ext_ids(self):
        """
        A list of the UUIDs of the certificates of an Object store.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__certificate_ext_ids

    @certificate_ext_ids.setter
    def certificate_ext_ids(self, certificate_ext_ids):

        self.__certificate_ext_ids = certificate_ext_ids

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ObjectStore, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

