# coding: utf-8


"""
IGNORE:
    Nutanix Objects Storage Management APIs

    Manage Petabytes of Unstructured and Machine-generated data using a software-defined Object Store Service  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_objects_py_client.models.common.v1.config.FQDN import FQDN  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class Certificate(ExternalizableAbstractModel):

    """

    :param metadata: (:attr:`metadata`) 
    :type metadata: 
    
    
    :param public_cert: (:attr:`public_cert`) The public certificate to upload.
    :type public_cert: 
     min=1 chars, max=2000000 chars
    
    :param private_key: (:attr:`private_key`) The private key to upload.
    :type private_key: 
     min=1 chars, max=2000000 chars
    
    :param ca: (:attr:`ca`) The CA certificate or chain to upload.
    :type ca: 
     min=1 chars, max=2000000 chars
    
    :param alternate_fqdns: (:attr:`alternate_fqdns`) The list of alternate FQDNs for accessing the Object store. The FQDNs must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens or underscores but must begin and end with a letter. Each part can be up to 63 characters long. For e.g 'objects-0.pc_nutanix.com'. 
    :type alternate_fqdns: 
    
    
    :param should_generate: (:attr:`should_generate`) If true, the certificate is generated with the provided alternate FQDNs and IPs. (**Default** False)
    :type should_generate: 
    
    
    :param alternate_ips: (:attr:`alternate_ips`) A list of the IPs included as Subject Alternative Names (SANs) in the certificate. The IPs must be among the public IPs of the Object store (publicNetworkIps).
    :type alternate_ips: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'metadata': 'common.v1.config.Metadata',
        'public_cert': 'str',
        'private_key': 'str',
        'ca': 'str',
        'alternate_fqdns': 'list[common.v1.config.FQDN]',
        'should_generate': 'bool',
        'alternate_ips': 'list[common.v1.config.IPAddress]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'metadata': 'metadata',
        'public_cert': 'publicCert',
        'private_key': 'privateKey',
        'ca': 'ca',
        'alternate_fqdns': 'alternateFqdns',
        'should_generate': 'shouldGenerate',
        'alternate_ips': 'alternateIps',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, metadata=None, public_cert=None, private_key=None, ca=None, alternate_fqdns=None, should_generate=False, alternate_ips=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__metadata = None
        self.__public_cert = None
        self.__private_key = None
        self.__ca = None
        self.__alternate_fqdns = None
        self.__should_generate = None
        self.__alternate_ips = None
        self.discriminator = None
        if metadata is not None:
            self.__metadata = metadata
        if public_cert is not None:
            self.__public_cert = public_cert
        if private_key is not None:
            self.__private_key = private_key
        if ca is not None:
            self.__ca = ca
        if alternate_fqdns is not None:
            self.__alternate_fqdns = alternate_fqdns
        if should_generate is not None:
            self.__should_generate = should_generate
        if alternate_ips is not None:
            self.__alternate_ips = alternate_ips

    def _initialize_object_type(self):
        return 'objects.v4.config.Certificate'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def metadata(self):
        """
        

        :type:
            :class:`~ntnx_objects_py_client.models.common.v1.config.Metadata`
        """  # noqa: E501
        return self.__metadata

    @metadata.setter
    def metadata(self, metadata):

        self.__metadata = metadata

    @property
    def public_cert(self):
        """
        The public certificate to upload.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__public_cert

    @public_cert.setter
    def public_cert(self, public_cert):
        if public_cert is not None and len(public_cert) > 2000000:
            raise ValueError("Invalid value for `public_cert`, length must be less than or equal to `2000000`")  # noqa: E501
        if public_cert is not None and len(public_cert) < 1:
            raise ValueError("Invalid value for `public_cert`, length must be greater than or equal to `1`")  # noqa: E501

        self.__public_cert = public_cert

    @property
    def private_key(self):
        """
        The private key to upload.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__private_key

    @private_key.setter
    def private_key(self, private_key):
        if private_key is not None and len(private_key) > 2000000:
            raise ValueError("Invalid value for `private_key`, length must be less than or equal to `2000000`")  # noqa: E501
        if private_key is not None and len(private_key) < 1:
            raise ValueError("Invalid value for `private_key`, length must be greater than or equal to `1`")  # noqa: E501

        self.__private_key = private_key

    @property
    def ca(self):
        """
        The CA certificate or chain to upload.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ca

    @ca.setter
    def ca(self, ca):
        if ca is not None and len(ca) > 2000000:
            raise ValueError("Invalid value for `ca`, length must be less than or equal to `2000000`")  # noqa: E501
        if ca is not None and len(ca) < 1:
            raise ValueError("Invalid value for `ca`, length must be greater than or equal to `1`")  # noqa: E501

        self.__ca = ca

    @property
    def alternate_fqdns(self):
        """
        The list of alternate FQDNs for accessing the Object store. The FQDNs must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens or underscores but must begin and end with a letter. Each part can be up to 63 characters long. For e.g 'objects-0.pc_nutanix.com'. 

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.config.FQDN` ]
        """  # noqa: E501
        return self.__alternate_fqdns

    @alternate_fqdns.setter
    def alternate_fqdns(self, alternate_fqdns):

        self.__alternate_fqdns = alternate_fqdns

    @property
    def should_generate(self):
        """
        If true, the certificate is generated with the provided alternate FQDNs and IPs.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_generate

    @should_generate.setter
    def should_generate(self, should_generate):

        self.__should_generate = should_generate

    @property
    def alternate_ips(self):
        """
        A list of the IPs included as Subject Alternative Names (SANs) in the certificate. The IPs must be among the public IPs of the Object store (publicNetworkIps).

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__alternate_ips

    @alternate_ips.setter
    def alternate_ips(self, alternate_ips):

        self.__alternate_ips = alternate_ips

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Certificate, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

