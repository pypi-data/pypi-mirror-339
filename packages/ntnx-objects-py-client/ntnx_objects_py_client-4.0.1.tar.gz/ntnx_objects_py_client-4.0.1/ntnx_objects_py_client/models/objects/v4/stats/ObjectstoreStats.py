# coding: utf-8


"""
IGNORE:
    Nutanix Objects Storage Management APIs

    Manage Petabytes of Unstructured and Machine-generated data using a software-defined Object Store Service  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_objects_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_objects_py_client.models.common.v1.stats.TimeIntValuePair import TimeIntValuePair  # noqa: F401,E501
from ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair import TimeFloatValuePair  # noqa: F401,E501

class ObjectstoreStats(ExternalizableAbstractModel):

    """

    :param object_count: (:attr:`object_count`) Number of Objects in the Object store. This stat is updated every 10 minutes. It includes the count of the incomplete multipart uploads. 
    :type object_count: 
    
    
    :param bucket_count: (:attr:`bucket_count`) Number of Buckets in the Object store. This stat is updated every 10 minutes. 
    :type bucket_count: 
    
    
    :param storage_usage_bytes: (:attr:`storage_usage_bytes`) Total storage in bytes used by the Objects and Buckets. This stat is updated every 10 minutes. It includes the storage used by the incomplete multipart uploads. 
    :type storage_usage_bytes: 
    
    
    :param inbound_bytes_per_second: (:attr:`inbound_bytes_per_second`) Number of bytes written per second to the Object store from operations on the Objects and Buckets.
    :type inbound_bytes_per_second: 
    
    
    :param outbound_bytes_per_second: (:attr:`outbound_bytes_per_second`) Number of bytes read per second from the Object store from operations on the Objects and Buckets.
    :type outbound_bytes_per_second: 
    
    
    :param get_request_throughput_bytes_per_second: (:attr:`get_request_throughput_bytes_per_second`) Throughput of HTTP GET requests in bytes per second.
    :type get_request_throughput_bytes_per_second: 
    
    
    :param put_request_throughput_bytes_per_second: (:attr:`put_request_throughput_bytes_per_second`) Throughput of HTTP PUT requests in bytes per second.
    :type put_request_throughput_bytes_per_second: 
    
    
    :param post_requests_per_second: (:attr:`post_requests_per_second`) Number of HTTP POST requests per second on the Objects and Buckets of the Object store.
    :type post_requests_per_second: 
    
    
    :param head_requests_per_second: (:attr:`head_requests_per_second`) Number of HTTP HEAD requests per second on the Objects and Buckets of the Object store.
    :type head_requests_per_second: 
    
    
    :param get_requests_per_second: (:attr:`get_requests_per_second`) Number of HTTP GET requests per second on the Objects and Buckets of the Object store.
    :type get_requests_per_second: 
    
    
    :param put_requests_per_second: (:attr:`put_requests_per_second`) Number of HTTP PUT requests per second on the Objects and Buckets of the Object store.
    :type put_requests_per_second: 
    
    
    :param delete_requests_per_second: (:attr:`delete_requests_per_second`) Number of HTTP DELETE requests per second on the Objects and Buckets of the Object store.
    :type delete_requests_per_second: 
    
    
    :param object_operations_per_second: (:attr:`object_operations_per_second`) Number of operations per second on the objects of the Object store.
    :type object_operations_per_second: 
    
    
    :param get_object_ttfb_msecs: (:attr:`get_object_ttfb_msecs`) Time to the first byte in milliseconds for Get Object requests.
    :type get_object_ttfb_msecs: 
    
    
    :param get_bucket_operations_per_second: (:attr:`get_bucket_operations_per_second`) Number of GetBucket operations per second.
    :type get_bucket_operations_per_second: 
    
    
    :param list_multipart_uploads_operations_per_second: (:attr:`list_multipart_uploads_operations_per_second`) The number of ListMultipartUploads operations per second.
    :type list_multipart_uploads_operations_per_second: 
    
    
    :param multipart_upload_start_operations_per_second: (:attr:`multipart_upload_start_operations_per_second`) The number of CreateMultipartUpload operations per second.
    :type multipart_upload_start_operations_per_second: 
    
    
    :param select_object_content_operations_per_second: (:attr:`select_object_content_operations_per_second`) The number of SelectObjectContent operations per second.
    :type select_object_content_operations_per_second: 
    
    
    :param nfs_read_requests_per_second: (:attr:`nfs_read_requests_per_second`) Number of Network File System (NFS) read requests per second on the objects of the Object store.
    :type nfs_read_requests_per_second: 
    
    
    :param nfs_write_requests_per_second: (:attr:`nfs_write_requests_per_second`) Number of Network File System (NFS) write requests per second on the objects of the Object store.
    :type nfs_write_requests_per_second: 
    
    
    :param nfs_read_throughput_bytes_per_second: (:attr:`nfs_read_throughput_bytes_per_second`) Throughput of Network File System (NFS) read operations in bytes per second on the objects of the Object store.
    :type nfs_read_throughput_bytes_per_second: 
    
    
    :param nfs_write_throughput_bytes_per_second: (:attr:`nfs_write_throughput_bytes_per_second`) Throughput of Network File System (NFS) write operations in bytes per second on the objects of the Object store.
    :type nfs_write_throughput_bytes_per_second: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'object_count': 'list[common.v1.stats.TimeIntValuePair]',
        'bucket_count': 'list[common.v1.stats.TimeIntValuePair]',
        'storage_usage_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'inbound_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'outbound_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'get_request_throughput_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'put_request_throughput_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'post_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'head_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'get_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'put_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'delete_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'object_operations_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'get_object_ttfb_msecs': 'list[objects.v4.stats.TimeFloatValuePair]',
        'get_bucket_operations_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'list_multipart_uploads_operations_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'multipart_upload_start_operations_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'select_object_content_operations_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'nfs_read_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'nfs_write_requests_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'nfs_read_throughput_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'nfs_write_throughput_bytes_per_second': 'list[objects.v4.stats.TimeFloatValuePair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'object_count': 'objectCount',
        'bucket_count': 'bucketCount',
        'storage_usage_bytes': 'storageUsageBytes',
        'inbound_bytes_per_second': 'inboundBytesPerSecond',
        'outbound_bytes_per_second': 'outboundBytesPerSecond',
        'get_request_throughput_bytes_per_second': 'getRequestThroughputBytesPerSecond',
        'put_request_throughput_bytes_per_second': 'putRequestThroughputBytesPerSecond',
        'post_requests_per_second': 'postRequestsPerSecond',
        'head_requests_per_second': 'headRequestsPerSecond',
        'get_requests_per_second': 'getRequestsPerSecond',
        'put_requests_per_second': 'putRequestsPerSecond',
        'delete_requests_per_second': 'deleteRequestsPerSecond',
        'object_operations_per_second': 'objectOperationsPerSecond',
        'get_object_ttfb_msecs': 'getObjectTtfbMsecs',
        'get_bucket_operations_per_second': 'getBucketOperationsPerSecond',
        'list_multipart_uploads_operations_per_second': 'listMultipartUploadsOperationsPerSecond',
        'multipart_upload_start_operations_per_second': 'multipartUploadStartOperationsPerSecond',
        'select_object_content_operations_per_second': 'selectObjectContentOperationsPerSecond',
        'nfs_read_requests_per_second': 'nfsReadRequestsPerSecond',
        'nfs_write_requests_per_second': 'nfsWriteRequestsPerSecond',
        'nfs_read_throughput_bytes_per_second': 'nfsReadThroughputBytesPerSecond',
        'nfs_write_throughput_bytes_per_second': 'nfsWriteThroughputBytesPerSecond',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, object_count=None, bucket_count=None, storage_usage_bytes=None, inbound_bytes_per_second=None, outbound_bytes_per_second=None, get_request_throughput_bytes_per_second=None, put_request_throughput_bytes_per_second=None, post_requests_per_second=None, head_requests_per_second=None, get_requests_per_second=None, put_requests_per_second=None, delete_requests_per_second=None, object_operations_per_second=None, get_object_ttfb_msecs=None, get_bucket_operations_per_second=None, list_multipart_uploads_operations_per_second=None, multipart_upload_start_operations_per_second=None, select_object_content_operations_per_second=None, nfs_read_requests_per_second=None, nfs_write_requests_per_second=None, nfs_read_throughput_bytes_per_second=None, nfs_write_throughput_bytes_per_second=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__object_count = None
        self.__bucket_count = None
        self.__storage_usage_bytes = None
        self.__inbound_bytes_per_second = None
        self.__outbound_bytes_per_second = None
        self.__get_request_throughput_bytes_per_second = None
        self.__put_request_throughput_bytes_per_second = None
        self.__post_requests_per_second = None
        self.__head_requests_per_second = None
        self.__get_requests_per_second = None
        self.__put_requests_per_second = None
        self.__delete_requests_per_second = None
        self.__object_operations_per_second = None
        self.__get_object_ttfb_msecs = None
        self.__get_bucket_operations_per_second = None
        self.__list_multipart_uploads_operations_per_second = None
        self.__multipart_upload_start_operations_per_second = None
        self.__select_object_content_operations_per_second = None
        self.__nfs_read_requests_per_second = None
        self.__nfs_write_requests_per_second = None
        self.__nfs_read_throughput_bytes_per_second = None
        self.__nfs_write_throughput_bytes_per_second = None
        self.discriminator = None
        if object_count is not None:
            self.__object_count = object_count
        if bucket_count is not None:
            self.__bucket_count = bucket_count
        if storage_usage_bytes is not None:
            self.__storage_usage_bytes = storage_usage_bytes
        if inbound_bytes_per_second is not None:
            self.__inbound_bytes_per_second = inbound_bytes_per_second
        if outbound_bytes_per_second is not None:
            self.__outbound_bytes_per_second = outbound_bytes_per_second
        if get_request_throughput_bytes_per_second is not None:
            self.__get_request_throughput_bytes_per_second = get_request_throughput_bytes_per_second
        if put_request_throughput_bytes_per_second is not None:
            self.__put_request_throughput_bytes_per_second = put_request_throughput_bytes_per_second
        if post_requests_per_second is not None:
            self.__post_requests_per_second = post_requests_per_second
        if head_requests_per_second is not None:
            self.__head_requests_per_second = head_requests_per_second
        if get_requests_per_second is not None:
            self.__get_requests_per_second = get_requests_per_second
        if put_requests_per_second is not None:
            self.__put_requests_per_second = put_requests_per_second
        if delete_requests_per_second is not None:
            self.__delete_requests_per_second = delete_requests_per_second
        if object_operations_per_second is not None:
            self.__object_operations_per_second = object_operations_per_second
        if get_object_ttfb_msecs is not None:
            self.__get_object_ttfb_msecs = get_object_ttfb_msecs
        if get_bucket_operations_per_second is not None:
            self.__get_bucket_operations_per_second = get_bucket_operations_per_second
        if list_multipart_uploads_operations_per_second is not None:
            self.__list_multipart_uploads_operations_per_second = list_multipart_uploads_operations_per_second
        if multipart_upload_start_operations_per_second is not None:
            self.__multipart_upload_start_operations_per_second = multipart_upload_start_operations_per_second
        if select_object_content_operations_per_second is not None:
            self.__select_object_content_operations_per_second = select_object_content_operations_per_second
        if nfs_read_requests_per_second is not None:
            self.__nfs_read_requests_per_second = nfs_read_requests_per_second
        if nfs_write_requests_per_second is not None:
            self.__nfs_write_requests_per_second = nfs_write_requests_per_second
        if nfs_read_throughput_bytes_per_second is not None:
            self.__nfs_read_throughput_bytes_per_second = nfs_read_throughput_bytes_per_second
        if nfs_write_throughput_bytes_per_second is not None:
            self.__nfs_write_throughput_bytes_per_second = nfs_write_throughput_bytes_per_second

    def _initialize_object_type(self):
        return 'objects.v4.stats.ObjectstoreStats'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def object_count(self):
        """
        Number of Objects in the Object store. This stat is updated every 10 minutes. It includes the count of the incomplete multipart uploads. 

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__object_count

    @object_count.setter
    def object_count(self, object_count):

        self.__object_count = object_count

    @property
    def bucket_count(self):
        """
        Number of Buckets in the Object store. This stat is updated every 10 minutes. 

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__bucket_count

    @bucket_count.setter
    def bucket_count(self, bucket_count):

        self.__bucket_count = bucket_count

    @property
    def storage_usage_bytes(self):
        """
        Total storage in bytes used by the Objects and Buckets. This stat is updated every 10 minutes. It includes the storage used by the incomplete multipart uploads. 

        :type:
             list[ :class:`~ntnx_objects_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__storage_usage_bytes

    @storage_usage_bytes.setter
    def storage_usage_bytes(self, storage_usage_bytes):

        self.__storage_usage_bytes = storage_usage_bytes

    @property
    def inbound_bytes_per_second(self):
        """
        Number of bytes written per second to the Object store from operations on the Objects and Buckets.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__inbound_bytes_per_second

    @inbound_bytes_per_second.setter
    def inbound_bytes_per_second(self, inbound_bytes_per_second):

        self.__inbound_bytes_per_second = inbound_bytes_per_second

    @property
    def outbound_bytes_per_second(self):
        """
        Number of bytes read per second from the Object store from operations on the Objects and Buckets.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__outbound_bytes_per_second

    @outbound_bytes_per_second.setter
    def outbound_bytes_per_second(self, outbound_bytes_per_second):

        self.__outbound_bytes_per_second = outbound_bytes_per_second

    @property
    def get_request_throughput_bytes_per_second(self):
        """
        Throughput of HTTP GET requests in bytes per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__get_request_throughput_bytes_per_second

    @get_request_throughput_bytes_per_second.setter
    def get_request_throughput_bytes_per_second(self, get_request_throughput_bytes_per_second):

        self.__get_request_throughput_bytes_per_second = get_request_throughput_bytes_per_second

    @property
    def put_request_throughput_bytes_per_second(self):
        """
        Throughput of HTTP PUT requests in bytes per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__put_request_throughput_bytes_per_second

    @put_request_throughput_bytes_per_second.setter
    def put_request_throughput_bytes_per_second(self, put_request_throughput_bytes_per_second):

        self.__put_request_throughput_bytes_per_second = put_request_throughput_bytes_per_second

    @property
    def post_requests_per_second(self):
        """
        Number of HTTP POST requests per second on the Objects and Buckets of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__post_requests_per_second

    @post_requests_per_second.setter
    def post_requests_per_second(self, post_requests_per_second):

        self.__post_requests_per_second = post_requests_per_second

    @property
    def head_requests_per_second(self):
        """
        Number of HTTP HEAD requests per second on the Objects and Buckets of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__head_requests_per_second

    @head_requests_per_second.setter
    def head_requests_per_second(self, head_requests_per_second):

        self.__head_requests_per_second = head_requests_per_second

    @property
    def get_requests_per_second(self):
        """
        Number of HTTP GET requests per second on the Objects and Buckets of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__get_requests_per_second

    @get_requests_per_second.setter
    def get_requests_per_second(self, get_requests_per_second):

        self.__get_requests_per_second = get_requests_per_second

    @property
    def put_requests_per_second(self):
        """
        Number of HTTP PUT requests per second on the Objects and Buckets of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__put_requests_per_second

    @put_requests_per_second.setter
    def put_requests_per_second(self, put_requests_per_second):

        self.__put_requests_per_second = put_requests_per_second

    @property
    def delete_requests_per_second(self):
        """
        Number of HTTP DELETE requests per second on the Objects and Buckets of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__delete_requests_per_second

    @delete_requests_per_second.setter
    def delete_requests_per_second(self, delete_requests_per_second):

        self.__delete_requests_per_second = delete_requests_per_second

    @property
    def object_operations_per_second(self):
        """
        Number of operations per second on the objects of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__object_operations_per_second

    @object_operations_per_second.setter
    def object_operations_per_second(self, object_operations_per_second):

        self.__object_operations_per_second = object_operations_per_second

    @property
    def get_object_ttfb_msecs(self):
        """
        Time to the first byte in milliseconds for Get Object requests.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__get_object_ttfb_msecs

    @get_object_ttfb_msecs.setter
    def get_object_ttfb_msecs(self, get_object_ttfb_msecs):

        self.__get_object_ttfb_msecs = get_object_ttfb_msecs

    @property
    def get_bucket_operations_per_second(self):
        """
        Number of GetBucket operations per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__get_bucket_operations_per_second

    @get_bucket_operations_per_second.setter
    def get_bucket_operations_per_second(self, get_bucket_operations_per_second):

        self.__get_bucket_operations_per_second = get_bucket_operations_per_second

    @property
    def list_multipart_uploads_operations_per_second(self):
        """
        The number of ListMultipartUploads operations per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__list_multipart_uploads_operations_per_second

    @list_multipart_uploads_operations_per_second.setter
    def list_multipart_uploads_operations_per_second(self, list_multipart_uploads_operations_per_second):

        self.__list_multipart_uploads_operations_per_second = list_multipart_uploads_operations_per_second

    @property
    def multipart_upload_start_operations_per_second(self):
        """
        The number of CreateMultipartUpload operations per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__multipart_upload_start_operations_per_second

    @multipart_upload_start_operations_per_second.setter
    def multipart_upload_start_operations_per_second(self, multipart_upload_start_operations_per_second):

        self.__multipart_upload_start_operations_per_second = multipart_upload_start_operations_per_second

    @property
    def select_object_content_operations_per_second(self):
        """
        The number of SelectObjectContent operations per second.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__select_object_content_operations_per_second

    @select_object_content_operations_per_second.setter
    def select_object_content_operations_per_second(self, select_object_content_operations_per_second):

        self.__select_object_content_operations_per_second = select_object_content_operations_per_second

    @property
    def nfs_read_requests_per_second(self):
        """
        Number of Network File System (NFS) read requests per second on the objects of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__nfs_read_requests_per_second

    @nfs_read_requests_per_second.setter
    def nfs_read_requests_per_second(self, nfs_read_requests_per_second):

        self.__nfs_read_requests_per_second = nfs_read_requests_per_second

    @property
    def nfs_write_requests_per_second(self):
        """
        Number of Network File System (NFS) write requests per second on the objects of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__nfs_write_requests_per_second

    @nfs_write_requests_per_second.setter
    def nfs_write_requests_per_second(self, nfs_write_requests_per_second):

        self.__nfs_write_requests_per_second = nfs_write_requests_per_second

    @property
    def nfs_read_throughput_bytes_per_second(self):
        """
        Throughput of Network File System (NFS) read operations in bytes per second on the objects of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__nfs_read_throughput_bytes_per_second

    @nfs_read_throughput_bytes_per_second.setter
    def nfs_read_throughput_bytes_per_second(self, nfs_read_throughput_bytes_per_second):

        self.__nfs_read_throughput_bytes_per_second = nfs_read_throughput_bytes_per_second

    @property
    def nfs_write_throughput_bytes_per_second(self):
        """
        Throughput of Network File System (NFS) write operations in bytes per second on the objects of the Object store.

        :type:
             list[ :class:`~ntnx_objects_py_client.models.objects.v4.stats.TimeFloatValuePair` ]
        """  # noqa: E501
        return self.__nfs_write_throughput_bytes_per_second

    @nfs_write_throughput_bytes_per_second.setter
    def nfs_write_throughput_bytes_per_second(self, nfs_write_throughput_bytes_per_second):

        self.__nfs_write_throughput_bytes_per_second = nfs_write_throughput_bytes_per_second

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ObjectstoreStats, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectstoreStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

